// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL_SIMD
#define _LIBCPP_EXPERIMENTAL_SIMD

#define __cpp_lib_experimental_parallel_simd 201803
#include <iostream>
#include <assert.h>
#include <cmath>
#include <iomanip>
/*
    experimental/simd synopsis

namespace std::experimental {

inline namespace parallelism_v2 {

namespace simd_abi {

struct scalar {};
template <int N> struct fixed_size {};
template <typename T> inline constexpr int max_fixed_size = implementation-defined;
template <typename T> using compatible = implementation-defined;
template <typename T> using native = implementation-defined;

template <class T, size_t N, class... Abis> struct deduce { using type = see below; };
template <class T, size_t N, class... Abis> using deduce_t =
  typename deduce<T, N>::type;

} // simd_abi

struct element_aligned_tag {};
struct vector_aligned_tag {};
template <size_t> struct overaligned_tag {};
inline constexpr element_aligned_tag element_aligned{};
inline constexpr vector_aligned_tag vector_aligned{};
template <size_t N> inline constexpr overaligned_tag<N> overaligned{};

// 9.4, simd type traits
template <class T> struct is_abi_tag;
template <class T> inline constexpr bool is_abi_tag_v = is_abi_tag<T>::value;

template <class T> struct is_simd;
template <class T> inline constexpr bool is_simd_v = is_simd<T>::value;

template <class T> struct is_simd_mask;
template <class T> inline constexpr bool is_simd_mask_v = is_simd_mask<T>::value;

template <class T> struct is_simd_flag_type;
template <class T> inline constexpr bool is_simd_flag_type_v =
  is_simd_flag_type<T>::value;

template <class T, class Abi = simd_abi::compatible<T>> struct simd_size;
template <class T, class Abi = simd_abi::compatible<T>>
  inline constexpr size_t simd_size_v = simd_size<T, Abi>::value;

template <class T, class U = typename T::value_type> struct memory_alignment;
template <class T, class U = typename T::value_type>
  inline constexpr size_t memory_alignment_v = memory_alignment<T, U>::value;

template<class T, class V> struct rebind_simd { using type = see below; };
template<class T, class V> using rebind_simd_t = typename rebind_simd<T, V>::type;
template<int N, class V> struct resize_simd { using type = see below; };
template<int N, class V> using resize_simd_t = typename resize_simd<N, V>::type;

// 9.6, Class template simd
template <class T, class Abi = simd_abi::compatible<T>> class simd;
template <class T> using native_simd = simd<T, simd_abi::native<T>>;
template <class T, int N> using fixed_size_simd = simd<T, simd_abi::fixed_size<N>>;

// 9.8, Class template simd_mask
template <class T, class Abi = simd_abi::compatible<T>> class simd_mask;
template <class T> using native_simd_mask = simd_mask<T, simd_abi::native<T>>;
template <class T, int N> using fixed_size_simd_mask =
  simd_mask<T, simd_abi::fixed_size<N>>;

// 9.7.5, Casts
template <class T, class U, class Abi> see below simd_cast(const simd<U, Abi>&) noexcept;
template <class T, class U, class Abi> see below static_simd_cast(const simd<U, Abi>&) noexcept;

template <class T, class Abi>
  fixed_size_simd<T, simd_size_v<T, Abi>>
    to_fixed_size(const simd<T, Abi>&) noexcept;
template <class T, class Abi>
  fixed_size_simd_mask<T, simd_size_v<T, Abi>>
    to_fixed_size(const simd_mask<T, Abi>&) noexcept;
template <class T, size_t N>
  native_simd<T> to_native(const fixed_size_simd<T, N>&) noexcept;
template <class T, size_t N>
  native_simd_mask<T> to_native(const fixed_size_simd_mask<T, N>> &) noexcept;
template <class T, size_t N>
  simd<T> to_compatible(const fixed_size_simd<T, N>&) noexcept;
template <class T, size_t N>
  simd_mask<T> to_compatible(const fixed_size_simd_mask<T, N>&) noexcept;

template <size_t... Sizes, class T, class Abi>
  tuple<simd<T, simd_abi::deduce_t<T, Sizes>>...>
    split(const simd<T, Abi>&);
template <size_t... Sizes, class T, class Abi>
  tuple<simd_mask<T, simd_mask_abi::deduce_t<T, Sizes>>...>
    split(const simd_mask<T, Abi>&);
template <class V, class Abi>
  array<V, simd_size_v<typename V::value_type, Abi> / V::size()>
    split(const simd<typename V::value_type, Abi>&) noexcept;
template <class V, class Abi>
  array<V, simd_size_v<typename V::value_type, Abi> / V::size()>
    split(const simd_mask<typename V::simd_type::value_type, Abi>&) noexcept;

template<size_t N, class T, class A>
  array<resize_simd<simd_size_v<T, A> / N, simd<T, A>>, N>
    split_by(const simd<T, A>& x) noexcept;
template<size_t N, class T, class A>
  array<resize_simd<simd_size_v<T, A> / N, simd_mask<T, A>>, N>
    split_by(const simd_mask<T, A>& x) noexcept;

template<class T, class... Abis>
  simd<T, simd_abi::deduce_t<T, (simd_size_v<T, Abis> + ...)>>
    concat(const simd<T, Abis>&...) noexcept;
template<class T, class... Abis>
  simd_mask<T, simd_abi::deduce_t<T, (simd_size_v<T, Abis> + ...)>>
    concat(const simd_mask<T, Abis>&...) noexcept;

template<class T, class Abi, size_t N>
  resize_simd<simd_size_v<T, Abi> * N, simd<T, Abi>>
    concat(const array<simd<T, Abi>, N>& arr) noexcept;
template<class T, class Abi, size_t N>
  resize_simd<simd_size_v<T, Abi> * N, simd_mask<T, Abi>>
    concat(const array<simd_mask<T, Abi>, N>& arr) noexcept;

// 9.9.4, reductions
template <class T, class Abi> bool all_of(const simd_mask<T, Abi>&) noexcept;
template <class T, class Abi> bool any_of(const simd_mask<T, Abi>&) noexcept;
template <class T, class Abi> bool none_of(const simd_mask<T, Abi>&) noexcept;
template <class T, class Abi> bool some_of(const simd_mask<T, Abi>&) noexcept;
template <class T, class Abi> int popcount(const simd_mask<T, Abi>&) noexcept;
template <class T, class Abi> int find_first_set(const simd_mask<T, Abi>&);
template <class T, class Abi> int find_last_set(const simd_mask<T, Abi>&);

bool all_of(T) noexcept;
bool any_of(T) noexcept;
bool none_of(T) noexcept;
bool some_of(T) noexcept;
int popcount(T) noexcept;
int find_first_set(T);
int find_last_set(T);

// 9.5, Where expression class templates
template <class M, class T> class const_where_expression;
template <class M, class T> class where_expression;

// 9.9.5, Where functions
template <class T, class Abi>
  where_expression<simd_mask<T, Abi>, simd<T, Abi>>
    where(const typename simd<T, Abi>::mask_type&, simd<T, Abi>&) noexcept;

template <class T, class Abi>
  const_where_expression<simd_mask<T, Abi>, const simd<T, Abi>>
    where(const typename simd<T, Abi>::mask_type&, const simd<T, Abi>&) noexcept;

template <class T, class Abi>
  where_expression<simd_mask<T, Abi>, simd_mask<T, Abi>>
    where(const type_identity_t<simd_mask<T, Abi>>&, simd_mask<T, Abi>&) noexcept;

template <class T, class Abi>
  const_where_expression<simd_mask<T, Abi>, const simd_mask<T, Abi>>
    where(const type_identity_t<simd_mask<T, Abi>>&, const simd_mask<T, Abi>&) noexcept;

template <class T>
  where_expression<bool, T>
    where(see below k, T& d) noexcept;

template <class T>
  const_where_expression<bool, T>
    where(see below k, const T& d) noexcept;

// 9.7.4, Reductions
template <class T, class Abi, class BinaryOperation = plus<>>
  T reduce(const simd<T, Abi>&,
           BinaryOperation = {});
template <class M, class V, class BinaryOperation>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                typename V::value_type neutral_element,
                                BinaryOperation binary_op);
template <class M, class V>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                plus<> binary_op = {}) noexcept;
template <class M, class V>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                multiplies<> binary_op) noexcept;
template <class M, class V>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                bit_and<> binary_op) noexcept;
template <class M, class V>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                bit_or<> binary_op) noexcept;
template <class M, class V>
  typename V::value_type reduce(const const_where_expression<M, V>& x,
                                bit_xor<> binary_op) noexcept;

template <class T, class Abi>
  T hmin(const simd<T, Abi>&) noexcept;
template <class M, class V>
  typename V::value_type hmin(const const_where_expression<M, V>&) noexcept;
template <class T, class Abi>
  T hmax(const simd<T, Abi>&) noexcept;
template <class M, class V>
  typename V::value_type hmax(const const_where_expression<M, V>&) noexcept;

// 9.7.6, Algorithms
template <class T, class Abi>
  simd<T, Abi>
    min(const simd<T, Abi>& a, const simd<T, Abi>& b) noexcept;
template <class T, class Abi>
  simd<T, Abi>
    max(const simd<T, Abi>& a, const simd<T, Abi>& b) noexcept;
template <class T, class Abi>
  pair<simd<T, Abi>, simd<T, Abi>>
    minmax(const simd<T, Abi>& a, const simd<T, Abi>& b) noexcept;
template <class T, class Abi>
  simd<T, Abi>
    clamp(const simd<T, Abi>& v,
          const simd<T, Abi>& lo,
          const simd<T, Abi>& hi);

// 9.5, Where expression class templates [simd.whereexpr]
template <class M, class T> class const_where_expression {
  const M mask; // exposition only
  T& data;      // exposition only
public:
  const_where_expression(const const_where_expression&) = delete;
  const_where_expression& operator=(const const_where_expression&) = delete;

  T operator-() const && noexcept;
  T operator+() const && noexcept;
  T operator~() const && noexcept;

  template <class U, class Flags> void copy_to(U* mem, Flags f) const &&;
};

template <class M, class T>
class where_expression : public const_where_expression<M, T> {
public:
  template <class U> void operator=(U&& x) noexcept;
  template <class U> void operator+=(U&& x) noexcept;
  template <class U> void operator-=(U&& x) noexcept;
  template <class U> void operator*=(U&& x) noexcept;
  template <class U> void operator/=(U&& x) noexcept;
  template <class U> void operator%=(U&& x) noexcept;
  template <class U> void operator&=(U&& x) noexcept;
  template <class U> void operator|=(U&& x) noexcept;
  template <class U> void operator^=(U&& x) noexcept;
  template <class U> void operator<<=(U&& x) noexcept;
  template <class U> void operator>>=(U&& x) noexcept;

  void operator++() && noexcept;
  void operator++(int) && noexcept;
  void operator--() && noexcept;
  void operator--(int) && noexcept;

  template <class U, class Flags> void copy_from(const U* mem, Flags) &&;
};

// 9.6.1, Class template simd overview [simd.class.overview]
template <class T, class Abi> class simd {
public:
  using value_type = T;
  using reference = see below;
  using mask_type = simd_mask<T, Abi>;
  using abi_type = Abi;

  static constexpr size_t size() noexcept;

  simd() noexcept = default;

  // 9.6.4, simd constructors
  template <class U> simd(U&& value) noexcept;
  template <class U> simd(const simd<U, simd_abi::fixed_size<size()>>&) noexcept;
  template <class G> explicit simd(G&& gen) noexcept;
  template <class U, class Flags> simd(const U* mem, Flags f);

  // 9.6.5, simd copy functions
  template <class U, class Flags> void copy_from(const U* mem, Flags f);
  template <class U, class Flags> void copy_to(U* mem, Flags f);

  // 9.6.6, simd subscript operators
  reference operator[](size_t);
  value_type operator[](size_t) const;

  // 9.6.7, simd unary operators
  simd& operator++() noexcept;
  simd operator++(int) noexcept;
  simd& operator--() noexcept;
  simd operator--(int) noexcept;
  mask_type operator!() const noexcept;
  simd operator~() const noexcept;
  simd operator+() const noexcept;
  simd operator-() const noexcept;

  // 9.7.1, simd binary operators
  friend simd operator+ (const simd&, const simd&) noexcept;
  friend simd operator- (const simd&, const simd&) noexcept;
  friend simd operator* (const simd&, const simd&) noexcept;
  friend simd operator/ (const simd&, const simd&) noexcept;
  friend simd operator% (const simd&, const simd&) noexcept;
  friend simd operator& (const simd&, const simd&) noexcept;
  friend simd operator| (const simd&, const simd&) noexcept;
  friend simd operator^ (const simd&, const simd&) noexcept;
  friend simd operator<<(const simd&, const simd&) noexcept;
  friend simd operator>>(const simd&, const simd&) noexcept;
  friend simd operator<<(const simd&, int) noexcept;
  friend simd operator>>(const simd&, int) noexcept;

  // 9.7.2, simd compound assignment
  friend simd& operator+= (simd&, const simd&) noexcept;
  friend simd& operator-= (simd&, const simd&) noexcept;
  friend simd& operator*= (simd&, const simd&) noexcept;
  friend simd& operator/= (simd&, const simd&) noexcept;
  friend simd& operator%= (simd&, const simd&) noexcept;
  friend simd& operator&= (simd&, const simd&) noexcept;
  friend simd& operator|= (simd&, const simd&) noexcept;
  friend simd& operator^= (simd&, const simd&) noexcept;
  friend simd& operator<<=(simd&, const simd&) noexcept;
  friend simd& operator>>=(simd&, const simd&) noexcept;
  friend simd& operator<<=(simd&, int) noexcept;
  friend simd& operator>>=(simd&, int) noexcept;

  // 9.7.3, simd compare operators
  friend mask_type operator==(const simd&, const simd&) noexcept;
  friend mask_type operator!=(const simd&, const simd&) noexcept;
  friend mask_type operator>=(const simd&, const simd&) noexcept;
  friend mask_type operator<=(const simd&, const simd&) noexcept;
  friend mask_type operator> (const simd&, const simd&) noexcept;
  friend mask_type operator< (const simd&, const simd&) noexcept;
};

// 9.7.7, Math library [simd.math]
template <class Abi> using scharv = simd<signed char, Abi>; // exposition only
template <class Abi> using shortv = simd<short, Abi>; // exposition only
template <class Abi> using intv = simd<int, Abi>; // exposition only
template <class Abi> using longv = simd<long int, Abi>; // exposition only
template <class Abi> using llongv = simd<long long int, Abi>; // exposition only
template <class Abi> using floatv = simd<float, Abi>; // exposition only
template <class Abi> using doublev = simd<double, Abi>; // exposition only
template <class Abi> using ldoublev = simd<long double, Abi>; // exposition only
template <class T, class V> using samesize = fixed_size_simd<T, V::size()>; // exposition only

template <class Abi> floatv<Abi> acos(floatv<Abi> x);
template <class Abi> doublev<Abi> acos(doublev<Abi> x);
template <class Abi> ldoublev<Abi> acos(ldoublev<Abi> x);

template <class Abi> floatv<Abi> asin(floatv<Abi> x);
template <class Abi> doublev<Abi> asin(doublev<Abi> x);
template <class Abi> ldoublev<Abi> asin(ldoublev<Abi> x);

template <class Abi> floatv<Abi> atan(floatv<Abi> x);
template <class Abi> doublev<Abi> atan(doublev<Abi> x);
template <class Abi> ldoublev<Abi> atan(ldoublev<Abi> x);

template <class Abi> floatv<Abi> atan2(floatv<Abi> y, floatv<Abi> x);
template <class Abi> doublev<Abi> atan2(doublev<Abi> y, doublev<Abi> x);
template <class Abi> ldoublev<Abi> atan2(ldoublev<Abi> y, ldoublev<Abi> x);

template <class Abi> floatv<Abi> cos(floatv<Abi> x);
template <class Abi> doublev<Abi> cos(doublev<Abi> x);
template <class Abi> ldoublev<Abi> cos(ldoublev<Abi> x);

template <class Abi> floatv<Abi> sin(floatv<Abi> x);
template <class Abi> doublev<Abi> sin(doublev<Abi> x);
template <class Abi> ldoublev<Abi> sin(ldoublev<Abi> x);

template <class Abi> floatv<Abi> tan(floatv<Abi> x);
template <class Abi> doublev<Abi> tan(doublev<Abi> x);
template <class Abi> ldoublev<Abi> tan(ldoublev<Abi> x);

template <class Abi> floatv<Abi> acosh(floatv<Abi> x);
template <class Abi> doublev<Abi> acosh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> acosh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> asinh(floatv<Abi> x);
template <class Abi> doublev<Abi> asinh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> asinh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> atanh(floatv<Abi> x);
template <class Abi> doublev<Abi> atanh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> atanh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> cosh(floatv<Abi> x);
template <class Abi> doublev<Abi> cosh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> cosh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> sinh(floatv<Abi> x);
template <class Abi> doublev<Abi> sinh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> sinh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> tanh(floatv<Abi> x);
template <class Abi> doublev<Abi> tanh(doublev<Abi> x);
template <class Abi> ldoublev<Abi> tanh(ldoublev<Abi> x);

template <class Abi> floatv<Abi> exp(floatv<Abi> x);
template <class Abi> doublev<Abi> exp(doublev<Abi> x);
template <class Abi> ldoublev<Abi> exp(ldoublev<Abi> x);

template <class Abi> floatv<Abi> exp2(floatv<Abi> x);
template <class Abi> doublev<Abi> exp2(doublev<Abi> x);
template <class Abi> ldoublev<Abi> exp2(ldoublev<Abi> x);

template <class Abi> floatv<Abi> expm1(floatv<Abi> x);
template <class Abi> doublev<Abi> expm1(doublev<Abi> x);
template <class Abi> ldoublev<Abi> expm1(ldoublev<Abi> x);

template <class Abi> floatv<Abi> frexp(floatv<Abi> value, samesize<int, floatv<Abi>>* exp);
template <class Abi> doublev<Abi> frexp(doublev<Abi> value, samesize<int, doublev<Abi>>* exp);
template <class Abi> ldoublev<Abi> frexp(ldoublev<Abi> value, samesize<int, ldoublev<Abi>>* exp);

template <class Abi> samesize<int, floatv<Abi>> ilogb(floatv<Abi> x);
template <class Abi> samesize<int, doublev<Abi>> ilogb(doublev<Abi> x);
template <class Abi> samesize<int, ldoublev<Abi>> ilogb(ldoublev<Abi> x);

template <class Abi> floatv<Abi> ldexp(floatv<Abi> x, samesize<int, floatv<Abi>> exp);
template <class Abi> doublev<Abi> ldexp(doublev<Abi> x, samesize<int, doublev<Abi>> exp);
template <class Abi> ldoublev<Abi> ldexp(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> exp);

template <class Abi> floatv<Abi> log(floatv<Abi> x);
template <class Abi> doublev<Abi> log(doublev<Abi> x);
template <class Abi> ldoublev<Abi> log(ldoublev<Abi> x);

template <class Abi> floatv<Abi> log10(floatv<Abi> x);
template <class Abi> doublev<Abi> log10(doublev<Abi> x);
template <class Abi> ldoublev<Abi> log10(ldoublev<Abi> x);

template <class Abi> floatv<Abi> log1p(floatv<Abi> x);
template <class Abi> doublev<Abi> log1p(doublev<Abi> x);
template <class Abi> ldoublev<Abi> log1p(ldoublev<Abi> x);

template <class Abi> floatv<Abi> log2(floatv<Abi> x);
template <class Abi> doublev<Abi> log2(doublev<Abi> x);
template <class Abi> ldoublev<Abi> log2(ldoublev<Abi> x);

template <class Abi> floatv<Abi> logb(floatv<Abi> x);
template <class Abi> doublev<Abi> logb(doublev<Abi> x);
template <class Abi> ldoublev<Abi> logb(ldoublev<Abi> x);

template <class Abi> floatv<Abi> modf(floatv<Abi> value, floatv<Abi>* iptr);
template <class Abi> doublev<Abi> modf(doublev<Abi> value, doublev<Abi>* iptr);
template <class Abi> ldoublev<Abi> modf(ldoublev<Abi> value, ldoublev<Abi>* iptr);

template <class Abi> floatv<Abi> scalbn(floatv<Abi> x, samesize<int, floatv<Abi>> n);
template <class Abi> doublev<Abi> scalbn(doublev<Abi> x, samesize<int, doublev<Abi>> n);
template <class Abi> ldoublev<Abi> scalbn(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> n);
template <class Abi> floatv<Abi> scalbln(floatv<Abi> x, samesize<long int, floatv<Abi>> n);
template <class Abi> doublev<Abi> scalbln(doublev<Abi> x, samesize<long int, doublev<Abi>> n);
template <class Abi> ldoublev<Abi> scalbln(ldoublev<Abi> x, samesize<long int, ldoublev<Abi>> n);

template <class Abi> floatv<Abi> cbrt(floatv<Abi> x);
template <class Abi> doublev<Abi> cbrt(doublev<Abi> x);
template <class Abi> ldoublev<Abi> cbrt(ldoublev<Abi> x);

template <class Abi> scharv<Abi> abs(scharv<Abi> j);
template <class Abi> shortv<Abi> abs(shortv<Abi> j);
template <class Abi> intv<Abi> abs(intv<Abi> j);
template <class Abi> longv<Abi> abs(longv<Abi> j);
template <class Abi> llongv<Abi> abs(llongv<Abi> j);
template <class Abi> floatv<Abi> abs(floatv<Abi> j);
template <class Abi> doublev<Abi> abs(doublev<Abi> j);
template <class Abi> ldoublev<Abi> abs(ldoublev<Abi> j);

template <class Abi> floatv<Abi> hypot(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> hypot(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y);
template <class Abi> floatv<Abi> hypot(floatv<Abi> x, floatv<Abi> y, floatv<Abi> z);
template <class Abi> doublev<Abi> hypot(doublev<Abi> x, doublev<Abi> y, doublev<Abi> z);
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y, ldoublev<Abi> z);

template <class Abi> floatv<Abi> pow(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> pow(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> pow(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> sqrt(floatv<Abi> x);
template <class Abi> doublev<Abi> sqrt(doublev<Abi> x);
template <class Abi> ldoublev<Abi> sqrt(ldoublev<Abi> x);

template <class Abi> floatv<Abi> erf(floatv<Abi> x);
template <class Abi> doublev<Abi> erf(doublev<Abi> x);
template <class Abi> ldoublev<Abi> erf(ldoublev<Abi> x);
template <class Abi> floatv<Abi> erfc(floatv<Abi> x);
template <class Abi> doublev<Abi> erfc(doublev<Abi> x);
template <class Abi> ldoublev<Abi> erfc(ldoublev<Abi> x);

template <class Abi> floatv<Abi> lgamma(floatv<Abi> x);
template <class Abi> doublev<Abi> lgamma(doublev<Abi> x);
template <class Abi> ldoublev<Abi> lgamma(ldoublev<Abi> x);

template <class Abi> floatv<Abi> tgamma(floatv<Abi> x);
template <class Abi> doublev<Abi> tgamma(doublev<Abi> x);
template <class Abi> ldoublev<Abi> tgamma(ldoublev<Abi> x);

template <class Abi> floatv<Abi> ceil(floatv<Abi> x);
template <class Abi> doublev<Abi> ceil(doublev<Abi> x);
template <class Abi> ldoublev<Abi> ceil(ldoublev<Abi> x);

template <class Abi> floatv<Abi> floor(floatv<Abi> x);
template <class Abi> doublev<Abi> floor(doublev<Abi> x);
template <class Abi> ldoublev<Abi> floor(ldoublev<Abi> x);

template <class Abi> floatv<Abi> nearbyint(floatv<Abi> x);
template <class Abi> doublev<Abi> nearbyint(doublev<Abi> x);
template <class Abi> ldoublev<Abi> nearbyint(ldoublev<Abi> x);

template <class Abi> floatv<Abi> rint(floatv<Abi> x);
template <class Abi> doublev<Abi> rint(doublev<Abi> x);
template <class Abi> ldoublev<Abi> rint(ldoublev<Abi> x);

template <class Abi> samesize<long int, floatv<Abi>> lrint(floatv<Abi> x);
template <class Abi> samesize<long int, doublev<Abi>> lrint(doublev<Abi> x);
template <class Abi> samesize<long int, ldoublev<Abi>> lrint(ldoublev<Abi> x);
template <class Abi> samesize<long long int, floatv<Abi>> llrint(floatv<Abi> x);
template <class Abi> samesize<long long int, doublev<Abi>> llrint(doublev<Abi> x);
template <class Abi> samesize<long long int, ldoublev<Abi>> llrint(ldoublev<Abi> x);

template <class Abi> floatv<Abi> round(floatv<Abi> x);
template <class Abi> doublev<Abi> round(doublev<Abi> x);
template <class Abi> ldoublev<Abi> round(ldoublev<Abi> x);
template <class Abi> samesize<long int, floatv<Abi>> lround(floatv<Abi> x);
template <class Abi> samesize<long int, doublev<Abi>> lround(doublev<Abi> x);
template <class Abi> samesize<long int, ldoublev<Abi>> lround(ldoublev<Abi> x);
template <class Abi> samesize<long long int, floatv<Abi>> llround(floatv<Abi> x);
template <class Abi> samesize<long long int, doublev<Abi>> llround(doublev<Abi> x);
template <class Abi> samesize<long long int, ldoublev<Abi>> llround(ldoublev<Abi> x);

template <class Abi> floatv<Abi> trunc(floatv<Abi> x);
template <class Abi> doublev<Abi> trunc(doublev<Abi> x);
template <class Abi> ldoublev<Abi> trunc(ldoublev<Abi> x);

template <class Abi> floatv<Abi> fmod(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> fmod(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> fmod(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> remainder(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> remainder(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> remainder(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> remquo(floatv<Abi> x, floatv<Abi> y, samesize<int, floatv<Abi>>* quo);
template <class Abi> doublev<Abi> remquo(doublev<Abi> x, doublev<Abi> y, samesize<int, doublev<Abi>>* quo);
template <class Abi> ldoublev<Abi> remquo(ldoublev<Abi> x, ldoublev<Abi> y, samesize<int, ldoublev<Abi>>* quo);

template <class Abi> floatv<Abi> copysign(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> copysign(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> copysign(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> doublev<Abi> nan(const char* tagp);
template <class Abi> floatv<Abi> nanf(const char* tagp);
template <class Abi> ldoublev<Abi> nanl(const char* tagp);

template <class Abi> floatv<Abi> nextafter(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> nextafter(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> nextafter(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> nexttoward(floatv<Abi> x, ldoublev<Abi> y);
template <class Abi> doublev<Abi> nexttoward(doublev<Abi> x, ldoublev<Abi> y);
template <class Abi> ldoublev<Abi> nexttoward(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> fdim(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> fdim(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> fdim(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> fmax(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> fmax(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> fmax(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> fmin(floatv<Abi> x, floatv<Abi> y);
template <class Abi> doublev<Abi> fmin(doublev<Abi> x, doublev<Abi> y);
template <class Abi> ldoublev<Abi> fmin(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> floatv<Abi> fma(floatv<Abi> x, floatv<Abi> y, floatv<Abi> z);
template <class Abi> doublev<Abi> fma(doublev<Abi> x, doublev<Abi> y, doublev<Abi> z);
template <class Abi> ldoublev<Abi> fma(ldoublev<Abi> x, ldoublev<Abi> y, ldoublev<Abi> z);

template <class Abi> samesize<int, floatv<Abi>> fpclassify(floatv<Abi> x);
template <class Abi> samesize<int, doublev<Abi>> fpclassify(doublev<Abi> x);
template <class Abi> samesize<int, ldoublev<Abi>> fpclassify(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> isfinite(floatv<Abi> x);
template <class Abi> simd_mask<double, Abi> isfinite(doublev<Abi> x);
template <class Abi> simd_mask<long double, Abi> isfinite(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> isinf(floatv<Abi> x);
template <class Abi> simd_mask<double, Abi> isinf(doublev<Abi> x);
template <class Abi> simd_mask<long double, Abi> isinf(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> isnan(floatv<Abi> x);
template <class Abi> simd_mask<double, Abi> isnan(doublev<Abi> x);
template <class Abi> simd_mask<long double, Abi> isnan(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> isnormal(floatv<Abi> x);
template <class Abi> simd_mask<double, Abi> isnormal(doublev<Abi> x);
template <class Abi> simd_mask<long double, Abi> isnormal(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> signbit(floatv<Abi> x);
template <class Abi> simd_mask<double, Abi> signbit(doublev<Abi> x);
template <class Abi> simd_mask<long double, Abi> signbit(ldoublev<Abi> x);

template <class Abi> simd_mask<float, Abi> isgreater(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> isgreater(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> isgreater(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> simd_mask<float, Abi> isgreaterequal(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> isgreaterequal(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> isgreaterequal(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> simd_mask<float, Abi> isless(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> isless(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> isless(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> simd_mask<float, Abi> islessequal(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> islessequal(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> islessequal(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> simd_mask<float, Abi> islessgreater(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> islessgreater(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> islessgreater(ldoublev<Abi> x, ldoublev<Abi> y);

template <class Abi> simd_mask<float, Abi> isunordered(floatv<Abi> x, floatv<Abi> y);
template <class Abi> simd_mask<double, Abi> isunordered(doublev<Abi> x, doublev<Abi> y);
template <class Abi> simd_mask<long double, Abi> isunordered(ldoublev<Abi> x, ldoublev<Abi> y);

template <class V> struct simd_div_t { V quot, rem; };
template <class Abi> simd_div_t<scharv<Abi>> div(scharv<Abi> numer, scharv<Abi> denom);
template <class Abi> simd_div_t<shortv<Abi>> div(shortv<Abi> numer, shortv<Abi> denom);
template <class Abi> simd_div_t<intv<Abi>> div(intv<Abi> numer, intv<Abi> denom);
template <class Abi> simd_div_t<longv<Abi>> div(longv<Abi> numer, longv<Abi> denom);
template <class Abi> simd_div_t<llongv<Abi>> div(llongv<Abi> numer, llongv<Abi> denom);

// 9.8.1, Class template simd_mask overview [simd.mask.overview]
template <class T, class Abi> class simd_mask {
public:
  using value_type = bool;
  using reference = see below;
  using simd_type = simd<T, Abi>;
  using abi_type = Abi;

  static constexpr size_t size() noexcept;

  simd_mask() noexcept = default;

  // 9.8.3, Constructors
  explicit simd_mask(value_type) noexcept;
  template <class U>
    simd_mask(const simd_mask<U, simd_abi::fixed_size<size()>>&) noexcept;
  template <class Flags> simd_mask(const value_type* mem, Flags);

  // 9.8.4, Copy functions
  template <class Flags> void copy_from(const value_type* mem, Flags);
  template <class Flags> void copy_to(value_type* mem, Flags) const;

  // 9.8.5, Subscript operators
  reference operator[](size_t);
  value_type operator[](size_t) const;

  // 9.8.6, Unary operators
  simd_mask operator!() const noexcept;

  // 9.9.1, Binary operators
  friend simd_mask operator&&(const simd_mask&, const simd_mask&) noexcept;
  friend simd_mask operator||(const simd_mask&, const simd_mask&) noexcept;
  friend simd_mask operator& (const simd_mask&, const simd_mask&) noexcept;
  friend simd_mask operator| (const simd_mask&, const simd_mask&) noexcept;
  friend simd_mask operator^ (const simd_mask&, const simd_mask&) noexcept;

  // 9.9.2, Compound assignment
  friend simd_mask& operator&=(simd_mask&, const simd_mask&) noexcept;
  friend simd_mask& operator|=(simd_mask&, const simd_mask&) noexcept;
  friend simd_mask& operator^=(simd_mask&, const simd_mask&) noexcept;

  // 9.9.3, Comparisons
  friend simd_mask operator==(const simd_mask&, const simd_mask&) noexcept;
  friend simd_mask operator!=(const simd_mask&, const simd_mask&) noexcept;
};

} // parallelism_v2
} // std::experimental

*/

#include <bit>
#include <experimental/__config>
#include <experimental/__simd/config.h>
#include <experimental/__simd/scalar.h>
#include <experimental/__simd/vec_ext.h>
#include <functional>
#include <limits>
#include <type_traits>
#include <utility>
#include <cfloat>

#include <fenv.h>
#include <iostream>

#if __LDBL_MANT_DIG__ == 113 && __LDBL_MIN_EXP__ == -16381 && __LDBL_MAX_EXP__ == 16384
  #define LDOUBLE_BINARY128 1
#else
  #define LDOUBLE_BINARY64 1
#endif

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCPP_PUSH_MACROS
#include <__undef_macros>

_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL_SIMD

// #if _LIBCPP_STD_VER >= 17

// TODO: handle _LIBCPP_HAS_NO_VECTOR_EXTENSION

template <class _Tp, class _Storage, class _ValueType>
class __simd_reference {
  template <class, class>
  friend class simd;

  template <class, class>
  friend class simd_mask;

  _Storage& __s_;
  size_t __idx_;

  _LIBCPP_HIDE_FROM_ABI __simd_reference(_Storage& __s, size_t __idx) : __s_(__s), __idx_(__idx) {}

  _LIBCPP_HIDE_FROM_ABI _ValueType __get() const { return __s_.__get(__idx_); }

  _LIBCPP_HIDE_FROM_ABI void __set(_ValueType __v) {
    if constexpr (is_same_v<_ValueType, bool>)
      __s_.__set(__idx_, std::experimental::parallelism_v2::__set_all_bits<_Tp>(__v));
    else
      __s_.__set(__idx_, __v);
  }

public:
  using value_type = _ValueType;

  _LIBCPP_HIDE_FROM_ABI __simd_reference()                        = delete;
  _LIBCPP_HIDE_FROM_ABI __simd_reference(const __simd_reference&) = delete;

  _LIBCPP_HIDE_FROM_ABI operator value_type() const noexcept { return __get(); }

  template <class _Up>
  enable_if_t<is_void_v<void_t<decltype(std::declval<value_type&>() = std::declval<_Up>())>>, __simd_reference>
  _LIBCPP_HIDE_FROM_ABI operator=(_Up&& __v) && noexcept {
    __set(static_cast<value_type>(std::forward<_Up>(__v)));
    return {__s_, __idx_};
  }

#  define _LIBCXX_SIMD_REFERENCE_OP_(__op)                                                                             \
    template <class _Up>                                                                                               \
    enable_if_t<is_void_v<void_t<decltype(std::declval<value_type&>() __op std::declval<_Up>())>>, __simd_reference>             \
    _LIBCPP_HIDE_FROM_ABI operator __op##=(_Up&& __v)&& noexcept {                                                                           \
      __set(__get() __op static_cast<value_type>(std::forward<_Up>(__v)));                                             \
      return {__s_, __idx_};                                                                                           \
    }
  _LIBCXX_SIMD_REFERENCE_OP_(+)
  _LIBCXX_SIMD_REFERENCE_OP_(-)
  _LIBCXX_SIMD_REFERENCE_OP_(*)
  _LIBCXX_SIMD_REFERENCE_OP_(/)
  _LIBCXX_SIMD_REFERENCE_OP_(%)
  _LIBCXX_SIMD_REFERENCE_OP_(^)
  _LIBCXX_SIMD_REFERENCE_OP_(<<)
  _LIBCXX_SIMD_REFERENCE_OP_(>>)
#  undef _LIBCXX_SIMD_REFERENCE_OP_

  template <class _Up>
  enable_if_t<is_void_v<void_t<decltype(std::declval<value_type&>() &= std::declval<_Up>())>>, __simd_reference>
  _LIBCPP_HIDE_FROM_ABI operator&=(_Up&& __v) && noexcept {
    if constexpr (is_same_v<_ValueType, bool>)
      __set(__get() && static_cast<value_type>(std::forward<_Up>(__v)));
    else
      __set(__get() & static_cast<value_type>(std::forward<_Up>(__v)));
    return {__s_, __idx_};
  }

  template <class _Up>
  enable_if_t<is_void_v<void_t<decltype(std::declval<value_type&>() |= std::declval<_Up>())>>, __simd_reference>
  _LIBCPP_HIDE_FROM_ABI operator|=(_Up&& __v) && noexcept {
    if constexpr (is_same_v<_ValueType, bool>)
      __set(__get() || static_cast<value_type>(std::forward<_Up>(__v)));
    else
      __set(__get() | static_cast<value_type>(std::forward<_Up>(__v)));
    return {__s_, __idx_};
  }

  template <class _Up = void, class = decltype(++std::declval<conditional_t<true, value_type, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI __simd_reference operator++() && noexcept {
    __set(__get() + 1);
    return {__s_, __idx_};
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, value_type, _Up>&>()++)>
  _LIBCPP_HIDE_FROM_ABI value_type operator++(int) && noexcept {
    auto __r = __get();
    __set(__get() + 1);
    return __r;
  }

  template <class _Up = void, class = decltype(--std::declval<conditional_t<true, value_type, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI __simd_reference operator--() && noexcept {
    __set(__get() - 1);
    return {__s_, __idx_};
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, value_type, _Up>&>()--)>
  _LIBCPP_HIDE_FROM_ABI value_type operator--(int) && noexcept {
    auto __r = __get();
    __set(__get() - 1);
    return __r;
  }

  friend _LIBCPP_HIDE_FROM_ABI void swap(__simd_reference&& __a, __simd_reference&& __b) noexcept {
    value_type __tmp                     = static_cast<__simd_reference&&>(__a);
    static_cast<__simd_reference&&>(__a) = static_cast<value_type>(__b);
    static_cast<__simd_reference&&>(__b) = std::move(__tmp);
  }

  friend _LIBCPP_HIDE_FROM_ABI void swap(value_type& __a, __simd_reference&& __b) noexcept {
    value_type __tmp(std::move(__a));
    __a                                  = static_cast<value_type>(__b);
    static_cast<__simd_reference&&>(__b) = std::move(__tmp);
  }

  friend _LIBCPP_HIDE_FROM_ABI void swap(__simd_reference&& __a, value_type& __b) noexcept {
    value_type __tmp(__a);
    static_cast<__simd_reference&&>(__a) = std::move(__b);
    __b                                  = std::move(__tmp);
  }
};

_LIBCPP_END_NAMESPACE_EXPERIMENTAL_SIMD

_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL_SIMD_ABI
// TODO: Elaboration of implementation-defined ABIs

using scalar = __scalar;

template <class _Tp>
inline constexpr size_t max_fixed_size = 32;

template <int _Np>
using fixed_size = __vec_ext<_Np>;
template <class _Tp>
using compatible = __vec_ext<16 / sizeof(_Tp)>;
#  if defined(__AVX__)
template <class _Tp>
using native = __vec_ext<_LIBCPP_NATIVE_SIMD_WIDTH_IN_BYTES / sizeof(_Tp)>;
#  else
template <class _Tp>
using native = __vec_ext<16 / sizeof(_Tp)>;
#  endif

template <class _Tp, size_t _Np, class... Abis>
struct deduce {
  using type = fixed_size<_Np>;
};

template <class _Tp, size_t _Np, class... Abis>
using deduce_t = typename deduce<_Tp, _Np>::type;

_LIBCPP_END_NAMESPACE_EXPERIMENTAL_SIMD_ABI

_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL_SIMD

// Class template simd [parallel.simd.class]
template <class _Tp, class _Abi = simd_abi::compatible<_Tp>>
class simd;

template <class _Tp>
using native_simd = simd<_Tp, simd_abi::native<_Tp>>;

template <class _Tp, int _Np>
using fixed_size_simd = simd<_Tp, simd_abi::fixed_size<_Np>>;

// Class template simd_mask [parallel.simd.mask.class]
template <class _Tp, class _Abi = simd_abi::compatible<_Tp>>
class simd_mask;

template <class _Tp>
using native_simd_mask = simd_mask<_Tp, simd_abi::native<_Tp>>;

template <class _Tp, int _Np>
using fixed_size_simd_mask = simd_mask<_Tp, simd_abi::fixed_size<_Np>>;

// Memory alignment
struct element_aligned_tag {
  template <class _Tp, class _Up = typename _Tp::value_type>
  static constexpr size_t __alignment = alignof(_Up);

  template <class _Tp, class _Up>
  static _LIBCPP_HIDE_FROM_ABI constexpr _Up* __apply(_Up* __ptr) {
    return __ptr;
  }
};

struct vector_aligned_tag {
  template <class _Tp, class _Up = typename _Tp::value_type>
  static _LIBCPP_HIDE_FROM_ABI constexpr size_t __alignment = std::experimental::parallelism_v2::__next_pow_of_2(sizeof(_Up) * _Tp::size());

  template <class _Tp, class _Up>
  static _LIBCPP_HIDE_FROM_ABI constexpr _Up* __apply(_Up* __ptr) {
    return static_cast<_Up*>(__builtin_assume_aligned(__ptr, __alignment<_Tp, _Up>));
  }
};

template <size_t _Np>
struct overaligned_tag {
  template <class _Tp, class _Up = typename _Tp::value_type>
  static constexpr size_t __alignment = _Np;

  template <class _Tp, class _Up>
  static _LIBCPP_HIDE_FROM_ABI constexpr _Up* __apply(_Up* __ptr) {
    return static_cast<_Up*>(__builtin_assume_aligned(__ptr, _Np));
  }
};

inline constexpr element_aligned_tag element_aligned{};

inline constexpr vector_aligned_tag vector_aligned{};

template <size_t _Np>
inline constexpr overaligned_tag<_Np> overaligned{};

// simd type traits [parallel.simd.traits]
template <class _Tp, class = void>
struct __is_abi_tag_impl : false_type {};

template <class _Tp>
struct __is_abi_tag_impl<_Tp, enable_if_t<_Tp::__is_abi_tag>> : bool_constant<_Tp::__is_abi_tag> {};

template <class _Tp>
struct is_abi_tag : __is_abi_tag_impl<_Tp> {};

template <class _Tp>
inline constexpr bool is_abi_tag_v = is_abi_tag<_Tp>::value;

template <class _Tp>
struct is_simd : false_type {};

template <class _Tp, class _Abi>
struct is_simd<simd<_Tp, _Abi>> : true_type {};

template <class _Tp>
inline constexpr bool is_simd_v = is_simd<_Tp>::value;

template <class _Tp>
struct is_simd_mask : false_type {};

template <class _Tp, class _Abi>
struct is_simd_mask<simd_mask<_Tp, _Abi>> : true_type {};

template <class _Tp>
inline constexpr bool is_simd_mask_v = is_simd_mask<_Tp>::value;

template <class _Tp>
struct is_simd_flag_type : false_type {};

template <>
struct is_simd_flag_type<element_aligned_tag> : true_type {};

template <>
struct is_simd_flag_type<vector_aligned_tag> : true_type {};

template <size_t _Np>
struct is_simd_flag_type<overaligned_tag<_Np>> : true_type {};

template <class _Tp>
inline constexpr bool is_simd_flag_type_v = is_simd_flag_type<_Tp>::value;

template <class _Tp, class _Abi, class = void>
struct __simd_size_impl {};

template <class _Tp, class _Abi>
struct __simd_size_impl<_Tp, _Abi, enable_if_t<__is_vectorizable<_Tp>() && is_abi_tag_v<_Abi>>>
    : integral_constant<size_t, _Abi::__simd_size> {};

template <class _Tp, class _Abi = simd_abi::compatible<_Tp>>
struct simd_size : __simd_size_impl<_Tp, _Abi> {};

template <class _Tp, class _Abi = simd_abi::compatible<_Tp>>
inline constexpr size_t simd_size_v = simd_size<_Tp, _Abi>::value;

template <class _Tp, class _Up, class = void>
struct __memory_alignment_impl {};

template <class _Tp, class _Up>
struct __memory_alignment_impl<
    _Tp,
    _Up,
    enable_if_t<(is_simd_v<_Tp> && __is_vectorizable<_Up>()) || (is_simd_mask_v<_Tp> && is_same_v<_Up, bool>)>>
    : integral_constant<size_t, vector_aligned_tag::__alignment<_Tp, _Up>> {};

template <class _Tp, class _Up = typename _Tp::value_type>
struct memory_alignment : __memory_alignment_impl<_Tp, _Up> {};

template <class _Tp, class _Up = typename _Tp::value_type>
inline constexpr size_t memory_alignment_v = memory_alignment<_Tp, _Up>::value;

template <class _Tp, class _Vp, class = void>
struct __rebind_simd_impl {};

template <class _Tp, class _Up, class _Abi>
struct __rebind_simd_impl<_Tp, simd<_Up, _Abi>, void_t<simd_abi::deduce_t<_Tp, simd_size_v<_Up, _Abi>, _Abi>> > {
  using type = simd<_Tp, simd_abi::deduce_t<_Tp, simd_size_v<_Up, _Abi>, _Abi>>;
};

template <class _Tp, class _Up, class _Abi>
struct __rebind_simd_impl<_Tp, simd_mask<_Up, _Abi>, void_t<simd_abi::deduce_t<_Tp, simd_size_v<_Up, _Abi>, _Abi>> > {
  using type = simd_mask<_Tp, simd_abi::deduce_t<_Tp, simd_size_v<_Up, _Abi>, _Abi>>;
};

template <class _Tp, class _Vp>
struct rebind_simd : __rebind_simd_impl<_Tp, _Vp> {};

template <class _Tp, class _Vp>
using rebind_simd_t = typename rebind_simd<_Tp, _Vp>::type;

template <int _Np, class _Vp, class = void>
struct __resize_simd_impl {};

template <int _Np, class _Tp, class _Abi>
struct __resize_simd_impl<_Np, simd<_Tp, _Abi>, void_t<simd_abi::deduce_t<_Tp, _Np, _Abi>> > {
  using type = simd<_Tp, simd_abi::deduce_t<_Tp, _Np, _Abi>>;
};

template <int _Np, class _Tp, class _Abi>
struct __resize_simd_impl<_Np, simd_mask<_Tp, _Abi>, void_t<simd_abi::deduce_t<_Tp, _Np, _Abi>> > {
  using type = simd_mask<_Tp, simd_abi::deduce_t<_Tp, _Np, _Abi>>;
};

template <int _Np, class _Vp>
struct resize_simd : __resize_simd_impl<_Np, _Vp> {};

template <int _Np, class _Vp>
using resize_simd_t = typename resize_simd<_Np, _Vp>::type;

// Casts [parallel.simd.casts]
template <class _Tp, class = void>
struct __safe_make_signed {
  using type = _Tp;
};

template <class _Tp>
struct __safe_make_signed<_Tp, enable_if_t<is_integral_v<_Tp>>> {
  using type = make_signed_t<_Tp>;
};

template <class _Tp, class _Up, class _Abi, class = void>
struct __static_simd_cast_return_type {};

template <class _Tp, class _Up, class _Abi>
struct __static_simd_cast_return_type<_Tp,
                                      _Up,
                                      _Abi,
                                      enable_if_t<is_simd_v<_Tp> && _Tp::size() == simd<_Up, _Abi>::size()>> {
  using type = _Tp;
};

template <class _Tp, class _Up, class _Abi>
struct __static_simd_cast_return_type<
    _Tp,
    _Up,
    _Abi,
    enable_if_t<!is_simd_v<_Tp> &&
                (is_same_v<_Tp, _Up> || is_same_v<__safe_make_signed<_Tp>, __safe_make_signed<_Up>>) >> {
  using type = simd<_Tp, _Abi>;
};

template <class _Tp, class _Up, class _Abi>
struct __static_simd_cast_return_type<_Tp,
                                      _Up,
                                      _Abi,
                                      enable_if_t<!is_simd_v<_Tp> && !is_same_v<_Tp, _Up> &&
                                                  !is_same_v<__safe_make_signed<_Up>, __safe_make_signed<_Tp>>>> {
  using type = simd<_Tp, simd_abi::fixed_size<simd<_Up, _Abi>::size()>>;
};

template <class _Tp, class _Up, class _Abi, class = void>
struct __simd_cast_return_type {};

template <class _Tp, class _Up, class _Abi>
struct __simd_cast_return_type<_Tp,
                               _Up,
                               _Abi,
                               enable_if_t<is_simd_v<_Tp> && _Tp::size() == simd<_Up, _Abi>::size() &&
                                           is_convertible_v<_Up, typename _Tp::value_type>>> {
  using type = _Tp;
};

template <class _Tp, class _Up, class _Abi>
struct __simd_cast_return_type<_Tp, _Up, _Abi, enable_if_t<!is_simd_v<_Tp> && is_same_v<_Tp, _Up>>> {
  using type = simd<_Tp, _Abi>;
};

template <class _Tp, class _Up, class _Abi>
struct __simd_cast_return_type<_Tp,
                               _Up,
                               _Abi,
                               enable_if_t<!is_simd_v<_Tp> && !is_same_v<_Tp, _Up> && is_convertible_v<_Up, _Tp>>> {
  using type = simd<_Tp, simd_abi::fixed_size<simd<_Up, _Abi>::size()>>;
};

template <class _To, class _From>
_LIBCPP_HIDE_FROM_ABI enable_if_t<is_simd_v<_To> && is_simd_v<_From> && _To::size() == _From::size(), _To>
__simd_conversion(_From __v) { // TODO: Optimizeable
  _To __res;
  for (size_t __i = 0; __i < _From::size(); __i++) {
    __res[__i] = static_cast<typename _To::value_type>(__v[__i]);
  }
  return __res;
}

template <class _To, class _From>
_LIBCPP_HIDE_FROM_ABI enable_if_t<is_simd_mask_v<_To> && is_simd_mask_v<_From> && _To::size() == _From::size(), _To>
__mask_conversion(_From __m) { // TODO: Optimizeable
  _To __res;
  for (size_t __i = 0; __i < _From::size(); __i++) {
    __res[__i] = __m[__i];
  }
  return __res;
}

template <class _Tp, class _Up, class _Abi>
_LIBCPP_HIDE_FROM_ABI typename __simd_cast_return_type<_Tp, _Up, _Abi>::type simd_cast(const simd<_Up, _Abi>& __v) {
  return std::experimental::parallelism_v2::__simd_conversion<typename __simd_cast_return_type<_Tp, _Up, _Abi>::type, simd<_Up, _Abi>>(__v);
}

template <class _Tp, class _Up, class _Abi>
_LIBCPP_HIDE_FROM_ABI typename __static_simd_cast_return_type<_Tp, _Up, _Abi>::type static_simd_cast(const simd<_Up, _Abi>& __v) {
  return std::experimental::parallelism_v2::__simd_conversion<typename __static_simd_cast_return_type<_Tp, _Up, _Abi>::type, simd<_Up, _Abi>>(__v);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI fixed_size_simd<_Tp, simd_size_v<_Tp, _Abi>> to_fixed_size(const simd<_Tp, _Abi>& __v) noexcept {
  return std::experimental::parallelism_v2::__simd_conversion<fixed_size_simd<_Tp, simd_size_v<_Tp, _Abi>>, simd<_Tp, _Abi>>(__v);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI fixed_size_simd_mask<_Tp, simd_size_v<_Tp, _Abi>> to_fixed_size(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return std::experimental::parallelism_v2::__mask_conversion<fixed_size_simd_mask<_Tp, simd_size_v<_Tp, _Abi>>, simd_mask<_Tp, _Abi>>(__m);
}

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, simd_abi::native<_Tp>> == _Np, native_simd<_Tp>>
to_native(const fixed_size_simd<_Tp, _Np>& __v) noexcept {
  return std::experimental::parallelism_v2::__simd_conversion<native_simd<_Tp>, fixed_size_simd<_Tp, _Np>>(__v);
}

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, simd_abi::native<_Tp>> == _Np, native_simd_mask<_Tp>>
to_native(const fixed_size_simd_mask<_Tp, _Np>& __m) noexcept {
  return std::experimental::parallelism_v2::__mask_conversion<native_simd_mask<_Tp>, fixed_size_simd_mask<_Tp, _Np>>(__m);
}

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, simd_abi::compatible<_Tp>> == _Np, simd<_Tp>>
to_compatible(const fixed_size_simd<_Tp, _Np>& __v) noexcept {
  return std::experimental::parallelism_v2::__simd_conversion<simd<_Tp>, fixed_size_simd<_Tp, _Np>>(__v);
}

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, simd_abi::compatible<_Tp>> == _Np, simd_mask<_Tp>>
to_compatible(const fixed_size_simd_mask<_Tp, _Np>& __m) noexcept {
  return std::experimental::parallelism_v2::__mask_conversion<simd_mask<_Tp>, fixed_size_simd_mask<_Tp, _Np>>(__m);
}

template <class _SimdType, class _Simd>
_LIBCPP_HIDE_FROM_ABI void __split_assign(const _Simd& __v, _SimdType& __s, size_t& __count) {
  for (size_t __i = 0; __i < __s.size(); __i++)
    __s[__i] = __v[__count++];
}

template <size_t... _Ip, class _Tuple, class _SimdType>
_LIBCPP_HIDE_FROM_ABI void __split_tuple_impl(const _SimdType& __v, _Tuple& __t, size_t& __count, index_sequence<_Ip...>) {
  (std::experimental::parallelism_v2::__split_assign(__v, std::get<_Ip>(__t), __count), ...);
}

template <size_t... _Sizes, class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI enable_if_t<((_Sizes + ...) == simd_size_v<_Tp, _Abi>), tuple<simd<_Tp, simd_abi::deduce_t<_Tp, _Sizes>>...>>
split(const simd<_Tp, _Abi>& __v) noexcept {
  tuple<simd<_Tp, simd_abi::deduce_t<_Tp, _Sizes>>...> __t;
  size_t __count = 0;
  std::experimental::parallelism_v2::__split_tuple_impl(__v, __t, __count, make_index_sequence<sizeof...(_Sizes)>{});
  return __t;
}

template <size_t... _Sizes, class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI enable_if_t<((_Sizes + ...) == simd_size_v<_Tp, _Abi>), tuple<simd_mask<_Tp, simd_abi::deduce_t<_Tp, _Sizes>>...>>
split(const simd_mask<_Tp, _Abi>& __m) noexcept {
  tuple<simd_mask<_Tp, simd_abi::deduce_t<_Tp, _Sizes>>...> __t;
  size_t __count = 0;
  std::experimental::parallelism_v2::__split_tuple_impl(__m, __t, __count, make_index_sequence<sizeof...(_Sizes)>{});
  return __t;
}

template <class _SimdType, class _Abi>
// FIX ME: Why simd_size_v gives error here?
_LIBCPP_HIDE_FROM_ABI enable_if_t<is_simd_v<_SimdType> && (simd_size<typename _SimdType::value_type, _Abi>::value % _SimdType::size() == 0),
            array<_SimdType, simd_size_v<typename _SimdType::value_type, _Abi> / _SimdType::size()>>
split(const simd<typename _SimdType::value_type, _Abi>& __v) noexcept {
  const size_t __size = _SimdType::size();
  array<_SimdType, simd_size_v<typename _SimdType::value_type, _Abi> / __size> __arr{};
  for (size_t __i = 0; __i < __arr.size(); __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __arr[__i][__j] = __v[__i * __size + __j];
  }
  return __arr;
}

template <class _SimdMaskType, class _Abi>
_LIBCPP_HIDE_FROM_ABI enable_if_t<
    is_simd_mask_v<_SimdMaskType> &&
        (simd_size_v<typename _SimdMaskType::simd_type::value_type, _Abi> % _SimdMaskType::size() == 0),
    array<_SimdMaskType, simd_size_v<typename _SimdMaskType::simd_type::value_type, _Abi> / _SimdMaskType::size()>>
split(const simd_mask<typename _SimdMaskType::simd_type::value_type, _Abi>& __m) noexcept {
  const size_t __size = _SimdMaskType::size();
  array<_SimdMaskType, simd_size_v<typename _SimdMaskType::simd_type::value_type, _Abi> / __size> __arr{};
  for (size_t __i = 0; __i < __arr.size(); __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __arr[__i][__j] = __m[__i * __size + __j];
  }
  return __arr;
}

template <size_t _Num, class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, _Abi> % _Num == 0,
            array<resize_simd_t<simd_size_v<_Tp, _Abi> / _Num, simd<_Tp, _Abi>>, _Num>>
split_by(const simd<_Tp, _Abi>& __v) noexcept {
  const size_t __size = simd_size_v<_Tp, _Abi> / _Num;
  array<resize_simd_t<__size, simd<_Tp, _Abi>>, _Num> __arr{};
  for (size_t __i = 0; __i < __arr.size(); __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __arr[__i][__j] = __v[__i * __size + __j];
  }
  return __arr;
}

template <size_t _Num, class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI enable_if_t<simd_size_v<_Tp, _Abi> % _Num == 0,
            array<resize_simd_t<simd_size_v<_Tp, _Abi> / _Num, simd_mask<_Tp, _Abi>>, _Num>>
split_by(const simd_mask<_Tp, _Abi>& __m) noexcept {
  const size_t __size = simd_size_v<_Tp, _Abi> / _Num;
  array<resize_simd_t<__size, simd_mask<_Tp, _Abi>>, _Num> __arr{};
  for (size_t __i = 0; __i < __arr.size(); __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __arr[__i][__j] = __m[__i * __size + __j];
  }
  return __arr;
}

template <class _SimdType, class _Simd>
_LIBCPP_HIDE_FROM_ABI void __concat_assign(const _Simd& __v, _SimdType& __s, size_t& __count) {
  for (size_t __i = 0; __i < __v.size(); __i++)
    __s[__count++] = __v[__i];
}

template <class _Tp, class... _Abis>
_LIBCPP_HIDE_FROM_ABI simd<_Tp, simd_abi::deduce_t<_Tp, (simd_size_v<_Tp, _Abis> + ...)>> concat(const simd<_Tp, _Abis>&... __v) noexcept {
  simd<_Tp, simd_abi::deduce_t<_Tp, (simd_size_v<_Tp, _Abis> + ...)>> __res;
  size_t __count = 0;
  (std::experimental::parallelism_v2::__concat_assign(__v, __res, __count), ...);
  return __res;
}

template <class _Tp, class... _Abis>
_LIBCPP_HIDE_FROM_ABI simd_mask<_Tp, simd_abi::deduce_t<_Tp, (simd_size_v<_Tp, _Abis> + ...)>>
concat(const simd_mask<_Tp, _Abis>&... __m) noexcept {
  simd_mask<_Tp, simd_abi::deduce_t<_Tp, (simd_size_v<_Tp, _Abis> + ...)>> __res;
  size_t __count = 0;
  (std::experimental::parallelism_v2::__concat_assign(__m, __res, __count), ...);
  return __res;
}

template <class _Tp, class _Abi, size_t _Num>
_LIBCPP_HIDE_FROM_ABI resize_simd_t<simd_size_v<_Tp, _Abi> * _Num, simd<_Tp, _Abi>>
concat(const array<simd<_Tp, _Abi>, _Num>& __arr) noexcept {
  const size_t __size = simd_size_v<_Tp, _Abi>;
  resize_simd_t<__size * _Num, simd<_Tp, _Abi>> __s;
  for (size_t __i = 0; __i < _Num; __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __s[__i * __size + __j] = __arr[__i][__j];
  }
  return __s;
}

template <class _Tp, class _Abi, size_t _Num>
_LIBCPP_HIDE_FROM_ABI resize_simd_t<simd_size_v<_Tp, _Abi> * _Num, simd_mask<_Tp, _Abi>>
concat(const array<simd_mask<_Tp, _Abi>, _Num>& __arr) noexcept {
  const size_t __size = simd_size_v<_Tp, _Abi>;
  resize_simd_t<__size * _Num, simd_mask<_Tp, _Abi>> __m;
  for (size_t __i = 0; __i < _Num; __i++) {
    for (size_t __j = 0; __j < __size; __j++)
      __m[__i * __size + __j] = __arr[__i][__j];
  }
  return __m;
}

// Reductions [parallel.simd.mask.reductions]
template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI bool all_of(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return __mask_traits<_Tp, _Abi>::__all_of(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI bool any_of(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return __mask_traits<_Tp, _Abi>::__any_of(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI bool none_of(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return __mask_traits<_Tp, _Abi>::__none_of(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI bool some_of(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return __mask_traits<_Tp, _Abi>::__some_of(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI int popcount(const simd_mask<_Tp, _Abi>& __m) noexcept {
  return __mask_traits<_Tp, _Abi>::__popcount(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI int find_first_set(const simd_mask<_Tp, _Abi>& __m) {
  return __mask_traits<_Tp, _Abi>::__find_first_set(__m.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI int find_last_set(const simd_mask<_Tp, _Abi>& __m) {
  return __mask_traits<_Tp, _Abi>::__find_last_set(__m.__s_);
}

_LIBCPP_HIDE_FROM_ABI inline bool all_of(_Bool __v) noexcept { return __v; }

_LIBCPP_HIDE_FROM_ABI inline bool any_of(_Bool __v) noexcept { return __v; }

_LIBCPP_HIDE_FROM_ABI inline bool none_of(_Bool __v) noexcept { return !__v; }

_LIBCPP_HIDE_FROM_ABI inline bool some_of(_Bool) noexcept { return false; }

_LIBCPP_HIDE_FROM_ABI inline int popcount(_Bool __v) noexcept { return __v; }

_LIBCPP_HIDE_FROM_ABI inline int find_first_set(_Bool) noexcept { return 0; }

_LIBCPP_HIDE_FROM_ABI inline int find_last_set(_Bool) noexcept { return 0; }

// Where expression class templates [parallel.simd.whereexpr]
template <class _MaskType, class _SimdType>
class const_where_expression;

template <class _MaskType, class _SimdType>
class where_expression;

// where functions [parallel.simd.mask.where]
template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI where_expression<simd_mask<_Tp, _Abi>, simd<_Tp, _Abi>>
where(const typename simd<_Tp, _Abi>::mask_type& __m, simd<_Tp, _Abi>& __s) noexcept {
  return {__m, __s};
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI const_where_expression<simd_mask<_Tp, _Abi>, simd<_Tp, _Abi>>
where(const typename simd<_Tp, _Abi>::mask_type& __m, const simd<_Tp, _Abi>& __s) noexcept {
  return {__m, __s};
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI where_expression<simd_mask<_Tp, _Abi>, simd_mask<_Tp, _Abi>>
where(const __type_identity_t<simd_mask<_Tp, _Abi>>& __m, simd_mask<_Tp, _Abi>& __s) noexcept {
  return {__m, __s};
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI const_where_expression<simd_mask<_Tp, _Abi>, simd_mask<_Tp, _Abi>>
where(const __type_identity_t<simd_mask<_Tp, _Abi>>& __m, const simd_mask<_Tp, _Abi>& __s) noexcept {
  return {__m, __s};
}

template <class _Tp>
_LIBCPP_HIDE_FROM_ABI enable_if_t<!(is_simd_v<_Tp> || is_simd_mask_v<_Tp>), where_expression<bool, _Tp>> where(_Bool __m, _Tp& __s) noexcept {
  return {__m, __s};
}

template <class _Tp>
_LIBCPP_HIDE_FROM_ABI enable_if_t<!(is_simd_v<_Tp> || is_simd_mask_v<_Tp>), const_where_expression<bool, _Tp>>
where(_Bool __m, const _Tp& __s) noexcept {
  return {__m, __s};
}

template <typename _Tp, typename _Abi>
_LIBCPP_HIDE_FROM_ABI void where(bool __m, simd<_Tp, _Abi>& __v) = delete;

template <typename _Tp, typename _Abi>
_LIBCPP_HIDE_FROM_ABI void where(bool __m, const simd<_Tp, _Abi>& __v) = delete;

// Reductions [parallel.simd.reductions]
template <class _Tp, class _Abi, class _BinaryOp = plus<>>
_LIBCPP_HIDE_FROM_ABI _Tp reduce(const simd<_Tp, _Abi>& __s, _BinaryOp __binary_op = {}) {
  return __simd_traits<_Tp, _Abi>::__reduce(__s.__s_, __binary_op);
}

template <class _MaskType, class _SimdType, class _BinaryOp>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w,
       typename _SimdType::value_type __identity,
       _BinaryOp __binary_op) {
  _SimdType __tmp(__w.__s_);
  return _SimdType::_Impl::__reduce(
      _SimdType::_Impl::__masked_assign(
          __tmp.__s_, _MaskType::_Impl::__negate(__w.__m_.__s_), _SimdType::_Impl::__broadcast(__identity)),
      __binary_op);
}

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w, plus<> __binary_op = {}) noexcept {
  return std::experimental::parallelism_v2::reduce(__w, 0, __binary_op);
};

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w, multiplies<> __binary_op) noexcept {
  return std::experimental::parallelism_v2::reduce(__w, 1, __binary_op);
};

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w, bit_and<> __binary_op) noexcept {
  return std::experimental::parallelism_v2::reduce(__w, ~typename _SimdType::value_type(), __binary_op);
};

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w, bit_or<> __binary_op) noexcept {
  return std::experimental::parallelism_v2::reduce(__w, 0, __binary_op);
};

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type
reduce(const const_where_expression<_MaskType, _SimdType>& __w, bit_xor<> __binary_op) noexcept {
  return std::experimental::parallelism_v2::reduce(__w, 0, __binary_op);
};

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI _Tp hmin(const simd<_Tp, _Abi>& __s) noexcept {
  return __simd_traits<_Tp, _Abi>::__hmin(__s.__s_);
}

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type hmin(const const_where_expression<_MaskType, _SimdType>& __w) noexcept {
  _SimdType __tmp(__w.__s_);
  return _SimdType::_Impl::__hmin(_SimdType::_Impl::__masked_assign(
      __tmp.__s_,
      _MaskType::_Impl::__negate(__w.__m_.__s_),
      _SimdType::_Impl::__broadcast(std::numeric_limits<typename _SimdType::value_type>::max())));
};

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI _Tp hmax(const simd<_Tp, _Abi>& __s) noexcept {
  return __simd_traits<_Tp, _Abi>::__hmax(__s.__s_);
}

template <class _MaskType, class _SimdType>
_LIBCPP_HIDE_FROM_ABI typename _SimdType::value_type hmax(const const_where_expression<_MaskType, _SimdType>& __w) noexcept {
  _SimdType __tmp(__w.__s_);
  return _SimdType::_Impl::__hmax(_SimdType::_Impl::__masked_assign(
      __tmp.__s_,
      _MaskType::_Impl::__negate(__w.__m_.__s_),
      _SimdType::_Impl::__broadcast(numeric_limits<typename _SimdType::value_type>::lowest())));
};

// Algorithms [parallel.simd.alg]
template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI simd<_Tp, _Abi> min(const simd<_Tp, _Abi>& __a, const simd<_Tp, _Abi>& __b) noexcept {
  return __simd_traits<_Tp, _Abi>::__min(__a.__s_, __b.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI simd<_Tp, _Abi> max(const simd<_Tp, _Abi>& __a, const simd<_Tp, _Abi>& __b) noexcept {
  return __simd_traits<_Tp, _Abi>::__max(__a.__s_, __b.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI pair<simd<_Tp, _Abi>, simd<_Tp, _Abi>> minmax(const simd<_Tp, _Abi>& __a, const simd<_Tp, _Abi>& __b) noexcept {
  return __simd_traits<_Tp, _Abi>::__minmax(__a.__s_, __b.__s_);
}

template <class _Tp, class _Abi>
_LIBCPP_HIDE_FROM_ABI simd<_Tp, _Abi> clamp(const simd<_Tp, _Abi>& __v, const simd<_Tp, _Abi>& __lo, const simd<_Tp, _Abi>& __hi) noexcept {
  return __simd_traits<_Tp, _Abi>::__clamp(__v.__s_, __lo.__s_, __hi.__s_);
}

// Where expression class templates [parallel.simd.whereexpr]
template <class _MaskType, class _SimdType>
class const_where_expression {
  // TODO: check type of _MaskType and _SimdType
  template <class _Mp, class _Vp, class _BinaryOp>
  friend typename _Vp::value_type
  reduce(const const_where_expression<_Mp, _Vp>& __w, typename _Vp::value_type __identity, _BinaryOp __op);

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmin(const const_where_expression<_Mp, _Vp>& __w) noexcept;

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmax(const const_where_expression<_Mp, _Vp>& __w) noexcept;

protected:
  using _Impl = typename _SimdType::_Impl;
  const _MaskType __m_;
  _SimdType& __s_;

public:
  _LIBCPP_HIDE_FROM_ABI const_where_expression(const const_where_expression&)            = delete;
  _LIBCPP_HIDE_FROM_ABI const_where_expression& operator=(const const_where_expression&) = delete;
  _LIBCPP_HIDE_FROM_ABI const_where_expression(const _MaskType& __m, const _SimdType& __s) : __m_(__m), __s_(const_cast<_SimdType&>(__s)) {}

  _LIBCPP_HIDE_FROM_ABI _SimdType operator-() const&& noexcept {
    if constexpr (is_simd_v<_SimdType>)
      return _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__unary_minus(__s_.__s_));
    else
      return __s_;
  }
  _LIBCPP_HIDE_FROM_ABI _SimdType operator+() const&& noexcept { return __s_; }
  _LIBCPP_HIDE_FROM_ABI _SimdType operator~() const&& noexcept {
    if constexpr (is_simd_v<_SimdType>)
      return _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__bitwise_not(__s_.__s_));
    else
      return _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__negate(__s_.__s_));
  }

  template <class _Up, class _Flags>
  enable_if_t<is_simd_flag_type_v<_Flags> &&
              ((is_same_v<_Up, bool> && is_same_v<typename _SimdType::value_type, bool>) ||
               (__is_vectorizable<_Up>() && !is_same_v<typename _SimdType::value_type, bool>))>
  _LIBCPP_HIDE_FROM_ABI copy_to(_Up* __mem, _Flags) const&& {
    _SimdType __tmp;
    _Impl::__load(__tmp.__s_, _Flags::template __apply<_SimdType>(__mem));
    _Impl::__store(
        _Impl::__masked_assign(__tmp.__s_, __m_.__s_, __s_.__s_), _Flags::template __apply<_SimdType>(__mem));
  }
};

template <class _Tp>
class const_where_expression<bool, _Tp> {
  // TODO: check type of _Tp
  template <class _Mp, class _Vp, class _BinaryOp>
  friend typename _Vp::value_type
  reduce(const const_where_expression<_Mp, _Vp>& __w, typename _Vp::value_type __identity, _BinaryOp __op);

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmin(const const_where_expression<_Mp, _Vp>& __w) noexcept;

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmax(const const_where_expression<_Mp, _Vp>& __w) noexcept;

protected:
  const bool __m_;
  _Tp& __s_;

public:
  _LIBCPP_HIDE_FROM_ABI const_where_expression(const const_where_expression&)            = delete;
  _LIBCPP_HIDE_FROM_ABI const_where_expression& operator=(const const_where_expression&) = delete;
  _LIBCPP_HIDE_FROM_ABI const_where_expression(const bool __m, const _Tp& __s) : __m_(__m), __s_(const_cast<_Tp&>(__s)) {}

  _LIBCPP_HIDE_FROM_ABI _Tp operator-() const&& noexcept { return __m_ ? -__s_ : __s_; }
  _LIBCPP_HIDE_FROM_ABI _Tp operator+() const&& noexcept { return __s_; }
  _LIBCPP_HIDE_FROM_ABI _Tp operator~() const&& noexcept { return __m_ ? ~__s_ : __s_; }

  template <class _Up, class _Flags>
  enable_if_t<is_simd_flag_type_v<_Flags> &&
              ((is_same_v<_Up, bool> && is_same_v<_Tp, bool>) || (__is_vectorizable<_Up>() && !is_same_v<_Tp, bool>))>
  _LIBCPP_HIDE_FROM_ABI copy_to(_Up* __mem, _Flags) const&& {
    if (__m_)
      __mem[0] = __m_ ? __s_ : __mem[0];
  };
};

template <class _MaskType, class _SimdType>
class where_expression : public const_where_expression<_MaskType, _SimdType> {
  using _Impl = typename const_where_expression<_MaskType, _SimdType>::_Impl;
  using const_where_expression<_MaskType, _SimdType>::__m_;
  using const_where_expression<_MaskType, _SimdType>::__s_;

public:
  _LIBCPP_HIDE_FROM_ABI where_expression(const _MaskType& __m, _SimdType& __s) : const_where_expression<_MaskType, _SimdType>(__m, __s) {}

  template <class _Up>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<is_convertible_v<_Up, _SimdType>> operator=(_Up&& __v) && noexcept {
    if constexpr (is_arithmetic_v<_Up>)
      _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__broadcast(__v));
    else
      _Impl::__masked_assign(__s_.__s_, __m_.__s_, __v.__s_);
  }

#  define _LIBCXX_SIMD_MASK_OP_(__op, __name)                                                                          \
    template <class _Up>                                                                                               \
    enable_if_t<is_convertible_v<decltype(std::declval<_SimdType&>() __op std::declval<_Up>()), _SimdType>> \
    _LIBCPP_HIDE_FROM_ABI  operator __op##=(    \
        _Up&& __v)&& noexcept {                                                                                        \
      if constexpr (is_arithmetic_v<_Up>)                                                                              \
        _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__name(__s_.__s_, _Impl::__broadcast(__v)));               \
      else                                                                                                             \
        _Impl::__masked_assign(__s_.__s_, __m_.__s_, _Impl::__name(__s_.__s_, __v.__s_));                              \
    }

  _LIBCXX_SIMD_MASK_OP_(+, __plus)
  _LIBCXX_SIMD_MASK_OP_(-, __minus)
  _LIBCXX_SIMD_MASK_OP_(*, __multiplies)
  _LIBCXX_SIMD_MASK_OP_(/, __divides)
  _LIBCXX_SIMD_MASK_OP_(%, __modulus)
  _LIBCXX_SIMD_MASK_OP_(&, __bitwise_and)
  _LIBCXX_SIMD_MASK_OP_(|, __bitwise_or)
  _LIBCXX_SIMD_MASK_OP_(^, __bitwise_xor)
  _LIBCXX_SIMD_MASK_OP_(<<, __shift_left)
  _LIBCXX_SIMD_MASK_OP_(>>, __shift_right)
#  undef _LIBCXX_SIMD_MASK_OP_

  template <class _Up = void, class = decltype(++std::declval<conditional_t<true, _SimdType, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI void operator++() && noexcept {
    _SimdType __tmp = __s_;
    _Impl::__increment(__tmp.__s_);
    _Impl::__masked_assign(__s_.__s_, __m_.__s_, __tmp.__s_);
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, _SimdType, _Up>&>()++)>
  _LIBCPP_HIDE_FROM_ABI void operator++(int) && noexcept {
    _SimdType __tmp = __s_;
    _Impl::__increment(__tmp.__s_);
    _Impl::__masked_assign(__s_.__s_, __m_.__s_, __tmp.__s_);
  }

  template <class _Up = void, class = decltype(--std::declval<conditional_t<true, _SimdType, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI void operator--() && noexcept {
    _SimdType __tmp = __s_;
    _Impl::__decrement(__tmp.__s_);
    _Impl::__masked_assign(__s_.__s_, __m_.__s_, __tmp.__s_);
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, _SimdType, _Up>&>()--)>
  _LIBCPP_HIDE_FROM_ABI void operator--(int) && noexcept {
    _SimdType __tmp = __s_;
    _Impl::__decrement(__tmp.__s_);
    _Impl::__masked_assign(__s_.__s_, __m_.__s_, __tmp.__s_);
  }

  template <class _Up, class _Flags>
  enable_if_t<is_simd_flag_type_v<_Flags> &&
              ((is_same_v<_Up, bool> && is_same_v<typename _SimdType::value_type, bool>) ||
               (__is_vectorizable<_Up>() && !is_same_v<typename _SimdType::value_type, bool>))>
  _LIBCPP_HIDE_FROM_ABI copy_from(const _Up* __mem, _Flags) && {
    _SimdType __tmp;
    _Impl::__load(__tmp.__s_, _Flags::template __apply<_SimdType>(__mem));
    _Impl::__masked_assign(__s_.__s_, __m_.__s_, __tmp.__s_);
  }
};

template <class _Tp>
class where_expression<bool, _Tp> : public const_where_expression<bool, _Tp> {
  using const_where_expression<bool, _Tp>::__m_;
  using const_where_expression<bool, _Tp>::__s_;

public:
  _LIBCPP_HIDE_FROM_ABI where_expression(const bool __m, _Tp& __s) : const_where_expression<bool, _Tp>(__m, __s) {}

  template <class _Up>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<is_convertible_v<_Up, _Tp>> operator=(_Up&& __v) && noexcept {
    __s_ = __m_ ? static_cast<_Up&&>(__v) : __s_;
  }

#  define _LIBCXX_SIMD_MASK_OP_(__op)                                                                                  \
    template <class _Up>                                                                                               \
    _LIBCPP_HIDE_FROM_ABI enable_if_t<is_convertible_v<decltype(std::declval<_Tp&>() __op std::declval<_Up>()), _Tp>>  \
    operator __op##=(_Up&& __v)&& noexcept {                                                                           \
      __s_ = __m_ ? __s_ __op static_cast<_Up&&>(__v) : __s_;                                                          \
    }
  _LIBCXX_SIMD_MASK_OP_(+)
  _LIBCXX_SIMD_MASK_OP_(-)
  _LIBCXX_SIMD_MASK_OP_(*)
  _LIBCXX_SIMD_MASK_OP_(/)
  _LIBCXX_SIMD_MASK_OP_(%)
  _LIBCXX_SIMD_MASK_OP_(&)
  _LIBCXX_SIMD_MASK_OP_(|)
  _LIBCXX_SIMD_MASK_OP_(^)
  _LIBCXX_SIMD_MASK_OP_(<<)
  _LIBCXX_SIMD_MASK_OP_(>>)
#  undef _LIBCXX_SIMD_MASK_OP_

  template <class _Up = void, class = decltype(++std::declval<conditional_t<true, _Tp, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI void operator++() && noexcept {
    if (__m_)
      __s_++;
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, _Tp, _Up>&>()++)>
  _LIBCPP_HIDE_FROM_ABI void operator++(int) && noexcept {
    if (__m_)
      ++__s_;
  }

  template <class _Up = void, class = decltype(--std::declval<conditional_t<true, _Tp, _Up>&>())>
  _LIBCPP_HIDE_FROM_ABI void operator--() && noexcept {
    if (__m_)
      __s_--;
  }

  template <class _Up = void, class = decltype(std::declval<conditional_t<true, _Tp, _Up>&>()--)>
  _LIBCPP_HIDE_FROM_ABI void operator--(int) && noexcept {
    if (__m_)
      --__s_;
  }

  template <class _Up, class _Flags>
  enable_if_t<is_simd_flag_type_v<_Flags> &&
              ((is_same_v<_Up, bool> && is_same_v<_Tp, bool>) ||
               (__is_vectorizable<_Up>() && !is_same_v<_Tp, bool>))> _LIBCPP_HIDE_FROM_ABI
  copy_from(const _Up* __mem, _Flags) && {
    __s_ = __m_ ? __mem[0] : __s_;
  }
};

// Class template simd [parallel.simd.class]
template <class _Simd, class _Impl, bool>
class __simd_int_operators {};

template <class _Simd, class _Impl>
class __simd_int_operators<_Simd, _Impl, true> {
public:
  // unary operators for integral _Tp [simd.unary]
  _LIBCPP_HIDE_FROM_ABI _Simd operator~() const noexcept {
    return _Impl::__bitwise_not((*static_cast<const _Simd*>(this)).__s_);
  }

  // binary operators for integral _Tp [simd.binary]
  friend _LIBCPP_HIDE_FROM_ABI _Simd operator%(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__modulus(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator&(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__bitwise_and(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator|(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__bitwise_or(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator^(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__bitwise_xor(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator<<(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__shift_left(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator>>(const _Simd& __lhs, const _Simd& __rhs) noexcept {
    return _Impl::__shift_right(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator<<(const _Simd& __lhs, int __rhs) noexcept {
    return _Impl::__shift_left(__lhs.__s_, __rhs);
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd operator>>(const _Simd& __lhs, int __rhs) noexcept {
    return _Impl::__shift_right(__lhs.__s_, __rhs);
  }

  // compound assignment for integral _Tp [simd.cassign]

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator%=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs % __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator&=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs & __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator|=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs | __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator^=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs ^ __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator<<=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs << __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator>>=(_Simd& __lhs, const _Simd& __rhs) noexcept {
    return __lhs = __lhs >> __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator<<=(_Simd& __lhs, int __rhs) noexcept { return __lhs = __lhs << __rhs; }

  friend _LIBCPP_HIDE_FROM_ABI _Simd& operator>>=(_Simd& __lhs, int __rhs) noexcept { return __lhs = __lhs >> __rhs; }
};

template <class _Tp, class _Abi>
class simd : public __simd_int_operators<simd<_Tp, _Abi>, __simd_traits<_Tp, _Abi>, is_integral_v<_Tp>> {
  using _Impl    = __simd_traits<_Tp, _Abi>;
  using _Storage = typename _Impl::_Simd;

  _Storage __s_;

  friend class simd_mask<_Tp, _Abi>;
  friend class __simd_int_operators<simd, _Impl, true>;

  template <class _MaskType, class _SimdType>
  friend class const_where_expression;
  template <class _MaskType, class _SimdType>
  friend class where_expression;

  friend simd min<>(const simd&, const simd&) noexcept;
  friend simd max<>(const simd&, const simd&) noexcept;
  friend pair<simd, simd> minmax<>(const simd&, const simd&) noexcept;
  friend simd clamp<>(const simd&, const simd&, const simd&) noexcept;
  friend _Tp hmin<>(const simd&) noexcept;
  friend _Tp hmax<>(const simd&) noexcept;

  template <class __Tp, class __Abi, class _BinaryOp>
  friend __Tp reduce(const simd<__Tp, __Abi>&, _BinaryOp);

  template <class _Mp, class _Vp, class _BinaryOp>
  friend typename _Vp::value_type
  reduce(const const_where_expression<_Mp, _Vp>& __w, typename _Vp::value_type __identity, _BinaryOp __op);

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmin(const const_where_expression<_Mp, _Vp>& __w) noexcept;

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmax(const const_where_expression<_Mp, _Vp>& __w) noexcept;

public:
  using value_type = _Tp;
  using reference  = __simd_reference<_Tp, _Storage, value_type>;
  using mask_type  = simd_mask<_Tp, _Abi>;
  using abi_type   = _Abi;

  _LIBCPP_HIDE_FROM_ABI simd()                       = default;
  _LIBCPP_HIDE_FROM_ABI simd(const simd&)            = default;
  _LIBCPP_HIDE_FROM_ABI simd& operator=(const simd&) = default;

  _LIBCPP_HIDE_FROM_ABI simd(_Storage __s) : __s_(__s) {}

  static _LIBCPP_HIDE_FROM_ABI constexpr size_t size() noexcept { return simd_size_v<value_type, abi_type>; }

  // implicit broadcast constructor
  template <class _Up, enable_if_t<__can_broadcast<value_type, _Up>(), int> = 0>
  _LIBCPP_HIDE_FROM_ABI simd(_Up&& __v) : __s_(_Impl::__broadcast(static_cast<value_type>(__v))) {}

  // implicit type conversion constructor
  template <class _Up,
            class = std::enable_if_t<std::is_same_v<abi_type, simd_abi::fixed_size<size()>> &&
                                     __is_non_narrowing_arithmetic_convertible<_Up, value_type>()>>
  _LIBCPP_HIDE_FROM_ABI simd(const simd<_Up, simd_abi::fixed_size<size()>>& __v) {
    for (size_t __i = 0; __i < size(); __i++) {
      (*this)[__i] = static_cast<_Tp>(__v[__i]);
    }
  }

  // generator constructor
  template <class _Generator,
            enable_if_t<std::experimental::parallelism_v2::__can_generate<value_type, _Generator>(make_index_sequence<size()>()), int> = 0>
  explicit _LIBCPP_HIDE_FROM_ABI simd(_Generator&& __g) : __s_(_Impl::__generate(std::forward<_Generator>(__g))) {}

  // load constructor
  template <class _Up, class _Flags, class = enable_if_t<__is_vectorizable<_Up>() && is_simd_flag_type_v<_Flags>>>
  _LIBCPP_HIDE_FROM_ABI simd(const _Up* __mem, _Flags) {
    _Impl::__load(__s_, _Flags::template __apply<simd>(__mem));
  }

  // loads [simd.load]
  template <class _Up, class _Flags>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<__is_vectorizable<_Up>() && is_simd_flag_type_v<_Flags>>
  copy_from(const _Up* __mem, _Flags) {
    _Impl::__load(__s_, _Flags::template __apply<simd>(__mem));
  }

  // stores [simd.store]
  template <class _Up, class _Flags>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<__is_vectorizable<_Up>() && is_simd_flag_type_v<_Flags>>
  copy_to(_Up* __mem, _Flags) const {
    _Impl::__store(__s_, _Flags::template __apply<simd>(__mem));
  }

  // scalar access [simd.subscr]
  _LIBCPP_HIDE_FROM_ABI reference operator[](size_t __i) { return reference(__s_, __i); }

  _LIBCPP_HIDE_FROM_ABI value_type operator[](size_t __i) const { return __s_.__get(__i); }

  // unary operators [simd.unary]
  _LIBCPP_HIDE_FROM_ABI simd& operator++() noexcept {
    _Impl::__increment(__s_);
    return *this;
  }

  _LIBCPP_HIDE_FROM_ABI simd operator++(int) noexcept {
    simd __r = *this;
    _Impl::__increment(__s_);
    return __r;
  }

  _LIBCPP_HIDE_FROM_ABI simd& operator--() noexcept {
    _Impl::__decrement(__s_);
    return *this;
  }

  _LIBCPP_HIDE_FROM_ABI simd operator--(int) noexcept {
    simd __r = *this;
    _Impl::__decrement(__s_);
    return __r;
  }

  _LIBCPP_HIDE_FROM_ABI mask_type operator!() const noexcept { return _Impl::__negate(__s_); }

  _LIBCPP_HIDE_FROM_ABI simd operator+() const noexcept { return *this; }

  _LIBCPP_HIDE_FROM_ABI simd operator-() const noexcept { return _Impl::__unary_minus(__s_); }

  // binary operators [simd.binary]
  friend _LIBCPP_HIDE_FROM_ABI simd operator+(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__plus(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd operator-(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__minus(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd operator*(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__multiplies(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd operator/(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__divides(__lhs.__s_, __rhs.__s_);
  }

  // compound assignment [simd.cassign]
  friend _LIBCPP_HIDE_FROM_ABI simd& operator+=(simd& __lhs, const simd& __rhs) noexcept {
    return __lhs = __lhs + __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI simd& operator-=(simd& __lhs, const simd& __rhs) noexcept {
    return __lhs = __lhs - __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI simd& operator*=(simd& __lhs, const simd& __rhs) noexcept {
    return __lhs = __lhs * __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI simd& operator/=(simd& __lhs, const simd& __rhs) noexcept {
    return __lhs = __lhs / __rhs;
  }

  // compares [simd.comparison]
  friend _LIBCPP_HIDE_FROM_ABI mask_type operator==(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__equal_to(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI mask_type operator!=(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__not_equal_to(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI mask_type operator>=(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__less_equal(__rhs.__s_, __lhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI mask_type operator<=(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__less_equal(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI mask_type operator>(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__less(__rhs.__s_, __lhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI mask_type operator<(const simd& __lhs, const simd& __rhs) noexcept {
    return _Impl::__less(__lhs.__s_, __rhs.__s_);
  }
};

// Class template simd_mask [parallel.simd.mask.class]
template <class _Tp, class _Abi>
class simd_mask {
  using _Impl    = __mask_traits<_Tp, _Abi>;
  using _Storage = typename _Impl::_Mask;

  _Storage __s_;

  friend class simd<_Tp, _Abi>;

  template <class _MaskType, class _SimdType>
  friend class const_where_expression;
  template <class _MaskType, class _SimdType>
  friend class where_expression;

  template <class __Tp, class __Abi, class _BinaryOp>
  friend __Tp reduce(const simd<__Tp, __Abi>&, _BinaryOp);

  template <class _Mp, class _Vp, class _BinaryOp>
  friend typename _Vp::value_type
  reduce(const const_where_expression<_Mp, _Vp>& __w, typename _Vp::value_type __identity, _BinaryOp __op);

  friend bool all_of<>(const simd_mask&) noexcept;
  friend bool any_of<>(const simd_mask&) noexcept;
  friend bool none_of<>(const simd_mask&) noexcept;
  friend bool some_of<>(const simd_mask&) noexcept;
  friend int popcount<>(const simd_mask&) noexcept;
  friend int find_first_set<>(const simd_mask&);
  friend int find_last_set<>(const simd_mask&);

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmin(const const_where_expression<_Mp, _Vp>& __w) noexcept;

  template <class _Mp, class _Vp>
  friend typename _Vp::value_type hmax(const const_where_expression<_Mp, _Vp>& __w) noexcept;

public:
  using value_type = bool;
  using reference  = __simd_reference<_Tp, _Storage, value_type>;
  using simd_type  = simd<_Tp, _Abi>;
  using abi_type   = _Abi;

  static _LIBCPP_HIDE_FROM_ABI constexpr size_t size() noexcept { return simd_type::size(); }

  _LIBCPP_HIDE_FROM_ABI simd_mask() = default;

  _LIBCPP_HIDE_FROM_ABI simd_mask(_Storage __s) : __s_(__s) {}

  // broadcast constructor
  _LIBCPP_HIDE_FROM_ABI explicit simd_mask(value_type __v) noexcept : __s_(_Impl::__broadcast(__v)) {}

  // implicit type conversion constructor
  template <class _Up,
            std::enable_if_t<!std::is_void_v<_Up> && std::is_same_v<abi_type, simd_abi::fixed_size<size()>>, int> = 0>
  _LIBCPP_HIDE_FROM_ABI simd_mask(const simd_mask<_Up, simd_abi::fixed_size<size()>>& __v) noexcept {
    for (size_t __i = 0; __i < size(); __i++) {
      (*this)[__i] = __v[__i];
    }
  }

  // load constructor
  template <class _Flags, class = enable_if_t<is_simd_flag_type_v<_Flags>>>
  _LIBCPP_HIDE_FROM_ABI simd_mask(const value_type* __mem, _Flags) {
    _Impl::__load(__s_, _Flags::template __apply<simd_mask>(__mem));
  }

  // loads [simd.mask.copy]
  template <class _Flags>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<is_simd_flag_type_v<_Flags>> copy_from(const value_type* __mem, _Flags) {
    _Impl::__load(__s_, _Flags::template __apply<simd_mask>(__mem));
  }

  template <class _Flags>
  _LIBCPP_HIDE_FROM_ABI enable_if_t<is_simd_flag_type_v<_Flags>> copy_to(value_type* __mem, _Flags) const {
    _Impl::__store(__s_, _Flags::template __apply<simd_mask>(__mem));
  }

  // scalar access [simd.mask.subscr]
  _LIBCPP_HIDE_FROM_ABI reference operator[](size_t __i) { return reference(__s_, __i); }

  _LIBCPP_HIDE_FROM_ABI value_type operator[](size_t __i) const { return __s_.__get(__i); }

  // unary operators [simd.mask.unary]
  _LIBCPP_HIDE_FROM_ABI simd_mask operator!() const noexcept { return _Impl::__negate(__s_); }

  // simd_mask binary operators [simd.mask.binary]
  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator&&(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__logical_and(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator||(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__logical_or(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator&(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__bitwise_and(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator|(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__bitwise_or(__lhs.__s_, __rhs.__s_);
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator^(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__bitwise_xor(__lhs.__s_, __rhs.__s_);
  }

  // simd_mask compound assignment [simd.mask.cassign]
  friend _LIBCPP_HIDE_FROM_ABI simd_mask& operator&=(simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return __lhs = __lhs & __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask& operator|=(simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return __lhs = __lhs | __rhs;
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask& operator^=(simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return __lhs = __lhs ^ __rhs;
  }

  // simd_mask compares [simd.mask.comparison]
  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator==(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__negate(_Impl::__bitwise_xor(__lhs.__s_, __rhs.__s_));
  }

  friend _LIBCPP_HIDE_FROM_ABI simd_mask operator!=(const simd_mask& __lhs, const simd_mask& __rhs) noexcept {
    return _Impl::__bitwise_xor(__lhs.__s_, __rhs.__s_);
  }
};

// simd.math
template <class Abi> using scharv = simd<signed char, Abi>; // exposition only
template <class Abi> using shortv = simd<short, Abi>; // exposition only
template <class Abi> using ushortv = simd<unsigned short, Abi>; // exposition only
template <class Abi> using intv = simd<int, Abi>; // exposition only
template <class Abi> using longv = simd<long int, Abi>; // exposition only
template <class Abi> using llongv = simd<long long int, Abi>; // exposition only
template <class Abi> using int128v = simd<__int128_t, Abi>; // exposition only
template <class Abi> using floatv = simd<float, Abi>; // exposition only
template <class Abi> using doublev = simd<double, Abi>; // exposition only
template <class Abi> using ldoublev = simd<long double, Abi>; // exposition only
template <class Abi> using uintv = simd<unsigned int, Abi>; // exposition only
template <class Abi> using ulongv = simd<unsigned long, Abi>; // exposition only
template <class Abi> using ullongv = simd<unsigned long long, Abi>; // exposition only
template <class Abi> using uint128v = simd<__uint128_t, Abi>; // exposition only

template <class Abi> using boolv = simd<bool, Abi>; // exposition only

template <class T, class V> using samesize = fixed_size_simd<T, V::size()>; // exposition only

template <class Abi>
union Abi_32suf
{
    intv<Abi> i;
    uintv<Abi> u;
    floatv<Abi> f;
};

template <class Abi>
union Abi_64suf
{
    longv<Abi> i;
    ulongv<Abi> u;
    doublev<Abi> f;
};

template <class Abi>
union Abi_128suf
{
    int128v<Abi> i;
    uint128v<Abi> u;
    ldoublev<Abi> f;
};

template<typename T1, typename T2>
T1 vld1q_f(T1 x){
  return static_simd_cast<T1>(static_simd_cast<T2>(x));
}

template<typename T1, typename T2>
T2 s2v(T1 x){
  T2 xv(x);
  return xv;
}

template <class Abi>
floatv<Abi> fma(floatv<Abi> x, floatv<Abi> y, floatv<Abi> z){
  // return (x * y) + z;
  floatv<Abi> res;
  for (size_t i = 0; i < x.size(); i++)
  {
    res[i] = x[i] * y[i] + z[i];
  }
  return res;
}

template <class Abi>
doublev<Abi> fma(doublev<Abi> x, doublev<Abi> y, doublev<Abi> z){
  // return (x * y) + z;
  doublev<Abi> res;
  for (size_t i = 0; i < x.size(); i++)
  {
    res[i] = x[i] * y[i] + z[i];
  }
  return res;
}

template <class Abi>
ldoublev<Abi> fma(ldoublev<Abi> x, ldoublev<Abi> y, ldoublev<Abi> z){
  // return (x * y) + z;
  ldoublev<Abi> res;
  for (size_t i = 0; i < x.size(); i++)
  {
    res[i] = x[i] * y[i] + z[i];
  }
  return res;
}

template<typename T>
T vfmaq(T z, T x, T y){
  return z+x*y;
}

template<typename T>
T vfmsq(T z, T x, T y){
  return z-x*y;
}

template <class T1, class T2, class Abi> 
simd_mask<T2, Abi> change_simd_mask_type(simd_mask<T1, Abi> jd_i){
  int n = jd_i.size();
  bool btmp[n];
  jd_i.copy_to(&btmp[0], element_aligned);
  simd_mask<T2, Abi> jd(&btmp[0], element_aligned);
  return jd;
}

template<class Abi>
uintv<Abi> GET_DOUBLE_LO(ulongv<Abi> in)
{
  return static_simd_cast<uintv<Abi>>(in & 0xffffffffUL);;
}

template<class Abi>
uintv<Abi> GET_DOUBLE_HI(ulongv<Abi> in)
{
  return static_simd_cast<uintv<Abi>>(in >> 32);
}

template<class Abi>
ulongv<Abi> GET_LONGDOUBLE_LO(uint128v<Abi> in)
{
  return static_simd_cast<ulongv<Abi>>(in & 0xffffffffffffffffULL);
}

template<class Abi>
ulongv<Abi> GET_LONGDOUBLE_HI(uint128v<Abi> in)
{
  return static_simd_cast<ulongv<Abi>>((in >> 64) & 0xffffffffffffffffULL);
}

template <class Abi> 
ldoublev<Abi> SET_LONGDOUBLE_HI(ldoublev<Abi> x, ulongv<Abi> a){
  Abi_128suf<Abi> ux;
  ux.f = x;
  ux.u = (ux.u & ~((__uint128_t)0xffffffffffffffffUL << 64)) | (static_simd_cast<uint128v<Abi>>(a) << 64);
  return ux.f;
}

template <class Abi> 
ldoublev<Abi> SET_LONGDOUBLE_LO(ldoublev<Abi> x, ulongv<Abi> a){
  Abi_128suf<Abi> ux;
  ux.f = x;
  ux.u = (ux.u & ((__uint128_t)0xffffffffffffffffUL << 64)) | (a);
  return ux.f;
}

template<class Abi>
ushortv<Abi> GET_LONGDOUBLE_SE(uint128v<Abi> in)
{
  return static_simd_cast<ushortv<Abi>>((in >> 112) & 0xffffULL);
}


template <class Abi> 
ldoublev<Abi> SET_LONGDOUBLE_EXP(ldoublev<Abi> x, uint128v<Abi> a){
  Abi_128suf<Abi> ux;
  ux.f = x;
  ux.u = (ux.u & ~((__uint128_t)0x7fffUL << 112)) | ((a & 0x7fff) << 112);
  return ux.f;
}

// add by me

#if FLT_EVAL_METHOD==0
#define EPS FLT_EPSILON
#elif FLT_EVAL_METHOD==1
#define EPS DBL_EPSILON
#elif FLT_EVAL_METHOD==2
#define EPS LDBL_EPSILON
#endif


template <class Abi> floatv<Abi> rint(floatv<Abi> x){
  const float_t toint = 1/EPS;
  Abi_32suf<Abi> u;
  floatv<Abi> res(3);
  floatv<Abi> res0(0);
  u.f = x;
	floatv<Abi> e =  static_simd_cast<floatv<Abi>>(u.u >> 23 & 0xff);
	floatv<Abi> s =  static_simd_cast<floatv<Abi>>(u.u >> 31);

	where((e) >= 0x7f+23.0f, res) = x;
	where((s) != 0.0f, res) = x - toint + toint;
	where((s) == 0.0f, res) = x + toint - toint;
  where((s) > 0.0f, res0) = -0.0f;
	where(res == 0.0f, res) = res0;

  return res;
}

#if FLT_EVAL_METHOD==0 || FLT_EVAL_METHOD==1
#define EPSD DBL_EPSILON
#elif FLT_EVAL_METHOD==2
#define EPSD LDBL_EPSILON
#endif


template <class Abi> doublev<Abi> rint(doublev<Abi> x){
  const double_t tointd = 1/EPSD;
  Abi_64suf<Abi> u;
  doublev<Abi> res;
  doublev<Abi> res0(0);
  u.f = x;
	doublev<Abi> e = static_simd_cast<doublev<Abi>>(u.u >> 52 & 0x7ffUL);
	doublev<Abi> s = static_simd_cast<doublev<Abi>>(u.u >> 63UL);

	where(e >= (0x3ff+52.0), res) = x;
	where(s != 0.0, res) = x - tointd + tointd;
	where(s == 0.0, res) = x + tointd - tointd;
	where(s > 0.0, res0) = -0.0;
	where(res == 0.0, res) = res0;
  return res;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> rint(ldoublev<Abi> x){
  Abi_128suf<Abi> u;
  ldoublev<Abi> res;
  const ldoublev<Abi> tointd(1/LDBL_EPSILON);
  u.f = x;
	ldoublev<Abi> e = static_simd_cast<ldoublev<Abi>>(GET_LONGDOUBLE_SE(u.u) & 0x7fff);
	ldoublev<Abi> s = static_simd_cast<ldoublev<Abi>>(GET_LONGDOUBLE_SE(u.u) >> 15);

	where(e >= (0x3fff+LDBL_MANT_DIG-1), res) = x;
	where(s != 0.0, res) = x - tointd + tointd;
	where(s == 0.0, res) = x + tointd - tointd;
	where(res == 0.0, res) = 0 * x;
  return res;
}
#else
template <class Abi> ldoublev<Abi> rint(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = rint(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

#define LLVM_NAN_32F (float)(0.0 / 0.0)
#define LLVM_NAN_64F (double)(0.0 / 0.0)
#define LLVM_NAN_128F (long double)(0.0 / 0.0)

#define LLVM_INF_32F (float)(1.0 / 0.0)
#define LLVM_INF_64F (double)(1.0 / 0.0)
#define LLVM_INF_128F (long double)(1.0 / 0.0)

#define FMAF_NEON(x,y,z) vfmaq<floatv<Abi>>(z,x,y)
#define FMA_NEON(x,y,z) vfmaq<doublev<Abi>>(z,x,y)

#define  HORNER_NEON_1_(x, c, i) FMAF_NEON(c(i + 1), x, c(i))
#define  HORNER_NEON_2_(x, c, i) FMAF_NEON(HORNER_NEON_1_ (x, c, i + 1), x, c(i))
#define  HORNER_NEON_3_(x, c, i) FMAF_NEON(HORNER_NEON_2_ (x, c, i + 1), x, c(i))
#define  HORNER_NEON_4_(x, c, i) FMAF_NEON(HORNER_NEON_3_ (x, c, i + 1), x, c(i))
#define  HORNER_NEON_4(x, c) HORNER_NEON_4_ (x, c, 0)

#define  ESTRIN_NEON_1_(x,                  c, i) FMA_NEON(x,   c(1 + i),                        c(i))
#define  ESTRIN_NEON_2_(x, x2,              c, i) FMA_NEON(x2,  c(2 + i),                        ESTRIN_NEON_1_(x,              c, i))
#define  ESTRIN_NEON_3_(x, x2,              c, i) FMA_NEON(x2,  ESTRIN_NEON_1_(x,         c,  2 + i), ESTRIN_NEON_1_(x,              c, i))
#define  ESTRIN_NEON_4_(x, x2, x4,          c, i) FMA_NEON(x4,  c(4 + i),                        ESTRIN_NEON_3_(x, x2,          c, i))
#define  ESTRIN_NEON_5_(x, x2, x4,          c, i) FMA_NEON(x4,  ESTRIN_NEON_1_(x,         c,  4 + i), ESTRIN_NEON_3_(x, x2,          c, i))
#define  ESTRIN_NEON_6_(x, x2, x4,          c, i) FMA_NEON(x4,  ESTRIN_NEON_2_(x, x2,     c,  4 + i), ESTRIN_NEON_3_(x, x2,          c, i))
#define  ESTRIN_NEON_7_(x, x2, x4,          c, i) FMA_NEON(x4,  ESTRIN_NEON_3_(x, x2,     c,  4 + i), ESTRIN_NEON_3_(x, x2,          c, i))
#define  ESTRIN_NEON_8_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  c(8 + i),                        ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define  ESTRIN_NEON_9_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_1_(x,         c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_10_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_2_(x, x2,     c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_11_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_3_(x, x2,     c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_12_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_4_(x, x2, x4, c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_13_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_5_(x, x2, x4, c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_14_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_6_(x, x2, x4, c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_15_(x, x2, x4, x8,      c, i) FMA_NEON(x8,  ESTRIN_NEON_7_(x, x2, x4, c,  8 + i), ESTRIN_NEON_7_(x, x2, x4,      c, i))
#define ESTRIN_NEON_16_(x, x2, x4, x8, x16, c, i) FMA_NEON(x16, c(16 + i),                       ESTRIN_NEON_15_(x, x2, x4, x8, c, i))
#define ESTRIN_NEON_17_(x, x2, x4, x8, x16, c, i) FMA_NEON(x16, ESTRIN_NEON_1_(x,         c, 16 + i), ESTRIN_NEON_15_(x, x2, x4, x8, c, i))
#define ESTRIN_NEON_18_(x, x2, x4, x8, x16, c, i) FMA_NEON(x16, ESTRIN_NEON_2_(x, x2,     c, 16 + i), ESTRIN_NEON_15_(x, x2, x4, x8, c, i))
#define ESTRIN_NEON_19_(x, x2, x4, x8, x16, c, i) FMA_NEON(x16, ESTRIN_NEON_3_(x, x2,     c, 16 + i), ESTRIN_NEON_15_(x, x2, x4, x8, c, i))

#define  ESTRIN_NEON_1(x,                  c)  ESTRIN_NEON_1_(x,                  c, 0)
#define  ESTRIN_NEON_2(x, x2,              c)  ESTRIN_NEON_2_(x, x2,              c, 0)
#define  ESTRIN_NEON_3(x, x2,              c)  ESTRIN_NEON_3_(x, x2,              c, 0)
#define  ESTRIN_NEON_4(x, x2, x4,          c)  ESTRIN_NEON_4_(x, x2, x4,          c, 0)
#define  ESTRIN_NEON_5(x, x2, x4,          c)  ESTRIN_NEON_5_(x, x2, x4,          c, 0)
#define  ESTRIN_NEON_6(x, x2, x4,          c)  ESTRIN_NEON_6_(x, x2, x4,          c, 0)
#define  ESTRIN_NEON_7(x, x2, x4,          c)  ESTRIN_NEON_7_(x, x2, x4,          c, 0)
#define  ESTRIN_NEON_8(x, x2, x4, x8,      c)  ESTRIN_NEON_8_(x, x2, x4, x8,      c, 0)
#define  ESTRIN_NEON_9(x, x2, x4, x8,      c)  ESTRIN_NEON_9_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_10(x, x2, x4, x8,      c) ESTRIN_NEON_10_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_11(x, x2, x4, x8,      c) ESTRIN_NEON_11_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_12(x, x2, x4, x8,      c) ESTRIN_NEON_12_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_13(x, x2, x4, x8,      c) ESTRIN_NEON_13_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_14(x, x2, x4, x8,      c) ESTRIN_NEON_14_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_15(x, x2, x4, x8,      c) ESTRIN_NEON_15_(x, x2, x4, x8,      c, 0)
#define ESTRIN_NEON_16(x, x2, x4, x8, x16, c) ESTRIN_NEON_16_(x, x2, x4, x8, x16, c, 0)
#define ESTRIN_NEON_17(x, x2, x4, x8, x16, c) ESTRIN_NEON_17_(x, x2, x4, x8, x16, c, 0)
#define ESTRIN_NEON_18(x, x2, x4, x8, x16, c) ESTRIN_NEON_18_(x, x2, x4, x8, x16, c, 0)
#define ESTRIN_NEON_19(x, x2, x4, x8, x16, c) ESTRIN_NEON_19_(x, x2, x4, x8, x16, c, 0)


static const float __asinf_data[]
= {0x1.55555ep-3, 0x1.33261ap-4, 0x1.70d7dcp-5, 0x1.b059dp-6, 0x1.3af7d8p-5,};

static const double __asin_data[] = 
    {0x1.555555555554ep-3, 0x1.3333333337233p-4,  0x1.6db6db67f6d9fp-5,
  0x1.f1c71fbd29fbbp-6, 0x1.6e8b264d467d6p-6,  0x1.1c5997c357e9dp-6,
  0x1.c86a22cd9389dp-7, 0x1.856073c22ebbep-7,  0x1.fd1151acb6bedp-8,
  0x1.087182f799c1dp-6, -0x1.6602748120927p-7, 0x1.cfa0dd1f9478p-6,};

#define MASKf_sign 0x80000000
#define Top16Maskf 0xffff0000

#define ExpShift23 0x1.8p23f
#define ExpShift52 0x1.8p52
#define ExpShift112 0x1.8p112

#define Bottom15Mask 0x7fff
#define Bottom32Mask 0xffffffff

#define MaskBottom24 0xffffffffff000000
#define MaskBottom41 0xfffffe0000000000


#define ExponetBitsf 0xff
#define ExponetBasef 0x7f
#define ExponetBits 0x7ff
#define ExponetBase 0x3ff

#define __asinf_c(i)  __asinf_data[i]
#define __asin_c(i)  __asin_data[i]

#define AbsMaskf 0x7fffffffU
#define PiD2f 0x1.921fb6p+0f

#define AbsMask 0x7fffffffffffffffUL
#define PiD2 0x1.921fb54442d18p+0

#define HalfOnef_N 0x3f000000
#define HalfOne_N 0x3fe0000000000000

// sqrt
#define ExpMask 0x800fffffffffffff
#define SqrtAbsMask 0x00000000000007ff
#define SqrtSignMask 0x00000000000003fe
#define SQRT2 1.41421356237309504880

// exp
// float
#define MASKf_exp 0x7f800000U
#define MASK_exp 0x7FF0000000000000UL

#define Top54Maskf 0xfffffffffffffc00

#define ASCTH_NAN 1073741824.0F

// double
#define InvLn2_ha 92.33248261689366    // =1/ln2*64
#define Shift_ha 6755399441121216.0    //1.5000000000145377*2^52 

#define Ln2hi_ha 0.010830424696223417  //0x3f862e42fefa0000
#define Ln2lo_ha 2.572804622327669e-14 //0x3d1cf79abc9e3b3a

static const unsigned long _etab[] = {
0x0000000000000000,0x0000000000000000,
0x00002c9a3e778060,0x3cad7bbf0e03754d,
0x000059b0d3158574,0x3c8cd2523567f613,
0x0000874518759bc8,0x3c60f74e61e6c861,
0x0000b5586cf9890f,0x3c979aa65d837b6c,
0x0000e3ec32d3d1a2,0x3c3ebe3d702f9cd1,
0x00011301d0125b50,0x3ca3516e1e63bcd8,
0x0001429aaea92ddf,0x3ca4c55426f0387b,
0x000172b83c7d517a,0x3ca9515362523fb6,
0x0001a35beb6fcb75,0x3c8b898c3f1353bf,
0x0001d4873168b9aa,0x3c9aecf73e3a2f5f,
0x0002063b88628cd6,0x3c8a6f4144a6c38d,
0x0002387a6e756238,0x3c968efde3a8a894,
0x00026b4565e27cdd,0x3c80472b981fe7f2,
0x00029e9df51fdee1,0x3c82f7e16d09ab31,
0x0002d285a6e4030b,0x3c8b3782720c0ab3,
0x000306fe0a31b715,0x3c834d754db0abb6,
0x00033c08b26416ff,0x3c8fdd395dd3f84a,
0x000371a7373aa9ca,0x3ca12f8ccc187d29,
0x0003a7db34e59ff6,0x3ca7d229738b5e8b,
0x0003dea64c123422,0x3c859f48a72a4c6d,
0x0004160a21f72e29,0x3ca8b846259d9205,
0x00044e086061892d,0x3c4363ed60c2ac12,
0x000486a2b5c13cd0,0x3c6ecce1daa10379,
0x0004bfdad5362a27,0x3c7690cebb7aafb0,
0x0004f9b2769d2ca6,0x3ca083cc9b282a09,
0x0005342b569d4f81,0x3ca509b0c1aae707,
0x00056f4736b527da,0x3c93350518fdd78e,
0x0005ab07dd485429,0x3c9063e1e21c5409,
0x0005e76f15ad2148,0x3c9432e62b64c035,
0x0006247eb03a5584,0x3ca0128499f08c0a,
0x0006623882552224,0x3c99f0870073dc06,
0x0006a09e667f3bcc,0x3c998d4d0da05571,
0x0006dfb23c651a2e,0x3ca52bb986ce4786,
0x00071f75e8ec5f73,0x3ca32092206f0dab,
0x00075feb564267c8,0x3ca061228e17a7a6,
0x0007a11473eb0186,0x3ca244ac461e9f86,
0x0007e2f336cf4e62,0x3c65ebe1abd66c55,
0x00082589994cce12,0x3c96fe9fbbff67d0,
0x000868d99b4492ec,0x3c951f1414c801df,
0x0008ace5422aa0db,0x3c8db72fc1f0eab4,
0x0008f1ae99157736,0x3c7bf68359f35f44,
0x00093737b0cdc5e4,0x3ca360ba9c06283c,
0x00097d829fde4e4f,0x3c95e8d120f962aa,
0x0009c49182a3f090,0x3c71affc2b91ce27,
0x000a0c667b5de564,0x3c9b6d34589a2ebd,
0x000a5503b23e255c,0x3c95277c9ab89880,
0x000a9e6b5579fdbf,0x3c8469846e735ab3,
0x000ae89f995ad3ad,0x3c8c1a7792cb3387,
0x000b33a2b84f15fa,0x3ca22466dc2d1d96,
0x000b7f76f2fb5e46,0x3ca1112eb19505ae,
0x000bcc1e904bc1d2,0x3c74ffd70a5fddcd,
0x000c199bdd85529c,0x3c736eae30af0cb3,
0x000c67f12e57d14b,0x3c84e08fd10959ac,
0x000cb720dcef9069,0x3c676b2c6c921968,
0x000d072d4a07897b,0x3c93700936df99b3,
0x000d5818dcfba487,0x3c74a385a63d07a7,
0x000da9e603db3285,0x3c8e5a50d5c192ac,
0x000dfc97337b9b5e,0x3c98bb731c4a9792,
0x000e502ee78b3ff6,0x3c74b604603a88d3,
0x000ea4afa2a490d9,0x3c916f2792094926,
0x000efa1bee615a27,0x3c8ec3bc41aa2008,
0x000f50765b6e4540,0x3c8a64a931d185ee,
0x000fa7c1819e90d8,0x3c77893b4d91cd9d,
};

// exp2
#define ExpShift47 0x1.8p+47

static const unsigned long __exp2f_tab[] = {
    0x3ff0000000000000, 0x3fefd9b0d3158574, 0x3fefb5586cf9890f, 0x3fef9301d0125b51,
    0x3fef72b83c7d517b, 0x3fef54873168b9aa, 0x3fef387a6e756238, 0x3fef1e9df51fdee1,
    0x3fef06fe0a31b715, 0x3feef1a7373aa9cb, 0x3feedea64c123422, 0x3feece086061892d,
    0x3feebfdad5362a27, 0x3feeb42b569d4f82, 0x3feeab07dd485429, 0x3feea47eb03a5585,
    0x3feea09e667f3bcd, 0x3fee9f75e8ec5f74, 0x3feea11473eb0187, 0x3feea589994cce13,
    0x3feeace5422aa0db, 0x3feeb737b0cdc5e5, 0x3feec49182a3f090, 0x3feed503b23e255d,
    0x3feee89f995ad3ad, 0x3feeff76f2fb5e47, 0x3fef199bdd85529c, 0x3fef3720dcef9069,
    0x3fef5818dcfba487, 0x3fef7c97337b9b5f, 0x3fefa4afa2a490da, 0x3fefd0765b6e4540,
};
static const unsigned long __exp2_tab[] = {
    0x0, 0x3ff0000000000000,
    0x3c9b3b4f1a88bf6e, 0x3feff63da9fb3335,
    0xbc7160139cd8dc5d, 0x3fefec9a3e778061,
    0xbc905e7a108766d1, 0x3fefe315e86e7f85,
    0x3c8cd2523567f613, 0x3fefd9b0d3158574,
    0xbc8bce8023f98efa, 0x3fefd06b29ddf6de,
    0x3c60f74e61e6c861, 0x3fefc74518759bc8,
    0x3c90a3e45b33d399, 0x3fefbe3ecac6f383,
    0x3c979aa65d837b6d, 0x3fefb5586cf9890f,
    0x3c8eb51a92fdeffc, 0x3fefac922b7247f7,
    0x3c3ebe3d702f9cd1, 0x3fefa3ec32d3d1a2,
    0xbc6a033489906e0b, 0x3fef9b66affed31b,
    0xbc9556522a2fbd0e, 0x3fef9301d0125b51,
    0xbc5080ef8c4eea55, 0x3fef8abdc06c31cc,
    0xbc91c923b9d5f416, 0x3fef829aaea92de0,
    0x3c80d3e3e95c55af, 0x3fef7a98c8a58e51,
    0xbc801b15eaa59348, 0x3fef72b83c7d517b,
    0xbc8f1ff055de323d, 0x3fef6af9388c8dea,
    0x3c8b898c3f1353bf, 0x3fef635beb6fcb75,
    0xbc96d99c7611eb26, 0x3fef5be084045cd4,
    0x3c9aecf73e3a2f60, 0x3fef54873168b9aa,
    0xbc8fe782cb86389d, 0x3fef4d5022fcd91d,
    0x3c8a6f4144a6c38d, 0x3fef463b88628cd6,
    0x3c807a05b0e4047d, 0x3fef3f49917ddc96,
    0x3c968efde3a8a894, 0x3fef387a6e756238,
    0x3c875e18f274487d, 0x3fef31ce4fb2a63f,
    0x3c80472b981fe7f2, 0x3fef2b4565e27cdd,
    0xbc96b87b3f71085e, 0x3fef24dfe1f56381,
    0x3c82f7e16d09ab31, 0x3fef1e9df51fdee1,
    0xbc3d219b1a6fbffa, 0x3fef187fd0dad990,
    0x3c8b3782720c0ab4, 0x3fef1285a6e4030b,
    0x3c6e149289cecb8f, 0x3fef0cafa93e2f56,
    0x3c834d754db0abb6, 0x3fef06fe0a31b715,
    0x3c864201e2ac744c, 0x3fef0170fc4cd831,
    0x3c8fdd395dd3f84a, 0x3feefc08b26416ff,
    0xbc86a3803b8e5b04, 0x3feef6c55f929ff1,
    0xbc924aedcc4b5068, 0x3feef1a7373aa9cb,
    0xbc9907f81b512d8e, 0x3feeecae6d05d866,
    0xbc71d1e83e9436d2, 0x3feee7db34e59ff7,
    0xbc991919b3ce1b15, 0x3feee32dc313a8e5,
    0x3c859f48a72a4c6d, 0x3feedea64c123422,
    0xbc9312607a28698a, 0x3feeda4504ac801c,
    0xbc58a78f4817895b, 0x3feed60a21f72e2a,
    0xbc7c2c9b67499a1b, 0x3feed1f5d950a897,
    0x3c4363ed60c2ac11, 0x3feece086061892d,
    0x3c9666093b0664ef, 0x3feeca41ed1d0057,
    0x3c6ecce1daa10379, 0x3feec6a2b5c13cd0,
    0x3c93ff8e3f0f1230, 0x3feec32af0d7d3de,
    0x3c7690cebb7aafb0, 0x3feebfdad5362a27,
    0x3c931dbdeb54e077, 0x3feebcb299fddd0d,
    0xbc8f94340071a38e, 0x3feeb9b2769d2ca7,
    0xbc87deccdc93a349, 0x3feeb6daa2cf6642,
    0xbc78dec6bd0f385f, 0x3feeb42b569d4f82,
    0xbc861246ec7b5cf6, 0x3feeb1a4ca5d920f,
    0x3c93350518fdd78e, 0x3feeaf4736b527da,
    0x3c7b98b72f8a9b05, 0x3feead12d497c7fd,
    0x3c9063e1e21c5409, 0x3feeab07dd485429,
    0x3c34c7855019c6ea, 0x3feea9268a5946b7,
    0x3c9432e62b64c035, 0x3feea76f15ad2148,
    0xbc8ce44a6199769f, 0x3feea5e1b976dc09,
    0xbc8c33c53bef4da8, 0x3feea47eb03a5585,
    0xbc845378892be9ae, 0x3feea34634ccc320,
    0xbc93cedd78565858, 0x3feea23882552225,
    0x3c5710aa807e1964, 0x3feea155d44ca973,
    0xbc93b3efbf5e2228, 0x3feea09e667f3bcd,
    0xbc6a12ad8734b982, 0x3feea012750bdabf,
    0xbc6367efb86da9ee, 0x3fee9fb23c651a2f,
    0xbc80dc3d54e08851, 0x3fee9f7df9519484,
    0xbc781f647e5a3ecf, 0x3fee9f75e8ec5f74,
    0xbc86ee4ac08b7db0, 0x3fee9f9a48a58174,
    0xbc8619321e55e68a, 0x3fee9feb564267c9,
    0x3c909ccb5e09d4d3, 0x3feea0694fde5d3f,
    0xbc7b32dcb94da51d, 0x3feea11473eb0187,
    0x3c94ecfd5467c06b, 0x3feea1ed0130c132,
    0x3c65ebe1abd66c55, 0x3feea2f336cf4e62,
    0xbc88a1c52fb3cf42, 0x3feea427543e1a12,
    0xbc9369b6f13b3734, 0x3feea589994cce13,
    0xbc805e843a19ff1e, 0x3feea71a4623c7ad,
    0xbc94d450d872576e, 0x3feea8d99b4492ed,
    0x3c90ad675b0e8a00, 0x3feeaac7d98a6699,
    0x3c8db72fc1f0eab4, 0x3feeace5422aa0db,
    0xbc65b6609cc5e7ff, 0x3feeaf3216b5448c,
    0x3c7bf68359f35f44, 0x3feeb1ae99157736,
    0xbc93091fa71e3d83, 0x3feeb45b0b91ffc6,
    0xbc5da9b88b6c1e29, 0x3feeb737b0cdc5e5,
    0xbc6c23f97c90b959, 0x3feeba44cbc8520f,
    0xbc92434322f4f9aa, 0x3feebd829fde4e50,
    0xbc85ca6cd7668e4b, 0x3feec0f170ca07ba,
    0x3c71affc2b91ce27, 0x3feec49182a3f090,
    0x3c6dd235e10a73bb, 0x3feec86319e32323,
    0xbc87c50422622263, 0x3feecc667b5de565,
    0x3c8b1c86e3e231d5, 0x3feed09bec4a2d33,
    0xbc91bbd1d3bcbb15, 0x3feed503b23e255d,
    0x3c90cc319cee31d2, 0x3feed99e1330b358,
    0x3c8469846e735ab3, 0x3feede6b5579fdbf,
    0xbc82dfcd978e9db4, 0x3feee36bbfd3f37a,
    0x3c8c1a7792cb3387, 0x3feee89f995ad3ad,
    0xbc907b8f4ad1d9fa, 0x3feeee07298db666,
    0xbc55c3d956dcaeba, 0x3feef3a2b84f15fb,
    0xbc90a40e3da6f640, 0x3feef9728de5593a,
    0xbc68d6f438ad9334, 0x3feeff76f2fb5e47,
    0xbc91eee26b588a35, 0x3fef05b030a1064a,
    0x3c74ffd70a5fddcd, 0x3fef0c1e904bc1d2,
    0xbc91bdfbfa9298ac, 0x3fef12c25bd71e09,
    0x3c736eae30af0cb3, 0x3fef199bdd85529c,
    0x3c8ee3325c9ffd94, 0x3fef20ab5fffd07a,
    0x3c84e08fd10959ac, 0x3fef27f12e57d14b,
    0x3c63cdaf384e1a67, 0x3fef2f6d9406e7b5,
    0x3c676b2c6c921968, 0x3fef3720dcef9069,
    0xbc808a1883ccb5d2, 0x3fef3f0b555dc3fa,
    0xbc8fad5d3ffffa6f, 0x3fef472d4a07897c,
    0xbc900dae3875a949, 0x3fef4f87080d89f2,
    0x3c74a385a63d07a7, 0x3fef5818dcfba487,
    0xbc82919e2040220f, 0x3fef60e316c98398,
    0x3c8e5a50d5c192ac, 0x3fef69e603db3285,
    0x3c843a59ac016b4b, 0x3fef7321f301b460,
    0xbc82d52107b43e1f, 0x3fef7c97337b9b5f,
    0xbc892ab93b470dc9, 0x3fef864614f5a129,
    0x3c74b604603a88d3, 0x3fef902ee78b3ff6,
    0x3c83c5ec519d7271, 0x3fef9a51fbc74c83,
    0xbc8ff7128fd391f0, 0x3fefa4afa2a490da,
    0xbc8dae98e223747d, 0x3fefaf482d8e67f1,
    0x3c8ec3bc41aa2008, 0x3fefba1bee615a27,
    0x3c842b94c3a9eb32, 0x3fefc52b376bba97,
    0x3c8a64a931d185ee, 0x3fefd0765b6e4540,
    0xbc8e37bae43be3ed, 0x3fefdbfdad9cbe14,
    0x3c77893b4d91cd9d, 0x3fefe7c1819e90d8,
    0x3c5305c14160cc89, 0x3feff3c22b8f71f1,
};

static const long double __expl_table [] = {
 -3.47656250000000000584188889839535373E-01L, /* bffd640000000000002b1b04213cf000 */
  6.90417668990715641167244540876988960E-32L, /* 3f97667c3fdb588a6ae1af8748357a17 */
 -3.43749999999999981853132895957607418E-01L, /* bffd5ffffffffffffac4ff5f4050b000 */
 -7.16021898043268093462818380603370350E-33L, /* bf94296c8219427edc1431ac2498583e */
 -3.39843750000000013418643523138766329E-01L, /* bffd5c000000000003de1f027a30e000 */
  8.16920774283317801641347327589583265E-32L, /* 3f97a82b65774bdca1b4440d749ed8d3 */
 -3.35937500000000014998092453039303051E-01L, /* bffd5800000000000452a9f4d8857000 */
 -6.55865578425428447938248396879359670E-32L, /* bf97548b7d240f3d034b395e6eecfac8 */
 -3.32031250000000000981984049529998541E-01L, /* bffd540000000000004875277cda5000 */
  6.91213046334032232108944519541512737E-32L, /* 3f9766e5f925338a19045c94443b66e1 */
 -3.28124999999999986646017645350399708E-01L, /* bffd4ffffffffffffc26a667bf44d000 */
 -6.16281060996110316602421505683742661E-32L, /* bf973ffdcdcffb6fbffc86b2b8d42f5d */
 -3.24218749999999991645717430645867963E-01L, /* bffd4bfffffffffffd97901063e48000 */
 -7.90797211087760527593856542417304137E-32L, /* bf979a9afaaca1ada6a8ed1c80584d60 */
 -3.20312499999999998918211610690789652E-01L, /* bffd47ffffffffffffb02d9856d71000 */
  8.64024799457616856987630373786503376E-32L, /* 3f97c0a098623f95579d5d9b2b67342d */
 -3.16406249999999998153974811017181883E-01L, /* bffd43ffffffffffff77c991f1076000 */
 -2.73176610180696076418536105483668404E-32L, /* bf961baeccb32f9b1fcbb8e60468e95a */
 -3.12500000000000011420976192575972779E-01L, /* bffd400000000000034ab8240483d000 */
  7.16573502812389453744433792609989420E-32L, /* 3f977410f4c2cfc4335f28446c0fb363 */
 -3.08593750000000001735496343854851414E-01L, /* bffd3c000000000000800e995c176000 */
 -1.56292999645122272621237565671593071E-32L, /* bf95449b9cbdaff6ac1246adb2c826ac */
 -3.04687499999999982592401295899221626E-01L, /* bffd37fffffffffffafb8bc1e061a000 */
  6.48993208584888904958594509625158417E-32L, /* 3f9750f9fe8366d82d77afa0031a92e1 */
 -3.00781249999999999230616898937763959E-01L, /* bffd33ffffffffffffc73ac39da54000 */
  6.57082437496961397305801409357792029E-32L, /* 3f97552d3cb598ea80135cf3feb27ec4 */
 -2.96874999999999998788769281703245722E-01L, /* bffd2fffffffffffffa6a07fa5021000 */
 -3.26588297198283968096426564544269170E-32L, /* bf9653260fc1802f46b629aee171809b */
 -2.92968750000000015318089182805941695E-01L, /* bffd2c0000000000046a468614bd6000 */
 -1.73291974845198589684358727559290718E-32L, /* bf9567e9d158f52e483c8d8dcb5961dd */
 -2.89062500000000007736778942676309681E-01L, /* bffd280000000000023adf9f4c3d3000 */
 -6.83629745986675744404029225571026236E-32L, /* bf9762f5face6281c1daf1c6aedbdb45 */
 -2.85156250000000001367091555763661937E-01L, /* bffd2400000000000064dfa11e3fb000 */
 -5.44898442619766878281110054067026237E-32L, /* bf971aed6d2db9f542986a785edae072 */
 -2.81249999999999986958718100227029406E-01L, /* bffd1ffffffffffffc3db9265ca9d000 */
  1.13007318374506125723591889451107046E-32L, /* 3f94d569fe387f456a97902907ac3856 */
 -2.77343750000000000356078829380495179E-01L, /* bffd1c0000000000001a462390083000 */
 -4.98979365468978332358409063436543102E-32L, /* bf970315bbf3e0d14b5c94c900702d4c */
 -2.73437499999999990276993957508540484E-01L, /* bffd17fffffffffffd32919bcdc94000 */
 -8.79390484115892344533724650295100871E-32L, /* bf97c89b0b89cc19c3ab2b60da9bbbc3 */
 -2.69531250000000002434203866460082225E-01L, /* bffd14000000000000b39ccf9e130000 */
  9.44060754687026590886751809927191596E-32L, /* 3f97ea2f32cfecca5c64a26137a9210f */
 -2.65624999999999997296320716986257179E-01L, /* bffd0fffffffffffff3880f13a2bc000 */
  2.07142664067265697791007875348396921E-32L, /* 3f95ae37ee685b9122fbe377bd205ee4 */
 -2.61718750000000010237478733739017956E-01L, /* bffd0c000000000002f3648179d40000 */
 -6.10552936159265665298996309192680256E-32L, /* bf973d0467d31e407515a3cca0f3b4e2 */
 -2.57812500000000011948220522778370303E-01L, /* bffd08000000000003719f81275bd000 */
  6.72477169058908902499239631466443836E-32L, /* 3f975d2b8c475d3160cf72d227d8e6f9 */
 -2.53906249999999991822993360536596860E-01L, /* bffd03fffffffffffda4a4b62f818000 */
 -2.44868296623215865054704392917190994E-32L, /* bf95fc92516c6d057d29fc2528855976 */
 -2.49999999999999986862019457428548084E-01L, /* bffcfffffffffffff86d2d20d5ff4000 */
 -3.85302898949105073614122724961613078E-32L, /* bf96901f147cb7d643af71b6129ce929 */
 -2.46093750000000000237554160737318435E-01L, /* bffcf8000000000000230e8ade26b000 */
 -1.52823675242678363494345369284988589E-32L, /* bf953d6700c5f3fc303f79d0ec8c680a */
 -2.42187500000000003023380963205457065E-01L, /* bffcf0000000000001be2c1a78bb0000 */
 -7.78402037952209709489481182714311699E-34L, /* bf9102ab1f3998e887f0ee4cf940faa5 */
 -2.38281249999999995309623303145485725E-01L, /* bffce7fffffffffffd4bd2940f43f000 */
 -3.54307216794236899443913216397197696E-32L, /* bf966fef03ab69c3f289436205b21d02 */
 -2.34374999999999998425804947623207526E-01L, /* bffcdfffffffffffff17b097a6092000 */
 -2.86038428948386602859761879407549696E-32L, /* bf96290a0eba0131efe3a05fe188f2e3 */
 -2.30468749999999993822207406785200832E-01L, /* bffcd7fffffffffffc70519834eae000 */
 -2.54339521031747516806893838749365762E-32L, /* bf96081f0ad7f9107ae6cddb32c178ab */
 -2.26562499999999997823524030344489884E-01L, /* bffccffffffffffffebecf10093df000 */
  4.31904611473158635644635628922959401E-32L, /* 3f96c083f0b1faa7c4c686193e38d67c */
 -2.22656250000000004835132405125162742E-01L, /* bffcc8000000000002c98a233f19f000 */
  2.54709791629335691650310168420597566E-33L, /* 3f92a735903f5eed07a716ab931e20d9 */
 -2.18749999999999988969454021829236626E-01L, /* bffcbffffffffffff9a42dc14ce36000 */
 -3.77236096429336082213752014054909454E-32L, /* bf9687be8e5b2fca54d3e81157eac660 */
 -2.14843750000000010613256919115758495E-01L, /* bffcb80000000000061e3d828ecac000 */
 -4.55194148712216691177097854305964738E-32L, /* bf96d8b35c776aa3e1a4768271380503 */
 -2.10937499999999993204656148110447201E-01L, /* bffcaffffffffffffc152f2aea118000 */
 -2.95044199165561453749332254271716417E-32L, /* bf96326433b00b2439094d9bef22ddd1 */
 -2.07031250000000012233944895423355677E-01L, /* bffca80000000000070d695ee0e94000 */
  1.93146788688385419095981415411012357E-32L, /* 3f959126729135a5e390d4bb802a0bde */
 -2.03125000000000008030983633336321863E-01L, /* bffca0000000000004a129fbc51af000 */
  2.37361904671826193563212931215900137E-32L, /* 3f95ecfb3c4ba1b97ea3ad45cbb1e68a */
 -1.99218750000000001763815712796132779E-01L, /* bffc98000000000001044b12d9950000 */
 -3.63171243370923753295192486732883239E-33L, /* bf932db5fb3f27c38e0fa7bbcfc64f55 */
 -1.95312500000000004883660234506677272E-01L, /* bffc90000000000002d0b3779d1f9000 */
 -3.19989507343607877747980892249711601E-33L, /* bf9309d63de96bb3ef744c865f22f1bd */
 -1.91406250000000013720152363227519348E-01L, /* bffc88000000000007e8bcb387121000 */
 -1.89295754093147174148371614722178860E-32L, /* bf958926e2e67dfe812c508290add2e7 */
 -1.87500000000000000182342082774432620E-01L, /* bffc800000000000001ae8b06a39f000 */
 -2.96812835183184815200854214892983927E-32L, /* bf96343a62d156bbe71f55d14ca4b6e5 */
 -1.83593750000000012410147185883290345E-01L, /* bffc78000000000007276a1adda8d000 */
 -2.02191931237489669058466239995304587E-32L, /* bf95a3efab92d26ec2df90df036a117f */
 -1.79687499999999997439177363346082917E-01L, /* bffc6ffffffffffffe8616db2927d000 */
 -9.92752326937775530007399526834009465E-33L, /* bf949c5f88ed17041e1a3f1829d543cd */
 -1.75781249999999995824373974504785174E-01L, /* bffc67fffffffffffd97c94f13ea3000 */
  1.44184772065335613487885714828816178E-32L, /* 3f952b75c63476e7fcc2f5841c27bcce */
 -1.71874999999999986685050259043077809E-01L, /* bffc5ffffffffffff8530f6bc531a000 */
 -3.49007014971241147689894940544402482E-32L, /* bf966a6dfaa012aea8ffe6d90b02330f */
 -1.67968749999999997316058782350439701E-01L, /* bffc57fffffffffffe73eb914f2aa000 */
  3.34025733574205019081305778794376391E-32L, /* 3f965adf4572561fd5456a6c13d8babf */
 -1.64062499999999993322730602128318480E-01L, /* bffc4ffffffffffffc269be4f68f3000 */
 -1.83345916769684984022099095506340635E-32L, /* bf957ccb69026cb2f6024c211576d5f4 */
 -1.60156249999999992419000744447607979E-01L, /* bffc47fffffffffffba13df21784a000 */
  2.73442789798110494773517431626534726E-32L, /* 3f961bf58ff22c9b30f1e2b39f26d7d5 */
 -1.56249999999999987665010524130393080E-01L, /* bffc3ffffffffffff8e3ad45e7508000 */
  2.02695576464836145806428118889332191E-32L, /* 3f95a4fb7435a4a2f71de81eb8ae75d1 */
 -1.52343749999999989905291167951491803E-01L, /* bffc37fffffffffffa2e48aecfc24000 */
 -3.61436631548815190395331054871041524E-32L, /* bf967756567ebd108075ae527cc2e7f0 */
 -1.48437500000000006686107754967759751E-01L, /* bffc30000000000003dab20261b3c000 */
 -2.15524270159131591469319477922198390E-32L, /* bf95bfa05b82ef3a708c4f0395e9fcf6 */
 -1.44531250000000005132889939177166485E-01L, /* bffc28000000000002f57b1969e7b000 */
  2.74741116529653547935086189244019604E-32L, /* 3f961d4eb77c1185d34fe1b04a3f3cf5 */
 -1.40625000000000000707469094533647325E-01L, /* bffc2000000000000068676d3d5c4000 */
  4.40607097220049957013547629906723266E-33L, /* 3f936e0ac425daf795b42913cf0ef881 */
 -1.36718749999999995713752139187543306E-01L, /* bffc17fffffffffffd87762255991000 */
 -3.73751317180116492404578048203389108E-32L, /* bf9684202491e9cbb7ceb67d9ff7e0c9 */
 -1.32812500000000007198453630478482191E-01L, /* bffc10000000000004264de3a4379000 */
 -3.97050085179660203884930593717220728E-32L, /* bf969c52048de14be3c9c1971e50869c */
 -1.28906250000000006070486371645733082E-01L, /* bffc080000000000037fd87db2cb0000 */
  3.59610068058504988294019521946586131E-32L, /* 3f967570c10687cb8e9ebd0b280abf5a */
 -1.25000000000000003700729208608337966E-01L, /* bffc00000000000002222198bbc74000 */
  3.23464851393124362331846965931995969E-33L, /* 3f930cb95da3bfc847e593716c91d57a */
 -1.21093750000000013729038501177102555E-01L, /* bffbf000000000000fd418d1f5fda000 */
  2.45242487730722066611358741283977619E-32L, /* 3f95fd5945ad86a464292e26ac192a84 */
 -1.17187499999999999765305306880205578E-01L, /* bffbdfffffffffffffbabaf869845000 */
 -1.14557520298960389903199646350205537E-32L, /* bf94dbda735322179d9bcf392e1dd06d */
 -1.13281250000000009579647893740755690E-01L, /* bffbd000000000000b0b69bae7ab9000 */
  2.37873962873837390105423621772752350E-32L, /* 3f95ee0b7e0bd5ac1f6fab1e2a71abc3 */
 -1.09375000000000008981153004560108539E-01L, /* bffbc000000000000a5ac4bc1d2c3000 */
  1.53152444860014076105003555837231015E-32L, /* 3f953e15ce931e12ef9a152522e32bdd */
 -1.05468749999999992399063850363228723E-01L, /* bffbaffffffffffff73c998091408000 */
 -8.75920903597804862471749360196688834E-33L, /* bf946bd7e310a01bae5687ebdc47fcc5 */
 -1.01562500000000007685885179918350550E-01L, /* bffba0000000000008dc7910a648c000 */
 -4.63820993797174451904075397785059501E-33L, /* bf938153d0e54001a472da180fb5e8aa */
 -9.76562499999999887262211517861331814E-02L, /* bffb8ffffffffffff300915aa6fd6000 */
 -2.63767025974952608658936466715705903E-33L, /* bf92b64215bb8d520be5404620d38088 */
 -9.37499999999999939650246024457439795E-02L, /* bffb7ffffffffffff90aca26bd0fc000 */
 -1.72047822349322956713582039121348377E-32L, /* bf9565545015c5b9b56d02cfefca2c7d */
 -8.98437500000000033088896383977486369E-02L, /* bffb70000000000003d09ca1e3cbe000 */
  3.04831994420989436248526129869697270E-33L, /* 3f92fa7d30d2ed90e7ebbd6231fd08b1 */
 -8.59374999999999947312400115121319225E-02L, /* bffb5ffffffffffff9ecefc03376e000 */
  1.50416954438393392150792422537312281E-32L, /* 3f9538675ee99bd722fad0023c09c915 */
 -8.20312500000000054182280847004695514E-02L, /* bffb500000000000063f2dbd40200000 */
  2.68399664523430004488075638997207289E-33L, /* 3f92bdf49766629882c49a3da88928ed */
 -7.81250000000000114767533968079748798E-02L, /* bffb4000000000000d3b56f81ba70000 */
  1.72318124201659121296305402819694281E-32L, /* 3f9565e407aaabfb359e8a567d760de3 */
 -7.42187500000000035531829472486812869E-02L, /* bffb3000000000000418b6e9b5388000 */
  2.09401756478514117051383998628099655E-32L, /* 3f95b2e91221fcd74be0a86d8ad658d2 */
 -7.03124999999999987474933134860732535E-02L, /* bffb1ffffffffffffe8e53453d2ac000 */
  2.28515798224350800271565551341211666E-32L, /* 3f95da9bd6adf00894f05b5cc5530125 */
 -6.64062500000000042267533361089054159E-02L, /* bffb10000000000004df8473dbcf2000 */
  1.97576478800281368377376002585430031E-32L, /* 3f959a59acbddb2f53bd3096b66370e9 */
 -6.25000000000000066329769382774201686E-02L, /* bffb00000000000007a5b5914e336000 */
 -1.46422615813786836245343723048221678E-33L, /* bf91e69295f069fc0c4a9db181ea25a3 */
 -5.85937500000000002823707957982406053E-02L, /* bffae0000000000000a6aeab10592000 */
  9.25637741701318872896718218457555829E-33L, /* 3f94807eb021f1f40a37d4015b1eb76b */
 -5.46875000000000081586888005226044448E-02L, /* bffac0000000000012d00a3171e3a000 */
 -4.87144542459404765480424673678105050E-33L, /* bf9394b42faba6b7036fe7b36269daf3 */
 -5.07812499999999927720348253140567013E-02L, /* bffa9fffffffffffef555cc8dd914000 */
 -3.01901021987395945826043649523451725E-33L, /* bf92f59e7e3025691f290f8f67277faf */
 -4.68749999999999935349476738962633103E-02L, /* bffa7ffffffffffff117b4ea2b876000 */
  1.21521638219189777347767475937119750E-32L, /* 3f94f8c7f88c5b56674b94d984ac8ecb */
 -4.29687500000000056305562847814228219E-02L, /* bffa6000000000000cfbb19be30c0000 */
 -1.18643699217679276275559592978275214E-32L, /* bf94ecd39f0833a876550e83eb012b99 */
 -3.90624999999999962692914526031373542E-02L, /* bffa3ffffffffffff765c743922f9000 */
 -4.91277156857520035712509544689973679E-33L, /* bf939823189996193872e58ac0dececb */
 -3.51562500000000108152468207687602886E-02L, /* bffa20000000000018f031e41177f000 */
  1.18599806302656253755207072755609820E-32L, /* 3f94eca4f23e787fab73ce8f6b9b8d64 */
 -3.12500000000000077376981036742289578E-02L, /* bffa00000000000011d787e0b386f000 */
  9.97730386477005171963635210799577079E-33L, /* 3f949e70e498c46a0173ac0d46c699fc */
 -2.73437500000000139436129596418623235E-02L, /* bff9c00000000000404db66e70a08000 */
  2.25755321633070123579875157841633859E-33L, /* 3f927719b1a93074bdf9f3c2cb784785 */
 -2.34375000000000088003629211828324876E-02L, /* bff98000000000002895a27d45feb000 */
  2.84374279216848803102126617873942975E-33L, /* 3f92d87f70e749d6da6c260b68dc210b */
 -1.95312500000000107408831063404855424E-02L, /* bff9400000000000318898ba69f71000 */
  2.47348089686935458989103979140011912E-33L, /* 3f929afa3de45086fe909fdddb41edce */
 -1.56250000000000081443917555362290635E-02L, /* bff9000000000000258f335e9cdd6000 */
 -2.43379314483517422161458863218426254E-33L, /* bf9294621c8a9ccacf2b020ec19cad27 */
 -1.17187500000000051490597418161403184E-02L, /* bff88000000000002f7ddfa26221f000 */
  1.83405297208145390679150568810924707E-33L, /* 3f9230bbfc5d5fe1b534fbcda0465bb9 */
 -7.81249999999999715861805208310174953E-03L, /* bff7ffffffffffffcb95f3fff157d000 */
  3.51548384878710915171654413641872451E-34L, /* 3f8fd349b76c22966f77a39fc37ed704 */
 -3.90625000000000309326013918295097128E-03L, /* bff7000000000000390f820c8e153000 */
  6.38058004651791109324060099097251911E-36L, /* 3f8a0f665d3ac25a1ac94d688273dbcd */
#define T_EXPL_ARG1 (2*89)
  0.00000000000000000000000000000000000E+00L, /* 00000000000000000000000000000000 */
  0.00000000000000000000000000000000000E+00L, /* 00000000000000000000000000000000 */
  3.90625000000000245479958859972588985E-03L, /* 3ff70000000000002d48769ac9874000 */
 -6.58439598384342854976169982902779828E-36L, /* bf8a1811b923e6c626b07ef29761482a */
  7.81250000000001311374391093664996358E-03L, /* 3ff800000000000078f3f3cd89111000 */
  2.60265650555493781464273319671555602E-33L, /* 3f92b070c3b635b87af426735a71fc87 */
  1.17187500000000269581156218247101912E-02L, /* 3ff8800000000000f8a50d02fe20d000 */
  1.00961747974945520631836275894919326E-33L, /* 3f914f80c1a4f8042044fe3b757b030b */
  1.56249999999999797878275270751825475E-02L, /* 3ff8ffffffffffff45935b69da62e000 */
  2.03174577741375590087897353146748580E-33L, /* 3f925194e863496e0f6e91cbf6b22e26 */
  1.95312499999999760319884511789111533E-02L, /* 3ff93fffffffffff917790ff9a8f4000 */
  4.62788519658803722282100289809515007E-33L, /* 3f9380783ba81295feeb3e4879d7d52d */
  2.34374999999999822953909016349145918E-02L, /* 3ff97fffffffffffae5a163bd3cd5000 */
 -3.19499956304699705390404384504876533E-33L, /* bf93096e2037ced8194cf344c692f8d6 */
  2.73437500000000137220327275871555682E-02L, /* 3ff9c000000000003f481dea5dd51000 */
 -2.25757776523031994464630107442723424E-33L, /* bf92771abcf988a02b414bf2614e3734 */
  3.12499999999999790857640618332718621E-02L, /* 3ff9ffffffffffff9f8cd40b51509000 */
 -4.22479470489989916319395454536511458E-33L, /* bf935efb7245612f371deca17cb7b30c */
  3.51562499999999840753382405747597346E-02L, /* 3ffa1fffffffffffdb47bd275f722000 */
  1.08459658374118041980976756063083500E-34L, /* 3f8e2055d18b7117c9db1c318b1e889b */
  3.90624999999999989384433621470426757E-02L, /* 3ffa3ffffffffffffd8d5e18b042e000 */
 -7.41674226146122000759491297811091830E-33L, /* bf94341454e48029e5b0205d91baffdc */
  4.29687500000000107505739500500200462E-02L, /* 3ffa60000000000018ca04cd9085c000 */
 -4.74689012756713017494437969420919847E-34L, /* bf903b7c268103c6f7fbaaa24142e287 */
  4.68749999999999978700749928325717352E-02L, /* 3ffa7ffffffffffffb16b6d5479e3000 */
 -1.06208165308448830117773486334902917E-32L, /* bf94b92be4b3b5b5a596a0a5187cc955 */
  5.07812499999999815072625435955786253E-02L, /* 3ffa9fffffffffffd55bd086d5cbc000 */
 -9.37038897148383660401929567549111394E-33L, /* bf94853b111b0175b491c80d00419416 */
  5.46874999999999809511553152189867394E-02L, /* 3ffabfffffffffffd4138bfa74a61000 */
  1.06642963074562437340498606682822123E-32L, /* 3f94bafa3fe991b39255d563dfa05d89 */
  5.85937500000000184331996330905145551E-02L, /* 3ffae000000000002a810a5f2f8bf000 */
 -1.76639977694797200820296641773791945E-34L, /* bf8ed596f07ce4408f1705c8ec16864c */
  6.25000000000000021544696744852045001E-02L, /* 3ffb000000000000027be32045e2b000 */
  1.68616371995798354366633034788947149E-32L, /* 3f955e33d7440794d8a1b25233d086ab */
  6.64062499999999965563110718495802889E-02L, /* 3ffb0ffffffffffffc079a38a3fed000 */
 -1.82463217667830160048872113565316215E-32L, /* bf957af6163bcdb97cefab44a942482a */
  7.03124999999999759989183341261898222E-02L, /* 3ffb1fffffffffffe454218acea05000 */
 -1.07843770101525495515646940862541503E-32L, /* bf94bff72aada26d94e76e71c07e0580 */
  7.42187499999999898968873730710101412E-02L, /* 3ffb2ffffffffffff45a166496dc1000 */
  1.28629441689592874462780757154138223E-32L, /* 3f950b2724597b8b93ce1e9d1cf4d035 */
  7.81249999999999957198938523510804668E-02L, /* 3ffb3ffffffffffffb10bc52adbc5000 */
  1.13297573459968118467100063135856856E-33L, /* 3f91787eea895b3c245899cf34ad0abd */
  8.20312500000000199911640621145851159E-02L, /* 3ffb500000000000170c59a661a89000 */
 -1.51161335208135146756554123073528707E-32L, /* bf9539f326c5ca84e7db5401566f3775 */
  8.59375000000000134175373433347670743E-02L, /* 3ffb6000000000000f78287547af0000 */
  1.09763629458404270323909815379924900E-32L, /* 3f94c7f0b61b6e3e27d44b9f5bbc7e9d */
  8.98437500000000036533922600308306335E-02L, /* 3ffb70000000000004364a83b7a14000 */
  3.11459653680110433194288029777718358E-33L, /* 3f9302c0248136d65cebeab69488d949 */
  9.37500000000000184977946245216914691E-02L, /* 3ffb800000000000155395d870b17000 */
 -4.66656154468277949130395786965043927E-33L, /* bf9383aec9b993b6db492b1ede786d8a */
  9.76562500000000237839723100419376084E-02L, /* 3ffb9000000000001b6bca237f6c4000 */
 -1.03028043424658760249140747856831301E-32L, /* bf94abf6352e3d2bb398e47919a343fb */
  1.01562500000000012345545575236836572E-01L, /* 3ffba000000000000e3bc30cd9a1f000 */
  2.15755372310795701322789783729456319E-32L, /* 3f95c01b3b819edd9d07548fafd61550 */
  1.05468749999999976493840484471911438E-01L, /* 3ffbafffffffffffe4e634cd77985000 */
  1.78771847038773333029677216592309083E-32L, /* 3f95734b6ae650f33dd43c49a1df9fc0 */
  1.09375000000000002267015055992785402E-01L, /* 3ffbc00000000000029d1ad08de7b000 */
  6.23263106693943817730045115112427717E-33L, /* 3f9402e4b39ce2198a45e1d045868cd6 */
  1.13281250000000022354208618429577398E-01L, /* 3ffbd0000000000019c5cc3f9d2b5000 */
  5.40514416644786448581426756221178868E-33L, /* 3f93c10ab4021472c662f69435de9269 */
  1.17187500000000013252367133076817603E-01L, /* 3ffbe000000000000f47688cc561b000 */
 -7.12412585457324989451327215568641325E-33L, /* bf9427ecb343a8d1758990565fcfbf45 */
  1.21093750000000020759863992944300792E-01L, /* 3ffbf0000000000017ef3af97bf04000 */
  6.26591408357572503875647872077266444E-33L, /* 3f940446a09a2da771b45fc075514d12 */
  1.25000000000000004739659392396765618E-01L, /* 3ffc00000000000002bb7344ecd89000 */
 -1.55611398459729463981000080101758830E-32L, /* bf95433135febefa9e6aa4db39e263d2 */
  1.28906249999999982360888081057894783E-01L, /* 3ffc07fffffffffff5d4ed3154361000 */
 -1.77531518652835570781208599686606474E-32L, /* bf9570b7f225ea076f97f418d11359c1 */
  1.32812500000000010568583998727400436E-01L, /* 3ffc1000000000000617a5d09526a000 */
  2.12104021624990594668286391598300893E-32L, /* 3f95b885d767a1048d93055927a27adc */
  1.36718749999999998434125157367005292E-01L, /* 3ffc17ffffffffffff18eaebc7970000 */
  2.50454798592543203967309921276955297E-32L, /* 3f9604164e5598528a76faff26cd1c97 */
  1.40625000000000015550032422969330356E-01L, /* 3ffc20000000000008f6c79d8928c000 */
  7.80972982879849783680252962992639832E-33L, /* 3f9444674acf2b3225c7647e0d95edf3 */
  1.44531250000000012402535562111122522E-01L, /* 3ffc28000000000007264a8bc1ff1000 */
  2.79662468716455159585514763921671876E-32L, /* 3f96226b095bd78aa650faf95a221993 */
  1.48437500000000007761020440087419948E-01L, /* 3ffc3000000000000479530ff8fe3000 */
  2.15518492972728435680556239996258527E-32L, /* 3f95bf9d49295e73a957906a029768cb */
  1.52343750000000001733189947520484032E-01L, /* 3ffc38000000000000ffc6109f71f000 */
  8.34032236093545825619420380704500188E-33L, /* 3f945a71851226a1d0ce5e656693153e */
  1.56249999999999988073295321246958484E-01L, /* 3ffc3ffffffffffff91fedd62ae0f000 */
  2.44119337150624789345260194989620908E-32L, /* 3f95fb041a57bc1c1280680ac1620bea */
  1.60156250000000002076894210913572460E-01L, /* 3ffc48000000000001327ed84a199000 */
 -7.36124501128859978061216696286151753E-33L, /* bf9431c62f01e59d2c1e00f195a0037f */
  1.64062500000000000950861276373482172E-01L, /* 3ffc500000000000008c5285fba85000 */
 -4.80566184447001164583855800470217373E-33L, /* bf938f3d1fcafd390f22f80e6c19421f */
  1.67968749999999989878071706155265999E-01L, /* 3ffc57fffffffffffa2a445c548c5000 */
 -4.42154428718618459799673088733365064E-32L, /* bf96cb28cf1c1b28006d53ffe633b22a */
  1.71874999999999999459734108403218175E-01L, /* 3ffc5fffffffffffffb04554e9dd4000 */
 -3.29736288190321377985697972236270628E-32L, /* bf96566af0ebc852e84be12859b24a31 */
  1.75781249999999997987525759778901845E-01L, /* 3ffc67fffffffffffed702df6ffff000 */
 -1.28800728638468399687523924685844352E-32L, /* bf950b8236b88ca0c1b739dc91a7e3fc */
  1.79687500000000004929565820437175783E-01L, /* 3ffc70000000000002d779bb32d2e000 */
  1.60624461317978482424582320675174225E-32L, /* 3f954d9a9cc0c963fd081f3dc922d04e */
  1.83593750000000016873727045739708856E-01L, /* 3ffc78000000000009ba1f6263c9a000 */
 -3.83390389582056606880506003118452558E-32L, /* bf968e22a5d826f77f19ee788474df22 */
  1.87500000000000013443068740761666872E-01L, /* 3ffc80000000000007bfd8c72a1bf000 */
 -2.74141662712926256150154726565203091E-32L, /* bf961caf5ac59c7f941f928e324c2cc1 */
  1.91406249999999981494101786848611970E-01L, /* 3ffc87fffffffffff55502eeae001000 */
  3.68992437075565165346469517256118001E-32L, /* 3f967f2f03f9096793372a27b92ad79d */
  1.95312499999999989069921848800501648E-01L, /* 3ffc8ffffffffffff9b3015280394000 */
  3.69712249337856518452988332367785220E-32L, /* 3f967fee5fdb5bd501ff93516999faa0 */
  1.99218750000000021148042946919300804E-01L, /* 3ffc9800000000000c30e67939095000 */
  2.50142536781142175091322844848566649E-32L, /* 3f9603c34ae58e10b300b07137ee618a */
  2.03124999999999977732559198825437141E-01L, /* 3ffc9ffffffffffff329e7df079e4000 */
 -2.41951877287895024779300892731537816E-32L, /* bf95f683aefe6965f080df8f59dd34a1 */
  2.07031249999999996744030653771913124E-01L, /* 3ffca7fffffffffffe1f80f4b73ca000 */
 -1.94346475904454000031592792989765585E-32L, /* bf9593a44f87870a3d100d498501ecc7 */
  2.10937500000000000251399259834392298E-01L, /* 3ffcb000000000000025199873310000 */
 -1.33528748788094249098998693871759411E-33L, /* bf91bbb9b25c813668d6103d08acac35 */
  2.14843749999999993936323609611875097E-01L, /* 3ffcb7fffffffffffc8128c866236000 */
  1.14839877977014974625242788556545292E-32L, /* 3f94dd06b4655c9b83a1305b240e7a42 */
  2.18750000000000015181732784749663837E-01L, /* 3ffcc0000000000008c06da5fff24000 */
  1.42689085313142539755499441881408391E-32L, /* 3f95285a87dfa7ea7dad5b3be8c669f4 */
  2.22656249999999992172647770539596569E-01L, /* 3ffcc7fffffffffffb7ce2fe531f6000 */
 -3.34421462850496887359128610229650547E-32L, /* bf965b487962b5c2d9056ca6ac0c2e5c */
  2.26562499999999989595607223847082419E-01L, /* 3ffccffffffffffffa0095277be5c000 */
 -3.08983588107248752517344356508205569E-32L, /* bf9640dded57157f8eded311213bdbcd */
  2.30468749999999979130462438434567117E-01L, /* 3ffcd7fffffffffff3f8332996560000 */
 -3.01407539802851697849105682795217019E-32L, /* bf9638ffde35dbdfe1a1ffe45185de5d */
  2.34375000000000012194252337217891971E-01L, /* 3ffce0000000000007078dd402c86000 */
 -8.46879710915628592284714319904522657E-33L, /* bf945fc7b29a2ac6c9eff9eb258a510f */
  2.38281249999999982991877076137149870E-01L, /* 3ffce7fffffffffff6320b486eece000 */
 -2.93563878880439245627127095245798544E-32L, /* bf9630daaa4f40ff05caf29ace2ea7d4 */
  2.42187499999999981447559841442773990E-01L, /* 3ffceffffffffffff54e24a09a8d5000 */
 -4.56766746558806021264215486909850481E-32L, /* bf96da556dee11f3113e5a3467b908e6 */
  2.46093749999999991067720539980207318E-01L, /* 3ffcf7fffffffffffad9d405dcb5d000 */
  2.14033004219908074003010247652128251E-32L, /* 3f95bc8776e8f9ae098884aa664cc3df */
  2.50000000000000016613825838126835953E-01L, /* 3ffd00000000000004c9e24c12bb3000 */
  2.57617532593749185996714235009382870E-32L, /* 3f960b867cc01178c0ec68226c6cb47d */
  2.53906250000000013372004437827044321E-01L, /* 3ffd04000000000003daae05b3168000 */
  7.20177123439204414298152646284640101E-32L, /* 3f9775eff59ddad7e7530b83934af87f */
  2.57812499999999995765234725413886085E-01L, /* 3ffd07fffffffffffec7878bad9d5000 */
  6.51253187532920882777046064603770602E-32L, /* 3f975226659ca241402e71c2011583b0 */
  2.61718750000000007647689994011222248E-01L, /* 3ffd0c000000000002344cc793a0f000 */
  3.02370610028725823590045201871491395E-32L, /* 3f9639ffe55fa2fa011674448b4e5b96 */
  2.65624999999999986893899042596554269E-01L, /* 3ffd0ffffffffffffc38f0c0a1e9f000 */
 -2.07683715950724761146070082510569258E-32L, /* bf95af579a92e872fef81abfdf06bae8 */
  2.69531249999999979842788204900639327E-01L, /* 3ffd13fffffffffffa30a908d67db000 */
  8.71465252506557329027658736641075706E-32L, /* 3f97c47d99e19830447a42b1c0ffac61 */
  2.73437500000000006712165837793818271E-01L, /* 3ffd18000000000001ef453a58edb000 */
 -6.62704045767568912140550474455810301E-32L, /* bf9758187a204dcb06ece46588aeeaba */
  2.77343749999999994411329302988535617E-01L, /* 3ffd1bfffffffffffe63a0fec9c9e000 */
 -4.87273466291944117406493607771338767E-32L, /* bf96fa0381b0844a0be46bac2d673f0c */
  2.81250000000000012677892447379453135E-01L, /* 3ffd20000000000003a7769e125d6000 */
 -8.55871796664700790726282049552906783E-32L, /* bf97bc64e01332cf7616b0091b8dff2c */
  2.85156249999999998558643013736363981E-01L, /* 3ffd23ffffffffffff95a5894bccf000 */
 -1.33068334720606220176455289635046875E-32L, /* bf95145f43290ecf5b7adcb24697bc73 */
  2.89062500000000008831431235621753924E-01L, /* 3ffd280000000000028ba504fac59000 */
 -9.34157398616814623985483776710704237E-32L, /* bf97e50ad1115b941fcb5f0c88a428f7 */
  2.92968750000000019840235286110877063E-01L, /* 3ffd2c000000000005b7f372d184f000 */
  4.99302093775173155906059132992249671E-33L, /* 3f939ecdcfb97bad3f8dbec5df5ec67d */
  2.96875000000000015867911730971630513E-01L, /* 3ffd3000000000000492d860c79db000 */
  7.86107787827057767235127454590866211E-33L, /* 3f944689517ee8f16cdb97d6a6938f32 */
  3.00781250000000015814100002286124758E-01L, /* 3ffd340000000000048edfe73a17d000 */
 -1.65419431293024229981937172317171504E-32L, /* bf9557900e3efca16c89646b57f68dc0 */
  3.04687499999999985213157159965287195E-01L, /* 3ffd37fffffffffffbbcec6f99b36000 */
  9.68753602893894024018934325652944198E-32L, /* 3f97f70170e5458660c33a7e8d43d049 */
  3.08593749999999989969324338045156215E-01L, /* 3ffd3bfffffffffffd1bdde4d0fb1000 */
  7.10268609610294706092252562643261106E-32L, /* 3f9770cae45cdf615010401a4b37d8d4 */
  3.12500000000000002971606591018488854E-01L, /* 3ffd40000000000000db440fbc06b000 */
  6.38924218802905979887732294952782964E-32L, /* 3f974bbf988bb5622bd8fbaa46e8b811 */
  3.16406250000000006594921047402056305E-01L, /* 3ffd44000000000001e69e8954814000 */
  3.96079878754651470094149874444850097E-32L, /* 3f969b5017b9fa7a1e86975258c73d3d */
  3.20312500000000006713799366908329147E-01L, /* 3ffd48000000000001ef64159c065000 */
 -1.86401314975634286055150437995880517E-32L, /* bf958323f0434911794e5fb8bfe136ba */
  3.24218749999999987061246567584951210E-01L, /* 3ffd4bfffffffffffc4549db9b928000 */
 -3.18643523744758601387071062700407431E-32L, /* bf964ae5fa7e26c2c3981bed12e14372 */
  3.28124999999999991782776266707412953E-01L, /* 3ffd4ffffffffffffda1ad0840ca8000 */
 -4.46964199751314296839915534813144652E-32L, /* bf96d0277729ffd74727150df6d15547 */
  3.32031250000000000393816557756032682E-01L, /* 3ffd540000000000001d0efc04fad000 */
 -9.03246333902065439930373230002688649E-33L, /* bf947731a008748cc6dee948839ef7ae */
  3.35937499999999983810482995064392173E-01L, /* 3ffd57fffffffffffb556cab8ae61000 */
  5.27742727066129518825981597650621794E-32L, /* 3f9712050a6ddbf1cabf1b971f4b5d0b */
  3.39843750000000004310441349760912471E-01L, /* 3ffd5c0000000000013e0def5ddc4000 */
 -3.85927263474732591932884416445586106E-32L, /* bf9690c51088ef3db9ca000829c450c2 */
  3.43749999999999990248130003997484364E-01L, /* 3ffd5ffffffffffffd3070624a0af000 */
  9.62005170171527308106468341512327487E-34L, /* 3f913fae595cea84432eb01430817fca */
  3.47656250000000004085726414568625697E-01L, /* 3ffd640000000000012d79309e291000 */
 -6.59664093705705297250259434519072507E-32L, /* bf97568465eafb0e662e64a5dbfaf35f */

 -1.98364257812501251077851763965418372E-03L, /* bff6040000000001cd90f658cf0b1000 */
 -3.71984513103117734260309047540278737E-34L, /* bf8fee73c54483194782aac4a6154d11 */
 -1.95312500000000378520649630233891879E-03L, /* bff60000000000008ba643bb5e2e8000 */
 -1.12194202736719050440745599339855038E-34L, /* bf8e2a436aeff7bc529873354f47a3f5 */
 -1.92260742187499397430259771221991482E-03L, /* bff5f7fffffffffe4361cb51170da000 */
 -2.30068299876822157331268484824540848E-34L, /* bf8f31d02f85cfe8c0cc02276ce0f437 */
 -1.89208984375001137424603270262074989E-03L, /* bff5f0000000000347456ed490c23000 */
 -1.15012507244426243338260435466985403E-34L, /* bf8e31c174d5677a937a34ad8d2a70b4 */
 -1.86157226562500172319250342061336738E-03L, /* bff5e800000000007f262fa3617b4000 */
 -3.12438344643346437509767736937785561E-34L, /* bf8f9f4d426a2457c273d34ef7d9bde9 */
 -1.83105468749999505256246872355430379E-03L, /* bff5dffffffffffe92f18c1c2b6fa000 */
 -5.91130415288336591179087455220308942E-35L, /* bf8d3a4c80b42dc036bae446c9807f78 */
 -1.80053710937499445182387245573120522E-03L, /* bff5d7fffffffffe669dea82b4a4c000 */
 -1.92396289352411531324908916321392100E-34L, /* bf8eff7a2123fb573ba9778550d669bd */
 -1.77001953125000387737631542516323906E-03L, /* bff5d000000000011e19915c3ddb7000 */
  7.91101758977203355387806553469731354E-36L, /* 3f8a507f5a70faaccf469e3461873dea */
 -1.73950195312500034854670281415554486E-03L, /* bff5c8000000000019b7dc6ef97bd000 */
  1.55906551582436824067407021178835755E-34L, /* 3f8e9e7880333e34955aebcde3cfb053 */
 -1.70898437499998955782591472611429852E-03L, /* bff5bffffffffffcfd80e88aa6b96000 */
  8.22951661962611381718215899498500357E-35L, /* 3f8db58e6031a779b59f6ece191de7cc */
 -1.67846679687500586652037711131708544E-03L, /* bff5b80000000001b0df6fd21c133000 */
 -8.96642618848426299713145894522897419E-35L, /* bf8ddcbcab46d531801bfae4121f2f8a */
 -1.64794921875000109499161354039904782E-03L, /* bff5b0000000000050cbce8915575000 */
 -2.88077905394253859590587789680486639E-34L, /* bf8f7eebd4dd860ef73b674d5e707959 */
 -1.61743164062501133830507079150388351E-03L, /* bff5a80000000003449e8700c3e82000 */
 -3.68271725851639066312899986829350273E-34L, /* bf8fe9845fe20a5fe74059e0cae185d6 */
 -1.58691406249999015546015764131101956E-03L, /* bff59ffffffffffd2999e668cdd28000 */
  8.48197657099957029953716507898788812E-35L, /* 3f8dc2faaebb97392e451b07b28c4b12 */
 -1.55639648437500317366570219290722587E-03L, /* bff5980000000000ea2cd9a40d256000 */
 -3.45156704719737676412949957712570373E-36L, /* bf8925a079505516c8e317ac1ff53255 */
 -1.52587890625000568759013197767046039E-03L, /* bff5900000000001a3ab8a3f6b698000 */
 -1.01902948542497496574967177677556729E-34L, /* bf8e0ee78d94d9b5ad3d63ae35c9b554 */
 -1.49536132812500945889014955936485340E-03L, /* bff5880000000002b9f1621b57743000 */
 -3.32264697086631598830366079048117140E-34L, /* bf8fb9a7d14c32289204fbb0c9eb20e0 */
 -1.46484374999999931883259902869504725E-03L, /* bff57fffffffffffcdbd1c90e1b4a000 */
 -1.76487524793892929381101031660811433E-34L, /* bf8ed52f2f724bc1ae870b18356337b4 */
 -1.43432617187498876325946983333888768E-03L, /* bff577fffffffffcc2dff8faa5570000 */
 -3.54550084538495708816233114576143814E-34L, /* bf8fd74724576915868c1e8ce9f430f1 */
 -1.40380859374999215367421282192718062E-03L, /* bff56ffffffffffdbd0b18aac65ed000 */
 -1.90585907028351204486765167064669639E-34L, /* bf8efaaa0c0e23e50c11b2120348054f */
 -1.37329101562499692341771212945644892E-03L, /* bff567ffffffffff1cfd00f1b0577000 */
 -3.59631150411372589637918252836880320E-34L, /* bf8fde08239ac74942a46298ea4fb715 */
 -1.34277343749999137467356674296739172E-03L, /* bff55ffffffffffd839030b05d53d000 */
 -1.49571076125940368185068762485268117E-35L, /* bf8b3e1a3d5c684b27a9f835b1d8d3c9 */
 -1.31225585937499247038404301859788734E-03L, /* bff557fffffffffdd469936e691e3000 */
  3.10375845385355395586146533282311300E-34L, /* 3f8f9c8f6d63b7a4145716ffd92491fb */
 -1.28173828124999024755581675764821898E-03L, /* bff54ffffffffffd306589b0ab21d000 */
 -1.98541096105909793397376077900810019E-34L, /* bf8f07e808bbb1e35106c294ffbb9687 */
 -1.25122070312500340204619591143332523E-03L, /* bff5480000000000fb06d5f16ad2c000 */
  3.62884195935761446237911443317457521E-34L, /* 3f8fe25b17d623178a386a6fa6c5afb2 */
 -1.22070312499999591578388993012071279E-03L, /* bff53ffffffffffed2a356c440074000 */
 -2.96756662615653130862526710937493307E-35L, /* bf8c3b90d8ff2a991e5bd16718fb0645 */
 -1.19018554687498821966212632349422735E-03L, /* bff537fffffffffc9ac3b585dda89000 */
  1.44659971891167323357060028901142644E-34L, /* 3f8e809279ab249edf1dad9fe13fb0bf */
 -1.15966796875000160938908064907298384E-03L, /* bff530000000000076c0800db9639000 */
  2.50088010538742402346270685365928513E-34L, /* 3f8f4c6c8a483b60201d30c1a83c3cb7 */
 -1.12915039062500267151512523291939657E-03L, /* bff5280000000000c51f7e7315137000 */
  7.56402096465615210500092443924888831E-35L, /* 3f8d922c1e485d99aea2668ed32b55a6 */
 -1.09863281249998665006360103291051571E-03L, /* bff51ffffffffffc26f2d4c9ce2ba000 */
  1.43982174467233642713619821353592061E-34L, /* 3f8e7ec530b3d92b6303bec1c81214d1 */
 -1.06811523437500522742248711752028025E-03L, /* bff518000000000181b7380f10446000 */
  5.41265133745862349181293024531133174E-35L, /* 3f8d1fc9313d018b30e790e06b6be723 */
 -1.03759765624999980942114138999770552E-03L, /* bff50ffffffffffff1f01130490e1000 */
  1.21525139612685854366189534669623436E-34L, /* 3f8e4311b96b6fcde412caf3f0d86fb9 */
 -1.00708007812499602697537601515759439E-03L, /* bff507fffffffffedad7afcce7051000 */
  1.00020246351201558505328236381833392E-34L, /* 3f8e09e640992512b1300744a7e984ed */
 -9.76562499999992592487302113340463694E-04L, /* bff4fffffffffffbbad8151f8adf6000 */
 -1.64984406575162932060422892046851002E-34L, /* bf8eb69a919986e8054b86fc34300f24 */
 -9.46044921874989085824996924138179594E-04L, /* bff4effffffffff9b55a204fd9792000 */
 -9.29539174108308550334255350011347171E-35L, /* bf8dee3a50ed896b4656fa577a1df3d7 */
 -9.15527343750013735214860599791540029E-04L, /* bff4e00000000007eaf5bf103f82d000 */
  3.07557018309280519949818825519490586E-35L, /* 3f8c470cfbef77d32c74cb8042f6ee81 */
 -8.85009765625012292294986105781516428E-04L, /* bff4d000000000071605c65403b97000 */
  4.77499983783821950338363358545463558E-35L, /* 3f8cfbc3dc18884c4c4f9e07d90d7bd3 */
 -8.54492187499986941239470706817188192E-04L, /* bff4bffffffffff878ddf9cab264a000 */
 -1.60128240346239526958630011447901568E-34L, /* bf8ea9b1a21e19e2d5bd84b0fbffcf95 */
 -8.23974609374996290174598690241743810E-04L, /* bff4affffffffffddc86c249ebe06000 */
  1.61677540391961912631535763471935882E-34L, /* 3f8eadd00841366b0dc2bc262c2c8c36 */
 -7.93457031249988696952538334288757473E-04L, /* bff49ffffffffff97bf6f0aa85a5f000 */
  1.22318577008381887076634753347515709E-34L, /* 3f8e452db5b5d250878f71040da06d14 */
 -7.62939453124996723316499040007097041E-04L, /* bff48ffffffffffe1c7265b431108000 */
 -1.03845161748762410745671891558398468E-34L, /* bf8e14115ad884c96d1a820c73647220 */
 -7.32421874999998242520117923997325794E-04L, /* bff47ffffffffffefca4498b7aa8a000 */
  5.64005211953031009549514026639438083E-35L, /* 3f8d2be06950f68f1a6d8ff829a6928e */
 -7.01904296874999772890934814265622012E-04L, /* bff46fffffffffffde7c0fe5d8041000 */
  5.90245467325173644235991233229525762E-35L, /* 3f8d39d40cc49002189243c194b1db0e */
 -6.71386718750008699269643939210658742E-04L, /* bff460000000000503c91d798b60c000 */
 -5.20515801723324452151498579012322191E-35L, /* bf8d14c0f08a6a9285b32b8bda003eb5 */
 -6.40869140625005499535275057463709988E-04L, /* bff45000000000032b969184e9751000 */
 -6.69469163285461870099846471658294534E-35L, /* bf8d63f36bab7b24d936c9380e3d3fa6 */
 -6.10351562499999293780097329596079841E-04L, /* bff43fffffffffff97c7c433e35ed000 */
 -1.16941808547394177991845382085515086E-34L, /* bf8e36e27886f10b234a7dd8fc588bf0 */
 -5.79833984375000068291972326409994795E-04L, /* bff43000000000000a13ff6dcf2bf000 */
  1.17885044988246219185041488459766001E-34L, /* 3f8e3964677e001a00412aab52790842 */
 -5.49316406249990904622170867910987793E-04L, /* bff41ffffffffffac1c25739c716b000 */
 -3.31875702128137033065075734368960972E-35L, /* bf8c60e928d8982c3c99aef4f885a121 */
 -5.18798828125011293653756992177727236E-04L, /* bff410000000000682a62cff36775000 */
 -5.69971237642088463334239430962628187E-35L, /* bf8d2f0c76f8757d61cd1abc7ea7d066 */
 -4.88281249999990512232251384917893121E-04L, /* bff3fffffffffff50fb48992320df000 */
  1.02144616714408655325510171265051108E-35L, /* 3f8ab279a3626612710b9b3ac71734ac */
 -4.57763671874997554564967307956493434E-04L, /* bff3dffffffffffd2e3c272e3cca9000 */
 -8.25484058867957231164162481843653503E-35L, /* bf8db6e71158e7bf93e2e683f07aa841 */
 -4.27246093749991203999790346349633286E-04L, /* bff3bffffffffff5dbe103cba0eb2000 */
 -3.51191203319375193921924105905691755E-35L, /* bf8c757356d0f3dd7fbefc0dd419ab50 */
 -3.96728515624986649402960638705483281E-04L, /* bff39ffffffffff09b996882706ec000 */
 -5.51925962073095883016589497244931171E-36L, /* bf89d586d49f22289cfc860bebb99056 */
 -3.66210937499999945095511981300980754E-04L, /* bff37fffffffffffefcb88bfc7df6000 */
 -2.11696465278144529364423332249588595E-35L, /* bf8bc23a84d28e5496c874ef9833be25 */
 -3.35693359374992480958458008559640163E-04L, /* bff35ffffffffff754c548a8798f2000 */
 -8.58941791799705081104736787493668352E-35L, /* bf8dc8b1192fb7c3662826d43acb7c68 */
 -3.05175781250009811036303273640122156E-04L, /* bff340000000000b4fb4f1aad1c76000 */
 -8.61173897858769926480551302277426632E-35L, /* bf8dc9e0eabb1c0b33051011b64769fa */
 -2.74658203124987298321920308390303850E-04L, /* bff31ffffffffff15b2056ac252fd000 */
  3.35152809454778381053519808988046631E-37L, /* 3f85c82fb59ff8d7c80d44e635420ab1 */
 -2.44140624999999992770514819575735516E-04L, /* bff2fffffffffffffbbb82d6a7636000 */
  3.54445837111124472730013879165516908E-35L, /* 3f8c78e955b01378be647b1c92aa9a77 */
 -2.13623046875012756463165168672749438E-04L, /* bff2c0000000001d6a1635fea6bbf000 */
  1.50050816288650121729916777279129473E-35L, /* 3f8b3f1f6f616a61129a58e131cbd31d */
 -1.83105468749991323078784464300306893E-04L, /* bff27fffffffffebfe0cbd0c82399000 */
 -9.14919506501448661140572099029756008E-37L, /* bf873754bacaa9d9513b6127e791eb47 */
 -1.52587890625013337032336300236461546E-04L, /* bff240000000001ec0cb57f2cc995000 */
  2.84906084373176180870418394956384516E-35L, /* 3f8c2ef6d03a7e6ab087c4f099e4de89 */
 -1.22070312499990746786116828458007518E-04L, /* bff1ffffffffffd553bbb49f35a34000 */
  6.71618008964968339584520728412444537E-36L, /* 3f8a1dacb99c60071fc9cd2349495bf0 */
 -9.15527343750029275602791047595142231E-05L, /* bff180000000000d8040cd6ecde28000 */
 -1.95753652091078750312541716951402172E-35L, /* bf8ba0526cfb24d8d59122f1c7a09a14 */
 -6.10351562499913258461494008080572701E-05L, /* bff0ffffffffffaffebbb92d7f6a9000 */
  5.69868489273961111703398456218119973E-36L, /* 3f89e4ca5df09ef4a4386dd5b3bf0331 */
 -3.05175781250092882818419203884960853E-05L, /* bff0000000000055ab55de88fac1d000 */
  9.03341100018476837609128961872915953E-36L, /* 3f8a803d229fa3a0e834a63abb06662b */
#define T_EXPL_ARG2 (2*T_EXPL_ARG1 + 2 + 2*65)
  0.00000000000000000000000000000000000E+00L, /* 00000000000000000000000000000000 */
  0.00000000000000000000000000000000000E+00L, /* 00000000000000000000000000000000 */
  3.05175781249814607084128277672749162E-05L, /* 3feffffffffffeaa02abb9102f499000 */
  1.00271855391179733380665816525889949E-36L, /* 3f8755351afa042ac3f58114824d4c10 */
  6.10351562500179243748093427073421439E-05L, /* 3ff1000000000052a95de07a4c26d000 */
  1.67231624299180373502350811501181670E-36L, /* 3f881c87a53691cae9d77f4e40d66616 */
  9.15527343749970728685313252158399200E-05L, /* 3ff17ffffffffff28040cc2acde28000 */
  2.43665747834893104318707597514407880E-36L, /* 3f889e9366c7c6c6a2ecb78dc9b0509e */
  1.22070312500027751961838150070880064E-04L, /* 3ff200000000003ffddde6c153b53000 */
 -1.73322146370624186623546452226755405E-35L, /* bf8b709d8d658ed5dbbe943de56ee84e */
  1.52587890624995916105682628143179430E-04L, /* 3ff23ffffffffff6954b56e285d23000 */
  1.23580432650945898349135528000443828E-35L, /* 3f8b06d396601dde16de7d7bc27346e6 */
  1.83105468750008670314358488289621794E-04L, /* 3ff2800000000013fe0cdc8c823b7000 */
  4.30446229148833293310207915930740796E-35L, /* 3f8cc9ba9bfe554a4f7f2fece291eb23 */
  2.13623046875005741337455947623248132E-04L, /* 3ff2c0000000000d3d1662de21a3f000 */
 -3.96110759869520786681660669615255057E-35L, /* bf8ca5379b04ff4a31aab0ceacc917e6 */
  2.44140624999981493573336463433440506E-04L, /* 3ff2ffffffffffd553bbdf48e0534000 */
 -1.39617373942387888957350179316792928E-35L, /* bf8b28eeedc286015802b63f96b8c5cd */
  2.74658203124984920706309918754626834E-04L, /* 3ff31fffffffffee9d60c8439ec1d000 */
 -3.16168080483901830349738314447356223E-36L, /* bf890cf74f81c77a611abc1243812444 */
  3.05175781250008648918265055410966055E-04L, /* 3ff3400000000009f8b5c9a346636000 */
  8.54421306185008998867856704677221443E-35L, /* 3f8dc649cd40922fc08adc6b6b20ead0 */
  3.35693359374988945462612499316774515E-04L, /* 3ff35ffffffffff34146c540f15b2000 */
  7.96443137431639500475160850431097078E-35L, /* 3f8da77638ed3148fc4d99d1c9e13446 */
  3.66210937500027690542093987739604535E-04L, /* 3ff380000000001fecce34bea89c4000 */
  2.14507323877752361258862577769090367E-35L, /* 3f8bc834e554d38894cf91957b0253d3 */
  3.96728515625003928083564943615052121E-04L, /* 3ff3a00000000004875d9a4acf6ab000 */
  4.88358523466632050664019922448605508E-35L, /* 3f8d03a7eaeef1a9f78c71a12c44dd28 */
  4.27246093750017799227172345607351585E-04L, /* 3ff3c00000000014856794c3ee850000 */
  6.66520494592631402182216588784828935E-35L, /* 3f8d6262118fcdb59b8f16108f5f1a6c */
  4.57763671875002108342364320152138181E-04L, /* 3ff3e000000000026e45d855410b9000 */
  7.21799615960261390920033272189522298E-35L, /* 3f8d7fc645cff8879462296af975c9fd */
  4.88281249999999768797631616370963356E-04L, /* 3ff3ffffffffffffbbc2d7cc004df000 */
 -5.30564629906905979452258114088325361E-35L, /* bf8d1a18b71929a30d67a217a27ae851 */
  5.18798828124997339054881383202487041E-04L, /* 3ff40ffffffffffe775055eea5851000 */
 -4.03682911253647925867848180522846377E-35L, /* bf8cad44f0f3e5199d8a589d9332acad */
  5.49316406249980511907933706754958501E-04L, /* 3ff41ffffffffff4c410b29bb62fb000 */
 -2.08166843948323917121806956728438051E-35L, /* bf8bbab8cf691403249fe5b699e25143 */
  5.79833984374989593561576568548497165E-04L, /* 3ff42ffffffffffa0047df328d817000 */
 -1.72745033420153042445343706432627539E-34L, /* bf8ecb3c2d7d3a9e6e960576be901fdf */
  6.10351562500008540711511259540838154E-04L, /* 3ff4400000000004ec62f54f8c271000 */
  7.41889382604319545724663095428976499E-35L, /* 3f8d8a74c002c81a47c93b8e05d15f8e */
  6.40869140625020444702875407535884986E-04L, /* 3ff450000000000bc91b09718515d000 */
 -4.47321009727305792048065440180490107E-35L, /* bf8cdbac5c8fe70822081d8993eb5cb6 */
  6.71386718750007531635964622352684074E-04L, /* 3ff460000000000457792973db05c000 */
  5.13698959677949336513874456684462092E-35L, /* 3f8d112114436949c5ef38d8049004ab */
  7.01904296875006634673332887754430334E-04L, /* 3ff4700000000003d31adf2cb8b1d000 */
 -8.25665755717729437292989870760751482E-35L, /* bf8db6ffcc8ef71f8e648e3a8b160f5a */
  7.32421874999998244664170215504673504E-04L, /* 3ff47ffffffffffefcf5498bd5c8a000 */
 -5.64005234937832153139057628112753364E-35L, /* bf8d2be06a1dfe90e7bf90fba7c12a98 */
  7.62939453125017456345986752604096408E-04L, /* 3ff490000000000a101a1b093d4a8000 */
 -1.11084094120417622468550608896588329E-34L, /* bf8e274feabd2d94f6694507a46accb1 */
  7.93457031249987558617598988993908016E-04L, /* 3ff49ffffffffff8d3f9dcab74bbf000 */
 -1.22966480225449015129079129940978828E-34L, /* bf8e46e6a65eef8fa9e42eddf3da305e */
  8.23974609374997378723747633335135819E-04L, /* 3ff4affffffffffe7d2afbaa55b26000 */
 -1.62270010016794279091906973366704963E-34L, /* bf8eaf633f057ebdb664a34566401c4e */
  8.54492187500023938282350821569920958E-04L, /* 3ff4c0000000000dccaabce399e59000 */
 -1.39076361712838158775374263169606160E-34L, /* bf8e71ba779364b3bbdba7841f2c4ca1 */
  8.85009765624987932362186815286691297E-04L, /* 3ff4cffffffffff90b218886edc2a000 */
  4.07328275060905585228261577392403980E-35L, /* 3f8cb1254dbb6ea4b8cfa5ed4cf28d24 */
  9.15527343749975579461305518559161974E-04L, /* 3ff4dffffffffff1ec2a21f25df33000 */
  1.16855112459192484947855553716334015E-35L, /* 3f8af10bf319e9f5270cf249eeffbe5c */
  9.46044921875016761584725882821122521E-04L, /* 3ff4f00000000009a992c46c16d71000 */
  9.51660680007524262741115611071680436E-35L, /* 3f8df9fd56e81f8edf133843910ee831 */
  9.76562499999974118878133088548272636E-04L, /* 3ff4fffffffffff1149edc46a6df6000 */
 -5.65271128977550656964071208289181661E-36L, /* bf89e0e12689dd721aa2314c81eb6429 */
  1.00708007812498671732140389760347830E-03L, /* 3ff507fffffffffc2be94b90ed091000 */
 -1.43355074891483635310132767255371379E-34L, /* bf8e7d1a688c247b16022daab1316d55 */
  1.03759765625002637786192745235343007E-03L, /* 3ff51000000000079a57b966bc158000 */
  2.95905815240957629366749917020106928E-34L, /* 3f8f895387fc73bb38f8a1b254c01a60 */
  1.06811523437500860568717813047520763E-03L, /* 3ff51800000000027afcd5b35f5e6000 */
 -5.98328495358586628195372356742878314E-35L, /* bf8d3e204130013bf6328f1b70ff8c76 */
  1.09863281250001439958487251556220070E-03L, /* 3ff5200000000004268077c6c66bd000 */
  2.41371837889426603334113000868144760E-34L, /* 3f8f40d6948edf864054ccf151f9815e */
  1.12915039062501298413451613770002366E-03L, /* 3ff5280000000003be0f5dd8fe81b000 */
 -1.28815268997394164973472617519705703E-34L, /* bf8e567321172ea089dce4bc8354ecb7 */
  1.15966796874997272036339054191407232E-03L, /* 3ff52ffffffffff8231e3bcfff1e8000 */
  1.02996064554316248496839462594377804E-34L, /* 3f8e11cf7d402789244f68e2d4f985b1 */
  1.19018554687502744121802585360546796E-03L, /* 3ff5380000000007e8cdf3f8f6c20000 */
 -1.43453217726255628994625761307322163E-34L, /* bf8e7d5d3370d85a374f5f4802fc517a */
  1.22070312499997743541996266398850614E-03L, /* 3ff53ffffffffff97f0722561f454000 */
 -1.41086259180534339713692694428211646E-34L, /* bf8e77125519ff76244dfec5fbd58402 */
  1.25122070312501024092560690174507039E-03L, /* 3ff5480000000002f3a59d8820691000 */
  3.84102646020099293168698506729765213E-34L, /* 3f8ffe8f5b86f9c3569c8f26e19b1f50 */
  1.28173828124997986521442660131425390E-03L, /* 3ff54ffffffffffa3250a764439d9000 */
  1.44644589735033114377952806106652650E-34L, /* 3f8e808801b80dcf38323cdbfdca2549 */
  1.31225585937501665804856968749058137E-03L, /* 3ff5580000000004cd25a414c6d62000 */
  1.67474574742200577294563576414361377E-34L, /* 3f8ebd394a151dbda4f81d5d83c0f1e9 */
  1.34277343749997290265837386401818888E-03L, /* 3ff55ffffffffff83091b042cfd59000 */
 -1.55650565030381326742591837551559103E-34L, /* bf8e9dca490d7fecfadba9625ffb91c5 */
  1.37329101562497720784949380297774268E-03L, /* 3ff567fffffffff96e3c7312f5ccf000 */
  1.65279335325630026116581677369221748E-34L, /* 3f8eb763496f5bd7404f2298b402074f */
  1.40380859374999099958354100336136647E-03L, /* 3ff56ffffffffffd67e2f09f2a381000 */
  1.89919944388961890195706641264717076E-34L, /* 3f8ef8e4d0ffdfeba982aa8829501389 */
  1.43432617187497484122173130998160625E-03L, /* 3ff577fffffffff8bf9c1d71af8a8000 */
  2.57638517142061429772064578590009568E-34L, /* 3f8f5675d82c1cc4ada70fd3a957b89a */
  1.46484374999999929342158925502052945E-03L, /* 3ff57fffffffffffcbdd1c7671b46000 */
  1.76487201934184070490166772482073801E-34L, /* 3f8ed52ef732458f6e4c5c07504f33cc */
  1.49536132812502318451070466256902933E-03L, /* 3ff5880000000006aeb7066c8ad43000 */
  2.38068367275295804321313550609246656E-34L, /* 3f8f3c7277ae6fc390ace5e06c0b025b */
  1.52587890625000448053340248672949543E-03L, /* 3ff59000000000014a9ae2104b3bc000 */
  1.01174455568392813258454590274740959E-34L, /* 3f8e0cf7c434762991bb38e12acee215 */
  1.55639648437501113499837053523090913E-03L, /* 3ff5980000000003359e2c204355e000 */
 -2.82398418808099749023517211651363693E-35L, /* bf8c2c4c2971d88caa95e15fb1ccb1a1 */
  1.58691406249999937955142588308171026E-03L, /* 3ff59fffffffffffd2380ecbc87c2000 */
 -1.27361695572422741562701199136538047E-34L, /* bf8e5295e0e206dfb0f0266c07225448 */
  1.61743164062498000531048954475329309E-03L, /* 3ff5a7fffffffffa3ca6fe61ed94c000 */
 -1.22606548862580061633942923016222044E-34L, /* bf8e45f1b17bb61039d21a351bb207b8 */
  1.64794921875001835451453858682255576E-03L, /* 3ff5b000000000054a52fa20f6565000 */
  1.39132339594152335892305491425264583E-34L, /* 3f8e71e0904c5449b414ee49b191cef2 */
  1.67846679687501263995029340691547953E-03L, /* 3ff5b80000000003a4a9e912c910b000 */
  6.67245854693585315412242764786197029E-35L, /* 3f8d62c4ccac1e7511a617d469468ccd */
  1.70898437500002646861403514115369655E-03L, /* 3ff5c00000000007a109fbaa7e015000 */
  6.87367172354719289559624829652240928E-36L, /* 3f8a245fa835eceb42bae8128d9336db */
  1.73950195312501174308226096992992128E-03L, /* 3ff5c80000000003627c8d637a005000 */
 -2.20824271875474985927385878948759352E-34L, /* bf8f25869b1cbefb25e735992f232f57 */
  1.77001953124997491747605207736194513E-03L, /* 3ff5cffffffffff8c53c84b6883b8000 */
  3.43123048533596296514343180408963705E-34L, /* 3f8fc816b91d173ddadbbf09b1287906 */
  1.80053710937497698911127570705069398E-03L, /* 3ff5d7fffffffff95e1899f4a8430000 */
  3.99231237340890073475077494556136100E-35L, /* 3f8ca889148f62fa854da5674df41279 */
  1.83105468750002267094899598630423914E-03L, /* 3ff5e0000000000688d21e62ba674000 */
 -3.22274595655810623999007524769365273E-34L, /* bf8fac605cb9ae01eb719675ced25560 */
  1.86157226562500499224728040579690330E-03L, /* 3ff5e80000000001705ce28a6d89e000 */
  3.07094985075881613489605622068441083E-34L, /* 3f8f98330225ec7e2c8f3c0d1c432b91 */
  1.89208984374998234666824993196980949E-03L, /* 3ff5effffffffffae969fdc7cd8cf000 */
 -3.06287628722973914692165056776495733E-34L, /* bf8f9720477d9cfa10e464df7f91020c */
  1.92260742187501225343755557292811682E-03L, /* 3ff5f800000000038824e428ed49a000 */
  6.30049124729794620592961282769623368E-35L, /* 3f8d4efdd7cd4336d88a6aa49e1e96bc */
  1.95312499999998514894032051116231258E-03L, /* 3ff5fffffffffffbb82f6a04f1ae0000 */
 -6.14610057507500948543216998736262902E-35L, /* bf8d46c862d39255370e7974d48daa7e */
  1.98364257812501222021119324146882732E-03L, /* 3ff6040000000001c2d8a1aa5188d000 */
  3.71942298418113774118754986159801984E-34L, /* 3f8fee6567d9940495519ffe62cbc9a4 */

  7.06341639425619532977052017486130353E-01L, /* 3ffe69a59c8245a9ac00000000000000 */
  7.09106182437398424589503065362805501E-01L, /* 3ffe6b0ff72deb89d000000000000000 */
  7.11881545564596485142772053222870454E-01L, /* 3ffe6c7bbce9a6d93000000000000000 */
  7.14667771155948150507697391731198877E-01L, /* 3ffe6de8ef213d71e000000000000000 */
  7.17464901725936049503573599395167548E-01L, /* 3ffe6f578f41e1a9e400000000000000 */
  7.20272979955439790478166628417966422E-01L, /* 3ffe70c79eba33c06c00000000000000 */
  7.23092048692387218133958981525211129E-01L, /* 3ffe72391efa434c7400000000000000 */
  7.25922150952408251622927082280511968E-01L, /* 3ffe73ac117390acd800000000000000 */
  7.28763329919491220643124052003258839E-01L, /* 3ffe752077990e79d000000000000000 */
  7.31615628946641782803794740175362676E-01L, /* 3ffe769652df22f7e000000000000000 */
  7.34479091556544505525749855223693885E-01L, /* 3ffe780da4bba98c4800000000000000 */
  7.37353761442226890432394270646909717E-01L, /* 3ffe79866ea5f432d400000000000000 */
  7.40239682467726090031590047146892175E-01L, /* 3ffe7b00b216ccf53000000000000000 */
  7.43136898668758316688354170764796436E-01L, /* 3ffe7c7c70887763c000000000000000 */
  7.46045454253390638577059235103661194E-01L, /* 3ffe7df9ab76b20fd000000000000000 */
  7.48965393602715662213498148958024103E-01L, /* 3ffe7f78645eb8076400000000000000 */
  7.51896761271528629722027403659012634E-01L, /* 3ffe80f89cbf42526400000000000000 */
  7.54839601989007347171423134568613023E-01L, /* 3ffe827a561889716000000000000000 */
  7.57793960659394638668118204805068672E-01L, /* 3ffe83fd91ec46ddc000000000000000 */
  7.60759882362683631518152083117456641E-01L, /* 3ffe858251bdb68b8c00000000000000 */
  7.63737412355305483879774897104653064E-01L, /* 3ffe87089711986c9400000000000000 */
  7.66726596070820082262642358728044201E-01L, /* 3ffe8890636e31f54400000000000000 */
  7.69727479120609181517664865168626420E-01L, /* 3ffe8a19b85b4fa2d800000000000000 */
  7.72740107294572486917871856348938309E-01L, /* 3ffe8ba4976246833800000000000000 */
  7.75764526561826289752232810315035749E-01L, /* 3ffe8d31020df5be4400000000000000 */
  7.78800783071404878477039801509818062E-01L, /* 3ffe8ebef9eac820b000000000000000 */
  7.81848923152964780936002853195532225E-01L, /* 3ffe904e8086b5a87800000000000000 */
  7.84908993317491698871180005880887620E-01L, /* 3ffe91df97714512d800000000000000 */
  7.87981040258010162480317717381694820E-01L, /* 3ffe9372403b8d6bcc00000000000000 */
  7.91065110850296016042904057030682452E-01L, /* 3ffe95067c78379f2800000000000000 */
  7.94161252153591734614934694036492147E-01L, /* 3ffe969c4dbb800b4800000000000000 */
  7.97269511411324433014513601847284008E-01L, /* 3ffe9833b59b38154400000000000000 */
  8.00389936051826789142893403550260700E-01L, /* 3ffe99ccb5aec7bec800000000000000 */
  8.03522573689060742863077280162542593E-01L, /* 3ffe9b674f8f2f3d7c00000000000000 */
  8.06667472123343942680406826184480451E-01L, /* 3ffe9d0384d70893f800000000000000 */
  8.09824679342079301047618855591281317E-01L, /* 3ffe9ea15722892c7800000000000000 */
  8.12994243520486992160556383169023320E-01L, /* 3ffea040c80f8374f000000000000000 */
  8.16176213022339780422953481320291758E-01L, /* 3ffea1e1d93d687d0000000000000000 */
  8.19370636400700819157449927843117621E-01L, /* 3ffea3848c4d49954c00000000000000 */
  8.22577562398664585696650419777142815E-01L, /* 3ffea528e2e1d9f09800000000000000 */
  8.25797039950100647542896581398963463E-01L, /* 3ffea6cede9f70467c00000000000000 */
  8.29029118180400342863478613253391813E-01L, /* 3ffea876812c0877bc00000000000000 */
  8.32273846407226292054559735333896242E-01L, /* 3ffeaa1fcc2f45343800000000000000 */
  8.35531274141265073440720811959181447E-01L, /* 3ffeabcac15271a2a400000000000000 */
  8.38801451086982535754188461396552157E-01L, /* 3ffead7762408309bc00000000000000 */
  8.42084427143382358016410194068157580E-01L, /* 3ffeaf25b0a61a7b4c00000000000000 */
  8.45380252404767357221615498019673396E-01L, /* 3ffeb0d5ae318680c400000000000000 */
  8.48688977161503960155997106085123960E-01L, /* 3ffeb2875c92c4c99400000000000000 */
  8.52010651900789478530029441571969073E-01L, /* 3ffeb43abd7b83db1c00000000000000 */
  8.55345327307422548246407245642330963E-01L, /* 3ffeb5efd29f24c26400000000000000 */
  8.58693054264576483003423845730139874E-01L, /* 3ffeb7a69db2bcc77800000000000000 */
  8.62053883854575708767242758767679334E-01L, /* 3ffeb95f206d17228000000000000000 */
  8.65427867359675251357487013592617586E-01L, /* 3ffebb195c86b6b29000000000000000 */
  8.68815056262843166123843730019871145E-01L, /* 3ffebcd553b9d7b62000000000000000 */
  8.72215502248546159513864495238522068E-01L, /* 3ffebe9307c271855000000000000000 */
  8.75629257203538208242932228131394368E-01L, /* 3ffec0527a5e384ddc00000000000000 */
  8.79056373217652342599848225290770642E-01L, /* 3ffec213ad4c9ed0d800000000000000 */
  8.82496902584595399599010079327854328E-01L, /* 3ffec3d6a24ed8221800000000000000 */
  8.85950897802745995779361010136199184E-01L, /* 3ffec59b5b27d9696800000000000000 */
  8.89418411575955636383383762222365476E-01L, /* 3ffec761d99c5ba58800000000000000 */
  8.92899496814352794382685374330321793E-01L, /* 3ffec92a1f72dd70d400000000000000 */
  8.96394206635150403439382671422208659E-01L, /* 3ffecaf42e73a4c7d800000000000000 */
  8.99902594363456265202927397695020773E-01L, /* 3ffeccc00868c0d18800000000000000 */
  9.03424713533086704009278378180169966E-01L, /* 3ffece8daf1e0ba94c00000000000000 */
  9.06960617887383580004723171441582963E-01L, /* 3ffed05d24612c2af000000000000000 */
  9.10510361380034133338412516422977205E-01L, /* 3ffed22e6a0197c02c00000000000000 */
  9.14073998175894436579724811053893063E-01L, /* 3ffed40181d094303400000000000000 */
  9.17651582651815816982221463149471674E-01L, /* 3ffed5d66da13970f400000000000000 */
  9.21243169397474526149949269893113524E-01L, /* 3ffed7ad2f48737a2000000000000000 */
  9.24848813216204823639543519675498828E-01L, /* 3ffed985c89d041a3000000000000000 */
  9.28468569125835141431224428743007593E-01L, /* 3ffedb603b7784cd1800000000000000 */
  9.32102492359527579068867453315760940E-01L, /* 3ffedd3c89b26894e000000000000000 */
  9.35750638366620729469147477175283711E-01L, /* 3ffedf1ab529fdd41c00000000000000 */
  9.39413062813475779888605643463961314E-01L, /* 3ffee0fabfbc702a3c00000000000000 */
  9.43089821584325888048638830696290825E-01L, /* 3ffee2dcab49ca51b400000000000000 */
  9.46780970782128888929563004239753354E-01L, /* 3ffee4c079b3f8000400000000000000 */
  9.50486566729423443256052905780961737E-01L, /* 3ffee6a62cdec7c7b000000000000000 */
  9.54206665969188322362626308859034907E-01L, /* 3ffee88dc6afecfbfc00000000000000 */
  9.57941325265705301283958306157728657E-01L, /* 3ffeea77490f0196b000000000000000 */
  9.61690601605425299247542625380447134E-01L, /* 3ffeec62b5e5881fb000000000000000 */
  9.65454552197837823079851204965962097E-01L, /* 3ffeee500f1eed967000000000000000 */
  9.69233234476344074348475032820715569E-01L, /* 3ffef03f56a88b5d7800000000000000 */
  9.73026706099133165128733935489435680E-01L, /* 3ffef2308e71a927a800000000000000 */
  9.76835024950062025261843245971249416E-01L, /* 3ffef423b86b7ee79000000000000000 */
  9.80658249139538557015427500118676107E-01L, /* 3ffef618d68936c09c00000000000000 */
  9.84496437005408397968864164795377292E-01L, /* 3ffef80feabfeefa4800000000000000 */
  9.88349647113845042323276857132441364E-01L, /* 3ffefa08f706bbf53800000000000000 */
  9.92217938260243514925207364285597578E-01L, /* 3ffefc03fd56aa225000000000000000 */
  9.96101369470117486981664001177705359E-01L, /* 3ffefe00ffaabffbbc00000000000000 */
#define T_EXPL_RES1 (T_EXPL_ARG2 + 2 + 2*65 + 89)
  1.00000000000000000000000000000000000E+00L, /* 3fff0000000000000000000000000000 */
  1.00391388933834757590801700644078664E+00L, /* 3fff0100802ab5577800000000000000 */
  1.00784309720644799091004983893071767E+00L, /* 3fff0202015600445c00000000000000 */
  1.01178768355933151879000320150225889E+00L, /* 3fff0304848362076c00000000000000 */
  1.01574770858668572692806719715008512E+00L, /* 3fff04080ab55de39000000000000000 */
  1.01972323271377413034244341361045372E+00L, /* 3fff050c94ef7a206c00000000000000 */
  1.02371431660235789884438872832106426E+00L, /* 3fff06122436410dd000000000000000 */
  1.02772102115162167201845022646011785E+00L, /* 3fff0718b98f42085000000000000000 */
  1.03174340749910264936062276319717057E+00L, /* 3fff08205601127ec800000000000000 */
  1.03578153702162378824169763902318664E+00L, /* 3fff0928fa934ef90800000000000000 */
  1.03983547133622999947277776300325058E+00L, /* 3fff0a32a84e9c1f5800000000000000 */
  1.04390527230112850620713516036630608E+00L, /* 3fff0b3d603ca7c32800000000000000 */
  1.04799100201663270004459604933799710E+00L, /* 3fff0c49236829e8bc00000000000000 */
  1.05209272282610977189420964350574650E+00L, /* 3fff0d55f2dce5d1e800000000000000 */
  1.05621049731693195106174698594259098E+00L, /* 3fff0e63cfa7ab09d000000000000000 */
  1.06034438832143151909548350886325352E+00L, /* 3fff0f72bad65671b800000000000000 */
  1.06449445891785943185681162503897212E+00L, /* 3fff1082b577d34ed800000000000000 */
  1.06866077243134810492719566354935523E+00L, /* 3fff1193c09c1c595c00000000000000 */
  1.07284339243487741866189821848820429E+00L, /* 3fff12a5dd543ccc4c00000000000000 */
  1.07704238275024494209120007326419000E+00L, /* 3fff13b90cb25176a400000000000000 */
  1.08125780744903959851299646288680378E+00L, /* 3fff14cd4fc989cd6400000000000000 */
  1.08548973085361949442173568058933597E+00L, /* 3fff15e2a7ae28fecc00000000000000 */
  1.08973821753809324563988525369495619E+00L, /* 3fff16f9157587069400000000000000 */
  1.09400333232930546678574046381982043E+00L, /* 3fff18109a3611c35000000000000000 */
  1.09828514030782586896606289883493446E+00L, /* 3fff192937074e0cd800000000000000 */
  1.10258370680894224324930519287590869E+00L, /* 3fff1a42ed01d8cbc800000000000000 */
  1.10689909742365749645287564817408565E+00L, /* 3fff1b5dbd3f68122400000000000000 */
  1.11123137799969046168868658241990488E+00L, /* 3fff1c79a8dacc350c00000000000000 */
  1.11558061464248076122274255794764031E+00L, /* 3fff1d96b0eff0e79400000000000000 */
  1.11994687371619722204840741142106708E+00L, /* 3fff1eb4d69bde569c00000000000000 */
  1.12433022184475073235176978414529003E+00L, /* 3fff1fd41afcba45e800000000000000 */
  1.12873072591281087273529237791080959E+00L, /* 3fff20f47f31c92e4800000000000000 */
  1.13314845306682632219974493636982515E+00L, /* 3fff2216045b6f5cd000000000000000 */
  1.13758347071604959399593326452304609E+00L, /* 3fff2338ab9b32134800000000000000 */
  1.14203584653356560174586320499656722E+00L, /* 3fff245c7613b8a9b000000000000000 */
  1.14650564845732405583333957110880874E+00L, /* 3fff258164e8cdb0d800000000000000 */
  1.15099294469117646722011727433709893E+00L, /* 3fff26a7793f60164400000000000000 */
  1.15549780370591653744227755851170514E+00L, /* 3fff27ceb43d84490400000000000000 */
  1.16002029424032515603215642840950750E+00L, /* 3fff28f7170a755fd800000000000000 */
  1.16456048530221917269855680387991015E+00L, /* 3fff2a20a2ce96406400000000000000 */
  1.16911844616950438835445424956560601E+00L, /* 3fff2b4b58b372c79400000000000000 */
  1.17369424639123270948104504896036815E+00L, /* 3fff2c7739e3c0f32c00000000000000 */
  1.17828795578866324378353169777255971E+00L, /* 3fff2da4478b620c7400000000000000 */
  1.18289964445632783673900689791480545E+00L, /* 3fff2ed282d763d42400000000000000 */
  1.18752938276310060494722620205720887E+00L, /* 3fff3001ecf601af7000000000000000 */
  1.19217724135327157730657177125976887E+00L, /* 3fff31328716a5d63c00000000000000 */
  1.19684329114762477708211463323095813E+00L, /* 3fff32645269ea829000000000000000 */
  1.20152760334452030077656559114984702E+00L, /* 3fff339750219b212c00000000000000 */
  1.20623024942098072687102217059873510E+00L, /* 3fff34cb8170b5835400000000000000 */
  1.21095130113378179892436037334846333E+00L, /* 3fff3600e78b6b11d000000000000000 */
  1.21569083052054743854242246925423387E+00L, /* 3fff373783a722012400000000000000 */
  1.22044890990084875515009343871497549E+00L, /* 3fff386f56fa7686e800000000000000 */
  1.22522561187730755216662714701669756E+00L, /* 3fff39a862bd3c106400000000000000 */
  1.23002100933670455162882717559114099E+00L, /* 3fff3ae2a8287e7a8000000000000000 */
  1.23483517545109100499445276000187732E+00L, /* 3fff3c1e2876834aa800000000000000 */
  1.23966818367890557750499169742397498E+00L, /* 3fff3d5ae4e2cae92c00000000000000 */
  1.24452010776609517384017067342938390E+00L, /* 3fff3e98deaa11dcbc00000000000000 */
  1.24939102174724003813111039562500082E+00L, /* 3fff3fd8170a52071800000000000000 */
  1.25428099994668373895478907797951251E+00L, /* 3fff41188f42c3e32000000000000000 */
  1.25919011697966698459794088194030337E+00L, /* 3fff425a4893dfc3f800000000000000 */
  1.26411844775346637881341393949696794E+00L, /* 3fff439d443f5f159000000000000000 */
  1.26906606746853711786826579555054195E+00L, /* 3fff44e183883d9e4800000000000000 */
  1.27403305161966090564007458851847332E+00L, /* 3fff462707b2bac20c00000000000000 */
  1.27901947599709753244923149395617656E+00L, /* 3fff476dd2045ac67800000000000000 */
  1.28402541668774150540599521264084615E+00L, /* 3fff48b5e3c3e8186800000000000000 */
  1.28905095007628295311619126550795045E+00L, /* 3fff49ff3e397492bc00000000000000 */
  1.29409615284637330434591717676084954E+00L, /* 3fff4b49e2ae5ac67400000000000000 */
  1.29916110198179535206719492634874769E+00L, /* 3fff4c95d26d3f440800000000000000 */
  1.30424587476763775839572190307080746E+00L, /* 3fff4de30ec211e60000000000000000 */
  1.30935054879147461104338390214252286E+00L, /* 3fff4f3198fa0f1cf800000000000000 */
  1.31447520194454914310711046709911898E+00L, /* 3fff50817263c13cd000000000000000 */
  1.31961991242296217130558488861424848E+00L, /* 3fff51d29c4f01cb3000000000000000 */
  1.32478475872886558573071624778094701E+00L, /* 3fff5325180cfacf7800000000000000 */
  1.32996981967165983640200010995613411E+00L, /* 3fff5478e6f02823d000000000000000 */
  1.33517517436919680440254865061433520E+00L, /* 3fff55ce0a4c58c7bc00000000000000 */
  1.34040090224898678084031189428060316E+00L, /* 3fff57248376b033d800000000000000 */
  1.34564708304941055283521222918352578E+00L, /* 3fff587c53c5a7af0400000000000000 */
  1.35091379682093615244298234756570309E+00L, /* 3fff59d57c910fa4e000000000000000 */
  1.35620112392734021300455538039386738E+00L, /* 3fff5b2fff3210fd9400000000000000 */
  1.36150914504693443252136830778908916E+00L, /* 3fff5c8bdd032e770800000000000000 */
  1.36683794117379636690046140756749082E+00L, /* 3fff5de9176045ff5400000000000000 */
  1.37218759361900544124779344201670028E+00L, /* 3fff5f47afa69210a800000000000000 */
  1.37755818401188367960941150158760138E+00L, /* 3fff60a7a734ab0e8800000000000000 */
  1.38294979430124120867162673675920814E+00L, /* 3fff6208ff6a88a46000000000000000 */
  1.38836250675662681297595213436579797E+00L, /* 3fff636bb9a983258400000000000000 */
  1.39379640396958309755959248832368758E+00L, /* 3fff64cfd75454ee7c00000000000000 */
  1.39925156885490681313299887733592186E+00L, /* 3fff663559cf1bc7c400000000000000 */
  1.40472808465191417726103395580139477E+00L, /* 3fff679c427f5a49f400000000000000 */
  1.41022603492571069194738697660795879E+00L, /* 3fff690492cbf9432c00000000000000 */
  1.41574550356846662335641440222389065E+00L, /* 3fff6a6e4c1d491e1800000000000000 */

  9.98018323540573404351050612604012713E-01L, /* 3ffefefc41f8d4bdb000000000000000 */
  9.98048781107475468932221929208026268E-01L, /* 3ffeff003ff556aa8800000000000000 */
  9.98079239603882895082165305211674422E-01L, /* 3ffeff043df9d4986000000000000000 */
  9.98109699029824021243584297735651489E-01L, /* 3ffeff083c064e972c00000000000000 */
  9.98140159385327269125909310787392315E-01L, /* 3ffeff0c3a1ac4b6ec00000000000000 */
  9.98170620670420977171843901487591211E-01L, /* 3ffeff10383737079400000000000000 */
  9.98201082885133511579667242585856002E-01L, /* 3ffeff14365ba5991c00000000000000 */
  9.98231546029493238547658506831794512E-01L, /* 3ffeff183488107b7c00000000000000 */
  9.98262010103528552029672482603928074E-01L, /* 3ffeff1c32bc77beb000000000000000 */
  9.98292475107267818223988342651864514E-01L, /* 3ffeff2030f8db72b000000000000000 */
  9.98322941040739375573309644096298143E-01L, /* 3ffeff242f3d3ba77000000000000000 */
  9.98353407903971645787066790944663808E-01L, /* 3ffeff282d89986cf000000000000000 */
  9.98383875696992967307963340317655820E-01L, /* 3ffeff2c2bddf1d32400000000000000 */
  9.98414344419831761845429696222709026E-01L, /* 3ffeff302a3a47ea0c00000000000000 */
  9.98444814072516340086593800151604228E-01L, /* 3ffeff34289e9ac19800000000000000 */
  9.98475284655075123740886056111776270E-01L, /* 3ffeff38270aea69c800000000000000 */
  9.98505756167536479006585636852832977E-01L, /* 3ffeff3c257f36f29400000000000000 */
  9.98536228609928799837547330753295682E-01L, /* 3ffeff4023fb806bf800000000000000 */
  9.98566701982280452432050310562772211E-01L, /* 3ffeff44227fc6e5ec00000000000000 */
  9.98597176284619802988373749030870385E-01L, /* 3ffeff48210c0a706800000000000000 */
  9.98627651516975245460372434536111541E-01L, /* 3ffeff4c1fa04b1b6800000000000000 */
  9.98658127679375173801901155457017012E-01L, /* 3ffeff501e3c88f6e800000000000000 */
  9.98688604771847954211239084543194622E-01L, /* 3ffeff541ce0c412e000000000000000 */
  9.98719082794421980642241010173165705E-01L, /* 3ffeff581b8cfc7f4c00000000000000 */
  9.98749561747125619293186105096538085E-01L, /* 3ffeff5c1a41324c2400000000000000 */
  9.98780041629987291873504773320746608E-01L, /* 3ffeff6018fd65896800000000000000 */
  9.98810522443035364581476187595399097E-01L, /* 3ffeff6417c196471000000000000000 */
  9.98841004186298203615379520670103375E-01L, /* 3ffeff68168dc4951400000000000000 */
  9.98871486859804230684645176552294288E-01L, /* 3ffeff6c1561f0837400000000000000 */
  9.98901970463581839743127943620493170E-01L, /* 3ffeff70143e1a222c00000000000000 */
  9.98932454997659369233531378995394334E-01L, /* 3ffeff74132241813000000000000000 */
  9.98962940462065268620861502313346136E-01L, /* 3ffeff78120e66b08400000000000000 */
  9.98993426856827904103397486323956400E-01L, /* 3ffeff7c110289c02000000000000000 */
  9.99023914181975669634994119405746460E-01L, /* 3ffeff800ffeaac00000000000000000 */
  9.99054402437536959169506189937237650E-01L, /* 3ffeff840f02c9c02000000000000000 */
  9.99084891623540138905212870668037795E-01L, /* 3ffeff880e0ee6d07800000000000000 */
  9.99115381740013658307120181234495249E-01L, /* 3ffeff8c0d2302010c00000000000000 */
  9.99145872786985911329082910015131347E-01L, /* 3ffeff900c3f1b61d800000000000000 */
  9.99176364764485236413804614130640402E-01L, /* 3ffeff940b633302d000000000000000 */
  9.99206857672540083026291313217370771E-01L, /* 3ffeff980a8f48f3f800000000000000 */
  9.99237351511178817364822180024930276E-01L, /* 3ffeff9c09c35d454800000000000000 */
  9.99267846280429861138827618560753763E-01L, /* 3ffeffa008ff7006c000000000000000 */
  9.99298341980321608302162417203362565E-01L, /* 3ffeffa4084381485c00000000000000 */
  9.99328838610882452808681364331278019E-01L, /* 3ffeffa8078f911a1800000000000000 */
  9.99359336172140816367814863951934967E-01L, /* 3ffeffac06e39f8bf400000000000000 */
  9.99389834664125092933417704443854745E-01L, /* 3ffeffb0063facadec00000000000000 */
  9.99420334086863676459344674185558688E-01L, /* 3ffeffb405a3b88ffc00000000000000 */
  9.99450834440384988655026177184481639E-01L, /* 3ffeffb8050fc3422400000000000000 */
  9.99481335724717395718741386190231424E-01L, /* 3ffeffbc0483ccd45c00000000000000 */
  9.99511837939889374871071936468069907E-01L, /* 3ffeffc003ffd556ac00000000000000 */
  9.99542341085929264554721385138691403E-01L, /* 3ffeffc40383dcd90800000000000000 */
  9.99572845162865514234695751838444266E-01L, /* 3ffeffc8030fe36b7400000000000000 */
  9.99603350170726517864849824945849832E-01L, /* 3ffeffcc02a3e91dec00000000000000 */
  9.99633856109540669399038392839429434E-01L, /* 3ffeffd0023fee006c00000000000000 */
  9.99664362979336418302267475155531429E-01L, /* 3ffeffd401e3f222f800000000000000 */
  9.99694870780142130772816244643763639E-01L, /* 3ffeffd8018ff5958800000000000000 */
  9.99725379511986284031266336569387931E-01L, /* 3ffeffdc0143f8682400000000000000 */
  9.99755889174897216520321308053098619E-01L, /* 3ffeffe000fffaaac000000000000000 */
  9.99786399768903377704987178731244057E-01L, /* 3ffeffe400c3fc6d6000000000000000 */
  9.99816911294033217050269968240172602E-01L, /* 3ffeffe8008ffdc00800000000000000 */
  9.99847423750315072998873233700578567E-01L, /* 3ffeffec0063feb2ac00000000000000 */
  9.99877937137777450526954226006637327E-01L, /* 3ffefff0003fff555800000000000000 */
  9.99908451456448688077216502279043198E-01L, /* 3ffefff40023ffb80000000000000000 */
  9.99938966706357262870241697783058044E-01L, /* 3ffefff8000fffeaac00000000000000 */
  9.99969482887531541104308985268289689E-01L, /* 3ffefffc0003fffd5400000000000000 */
#define T_EXPL_RES2 (T_EXPL_RES1 + 1 + 89 + 65)
  1.00000000000000000000000000000000000E+00L, /* 3fff0000000000000000000000000000 */
  1.00003051804379100575559391472779680E+00L, /* 3fff0002000200015400000000000000 */
  1.00006103701893306334724798034585547E+00L, /* 3fff00040008000aac00000000000000 */
  1.00009155692545448346209013834595680E+00L, /* 3fff0006001200240000000000000000 */
  1.00012207776338379883185325525118969E+00L, /* 3fff0008002000555800000000000000 */
  1.00015259953274932014366527255333494E+00L, /* 3fff000a003200a6ac00000000000000 */
  1.00018312223357958012925905677548144E+00L, /* 3fff000c004801200400000000000000 */
  1.00021364586590294498691378066723701E+00L, /* 3fff000e006201c95c00000000000000 */
  1.00024417042974783642605984823603649E+00L, /* 3fff0010008002aab400000000000000 */
  1.00027469592514273166727889474714175E+00L, /* 3fff001200a203cc1000000000000000 */
  1.00030522235211605242000132420798764E+00L, /* 3fff001400c805357000000000000000 */
  1.00033574971069616488250630936818197E+00L, /* 3fff001600f206eed000000000000000 */
  1.00036627800091160178652671675081365E+00L, /* 3fff0018012009003800000000000000 */
  1.00039680722279067381919048784766346E+00L, /* 3fff001a01520b71a000000000000000 */
  1.00042733737636191371223048918182030E+00L, /* 3fff001c01880e4b1000000000000000 */
  1.00045786846165368766392589350289200E+00L, /* 3fff001e01c211948400000000000000 */
  1.00048840047869447289485833607614040E+00L, /* 3fff0020020015560000000000000000 */
  1.00051893342751269111445822090900037E+00L, /* 3fff0022024219978400000000000000 */
  1.00054946730813676403215595200890675E+00L, /* 3fff002402881e611000000000000000 */
  1.00058000212059516886853316464112140E+00L, /* 3fff002602d223baa800000000000000 */
  1.00061053786491632733302026281307917E+00L, /* 3fff0028032029ac4c00000000000000 */
  1.00064107454112866113504765053221490E+00L, /* 3fff002a0372303dfc00000000000000 */
  1.00067161214926059198404573180596344E+00L, /* 3fff002c03c83777b800000000000000 */
  1.00070215068934059710059614189958666E+00L, /* 3fff002e04223f618400000000000000 */
  1.00073269016139709819412928482051939E+00L, /* 3fff0030048048036000000000000000 */
  1.00076323056545857248522679583402351E+00L, /* 3fff003204e251655000000000000000 */
  1.00079377190155338617216784768970683E+00L, /* 3fff003405485b8f5000000000000000 */
  1.00082431416971007198668530691065826E+00L, /* 3fff003605b266896800000000000000 */
  1.00085485736995705163820957750431262E+00L, /* 3fff00380620725b9800000000000000 */
  1.00088540150232269132501983222027775E+00L, /* 3fff003a06927f0ddc00000000000000 */
  1.00091594656683552377884893758164253E+00L, /* 3fff003c07088ca83c00000000000000 */
  1.00094649256352402622027852885366883E+00L, /* 3fff003e07829b32bc00000000000000 */
  1.00097703949241650933643654752813745E+00L, /* 3fff00400800aab55400000000000000 */
  1.00100758735354156137020709138596430E+00L, /* 3fff00420882bb381000000000000000 */
  1.00103813614692760403102056443458423E+00L, /* 3fff00440908ccc2f000000000000000 */
  1.00106868587260300351715613942360505E+00L, /* 3fff00460992df5df000000000000000 */
  1.00109923653059629256034668287611566E+00L, /* 3fff00480a20f3111800000000000000 */
  1.00112978812093589287002259879955091E+00L, /* 3fff004a0ab307e46800000000000000 */
  1.00116034064365022615561429120134562E+00L, /* 3fff004c0b491ddfe000000000000000 */
  1.00119089409876788066000585786241572E+00L, /* 3fff004e0be3350b8c00000000000000 */
  1.00122144848631711155917400901671499E+00L, /* 3fff00500c814d6f6000000000000000 */
  1.00125200380632656260715407370298635E+00L, /* 3fff00520d2367136c00000000000000 */
  1.00128256005882454449107399341301061E+00L, /* 3fff00540dc981ffa800000000000000 */
  1.00131311724383964545381786592770368E+00L, /* 3fff00560e739e3c2000000000000000 */
  1.00134367536140017618251363273884635E+00L, /* 3fff00580f21bbd0cc00000000000000 */
  1.00137423441153472492004539162735455E+00L, /* 3fff005a0fd3dac5b800000000000000 */
  1.00140479439427171337584354660066310E+00L, /* 3fff005c1089fb22e400000000000000 */
  1.00143535530963956325933850166620687E+00L, /* 3fff005e11441cf05000000000000000 */
  1.00146591715766680730226312334707472E+00L, /* 3fff0060120240360400000000000000 */
  1.00149647993838186721404781565070152E+00L, /* 3fff006212c464fc0000000000000000 */
  1.00152704365181316470412298258452211E+00L, /* 3fff0064138a8b4a4400000000000000 */
  1.00155760829798923250422149067162536E+00L, /* 3fff00661454b328d800000000000000 */
  1.00158817387693849232377374391944613E+00L, /* 3fff00681522dc9fbc00000000000000 */
  1.00161874038868942138336137759324629E+00L, /* 3fff006a15f507b6f400000000000000 */
  1.00164930783327055241471725821611471E+00L, /* 3fff006c16cb34768800000000000000 */
  1.00167987621071025161612055853765924E+00L, /* 3fff006e17a562e67400000000000000 */
  1.00171044552103705171930414508096874E+00L, /* 3fff00701883930ec000000000000000 */
  1.00174101576427937443369842185347807E+00L, /* 3fff00721965c4f76c00000000000000 */
  1.00177158694046569697988502412044909E+00L, /* 3fff00741a4bf8a87c00000000000000 */
  1.00180215904962455208959681840497069E+00L, /* 3fff00761b362e29f800000000000000 */
  1.00183273209178441698341543997230474E+00L, /* 3fff00781c246583e400000000000000 */
  1.00186330606697365785962006157205906E+00L, /* 3fff007a1d169ebe3c00000000000000 */
  1.00189388097522080744994354972732253E+00L, /* 3fff007c1e0cd9e10800000000000000 */
  1.00192445681655439848611877096118405E+00L, /* 3fff007e1f0716f45000000000000000 */
  1.00195503359100279716642489802325144E+00L, /* 3fff0080200556001000000000000000 */
  1.00198561129859459173374602869444061E+00L, /* 3fff00822107970c5400000000000000 */
};

// pow ln
// float
#define LN_2  0x1.62e43p-1f
#define MASKf_mant 0x007fffff
#define TwoThirdf 0x3f2aaaab

static const float _ln_pf[] = {
  // -0.4999991655349731445312500, 0.3333644270896911621093750, -0.2500934004783630371093750,
  // 0.1982789635658264160156250, -0.1638664305210113525390625, 0.1692402511835098266601562,
  // -0.1554937064647674560546875
   -0x1.ffffc8p-2f, 0x1.555d7cp-2f, -0x1.00187cp-2f,       
   0x1.961348p-3f, -0x1.4f9934p-3f, 0x1.5a9aa2p-3f,        
   -0x1.3e737cp-3f, 
};

// double
#define LogA0 -0.4999999999999995003996389186795568093657
#define LogA1 0.3333333333191721425947662282851524651051
#define LogA2 -0.2500000002095838502746971698798006400466
#define LogA3 0.2000030172322680432905883662897394970059
#define LogA4 -0.1666533130870683776514340479479869827628
#define Ln2 0x1.62e42fefa39efp-1
#define OFF_d 0x3fe6900900000000

#define Top19f 0xffffe000
#define Pif 0x40490fdb
#define Pid2f 0x3fc90fdb

#define MASK_sign 0x8000000000000000
#define Pi 0x400921fb54442d18
#define Pid2 0x3ff921fb54442d18
#define Y 0x3ca1a62633145c07
#define Yd2 0x3c91a62633145c07

#define ASCTH_P1 0.20000036659494241
#define ASCTH_P2 0.2500003054940248
#define ASCTH_P3 0.33333333333308374
#define ASCTH_P4 0.49999999999988803
#define ASCTH_P5 0.69314718055994529

// Acosh
#define LN2f 0.693147181
#define ACOSH_P1 0.24609376763339827
#define ACOSH_P2 0.27343751848758524
#define ACOSH_P3 0.31249999999999967
#define ACOSH_P4 0.37499999999999967
#define ACOSH_P5 0.5

#define InvPi_f32 0.318309873342514038
#define HalfPi_f32 1.570796370506286621
#define InvPi_f64 0.318309886183790691216444
#define HalfPi_f64 1.570796326794896557998982

static const float SC_Pi1_f32 = 0x1.921fb6p+1f, SC_Pi2_f32 = -0x1.777a5cp-24f, SC_Pi3_f32 = -0x1.ee59dap-49f;
static const float SC_A3_f32 = -0.166666567325592041, SC_A5_f32 = 0.008332962170243263, SC_A7_f32 = -0.000198012057808228, SC_A9_f32 = 0.000002586703658380;

static const double SC_Pi1_f64 = 0x1.921fb54442d18p+1, SC_Pi2_f64 = 0x1.1a62633145c06p-53, SC_Pi3_f64 = 0x1.c1cd129024e09p-106;
static const double SC_C7_f64 = -0.000000000000737705809620, SC_C6_f64 = 0.000000000160484140302171, SC_C5_f64 = -0.000000025051890975380964,
      SC_C4_f64 = 0.000002755731677762568267, SC_C3_f64 = -0.000198412698265405779792, SC_C2_f64 = 0.008333333333291278316457,
      SC_C1_f64 = -0.166666666666662605100768;

static const unsigned long acosh_table_f64_la[1552]=
{0xc086232bdd7a8300,0xbe1ce91eef3fb100,
0xc086232fdc7ad828,0xbe1cefcffda73b6a,
0xc0862333d97d2ba0,0xbe1cef406748f1ff,
0xc0862337d48378e0,0xbe1cef2a9429925a,
0xc086233bcd8fb878,0xbe1cf138d17ebecb,
0xc086233fc4a3e018,0xbe1ceff2dbbbb29e,
0xc0862343b9c1e270,0xbe1cf1a42aae437b,
0xc0862347acebaf68,0xbe1cef3b152048af,
0xc086234b9e2333f0,0xbe1cef20e127805e,
0xc086234f8d6a5a30,0xbe1cf00ad6052cf4,
0xc08623537ac30980,0xbe1cefc4642ee597,
0xc0862357662f2660,0xbe1cf1f277d36e16,
0xc086235b4fb092a0,0xbe1ceed009e8d8e6,
0xc086235f37492d28,0xbe1cf1e4038cb362,
0xc08623631cfad250,0xbe1cf0b0873b8557,
0xc086236700c75b98,0xbe1cf15bb3227c0b,
0xc086236ae2b09fe0,0xbe1cf151ef8ca9ed,
0xc086236ec2b87358,0xbe1cefe1dc2cd2ed,
0xc0862372a0e0a780,0xbe1cf0d1eec5454f,
0xc08623767d2b0b48,0xbe1ceeefd570bbce,
0xc086237a57996af0,0xbe1cee99ae91b3a7,
0xc086237e302d9028,0xbe1cf0412830fbd1,
0xc086238206e94218,0xbe1ceee898588610,
0xc0862385dbce4548,0xbe1cee9a1fbcaaea,
0xc0862389aede5bc0,0xbe1ceed8e7cc1ad6,
0xc086238d801b4500,0xbe1cf10c8d059da6,
0xc08623914f86be18,0xbe1ceee6c63a8165,
0xc08623951d228180,0xbe1cf0c3592d2ff1,
0xc0862398e8f04758,0xbe1cf0026cc4cb1b,
0xc086239cb2f1c538,0xbe1cf15d48d8e670,
0xc08623a07b28ae60,0xbe1cef359363787c,
0xc08623a44196b390,0xbe1cefdf1ab2e82c,
0xc08623a8063d8338,0xbe1cefe43c02aa84,
0xc08623abc91ec960,0xbe1cf044f5ae35b7,
0xc08623af8a3c2fb8,0xbe1cf0b0b4001e1b,
0xc08623b349975d98,0xbe1cf1bae76dfbcf,
0xc08623b70731f810,0xbe1cef0a72e13a62,
0xc08623bac30da1c8,0xbe1cf184007d2b6b,
0xc08623be7d2bfb40,0xbe1cf16f4b239e98,
0xc08623c2358ea2a0,0xbe1cf0976acada87,
0xc08623c5ec3733d0,0xbe1cf066318a16ff,
0xc08623c9a1274880,0xbe1ceffaa7148798,
0xc08623cd54607820,0xbe1cf23ab02e9b6e,
0xc08623d105e45800,0xbe1cefdfef7d4fde,
0xc08623d4b5b47b20,0xbe1cf17fece44f2b,
0xc08623d863d27270,0xbe1cf18f907d0d7c,
0xc08623dc103fccb0,0xbe1cee61fe072c98,
0xc08623dfbafe1668,0xbe1cf022dd891e2f,
0xc08623e3640eda20,0xbe1ceecc1daf4358,
0xc08623e70b73a028,0xbe1cf0173c4fa380,
0xc08623eab12deec8,0xbe1cf16a2150c2f4,
0xc08623ee553f4a30,0xbe1cf1bf980b1f4b,
0xc08623f1f7a93480,0xbe1cef8b731663c2,
0xc08623f5986d2dc0,0xbe1cee9a664d7ef4,
0xc08623f9378cb3f0,0xbe1cf1eda2af6400,
0xc08623fcd5094320,0xbe1cf1923f9d68d7,
0xc086240070e45548,0xbe1cf0747cd3e03a,
0xc08624040b1f6260,0xbe1cf22ee855bd6d,
0xc0862407a3bbe078,0xbe1cf0d57360c00b,
0xc086240b3abb4398,0xbe1ceebc815cd575,
0xc086240ed01efdd0,0xbe1cf03bfb970951,
0xc086241263e87f50,0xbe1cf16e74768529,
0xc0862415f6193658,0xbe1cefec64b8becb,
0xc086241986b28f30,0xbe1cf0838d210baa,
0xc086241d15b5f448,0xbe1cf0ea86e75b11,
0xc0862420a324ce28,0xbe1cf1708d11d805,
0xc08624242f008380,0xbe1ceea988c5a417,
0xc0862427b94a7910,0xbe1cef166a7bbca5,
0xc086242b420411d0,0xbe1cf0c9d9e86a38,
0xc086242ec92eaee8,0xbe1cef0946455411,
0xc08624324ecbaf98,0xbe1cefea60907739,
0xc0862435d2dc7160,0xbe1cf1ed0934ce42,
0xc086243955624ff8,0xbe1cf191ba746c7d,
0xc086243cd65ea548,0xbe1ceeec78cf2a7e,
0xc086244055d2c968,0xbe1cef345284c119,
0xc0862443d3c012b8,0xbe1cf24f77355219,
0xc08624475027d5e8,0xbe1cf05bf087e114,
0xc086244acb0b65d0,0xbe1cef3504a32189,
0xc086244e446c1398,0xbe1ceff54b2a406f,
0xc0862451bc4b2eb8,0xbe1cf0757d54ed4f,
0xc086245532aa04f0,0xbe1cf0c8099fdfd5,
0xc0862458a789e250,0xbe1cf0b173796a31,
0xc086245c1aec1138,0xbe1cf11d8734540d,
0xc086245f8cd1da60,0xbe1cf1916a723ceb,
0xc0862462fd3c84d8,0xbe1cf19a911e1da7,
0xc08624666c2d5608,0xbe1cf23a9ef72e4f,
0xc0862469d9a591c0,0xbe1cef503d947663,
0xc086246d45a67a18,0xbe1cf0fceeb1a0b2,
0xc0862470b0314fa8,0xbe1cf107e27e4fbc,
0xc086247419475160,0xbe1cf03dd9922331,
0xc086247780e9bc98,0xbe1cefce1a10e129,
0xc086247ae719cd18,0xbe1ceea47f73c4f6,
0xc086247e4bd8bd10,0xbe1ceec0ac56d100,
0xc0862481af27c528,0xbe1cee8a6593278a,
0xc086248511081c70,0xbe1cf2231dd9dec7,
0xc0862488717af888,0xbe1cf0b4b8ed7da8,
0xc086248bd0818d68,0xbe1cf1bd8d835002,
0xc086248f2e1d0d98,0xbe1cf259acc107f4,
0xc08624928a4eaa20,0xbe1cee897636b00c,
0xc0862495e5179270,0xbe1cee757f20c326,
0xc08624993e78f490,0xbe1cefafd3aa54a4,
0xc086249c9673fd10,0xbe1cee7298d38b97,
0xc086249fed09d6f8,0xbe1ceedc158d4ceb,
0xc08624a3423babe0,0xbe1cf2282987cb2e,
0xc08624a6960aa400,0xbe1cefe7381ecc4b,
0xc08624a9e877e600,0xbe1cef328dbbce80,
0xc08624ad39849728,0xbe1cefde45f3cc71,
0xc08624b08931db58,0xbe1cefa8b89433b9,
0xc08624b3d780d500,0xbe1cef6773c0b139,
0xc08624b72472a528,0xbe1cf031c931c11f,
0xc08624ba70086b78,0xbe1cf088f49275e7,
0xc08624bdba434630,0xbe1cf17de0eaa86d,
0xc08624c103245238,0xbe1cefd492f1ba75,
0xc08624c44aacab08,0xbe1cf1253e154466,
0xc08624c790dd6ad0,0xbe1cf0fb09ee6d55,
0xc08624cad5b7aa58,0xbe1cf1f08dd048fe,
0xc08624ce193c8120,0xbe1ceeca0809697f,
0xc08624d15b6d0538,0xbe1cef8d5662d968,
0xc08624d49c4a4b78,0xbe1cee97b556ed78,
0xc08624d7dbd56750,0xbe1cf1b14b6acb75,
0xc08624db1a0f6b00,0xbe1cef1e860623f2,
0xc08624de56f96758,0xbe1ceeaf4d156f3d,
0xc08624e192946bf0,0xbe1ceecc12b400ed,
0xc08624e4cce18710,0xbe1cf180c40c794f,
0xc08624e805e1c5c8,0xbe1cf185a08f7f65,
0xc08624eb3d9633d8,0xbe1cef45fc924078,
0xc08624ee73ffdbb0,0xbe1cf1e4f457f32a,
0xc08624f1a91fc6a0,0xbe1cf040147b8a5a,
0xc08624f4dcf6fc98,0xbe1cf1effca0dfb2,
0xc08624f80f868468,0xbe1cf0470146e5bc,
0xc08624fb40cf6390,0xbe1cef4dd186e501,
0xc08624fe70d29e60,0xbe1ceebe257f66c7,
0xc08625019f9137f0,0xbe1ceefb7a1c395c,
0xc0862504cd0c3220,0xbe1cf209dedfed8c,
0xc0862507f9448db0,0xbe1cf082da464994,
0xc086250b243b4a18,0xbe1cee88694a73cf,
0xc086250e4df165a0,0xbe1cf0b61e8f0531,
0xc08625117667dd78,0xbe1cf1106599c962,
0xc08625149d9fad98,0xbe1ceff1ee88af1f,
0xc0862517c399d0c8,0xbe1cf0f746994ef6,
0xc086251ae85740b8,0xbe1cefe8a1d077e4,
0xc086251e0bd8f5e0,0xbe1cf1a1da036092,
0xc08625212e1fe7a8,0xbe1cf0f8a7786fcd,
0xc08625244f2d0c48,0xbe1cefa1174a07a7,
0xc08625276f0158d8,0xbe1cef1043aa5b25,
0xc086252a8d9dc150,0xbe1cf15d521c169d,
0xc086252dab033898,0xbe1cf220bba8861f,
0xc0862530c732b078,0xbe1cef51e310eae2,
0xc0862533e22d1988,0xbe1cf222fcedd8ae,
0xc0862536fbf36370,0xbe1cefdb4da4bda8,
0xc086253a14867ca0,0xbe1ceeafc1112171,
0xc086253d2be75280,0xbe1cee99dfb4b408,
0xc08625404216d160,0xbe1cf22d2536f06b,
0xc08625435715e498,0xbe1cef6abbf2e268,
0xc08625466ae57648,0xbe1cf093a14789f5,
0xc08625497d866fa0,0xbe1cf0f93655603c,
0xc086254c8ef9b8b8,0xbe1cf1cc40c9aafc,
0xc086254f9f4038a8,0xbe1ceeea5f4e9157,
0xc0862552ae5ad568,0xbe1cefa9f52d4997,
0xc0862555bc4a7400,0xbe1cefa490a638ff,
0xc0862558c90ff868,0xbe1cef7fcf797d6f,
0xc086255bd4ac4590,0xbe1cf1b4c51113c9,
0xc086255edf203d78,0xbe1cef55e5b4a55d,
0xc0862561e86cc100,0xbe1cf0d37a25f9dc,
0xc0862564f092b028,0xbe1ceebe9efc19d9,
0xc0862567f792e9d8,0xbe1cee8ad30a57b5,
0xc086256afd6e4c08,0xbe1cef4e1817b90b,
0xc086256e0225b3b8,0xbe1cee7fa9229996,
0xc086257105b9fce0,0xbe1cf0b54963d945,
0xc0862574082c0298,0xbe1cee5f2f3c7995,
0xc0862577097c9ee0,0xbe1cf0828e303a2c,
0xc086257a09acaae0,0xbe1cf172c3078947,
0xc086257d08bcfec0,0xbe1cf189252afa22,
0xc086258006ae71b8,0xbe1cefdb80426923,
0xc08625830381da08,0xbe1ceef1391a0372,
0xc0862585ff380d00,0xbe1cf17720c78d13,
0xc0862588f9d1df18,0xbe1ceef1f9027d83,
0xc086258bf35023b8,0xbe1cf06fac99dec9,
0xc086258eebb3ad78,0xbe1cf1373eeb45c0,
0xc0862591e2fd4e00,0xbe1cef777536bb81,
0xc0862594d92dd600,0xbe1cf0f43ca40766,
0xc0862597ce461558,0xbe1cefb2cfc6766b,
0xc086259ac246daf0,0xbe1ceea49e64ffa2,
0xc086259db530f4c8,0xbe1cf250fa457dec,
0xc08625a0a7053018,0xbe1cf17d8bb2a44e,
0xc08625a397c45918,0xbe1cf1d5906d54b7,
0xc08625a6876f3b30,0xbe1cf08fe7b31780,
0xc08625a97606a0e0,0xbe1cef13edfc9d11,
0xc08625ac638b53c8,0xbe1cef9d2b107219,
0xc08625af4ffe1cb0,0xbe1cf1ddd4ff6160,
0xc08625b23b5fc390,0xbe1cefa02a996495,
0xc08625b525b10f68,0xbe1cf166a7e37ee5,
0xc08625b80ef2c680,0xbe1cef0b171068a5,
0xc08625baf725ae28,0xbe1cf05c80779283,
0xc08625bdde4a8af0,0xbe1cf1bbfbffb889,
0xc08625c0c4622090,0xbe1cf0b8666c0124,
0xc08625c3a96d31e0,0xbe1cf0a8fcf47a86,
0xc08625c68d6c80f0,0xbe1cef46e18cb092,
0xc08625c97060cef0,0xbe1cf1458a350efb,
0xc08625cc524adc58,0xbe1ceeea1dadce12,
0xc08625cf332b68b0,0xbe1cf0a1bfdc44c7,
0xc08625d2130332d0,0xbe1cef96d02da73e,
0xc08625d4f1d2f8a8,0xbe1cf2451c3c7701,
0xc08625d7cf9b7778,0xbe1cf10d08f83812,
0xc08625daac5d6ba0,0xbe1ceec5b4895c5e,
0xc08625dd881990b0,0xbe1cf14e1325c5e4,
0xc08625e062d0a188,0xbe1cf21d0904be12,
0xc08625e33c835838,0xbe1ceed0839bcf21,
0xc08625e615326df0,0xbe1cf1bb944889d2,
0xc08625e8ecde9b48,0xbe1cee738e85eece,
0xc08625ebc38897e0,0xbe1cf25c2bc6ef12,
0xc08625ee99311ac8,0xbe1cf132b70a41ad,
0xc08625f16dd8da28,0xbe1cf1984236a6e3,
0xc08625f441808b78,0xbe1cf19ae74998f9,
0xc08625f71428e370,0xbe1cef3e175d61a1,
0xc08625f9e5d295f8,0xbe1cf101f9868fd9,
0xc08625fcb67e5658,0xbe1cee69db83dcd2,
0xc08625ff862cd6f8,0xbe1cf081b636af51,
0xc086260254dec9a8,0xbe1cee62c7d59b3e,
0xc08626052294df58,0xbe1cf1b745c57716,
0xc0862607ef4fc868,0xbe1cef3d2800ea23,
0xc086260abb103458,0xbe1cef480ff1acd2,
0xc086260d85d6d200,0xbe1cf2424c9a17ef,
0xc08626104fa44f90,0xbe1cf12cfde90fd5,
0xc086261318795a68,0xbe1cf21f590dd5b6,
0xc0862615e0569f48,0xbe1cf0c50f9cd28a,
0xc0862618a73cca30,0xbe1ceedbdb520545,
0xc086261b6d2c8668,0xbe1cf0b030396011,
0xc086261e32267e98,0xbe1cf19917010e96,
0xc0862620f62b5cb0,0xbe1cf07331355985,
0xc0862623b93bc9e8,0xbe1cf01ae921a1c3,
0xc08626267b586ed0,0xbe1cefe5cf0dbf0c,
0xc08626293c81f348,0xbe1cf01b258aeb50,
0xc086262bfcb8fe88,0xbe1cee6b9e7f4c68,
0xc086262ebbfe3710,0xbe1cee684a9b21c9,
0xc08626317a5242b8,0xbe1cf1f8bcde9a8b,
0xc086263437b5c6c0,0xbe1cf1d063d36238,
0xc0862636f42967a8,0xbe1cf1e31a19075e,
0xc0862639afadc950,0xbe1cf1d8efdf7e7d,
0xc086263c6a438ef0,0xbe1cf1812ee72dba,
0xc086263f23eb5b18,0xbe1cf1449a9a2279,
0xc0862641dca5cfb8,0xbe1cee96edce5085,
0xc086264494738e08,0xbe1cf06797bd03b2,
0xc08626474b5536b8,0xbe1cef91b9b7ffc1,
0xc086264a014b69c0,0xbe1cef4b6721278f,
0xc086264cb656c678,0xbe1cf1942925eb4a,
0xc086264f6a77eba8,0xbe1cefa2c7bc2e39,
0xc08626521daf7758,0xbe1cf252595aceb3,
0xc0862654cffe0718,0xbe1cee8e9ae47ec2,
0xc0862657816437a8,0xbe1cf1bf913828fa,
0xc086265a31e2a558,0xbe1cf23475d6b366,
0xc086265ce179ebc8,0xbe1cef8df00a922b,
0xc086265f902aa5f0,0xbe1cef279bfa43e0,
0xc08626623df56e38,0xbe1cf080e10b8365,
0xc0862664eadade70,0xbe1cf1a518f9b544,
0xc086266796db8fd0,0xbe1cef9308fed9e9,
0xc086266a41f81ae8,0xbe1ceea3ae6b19c9,
0xc086266cec3117b8,0xbe1ceef06003d4c2,
0xc086266f95871da8,0xbe1cf0b8457ffb0c,
0xc08626723dfac390,0xbe1cf0c526745ad6,
0xc0862674e58c9fa8,0xbe1cf0cf91ff7b5d,
0xc08626778c3d4798,0xbe1cefe260819380,
0xc086267a320d5070,0xbe1ceebd90aa27a3,
0xc086267cd6fd4ea8,0xbe1cf0388121dffa,
0xc086267f7b0dd630,0xbe1cf1a3881435f1,
0xc08626821e3f7a68,0xbe1cef28e9d9ac52,
0xc0862684c092ce08,0xbe1cf02d300062dd,
0xc086268762086350,0xbe1cefaee1edfa35,
0xc086268a02a0cbe0,0xbe1cf0a5a052e936,
0xc086268ca25c98d8,0xbe1cee60a4a497ed,
0xc086268f413c5ab0,0xbe1cf0e4a5d0cf49,
0xc0862691df40a170,0xbe1cf149235a4e6e,
0xc08626947c69fc80,0xbe1cf215180b9fcc,
0xc086269718b8fac8,0xbe1cef9b156a9840,
0xc0862699b42e2a90,0xbe1cf054c91441be,
0xc086269c4eca19a8,0xbe1cf13ded26512c,
0xc086269ee88d5550,0xbe1cf22ea4d8ac06,
0xc08626a181786a40,0xbe1cf2354666ee2e,
0xc08626a4198be4a8,0xbe1cefef936752b3,
0xc08626a6b0c85020,0xbe1cf1e360a9db68,
0xc08626a9472e37d8,0xbe1ceed6aeb812c5,
0xc08626abdcbe2650,0xbe1cf227340b4986,
0xc08626ae7178a5b0,0xbe1cf0215a0cbe0d,
0xc08626b1055e3f70,0xbe1cf256adf0ae26,
0xc08626b3986f7ca8,0xbe1ceff3c67aed06,
0xc08626b62aace5c8,0xbe1cf2159fb93652,
0xc08626b8bc1702e0,0xbe1cf01e6dbd1c7f,
0xc08626bb4cae5b60,0xbe1cf009e75d1c0c,
0xc08626bddc737648,0xbe1ceec10a020e73,
0xc08626c06b66da08,0xbe1cf06d5783eee7,
0xc08626c2f9890ca0,0xbe1cf0cb8f169ffe,
0xc08626c586da9388,0xbe1cef7de2452430,
0xc08626c8135bf3b0,0xbe1cf05da6f783ae,
0xc08626ca9f0db198,0xbe1cefcc877d681d,
0xc08626cd29f05138,0xbe1cef0531954ab3,
0xc08626cfb4045608,0xbe1cf06b8565ea3d,
0xc08626d23d4a4310,0xbe1cefdc455d9d7e,
0xc08626d4c5c29ad0,0xbe1ceefc47e8fa64,
0xc08626d74d6ddf48,0xbe1cf1872bf033f2,
0xc08626d9d44c9210,0xbe1cf19d91087f9d,
0xc08626dc5a5f3438,0xbe1cf012d444c6ab,
0xc08626dedfa64650,0xbe1cf0ba528ee153,
0xc08626e164224880,0xbe1ceeb431709788,
0xc08626e3e7d3ba60,0xbe1cf0b9af31a6a5,
0xc08626e66abb1b28,0xbe1cf168fb2e135b,
0xc08626e8ecd8e990,0xbe1cef9097461c93,
0xc08626eb6e2da3d0,0xbe1cee7a434735d8,
0xc08626edeeb9c7a8,0xbe1cf235732b86f2,
0xc08626f06e7dd280,0xbe1cefe1510b89e6,
0xc08626f2ed7a4120,0xbe1cf1f64b9b80ef,
0xc08626f56baf9000,0xbe1cf08f320ca339,
0xc08626f7e91e3b08,0xbe1cf1b1de2808a1,
0xc08626fa65c6bdc0,0xbe1cf1976d778b28,
0xc08626fce1a99338,0xbe1ceef40a4f076f,
0xc08626ff5cc73600,0xbe1cef3e45869ce3,
0xc0862701d7202048,0xbe1ceef601b4c9d6,
0xc086270450b4cbc0,0xbe1cf1eaf0b57fd6,
0xc0862706c985b1c0,0xbe1cef82a44990f3,
0xc086270941934b10,0xbe1ceefe32981f2c,
0xc086270bb8de1018,0xbe1cefbf6f5a0445,
0xc086270e2f6678d0,0xbe1cf18dba75792c,
0xc0862710a52cfcc8,0xbe1cf0da64ce995f,
0xc08627131a321318,0xbe1cef04ac0fb802,
0xc08627158e763268,0xbe1cee9d4e2ad9bd,
0xc086271801f9d0f8,0xbe1cefa9b55407b5,
0xc086271a74bd64a0,0xbe1cefe6bd329570,
0xc086271ce6c162c8,0xbe1cef0b1205dc85,
0xc086271f58064068,0xbe1cef092a785e3f,
0xc0862721c88c7210,0xbe1cf050dcdaac30,
0xc086272438546be8,0xbe1cf210907ded8b,
0xc0862726a75ea1b8,0xbe1cee760be44f99,
0xc086272915ab86c0,0xbe1ceeeee07c2bcc,
0xc086272b833b8df0,0xbe1cf06874992df5,
0xc086272df00f29d0,0xbe1cef8fac5d4899,
0xc08627305c26cc70,0xbe1cf1103241cc99,
0xc0862732c782e788,0xbe1cf1d35fef83fe,
0xc08627353223ec68,0xbe1cef3ec8133e1d,
0xc08627379c0a4be8,0xbe1cef7261daccd8,
0xc086273a05367688,0xbe1cf18656c50806,
0xc086273c6da8dc68,0xbe1cf1c8736e049a,
0xc086273ed561ed38,0xbe1cf1f93bff4911,
0xc08627413c621848,0xbe1cf188a4ea680c,
0xc0862743a2a9cc80,0xbe1cf1d270930c80,
0xc086274608397868,0xbe1cf25a328c28e2,
0xc08627486d118a28,0xbe1cf106f90aa3b8,
0xc086274ad1326f80,0xbe1cee5e9d2e885a,
0xc086274d349c95c0,0xbe1cf1c0bac27228,
0xc086274f975069f8,0xbe1cf1a1500f9b1c,
0xc0862751f94e58c0,0xbe1cefc30663ac44,
0xc08627545a96ce48,0xbe1cf17123e427a2,
0xc0862756bb2a3678,0xbe1cefb92749fea4,
0xc08627591b08fcc0,0xbe1cefa40e1ea74a,
0xc086275b7a338c40,0xbe1cee6f4612c3e9,
0xc086275dd8aa4fa8,0xbe1cf1c54a053627,
0xc0862760366db168,0xbe1ceff5eb503d9e,
0xc0862762937e1b70,0xbe1cf02e47f10cee,
0xc0862764efdbf768,0xbe1ceeb06e1d0dad,
0xc08627674b87ae88,0xbe1cf10aadd6dba5,
0xc0862769a681a9c0,0xbe1cf24e9913d30f,
0xc086276c00ca51a0,0xbe1cef47b301e312,
0xc086276e5a620e48,0xbe1ceeb1cefc2e85,
0xc0862770b3494788,0xbe1cf16f1fbbe011,
0xc08627730b8064e8,0xbe1ceebdf75174c7,
0xc08627756307cd70,0xbe1cf06e3871a0da,
0xc0862777b9dfe7f0,0xbe1cef16799fd554,
0xc086277a10091ac0,0xbe1cf248dabf5377,
0xc086277c6583cc00,0xbe1cf0c78d92a2cd,
0xc086277eba506158,0xbe1cf0b911b029f0,
0xc08627810e6f4028,0xbe1cefdc24719766,
0xc086278361e0cd70,0xbe1cefbb6562b7e7,
0xc0862785b4a56dd8,0xbe1cf1e0afb349ec,
0xc086278806bd85c0,0xbe1cf008292e52fc,
0xc086278a58297918,0xbe1cf053073872bf,
0xc086278ca8e9ab88,0xbe1cf17a0a55a947,
0xc086278ef8fe8068,0xbe1ceeffb0b60234,
0xc086279148685aa0,0xbe1cf162204794a8,
0xc086279397279ce0,0xbe1cf24cc8cb48ac,
0xc0862795e53ca978,0xbe1cf0c9be68d5c3,
0xc086279832a7e258,0xbe1cf172cd3d7388,
0xc086279a7f69a930,0xbe1ceea2465fbce5,
0xc086279ccb825f40,0xbe1cf0a386d2500f,
0xc086279f16f26590,0xbe1cf1e338ddc18a,
0xc08627a161ba1cd0,0xbe1cef1f5049867f,
0xc08627a3abd9e548,0xbe1cef96c1ea8b1f,
0xc08627a5f5521f00,0xbe1cf138f6fd3c26,
0xc08627a83e2329b0,0xbe1cf0d4fcbfdf3a,
0xc08627aa864d64b0,0xbe1cf24870c12c81,
0xc08627accdd12f18,0xbe1cf0ae2a56348d,
0xc08627af14aee7a0,0xbe1cee8ca1a9b893,
0xc08627b15ae6eca8,0xbe1cf20414d637b0,
0xc08627b3a0799c60,0xbe1cf0fc6b7b12d8,
0xc08627b5e5675488,0xbe1cf152d93c4a00,
0xc08627b829b072a0,0xbe1cf1073f9b77c2,
0xc08627ba6d5553d8,0xbe1cee694f97d5a4,
0xc08627bcb0565500,0xbe1cf0456b8239d7,
0xc08627bef2b3d2b0,0xbe1cf211497127e3,
0xc08627c1346e2930,0xbe1cf01856c0384d,
0xc08627c37585b468,0xbe1cefa7dd05479e,
0xc08627c5b5fad000,0xbe1cef3ae8e50b93,
0xc08627c7f5cdd750,0xbe1ceea5f32fdd3a,
0xc08627ca34ff2560,0xbe1cef424caeb8d9,
0xc08627cc738f14f0,0xbe1cf0194d07a81f,
0xc08627ceb17e0070,0xbe1cf20f452000c1,
0xc08627d0eecc4210,0xbe1cf00e356218e4,
0xc08627d32b7a33a0,0xbe1cef30484b4bcb,
0xc08627d567882eb0,0xbe1ceeea11a6641b,
0xc08627d7a2f68c80,0xbe1cf13492d5bd7b,
0xc08627d9ddc5a618,0xbe1ceeb7048fad96,
0xc08627dc17f5d418,0xbe1ceef0666f0477,
0xc08627de51876ee8,0xbe1cf060d4b8b5c2,
0xc08627e08a7acea8,0xbe1cf0b2a4b6ff8c,
0xc08627e2c2d04b28,0xbe1cf0e34809a875,
0xc08627e4fa883bf0,0xbe1cf16bf74a3522,
0xc08627e731a2f848,0xbe1cee6a24623d57,
0xc08627e96820d718,0xbe1cefc7b4f1528e,
0xc08627eb9e022f18,0xbe1cf163051f3548,
0xc08627edd34756b8,0xbe1cef36b3366305,
0xc08627f007f0a408,0xbe1cf18134625550,
0xc08627f23bfe6cf0,0xbe1cf0ec32ec1a11,
0xc08627f46f710700,0xbe1ceeb3b64f3edc,
0xc08627f6a248c778,0xbe1cf0cd15805bc8,
0xc08627f8d4860368,0xbe1cf20db3bddebe,
0xc08627fb06290f90,0xbe1cf25188430e25,
0xc08627fd37324070,0xbe1ceea1713490f9,
0xc08627ff67a1ea28,0xbe1cf159521d234c,
0xc0862801977860b8,0xbe1cf24dfe50783b,
0xc0862803c6b5f7d0,0xbe1ceef2ef89a60b,
0xc0862805f55b02c8,0xbe1cee7fc919d62c,
0xc08628082367d4c0,0xbe1cf215a7fb513a,
0xc086280a50dcc0a8,0xbe1cf0e4401c5ed4,
0xc086280c7dba1910,0xbe1cf04ec734d256,
0xc086280eaa003050,0xbe1cf010ad787fea,
0xc0862810d5af5880,0xbe1cee622478393d,
0xc086281300c7e368,0xbe1cf01c7482564f,
0xc08628152b4a22a0,0xbe1cf0de20d33536,
0xc086281755366778,0xbe1cef2edae5837d,
0xc08628197e8d02f0,0xbe1cf0a345318cc9,
0xc086281ba74e45d8,0xbe1cf20085aa34b8,
0xc086281dcf7a80c0,0xbe1cef5fa845ad83,
0xc086281ff71203e0,0xbe1cf050d1df69c4,
0xc08628221e151f48,0xbe1ceffe43c035b9,
0xc0862824448422b8,0xbe1cf14f3018d3c2,
0xc08628266a5f5dc0,0xbe1cef0a5fbae83d,
0xc08628288fa71f98,0xbe1ceff8a95b72a1,
0xc086282ab45bb750,0xbe1cef073aa9849b,
0xc086282cd87d73a8,0xbe1cef69b3835c02,
0xc086282efc0ca328,0xbe1cf0bc139379a9,
0xc08628311f099420,0xbe1cef247a9ec596,
0xc086283341749490,0xbe1cef74bbcc488a,
0xc0862835634df248,0xbe1cef4bc42e7b8e,
0xc08628378495fad0,0xbe1cf136d4d5a810,
0xc0862839a54cfb80,0xbe1cf0d290b24dd8,
0xc086283bc5734168,0xbe1ceeebde8e0065,
0xc086283de5091950,0xbe1cf1a09f60aa1e,
0xc0862840040ecfe0,0xbe1cf0803947a234,
0xc08628422284b168,0xbe1cf0abf7638127,
0xc0862844406b0a08,0xbe1cf0f73ee12058,
0xc08628465dc225a0,0xbe1cf2079971b26c,
0xc08628487a8a4fe0,0xbe1cee74957564b1,
0xc086284a96c3d420,0xbe1ceee77c1b7d43,
0xc086284cb26efd90,0xbe1cf23addba6e09,
0xc086284ecd8c1730,0xbe1cf199f4a1da60,
0xc0862850e81b6bb0,0xbe1cf09fdea81393,
0xc0862853021d4588,0xbe1cf176adb417f7,
0xc08628551b91ef00,0xbe1cf0f64f84a8da,
0xc08628573479b220,0xbe1ceec34cf49523,
0xc08628594cd4d8a8,0xbe1cf16d60fbe0bb,
0xc086285b64a3ac40,0xbe1cee8de7acfc7b,
0xc086285d7be67630,0xbe1ceee6256cce8d,
0xc086285f929d7fa0,0xbe1cee7d66a3d8a5,
0xc0862861a8c91170,0xbe1cf0bef8265792,
0xc0862863be697458,0xbe1cf097f890c6f8,
0xc0862865d37ef0c8,0xbe1cf09502d5c3fc,
0xc0862867e809cf00,0xbe1ceeffb239dac7,
0xc0862869fc0a56f8,0xbe1cf1fbfff95c98,
0xc086286c0f80d090,0xbe1cefa57ad3eef7,
0xc086286e226d8348,0xbe1cf22c58b9183d,
0xc086287034d0b690,0xbe1ceff262d0a248,
0xc086287246aab180,0xbe1cefa7bc194186,
0xc086287457fbbb08,0xbe1cf06782d784d9,
0xc086287668c419e0,0xbe1cf1d44d0eaa07,
0xc086287879041490,0xbe1cf034803c8a48,
0xc086287a88bbf158,0xbe1cf08e84916b6f,
0xc086287c97ebf650,0xbe1cf0c4d3dc1bc7,
0xc086287ea6946958,0xbe1cefb1e4625943,
0xc0862880b4b59010,0xbe1cf143efdd1fd0,
0xc0862882c24faff8,0xbe1cee9896d016da,
0xc0862884cf630e38,0xbe1cf2186072f2cc,
0xc0862886dbefeff0,0xbe1cef9217633d34,
0xc0862888e7f699e0,0xbe1cf05603549486,
0xc086288af37750b0,0xbe1cef50fff513d3,
0xc086288cfe7258c0,0xbe1cf127713b32d0,
0xc086288f08e7f650,0xbe1cf05015520f3d,
0xc086289112d86d58,0xbe1cf12eb458b26f,
0xc08628931c4401a8,0xbe1cf22eae2887ed,
0xc0862895252af6e0,0xbe1cefdd6656dd2d,
0xc08628972d8d9058,0xbe1cf1048ea4e646,
0xc0862899356c1150,0xbe1ceec4501167e9,
0xc086289b3cc6bcb8,0xbe1cf0ad52becc3f,
0xc086289d439dd568,0xbe1cf0daa4e00e35,
0xc086289f49f19df8,0xbe1cf00b80de8d6a,
0xc08628a14fc258c8,0xbe1cf1bcf2ea8464,
0xc08628a355104818,0xbe1cf0435e2782b0,
0xc08628a559dbade0,0xbe1cf0e3e1a5f56c,
0xc08628a75e24cbf8,0xbe1cefed9d5a721d,
0xc08628a961ebe3f8,0xbe1cf0d2d74321e2,
0xc08628ab65313750,0xbe1cf24200eb55e9,
0xc08628ad67f50740,0xbe1cf23e9d7cf979,
0xc08628af6a3794d0,0xbe1cf23a088f421c,
0xc08628b16bf920e0,0xbe1cef2c1de1ab32,
0xc08628b36d39ec08,0xbe1cf1abc231f7b2,
0xc08628b56dfa36d0,0xbe1cf2074d5ba303,
0xc08628b76e3a4180,0xbe1cf05cd5eed880,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x8000000000000000,0xbf5ff802a9ab10e6,
0xbf6ff00aa2b10bc0,0xbf77ee11ebd82e94,
0xbf7fe02a6b106789,0xbf83e7295d25a7d9,
0xbf87dc475f810a77,0xbf8bcf712c74384c,
0xbf8fc0a8b0fc03e4,0xbf91d7f7eb9eebe7,
0xbf93cea44346a575,0xbf95c45a51b8d389,
0xbf97b91b07d5b11b,0xbf99ace7551cc514,
0xbf9b9fc027af9198,0xbf9d91a66c543cc4,
0xbf9f829b0e783300,0xbfa0b94f7c196176,
0xbfa1b0d98923d980,0xbfa2a7ec2214e873,
0xbfa39e87b9febd60,0xbfa494acc34d911c,
0xbfa58a5bafc8e4d5,0xbfa67f94f094bd98,
0xbfa77458f632dcfc,0xbfa868a83083f6cf,
0xbfa95c830ec8e3eb,0xbfaa4fe9ffa3d235,
0xbfab42dd711971bf,0xbfac355dd0921f2d,
0xbfad276b8adb0b52,0xbfae19070c276016,
0xbfaf0a30c01162a6,0xbfaffae9119b9303,
0xbfb075983598e471,0xbfb0ed839b5526fe,
0xbfb16536eea37ae1,0xbfb1dcb263db1944,
0xbfb253f62f0a1417,0xbfb2cb0283f5de1f,
0xbfb341d7961bd1d1,0xbfb3b87598b1b6ee,
0xbfb42edcbea646f0,0xbfb4a50d3aa1b040,
0xbfb51b073f06183f,0xbfb590cafdf01c28,
0xbfb60658a93750c4,0xbfb67bb0726ec0fc,
0xbfb6f0d28ae56b4c,0xbfb765bf23a6be13,
0xbfb7da766d7b12cd,0xbfb84ef898e8282a,
0xbfb8c345d6319b21,0xbfb9375e55595ede,
0xbfb9ab42462033ad,0xbfba1ef1d8061cd4,
0xbfba926d3a4ad563,0xbfbb05b49bee43fe,
0xbfbb78c82bb0eda1,0xbfbbeba818146765,
0xbfbc5e548f5bc743,0xbfbcd0cdbf8c13e1,
0xbfbd4313d66cb35d,0xbfbdb5270187d927,
0xbfbe27076e2af2e6,0xbfbe98b549671467,
0xbfbf0a30c01162a6,0xbfbf7b79fec37ddf,
0xbfbfec9131dbeabb,0xbfc02ebb42bf3d4b,
0xbfc0671512ca596e,0xbfc09f561ee719c3,
0xbfc0d77e7cd08e59,0xbfc10f8e422539b1,
0xbfc14785846742ac,0xbfc17f6458fca611,
0xbfc1b72ad52f67a0,0xbfc1eed90e2dc2c3,
0xbfc2266f190a5acb,0xbfc25ded0abc6ad2,
0xbfc29552f81ff523,0xbfc2cca0f5f5f251,
0xbfc303d718e47fd3,0xbfc33af575770e4f,
0xbfc371fc201e8f74,0xbfc3a8eb2d31a376,
0xbfc3dfc2b0ecc62a,0xbfc41682bf727bc0,
0xbfc44d2b6ccb7d1e,0xbfc483bccce6e3dd,
0xbfc4ba36f39a55e5,0xbfc4f099f4a230b2,
0xbfc526e5e3a1b438,0xbfc55d1ad4232d6f,
0xbfc59338d9982086,0xbfc5c940075972b9,
0xbfc5ff3070a793d4,0xbfc6350a28aaa758,
0xbfc66acd4272ad51,0xbfc6a079d0f7aad2,
0xbfc6d60fe719d21d,0xbfc70b8f97a1aa75,
0xbfc740f8f54037a5,0xbfc7764c128f2127,
0xbfc7ab890210d909,0xbfc7e0afd630c274,
0xbfc815c0a14357eb,0xbfc84abb75865139,
0xbfc87fa06520c911,0xbfc8b46f8223625b,
0xbfc8e928de886d41,0xbfc91dcc8c340bde,
0xbfc9525a9cf456b4,0xbfc986d3228180ca,
0xbfc9bb362e7dfb83,0xbfc9ef83d2769a34,
0xbfca23bc1fe2b563,0xbfca57df28244dcd,
0xbfca8becfc882f19,0xbfcabfe5ae46124c,
0xbfcaf3c94e80bff3,0xbfcb2797ee46320c,
0xbfcb5b519e8fb5a4,0xbfcb8ef670420c3b,
0xbfcbc286742d8cd6,0xbfcbf601bb0e44e2,
0xbfcc2968558c18c1,0xbfcc5cba543ae425,
0xbfcc8ff7c79a9a22,0xbfccc320c0176502,
0xbfccf6354e09c5dc,0xbfcd293581b6b3e7,
0xbfcd5c216b4fbb91,0xbfcd8ef91af31d5e,
0xbfcdc1bca0abec7d,0xbfcdf46c0c722d2f,
0xbfce27076e2af2e6,0xbfce598ed5a87e2f,
0xbfce8c0252aa5a60,0xbfcebe61f4dd7b0b,
0xbfcef0adcbdc5936,0xbfcf22e5e72f105d,
0xbfcf550a564b7b37,0xbfcf871b28955045,
0xbfcfb9186d5e3e2b,0xbfcfeb0233e607cc,
0xbfd00e6c45ad501d,0xbfd0274dc16c232f,
0xbfd0402594b4d041,0xbfd058f3c703ebc6,
0xbfd071b85fcd590d,0xbfd08a73667c57af,
0xbfd0a324e27390e3,0xbfd0bbccdb0d24bd,
0xbfd0d46b579ab74b,0xbfd0ed005f657da4,
0xbfd1058bf9ae4ad5,0xbfd11e0e2dad9cb7,
0xbfd136870293a8b0,0xbfd14ef67f88685a,
0xbfd1675cababa60e,0xbfd17fb98e15095d,
0xbfd1980d2dd4236f,0xbfd1b05791f07b49,
0xbfd1c898c16999fb,0xbfd1e0d0c33716be,
0xbfd1f8ff9e48a2f3,0xbfd211255986160c,
0xbfd22941fbcf7966,0xbfd241558bfd1404,
0xbfd2596010df763a,0xbfd27161913f853d,
0xbfd2895a13de86a3,0xbfd2a1499f762bc9,
0xbfd2b9303ab89d25,0xbfd2d10dec508583,
0xbfd2e8e2bae11d31,0xbfd300aead06350c,
0xbfd31871c9544185,0xbfd3302c16586588,
0xbfd347dd9a987d55,0xbfd35f865c93293e,
0xbfd3772662bfd85b,0xbfd38ebdb38ed321,
0xbfd3a64c556945ea,0xbfd3bdd24eb14b6a,
0xbfd3d54fa5c1f710,0xbfd3ecc460ef5f50,
0xbfd404308686a7e4,0xbfd41b941cce0bee,
0xbfd432ef2a04e814,0xbfd44a41b463c47c,
0xbfd4618bc21c5ec2,0xbfd478cd5959b3d9,
0xbfd49006804009d1,0xbfd4a7373cecf997,
0xbfd4be5f957778a1,0xbfd4d57f8fefe27f,
0xbfd4ec973260026a,0xbfd503a682cb1cb3,
0xbfd51aad872df82d,0xbfd531ac457ee77e,
0xbfd548a2c3add263,0xbfd55f9107a43ee2,
0xbfd5767717455a6c,0xbfd58d54f86e02f2,
0xbfd5a42ab0f4cfe2,0xbfd5baf846aa1b19,
0xbfd5d1bdbf5809ca,0xbfd5e87b20c2954a,
0xbfd5ff3070a793d4,0xbfd615ddb4bec13c,
0xbfd62c82f2b9c795,0x3fd61965cdb02c1f,
0x3fd602d08af091ec,0x3fd5ec433d5c35ae,
0x3fd5d5bddf595f30,0x3fd5bf406b543db2,
0x3fd5a8cadbbedfa1,0x3fd5925d2b112a59,
0x3fd57bf753c8d1fb,0x3fd565995069514c,
0x3fd54f431b7be1a9,0x3fd538f4af8f72fe,
0x3fd522ae0738a3d8,0x3fd50c6f1d11b97c,
0x3fd4f637ebba9810,0x3fd4e0086dd8baca,
0x3fd4c9e09e172c3c,0x3fd4b3c077267e9a,
0x3fd49da7f3bcc41f,0x3fd487970e958770,
0x3fd4718dc271c41b,0x3fd45b8c0a17df13,
0x3fd44591e0539f49,0x3fd42f9f3ff62642,
0x3fd419b423d5e8c7,0x3fd403d086cea79c,
0x3fd3edf463c1683e,0x3fd3d81fb5946dba,
0x3fd3c25277333184,0x3fd3ac8ca38e5c5f,
0x3fd396ce359bbf54,0x3fd3811728564cb2,
0x3fd36b6776be1117,0x3fd355bf1bd82c8b,
0x3fd3401e12aecba1,0x3fd32a84565120a8,
0x3fd314f1e1d35ce4,0x3fd2ff66b04ea9d4,
0x3fd2e9e2bce12286,0x3fd2d46602adccee,
0x3fd2bef07cdc9354,0x3fd2a982269a3dbf,
0x3fd2941afb186b7c,0x3fd27ebaf58d8c9d,
0x3fd269621134db92,0x3fd25410494e56c7,
0x3fd23ec5991eba49,0x3fd22981fbef797b,
0x3fd214456d0eb8d4,0x3fd1ff0fe7cf47a7,
0x3fd1e9e1678899f4,0x3fd1d4b9e796c245,
0x3fd1bf99635a6b95,0x3fd1aa7fd638d33f,
0x3fd1956d3b9bc2fa,0x3fd180618ef18adf,
0x3fd16b5ccbacfb73,0x3fd1565eed455fc3,
0x3fd14167ef367783,0x3fd12c77cd00713b,
0x3fd1178e8227e47c,0x3fd102ac0a35cc1c,
0x3fd0edd060b78081,0x3fd0d8fb813eb1ef,
0x3fd0c42d676162e3,0x3fd0af660eb9e279,
0x3fd09aa572e6c6d4,0x3fd085eb8f8ae797,
0x3fd07138604d5862,0x3fd05c8be0d9635a,
0x3fd047e60cde83b8,0x3fd03346e0106062,
0x3fd01eae5626c691,0x3fd00a1c6adda473,
0x3fcfeb2233ea07cd,0x3fcfc218be620a5e,
0x3fcf991c6cb3b379,0x3fcf702d36777df0,
0x3fcf474b134df229,0x3fcf1e75fadf9bde,
0x3fcef5ade4dcffe6,0x3fceccf2c8fe920a,
0x3fcea4449f04aaf5,0x3fce7ba35eb77e2a,
0x3fce530effe71012,0x3fce2a877a6b2c12,
0x3fce020cc6235ab5,0x3fcdd99edaf6d7e9,
0x3fcdb13db0d48940,0x3fcd88e93fb2f450,
0x3fcd60a17f903515,0x3fcd38666871f465,
0x3fcd1037f2655e7b,0x3fcce816157f1988,
0x3fccc000c9db3c52,0x3fcc97f8079d44ec,
0x3fcc6ffbc6f00f71,0x3fcc480c0005ccd1,
0x3fcc2028ab17f9b4,0x3fcbf851c067555f,
0x3fcbd087383bd8ad,0x3fcba8c90ae4ad19,
0x3fcb811730b823d2,0x3fcb5971a213acdb,
0x3fcb31d8575bce3d,0x3fcb0a4b48fc1b46,
0x3fcae2ca6f672bd4,0x3fcabb55c31693ad,
0x3fca93ed3c8ad9e3,0x3fca6c90d44b704e,
0x3fca454082e6ab05,0x3fca1dfc40f1b7f1,
0x3fc9f6c407089664,0x3fc9cf97cdce0ec3,
0x3fc9a8778debaa38,0x3fc981634011aa75,
0x3fc95a5adcf7017f,0x3fc9335e5d594989,
0x3fc90c6db9fcbcd9,0x3fc8e588ebac2dbf,
0x3fc8beafeb38fe8c,0x3fc897e2b17b19a5,
0x3fc871213750e994,0x3fc84a6b759f512f,
0x3fc823c16551a3c2,0x3fc7fd22ff599d4f,
0x3fc7d6903caf5ad0,0x3fc7b0091651528c,
0x3fc7898d85444c73,0x3fc7631d82935a86,
0x3fc73cb9074fd14d,0x3fc716600c914054,
0x3fc6f0128b756abc,0x3fc6c9d07d203fc7,
0x3fc6a399dabbd383,0x3fc67d6e9d785771,
0x3fc6574ebe8c133a,0x3fc6313a37335d76,
0x3fc60b3100b09476,0x3fc5e533144c1719,
0x3fc5bf406b543db2,0x3fc59958ff1d52f1,
0x3fc5737cc9018cdd,0x3fc54dabc26105d2,
0x3fc527e5e4a1b58d,0x3fc5022b292f6a45,
0x3fc4dc7b897bc1c8,0x3fc4b6d6fefe22a4,
0x3fc4913d8333b561,0x3fc46baf0f9f5db7,
0x3fc4462b9dc9b3dc,0x3fc420b32740fdd4,
0x3fc3fb45a59928cc,0x3fc3d5e3126bc27f,
0x3fc3b08b6757f2a9,0x3fc38b3e9e027479,
0x3fc365fcb0159016,0x3fc340c59741142e,
0x3fc31b994d3a4f85,0x3fc2f677cbbc0a96,
0x3fc2d1610c86813a,0x3fc2ac55095f5c59,
0x3fc28753bc11aba5,0x3fc2625d1e6ddf57,
0x3fc23d712a49c202,0x3fc2188fd9807263,
0x3fc1f3b925f25d41,0x3fc1ceed09853752,
0x3fc1aa2b7e23f72a,0x3fc185747dbecf34,
0x3fc160c8024b27b1,0x3fc13c2605c398c3,
0x3fc1178e8227e47c,0x3fc0f301717cf0fb,
0x3fc0ce7ecdccc28d,0x3fc0aa06912675d5,
0x3fc08598b59e3a07,0x3fc06135354d4b18,
0x3fc03cdc0a51ec0d,0x3fc0188d2ecf6140,
0x3fbfe89139dbd566,0x3fbfa01c9db57ce2,
0x3fbf57bc7d9005db,0x3fbf0f70cdd992e3,
0x3fbec739830a1120,0x3fbe7f1691a32d3e,
0x3fbe3707ee30487b,0x3fbdef0d8d466db9,
0x3fbda727638446a2,0x3fbd5f55659210e2,
0x3fbd179788219364,0x3fbccfedbfee13a8,
0x3fbc885801bc4b23,0x3fbc40d6425a5cb1,
0x3fbbf968769fca11,0x3fbbb20e936d6974,
0x3fbb6ac88dad5b1c,0x3fbb23965a52ff00,
0x3fbadc77ee5aea8c,0x3fba956d3ecade63,
0x3fba4e7640b1bc38,0x3fba0792e9277cac,
0x3fb9c0c32d4d2548,0x3fb97a07024cbe74,
0x3fb9335e5d594989,0x3fb8ecc933aeb6e8,
0x3fb8a6477a91dc29,0x3fb85fd927506a48,
0x3fb8197e2f40e3f0,0x3fb7d33687c293c9,
0x3fb78d02263d82d3,0x3fb746e100226ed9,
0x3fb700d30aeac0e1,0x3fb6bad83c1883b6,
0x3fb674f089365a7a,0x3fb62f1be7d77743,
0x3fb5e95a4d9791cb,0x3fb5a3abb01ade25,
0x3fb55e10050e0384,0x3fb518874226130a,
0x3fb4d3115d207eac,0x3fb48dae4bc31018,
0x3fb4485e03dbdfad,0x3fb403207b414b7f,
0x3fb3bdf5a7d1ee64,0x3fb378dd7f749714,
0x3fb333d7f8183f4b,0x3fb2eee507b40301,
0x3fb2aa04a44717a5,0x3fb26536c3d8c369,
0x3fb2207b5c78549e,0x3fb1dbd2643d190b,
0x3fb1973bd1465567,0x3fb152b799bb3cc9,
0x3fb10e45b3cae831,0x3fb0c9e615ac4e17,
0x3fb08598b59e3a07,0x3fb0415d89e74444,
0x3faffa6911ab9301,0x3faf723b517fc523,
0x3faeea31c006b87c,0x3fae624c4a0b5e1b,
0x3fadda8adc67ee4e,0x3fad52ed6405d86f,
0x3faccb73cdddb2cc,0x3fac441e06f72a9e,
0x3fabbcebfc68f420,0x3fab35dd9b58baad,
0x3faaaef2d0fb10fc,0x3faa282b8a936171,
0x3fa9a187b573de7c,0x3fa91b073efd7314,
0x3fa894aa149fb343,0x3fa80e7023d8ccc4,
0x3fa788595a3577ba,0x3fa70265a550e777,
0x3fa67c94f2d4bb58,0x3fa5f6e73078efb8,
0x3fa5715c4c03ceef,0x3fa4ebf43349e26f,
0x3fa466aed42de3ea,0x3fa3e18c1ca0ae92,
0x3fa35c8bfaa1306b,0x3fa2d7ae5c3c5bae,
0x3fa252f32f8d183f,0x3fa1ce5a62bc353a,
0x3fa149e3e4005a8d,0x3fa0c58fa19dfaaa,
0x3fa0415d89e74444,0x3f9f7a9b16782856,
0x3f9e72bf2813ce51,0x3f9d6b2725979802,
0x3f9c63d2ec14aaf2,0x3f9b5cc258b718e6,
0x3f9a55f548c5c43f,0x3f994f6b99a24475,
0x3f98492528c8cabf,0x3f974321d3d006d3,
0x3f963d6178690bd6,0x3f9537e3f45f3565,
0x3f9432a925980cc1,0x3f932db0ea132e22,
0x3f9228fb1fea2e28,0x3f912487a5507f70,
0x3f90205658935847,0x3f8e38ce3033310c,
0x3f8c317384c75f06,0x3f8a2a9c6c170462,
0x3f882448a388a2aa,0x3f861e77e8b53fc6,
0x3f841929f96832f0,0x3f82145e939ef1e9,
0x3f8010157588de71,0x3f7c189cbb0e27fb,
0x3f78121214586b54,0x3f740c8a747878e2,
0x3f70080559588b35,0x3f680904828985c0,
0x3f60040155d5889e,0x3f50020055655889,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000
};

// log

#define LogB0 0.14286170642368742
#define LogB1 -0.1666706597871615
#define LogB2 0.19999999993983653
#define LogB3 -0.2499999999635547
#define LogB4 0.3333333333333336
#define LogB5 -0.5000000000000001

static const double __log_Tab[128][2] = {
{0x1.6a133d0dec120p+0, -0x1.62fe995eb963ap-2},
{0x1.6815f2f3e42edp+0, -0x1.5d5a48dad6b67p-2},
{0x1.661e39be1ac9ep+0, -0x1.57bde257d2769p-2},
{0x1.642bfa30ac371p+0, -0x1.52294fbf2af55p-2},
{0x1.623f1d916f323p+0, -0x1.4c9c7b598aa38p-2},
{0x1.60578da220f65p+0, -0x1.47174fc5ff560p-2},
{0x1.5e75349dea571p+0, -0x1.4199b7fa7b5cap-2},
{0x1.5c97fd387a75ap+0, -0x1.3c239f48cfb99p-2},
{0x1.5abfd2981f200p+0, -0x1.36b4f154d2aebp-2},
{0x1.58eca051dc99cp+0, -0x1.314d9a0ff32fbp-2},
{0x1.571e526d9df12p+0, -0x1.2bed85cca3cffp-2},
{0x1.5554d555b3fcbp+0, -0x1.2694a11421af9p-2},
{0x1.539015e2a20cdp+0, -0x1.2142d8d014fb2p-2},
{0x1.51d0014ee0164p+0, -0x1.1bf81a2c77776p-2},
{0x1.50148538cd9eep+0, -0x1.16b452a39c6a4p-2},
{0x1.4e5d8f9f698a1p+0, -0x1.11776ffa6c67ep-2},
{0x1.4cab0edca66bep+0, -0x1.0c416035020e0p-2},
{0x1.4afcf1a9db874p+0, -0x1.071211aa10fdap-2},
{0x1.495327136e16fp+0, -0x1.01e972e293b1bp-2},
{0x1.47ad9e84af28fp+0, -0x1.f98ee587fd434p-3},
{0x1.460c47b39ae15p+0, -0x1.ef5800ad716fbp-3},
{0x1.446f12b278001p+0, -0x1.e52e160484698p-3},
{0x1.42d5efdd720ecp+0, -0x1.db1104b19352ep-3},
{0x1.4140cfe001a0fp+0, -0x1.d100ac59e0bd6p-3},
{0x1.3fafa3b421f69p+0, -0x1.c6fced287c3bdp-3},
{0x1.3e225c9c8ece5p+0, -0x1.bd05a7b317c29p-3},
{0x1.3c98ec29a211ap+0, -0x1.b31abd229164fp-3},
{0x1.3b13442a413fep+0, -0x1.a93c0edadb0a3p-3},
{0x1.399156baa3c54p+0, -0x1.9f697ee30d7ddp-3},
{0x1.38131639b4cdbp+0, -0x1.95a2efa9aa40ap-3},
{0x1.36987540fbf53p+0, -0x1.8be843d796044p-3},
{0x1.352166b648f61p+0, -0x1.82395ecc477edp-3},
{0x1.33adddb3eb575p+0, -0x1.7896240966422p-3},
{0x1.323dcd99fc1d3p+0, -0x1.6efe77aca8c55p-3},
{0x1.30d129fefc7d2p+0, -0x1.65723e117ec5cp-3},
{0x1.2f67e6b72fe7dp+0, -0x1.5bf15c0955706p-3},
{0x1.2e01f7cf8b187p+0, -0x1.527bb6c111da1p-3},
{0x1.2c9f518ddc86ep+0, -0x1.491133c939f8fp-3},
{0x1.2b3fe86e5f413p+0, -0x1.3fb1b90c7fc58p-3},
{0x1.29e3b1211b25cp+0, -0x1.365d2cc485f8dp-3},
{0x1.288aa08b373cfp+0, -0x1.2d13758970de7p-3},
{0x1.2734abcaa8467p+0, -0x1.23d47a721fd47p-3},
{0x1.25e1c82459b81p+0, -0x1.1aa0229f25ec2p-3},
{0x1.2491eb1ad59c5p+0, -0x1.117655ddebc3bp-3},
{0x1.23450a54048b5p+0, -0x1.0856fbf83ab6bp-3},
{0x1.21fb1bb09e578p+0, -0x1.fe83fabbaa106p-4},
{0x1.20b415346d8f7p+0, -0x1.ec6e8507a56cdp-4},
{0x1.1f6fed179a1acp+0, -0x1.da6d68c7cc2eap-4},
{0x1.1e2e99b93c7b3p+0, -0x1.c88078462be0cp-4},
{0x1.1cf011a7a882ap+0, -0x1.b6a786a423565p-4},
{0x1.1bb44b97dba5ap+0, -0x1.a4e2676ac7f85p-4},
{0x1.1a7b3e66cdd4fp+0, -0x1.9330eea777e76p-4},
{0x1.1944e11dc56cdp+0, -0x1.8192f134d5ad9p-4},
{0x1.18112aebb1a6ep+0, -0x1.70084464f0538p-4},
{0x1.16e013231b7e9p+0, -0x1.5e90bdec5cb1fp-4},
{0x1.15b1913f156cfp+0, -0x1.4d2c3433c5536p-4},
{0x1.14859cdedde13p+0, -0x1.3bda7e219879ap-4},
{0x1.135c2dc68cfa4p+0, -0x1.2a9b732d27194p-4},
{0x1.12353bdb01684p+0, -0x1.196eeb2b10807p-4},
{0x1.1110bf25b85b4p+0, -0x1.0854be8ef8a7ep-4},
{0x1.0feeafd2f8577p+0, -0x1.ee998cb277432p-5},
{0x1.0ecf062c51c3bp+0, -0x1.ccadb79919fb9p-5},
{0x1.0db1baa076c8bp+0, -0x1.aae5b1d8618b0p-5},
{0x1.0c96c5bb3048ep+0, -0x1.89413015d7442p-5},
{0x1.0b7e20263e070p+0, -0x1.67bfe7bf158dep-5},
{0x1.0a67c2acd0ce3p+0, -0x1.46618f83941bep-5},
{0x1.0953a6391e982p+0, -0x1.2525df1b0618ap-5},
{0x1.0841c3caea380p+0, -0x1.040c8e2f77c6ap-5},
{0x1.07321489b13eap+0, -0x1.c62aad39f738ap-6},
{0x1.062491aee9904p+0, -0x1.847fe3bdead9cp-6},
{0x1.05193497a7cc5p+0, -0x1.43183683400acp-6},
{0x1.040ff6b5f5e9fp+0, -0x1.01f31c4e1d544p-6},
{0x1.0308d19aa6127p+0, -0x1.82201d1e6b69ap-7},
{0x1.0203beedb0c67p+0, -0x1.00dd0f3e1bfd6p-7},
{0x1.010037d38bcc2p+0, -0x1.ff6fe1feb4e53p-9},
{1.0, 0.0},
{0x1.fc06d493cca10p-1, 0x1.fe91885ec8e20p-8},
{0x1.f81e6ac3b918fp-1, 0x1.fc516f716296dp-7},
{0x1.f44546ef18996p-1, 0x1.7bb4dd70a015bp-6},
{0x1.f07b10382c84bp-1, 0x1.f84c99b34b674p-6},
{0x1.ecbf7070e59d4p-1, 0x1.39f9ce4fb2d71p-5},
{0x1.e91213f715939p-1, 0x1.7756c0fd22e78p-5},
{0x1.e572a9a75f7b7p-1, 0x1.b43ee82db8f3ap-5},
{0x1.e1e0e2c530207p-1, 0x1.f0b3fced60034p-5},
{0x1.de5c72d8a8be3p-1, 0x1.165bd78d4878ep-4},
{0x1.dae50fa5658ccp-1, 0x1.3425d2715ebe6p-4},
{0x1.d77a71145a2dap-1, 0x1.51b8bd91b7915p-4},
{0x1.d41c51166623ep-1, 0x1.6f15632c76a47p-4},
{0x1.d0ca6ba0bb29fp-1, 0x1.8c3c88ecbe503p-4},
{0x1.cd847e8e59681p-1, 0x1.a92ef077625dap-4},
{0x1.ca4a499693e00p-1, 0x1.c5ed5745fa006p-4},
{0x1.c71b8e399e821p-1, 0x1.e27876de1c993p-4},
{0x1.c3f80faf19077p-1, 0x1.fed104fce4cdcp-4},
{0x1.c0df92dc2b0ecp-1, 0x1.0d7bd9c17d78bp-3},
{0x1.bdd1de3cbb542p-1, 0x1.1b76986cef97bp-3},
{0x1.baceb9e1007a3p-1, 0x1.295913d24f750p-3},
{0x1.b7d5ef543e55ep-1, 0x1.37239fa295d17p-3},
{0x1.b4e749977d953p-1, 0x1.44d68dd78714bp-3},
{0x1.b20295155478ep-1, 0x1.52722ebe5d780p-3},
{0x1.af279f8e82be2p-1, 0x1.5ff6d12671f98p-3},
{0x1.ac5638197fdf3p-1, 0x1.6d64c2389484bp-3},
{0x1.a98e2f102e087p-1, 0x1.7abc4da40fddap-3},
{0x1.a6cf5606d05c1p-1, 0x1.87fdbda1e8452p-3},
{0x1.a4197fc04d746p-1, 0x1.95295b06a5f37p-3},
{0x1.a16c80293dc01p-1, 0x1.a23f6d34abbc5p-3},
{0x1.9ec82c4dc5bc9p-1, 0x1.af403a28e04f2p-3},
{0x1.9c2c5a491f534p-1, 0x1.bc2c06a85721ap-3},
{0x1.9998e1480b618p-1, 0x1.c903161240163p-3},
{0x1.970d9977c6c2dp-1, 0x1.d5c5aa93287ebp-3},
{0x1.948a5c023d212p-1, 0x1.e274051823fa9p-3},
{0x1.920f0303d6809p-1, 0x1.ef0e656300c16p-3},
{0x1.8f9b698a98b45p-1, 0x1.fb9509f05aa2ap-3},
{0x1.8d2f6b81726f6p-1, 0x1.04041821f37afp-2},
{0x1.8acae5bb55badp-1, 0x1.0a340a49b3029p-2},
{0x1.886db5d9275b8p-1, 0x1.105a7918a126dp-2},
{0x1.8617ba567c13cp-1, 0x1.1677819812b84p-2},
{0x1.83c8d27487800p-1, 0x1.1c8b405b40c0ep-2},
{0x1.8180de3c5dbe7p-1, 0x1.2295d16cfa6b1p-2},
{0x1.7f3fbe71cdb71p-1, 0x1.28975066318a2p-2},
{0x1.7d055498071c1p-1, 0x1.2e8fd855d86fcp-2},
{0x1.7ad182e54f65ap-1, 0x1.347f83d605e59p-2},
{0x1.78a42c3c90125p-1, 0x1.3a666d1244588p-2},
{0x1.767d342f76944p-1, 0x1.4044adb6f8ec4p-2},
{0x1.745c7ef26b00ap-1, 0x1.461a5f077558cp-2},
{0x1.7241f15769d0fp-1, 0x1.4be799e20b9c8p-2},
{0x1.702d70d396e41p-1, 0x1.51ac76a6b79dfp-2},
{0x1.6e1ee3700cd11p-1, 0x1.57690d5744a45p-2},
{0x1.6c162fc9cbe02p-1, 0x1.5d1d758e45217p-2},
};

// log1p
static const double __log1p_tbl[] = {
0.693147180560117703862488269806,-0.000000000000172394442126947113,
0.685365040118085744325071573257,-0.000000000000195383852169996278,
0.677642994024154177168384194374,-0.000000000000174121898873768610,
0.669980121278513252036646008492,-0.000000000000102320845080683083,
0.662375521893409313634037971497,-0.000000000000217692584701738495,
0.654828316257862752536311745644,-0.000000000000054042309702594179,
0.647337644528761302353814244270,-0.000000000000110196100129032446,
0.639902666041052725631743669510,0.000000000000080300922750470611,
0.632522558743403351400047540665,0.000000000000107115439710728382,
0.625196518651591759407892823219,-0.000000000000154199382093808069,
0.617923759322366095148026943207,-0.000000000000008311426267890679,
0.610703511348674510372802615166,0.000000000000196207779401664579,
0.603535021870357013540342450142,-0.000000000000098836739929514526,
0.596417554101208224892616271973,0.000000000000185972232177026361,
0.589350386878322751726955175400,-0.000000000000021007132652623660,
0.582332814219626015983521938324,0.000000000000029179242036263676,
0.575364144903687702026218175888,-0.000000000000125847144647861117,
0.568443702059084898792207241058,-0.000000000000096825235249454689,
0.561570822771045641275122761726,0.000000000000180395556525497065,
0.554744857700825377833098173141,0.000000000000000795901940435369,
0.547965170715542626567184925079,-0.000000000000095214428755661085,
0.541231138533930788980796933174,0.000000000000172545367764101239,
0.534542150383458647411316633224,-0.000000000000151922084323480355,
0.527897607664726820075884461403,-0.000000000000088673531131544933,
0.521296923633144615450873970985,0.000000000000141471629391365588,
0.514739523086973349563777446747,0.000000000000153662737186712450,
0.508224842065828852355480194092,0.000000000000104464400980517761,
0.501752327560097910463809967041,0.000000000000217944347255659656,
0.495321437229904404375702142715,0.000000000000121024682090141054,
0.488931639131351403193548321724,-0.000000000000096985277004383602,
0.482582411452767701121047139168,-0.000000000000172029370235571108,
0.476273242259139806265011429787,0.000000000000191143536263527607,
0.470003629245638876454904675484,0.000000000000096677199164652036,
0.463773079495240381220355629921,-0.000000000000140901791471891744,
0.457581109247257700189948081970,-0.000000000000079299847171877048,
0.451427243672696931753307580948,0.000000000000103209522749251600,
0.445311016655523417284712195396,-0.000000000000159364644950664366,
0.439231970578930486226454377174,0.000000000000051379056586758727,
0.433189656122976884944364428520,0.000000000000042357503920502792,
0.427183632062678952934220433235,0.000000000000128415147018004097,
0.421213465076107240747660398483,0.000000000000196309841034395139,
0.415278729556575854076072573662,-0.000000000000086850842058320894,
0.409379007429379271343350410461,-0.000000000000078560269887238516,
0.403513887976714613614603877068,0.000000000000188018926867349657,
0.397682967666241893311962485313,-0.000000000000132460278280037580,
0.391885849981917999684810638428,-0.000000000000134471277321752960,
0.386122145264835125999525189400,0.000000000000198321345714661770,
0.380391470555878186132758855820,0.000000000000170234901358982696,
0.374693449441565462620928883553,-0.000000000000154769010811779796,
0.369027711905800970271229743958,-0.000000000000067636941536157775,
0.363393894187538535334169864655,-0.000000000000061207728228241470,
0.357791638638900622026994824409,-0.000000000000093142863810056465,
0.352220593589208874618634581566,0.000000000000143224496640636105,
0.346680413213562133023515343666,0.000000000000174595478386926759,
0.341170757402778690448030829430,-0.000000000000011565683113860017,
0.335691291638340771896764636040,-0.000000000000199236702409794098,
0.330241686870522244134917855263,0.000000000000054612147622274818,
0.324821619401063799159601330757,0.000000000000173857212532836137,
0.319430770766302885022014379501,0.000000000000058343577333105201,
0.314068827624851110158488154411,0.000000000000124740871022793771,
0.308735481649819121230393648148,-0.000000000000205851544819272264,
0.303430429420131986262276768684,-0.000000000000211890212376084911,
0.298153372319120535394176840782,-0.000000000000044204080206394514,
0.292904016433112701633945107460,-0.000000000000180099142905832923,
0.287682072451843851013109087944,-0.000000000000062923570757902418,
0.282487255574778828304260969162,-0.000000000000101904818202863297,
0.277319285416069760685786604881,0.000000000000164583121248786993,
0.272177885915880324319005012512,-0.000000000000064651027507825843,
0.267062785248981526819989085197,0.000000000000063719475830394071,
0.261973715741532942047342658043,0.000000000000041026513849281611,
0.256910413785135460784658789635,-0.000000000000108221713335795727,
0.251872619754976767580956220627,0.000000000000093312349911703899,
0.246860077931614796398207545280,-0.000000000000088998510433314861,
0.241872536420487449504435062408,-0.000000000000000725228763089682,
0.236909747078243526630103588104,0.000000000000114188409455245639,
0.231971465437709412071853876114,0.000000000000065730980510660702,
0.227057450635129498550668358803,0.000000000000216586311076877944,
0.222167465341044589877128601074,0.000000000000109706996337832855,
0.217301275689806061564013361931,0.000000000000175333591141466527,
0.212458651214092242298647761345,0.000000000000101159445098258886,
0.207639364778060553362593054771,0.000000000000183948255980306548,
0.202843192514592374209314584732,0.000000000000159097060703637773,
0.198069913762083160690963268280,0.000000000000010634131436428239,
0.193319311003506300039589405060,-0.000000000000010320440556521073,
0.188591169807750702602788805962,-0.000000000000200680240732977813,
0.183885278770048898877575993538,0.000000000000088463738713525905,
0.179201429457862104754894971848,-0.000000000000151112135536620851,
0.174539416351763065904378890991,0.000000000000136611363008459642,
0.169899036795413849176838994026,-0.000000000000016376273281918353,
0.165280090939177171094343066216,-0.000000000000074246787870895867,
0.160682381690548936603590846062,-0.000000000000075471057150272990,
0.156105714663226535776630043983,-0.000000000000164880922994817491,
0.151549898127086635213345289230,0.000000000000114302630476717426,
0.147014742961800948251038789749,0.000000000000008710786928415993,
0.142500062607268773717805743217,0.000000000000014256442610488474,
0.138005673019506502896547317505,-0.000000000000062786191663333206,
0.133531392624718137085437774658,-0.000000000000195513935961903486,
0.129077042275184794561937451363,-0.000000000000042451212957330792,
0.124642445207427954301238059998,-0.000000000000151356959612422581,
0.120227426998098962940275669098,0.000000000000060837387331894905,
0.115831815525325509952381253242,-0.000000000000203804850128948968,
0.111455440925510629313066601753,-0.000000000000187802413313043364,
0.107098135556498164078220725060,-0.000000000000131063561975692079,
0.102759733957554999506101012230,0.000000000000213935272346667324,
0.098440072813446022337302565575,-0.000000000000193502431281636855,
0.094138990913961606565862894058,-0.000000000000099696527098533165,
0.089856329122085298877209424973,-0.000000000000224251797430173502,
0.085591930335340293822810053825,0.000000000000063220096469224958,
0.081345639453957119258120656013,-0.000000000000004713367645992284,
0.077117303344493848271667957306,-0.000000000000062558498869421545,
0.072906770808003784622997045517,0.000000000000083995945872670081,
0.068713892548203148180618882179,-0.000000000000151339802793192256,
0.064538521137365023605525493622,0.000000000000206148070530594804,
0.060380510989034519298002123833,-0.000000000000127039423424287175,
0.056239718323013221379369497299,-0.000000000000137143579499507611,
0.052116001138983847340568900108,0.000000000000030171024194065719,
0.048009219186496920883655548096,-0.000000000000136313128519628604,
0.043919233934957446763291954994,-0.000000000000121956233767572826,
0.039845908547249564435333013535,-0.000000000000049893773584514804,
0.035789107851542212301865220070,0.000000000000043066976609053203,
0.031748698314459034008905291557,0.000000000000121267151223270695,
0.027724548014703032094985246658,0.000000000000151828375286445559,
0.023716526617135968990623950958,0.000000000000180073130855182361,
0.019724505347767262719571590424,0.000000000000011326402832382691,
0.015748356968288135249167680740,-0.000000000000148966638485919418,
0.011787955751970002893358469009,0.000000000000072237578934340207,
0.007843177460927108768373727798,0.000000000000098784107942613236,
0.003913899321105418493971228600,0.000000000000030910601478911047,
0, 0,
};


#define ExpShift45 0x1.8p45
#define ExpShift44 0x1.8p44

#define FrexpExponetMaskf 0x807fffff

static const float a1_f32=1.442695021629333,a2_h_f32=0.693115234375000,a2_l_f32=0.000031946183299;
static const float b1_f32=0.5,b2_f32=0.008366675116122,b3_f32=0.001393575570546,b4_f32=0.166665419936180,b5_f32=0.041666455566883;

static const unsigned long table_f64_la_sin[] = {
    0x0000000000000000,
    0x3fe0000000000000,
    0x3f762e4a19bd1e74,
    0x3fdfd3c22b8f71f1,
    0x3f862e5f6a0dfd36,
    0x3fdfa7c1819e90d8,
    0x3f90a2e234040f5f,
    0x3fdf7bfdad9cbe14,
    0x3f962eb4abcc5a81,
    0x3fdf50765b6e4540,
    0x3f9bbab1c5033244,
    0x3fdf252b376bba97,
    0x3fa0a372144eeb45,
    0x3fdefa1bee615a27,
    0x3fa369ab3ffbf8b0,
    0x3fdecf482d8e67f1,
    0x3fa63009ba740a2a,
    0x3fdea4afa2a490da,
    0x3fa8f692d8ea1b5a,
    0x3fde7a51fbc74c83,
    0x3fabbd4bf0e31a6f,
    0x3fde502ee78b3ff6,
    0x3fae843a5840286a,
    0x3fde264614f5a129,
    0x3fb0a5b1b2a46d0a,
    0x3fddfc97337b9b5f,
    0x3fb20966375abcdf,
    0x3fddd321f301b460,
    0x3fb36d3d65dca4e8,
    0x3fdda9e603db3285,
    0x3fb4d139ea06642a,
    0x3fdd80e316c98398,
    0x3fb6355e6ffbf9ba,
    0x3fdd5818dcfba487,
    0x3fb799ada42e4788,
    0x3fdd2f87080d89f2,
    0x3fb8fe2a336035bc,
    0x3fdd072d4a07897c,
    0x3fba62d6caabd6b6,
    0x3fdcdf0b555dc3fa,
    0x3fbbc7b617878baf,
    0x3fdcb720dcef9069,
    0x3fbd2ccac7cb2a11,
    0x3fdc8f6d9406e7b5,
    0x3fbe921789b52185,
    0x3fdc67f12e57d14b,
    0x3fbff79f0befa2c7,
    0x3fdc40ab5fffd07a,
    0x3fc0aeb1fecae3a9,
    0x3fdc199bdd85529c,
    0x3fc161b4871c5cec,
    0x3fdbf2c25bd71e09,
    0x3fc214d876f26fd0,
    0x3fdbcc1e904bc1d2,
    0x3fc2c81f2693816f,
    0x3fdba5b030a1064a,
    0x3fc37b89ee88bef7,
    0x3fdb7f76f2fb5e47,
    0x3fc42f1a27a0b3cd,
    0x3fdb59728de5593a,
    0x3fc4e2d12af1e037,
    0x3fdb33a2b84f15fb,
    0x3fc596b051dd508d,
    0x3fdb0e07298db666,
    0x3fc64ab8f61134fa,
    0x3fdae89f995ad3ad,
    0x3fc6feec718b79d1,
    0x3fdac36bbfd3f37a,
    0x3fc7b34c1e9c607f,
    0x3fda9e6b5579fdbf,
    0x3fc867d957e91912,
    0x3fda799e1330b358,
    0x3fc91c95786e5c72,
    0x3fda5503b23e255d,
    0x3fc9d181db83072f,
    0x3fda309bec4a2d33,
    0x3fca869fdcdab512,
    0x3fda0c667b5de565,
    0x3fcb3bf0d8885d4c,
    0x3fd9e86319e32323,
    0x3fcbf1762b00ef69,
    0x3fd9c49182a3f090,
    0x3fcca731311df0fb,
    0x3fd9a0f170ca07ba,
    0x3fcd5d2348201c09,
    0x3fd97d829fde4e50,
    0x3fce134dcdb1fe3e,
    0x3fd95a44cbc8520f,
    0x3fcec9b21fea98ea,
    0x3fd93737b0cdc5e5,
    0x3fcf80519d5001d3,
    0x3fd9145b0b91ffc6,
    0x3fd01b96d26d026a,
    0x3fd8f1ae99157736,
    0x3fd07723cafa6331,
    0x3fd8cf3216b5448c,
    0x3fd0d2d06841b373,
    0x3fd8ace5422aa0db,
    0x3fd12e9d5a715381,
    0x3fd88ac7d98a6699,
    0x3fd18a8b51f5c661,
    0x3fd868d99b4492ed,
    0x3fd1e69aff7b04d7,
    0x3fd8471a4623c7ad,
    0x3fd242cd13edd0f1,
    0x3fd82589994cce13,
    0x3fd29f22407d0a0c,
    0x3fd80427543e1a12,
    0x3fd2fb9b369b0153,
    0x3fd7e2f336cf4e62,
    0x3fd35838a7fecec8,
    0x3fd7c1ed0130c132,
    0x3fd3b4fb46a5a6cc,
    0x3fd7a11473eb0187,
    0x3fd411e3c4d4302f,
    0x3fd780694fde5d3f,
    0x3fd46ef2d517dac8,
    0x3fd75feb564267c9,
    0x3fd4cc292a48369e,
    0x3fd73f9a48a58174,
    0x3fd5298777884b96,
    0x3fd71f75e8ec5f74,
    0x3fd5870e7047f1bc,
    0x3fd6ff7df9519484,
    0x3fd5e4bec8452a1a,
    0x3fd6dfb23c651a2f,
    0x3fd64299338d7827,
    0x3fd6c012750bdabf,
    0x3fd6a09e667f3bcd,
    0x3fd6a09e667f3bcd,
    0x3fd6fecf15cb0c0b,
    0x3fd68155d44ca973,
    0x3fd75d2bf6751239,
    0x3fd6623882552225,
    0x3fd7bbb5bdd665e8,
    0x3fd6434634ccc320,
    0x3fd81a6d219e6963,
    0x3fd6247eb03a5585,
    0x3fd87952d7d426df,
    0x3fd605e1b976dc09,
    0x3fd8d86796d7ae49,
    0x3fd5e76f15ad2148,
    0x3fd937ac156373c8,
    0x3fd5c9268a5946b7,
    0x3fd997210a8daee4,
    0x3fd5ab07dd485429,
    0x3fd9f6c72dc9ba68,
    0x3fd58d12d497c7fd,
    0x3fda569f36e974ea,
    0x3fd56f4736b527da,
    0x3fdab6a9de1ea215,
    0x3fd551a4ca5d920f,
    0x3fdb16e7dbfc4ca3,
    0x3fd5342b569d4f82,
    0x3fdb7759e9782918,
    0x3fd516daa2cf6642,
    0x3fdbd800bfebf932,
    0x3fd4f9b2769d2ca7,
    0x3fdc38dd1916f025,
    0x3fd4dcb299fddd0d,
    0x3fdc99efaf1f1790,
    0x3fd4bfdad5362a27,
    0x3fdcfb393c92b539,
    0x3fd4a32af0d7d3de,
    0x3fdd5cba7c69b19c,
    0x3fd486a2b5c13cd0,
    0x3fddbe742a06ff34,
    0x3fd46a41ed1d0057,
    0x3fde2067013a029d,
    0x3fd44e086061892d,
    0x3fde8293be3ffb87,
    0x3fd431f5d950a897,
    0x3fdee4fb1dc56e75,
    0x3fd4160a21f72e2a,
    0x3fdf479ddce78f58,
    0x3fd3fa4504ac801c,
    0x3fdfaa7cb935acfe,
    0x3fd3dea64c123422,
    0x3fe006cc38594eb1,
    0x3fd3c32dc313a8e5,
    0x3fe03878e0eb1569,
    0x3fd3a7db34e59ff7,
    0x3fe06a44b5c74101,
    0x3fd38cae6d05d866,
    0x3fe09c3016a0d077,
    0x3fd371a7373aa9cb,
    0x3fe0ce3b63676360,
    0x3fd356c55f929ff1,
    0x3fe10066fc47f240,
    0x3fd33c08b26416ff,
    0x3fe132b341ad8761,
    0x3fd32170fc4cd831,
    0x3fe165209441f823,
    0x3fd306fe0a31b715,
    0x3fe197af54ee9ebb,
    0x3fd2ecafa93e2f56,
    0x3fe1ca5fe4dd1475,
    0x3fd2d285a6e4030b,
    0x3fe1fd32a577ec72,
    0x3fd2b87fd0dad990,
    0x3fe23027f86b6ed6,
    0x3fd29e9df51fdee1,
    0x3fe263403fa65489,
    0x3fd284dfe1f56381,
    0x3fe2967bdd5a8364,
    0x3fd26b4565e27cdd,
    0x3fe2c9db33fdcae9,
    0x3fd251ce4fb2a63f,
    0x3fe2fd5ea64aa180,
    0x3fd2387a6e756238,
    0x3fe331069740e22f,
    0x3fd21f49917ddc96,
    0x3fe364d36a268ae0,
    0x3fd2063b88628cd6,
    0x3fe398c582887b27,
    0x3fd1ed5022fcd91d,
    0x3fe3ccdd443b3394,
    0x3fd1d4873168b9aa,
    0x3fe4011b135b9590,
    0x3fd1bbe084045cd4,
    0x3fe4357f544fa3c1,
    0x3fd1a35beb6fcb75,
    0x3fe46a0a6bc742fd,
    0x3fd18af9388c8dea,
    0x3fe49ebcbebcfbca,
    0x3fd172b83c7d517b,
    0x3fe4d396b276bc6f,
    0x3fd15a98c8a58e51,
    0x3fe50898ac869b96,
    0x3fd1429aaea92de0,
    0x3fe53dc312cb9b7a,
    0x3fd12abdc06c31cc,
    0x3fe573164b726db6,
    0x3fd11301d0125b51,
    0x3fe5a892bcf6379b,
    0x3fd0fb66affed31b,
    0x3fe5de38ce215725,
    0x3fd0e3ec32d3d1a2,
    0x3fe61408e60e2888,
    0x3fd0cc922b7247f7,
    0x3fe64a036c27cc52,
    0x3fd0b5586cf9890f,
    0x3fe68028c82aee2f,
    0x3fd09e3ecac6f383,
    0x3fe6b67962268c43,
    0x3fd0874518759bc8,
    0x3fe6ecf5a27cbf28,
    0x3fd0706b29ddf6de,
    0x3fe7239df1e38286,
    0x3fd059b0d3158574,
    0x3fe75a72b9657e51,
    0x3fd04315e86e7f85,
    0x3fe791746262d0a8,
    0x3fd02c9a3e778061,
    0x3fe7c8a35691d856,
    0x3fd0163da9fb3335,
};

static const unsigned long table_f64_la_cos[] = {
  0x3fe0000000000000,
	0x3fe00b1afa5abcbf,
	0x3fe0163da9fb3335,
	0x3fe02168143b0281,
	0x3fe02c9a3e778061,
	0x3fe037d42e11bbcc,
	0x3fe04315e86e7f85,
	0x3fe04e5f72f654b1,
	0x3fe059b0d3158574,
	0x3fe0650a0e3c1f89,
	0x3fe0706b29ddf6de,
	0x3fe07bd42b72a836,
	0x3fe0874518759bc8,
	0x3fe092bdf66607e0,
	0x3fe09e3ecac6f383,
	0x3fe0a9c79b1f3919,
	0x3fe0b5586cf9890f,
	0x3fe0c0f145e46c85,
	0x3fe0cc922b7247f7,
	0x3fe0d83b23395dec,
	0x3fe0e3ec32d3d1a2,
	0x3fe0efa55fdfa9c5,
	0x3fe0fb66affed31b,
	0x3fe1073028d7233e,
	0x3fe11301d0125b51,
	0x3fe11edbab5e2ab6,
	0x3fe12abdc06c31cc,
	0x3fe136a814f204ab,
	0x3fe1429aaea92de0,
	0x3fe14e95934f312e,
	0x3fe15a98c8a58e51,
	0x3fe166a45471c3c2,
	0x3fe172b83c7d517b,
	0x3fe17ed48695bbc0,
	0x3fe18af9388c8dea,
	0x3fe1972658375d2f,
	0x3fe1a35beb6fcb75,
	0x3fe1af99f8138a1c,
	0x3fe1bbe084045cd4,
	0x3fe1c82f95281c6b,
	0x3fe1d4873168b9aa,
	0x3fe1e0e75eb44027,
	0x3fe1ed5022fcd91d,
	0x3fe1f9c18438ce4d,
	0x3fe2063b88628cd6,
	0x3fe212be3578a819,
	0x3fe21f49917ddc96,
	0x3fe22bdda27912d1,
	0x3fe2387a6e756238,
	0x3fe2451ffb82140a,
	0x3fe251ce4fb2a63f,
	0x3fe25e85711ece75,
	0x3fe26b4565e27cdd,
	0x3fe2780e341ddf29,
	0x3fe284dfe1f56381,
	0x3fe291ba7591bb70,
	0x3fe29e9df51fdee1,
	0x3fe2ab8a66d10f13,
	0x3fe2b87fd0dad990,
	0x3fe2c57e39771b2f,
	0x3fe2d285a6e4030b,
	0x3fe2df961f641589,
	0x3fe2ecafa93e2f56,
	0x3fe2f9d24abd886b,
	0x3fe306fe0a31b715,
	0x3fe31432edeeb2fd,
	0x3fe32170fc4cd831,
	0x3fe32eb83ba8ea32,
	0x3fe33c08b26416ff,
	0x3fe3496266e3fa2d,
	0x3fe356c55f929ff1,
	0x3fe36431a2de883b,
	0x3fe371a7373aa9cb,
	0x3fe37f26231e754a,
	0x3fe38cae6d05d866,
	0x3fe39a401b7140ef,
	0x3fe3a7db34e59ff7,
	0x3fe3b57fbfec6cf4,
	0x3fe3c32dc313a8e5,
	0x3fe3d0e544ede173,
	0x3fe3dea64c123422,
	0x3fe3ec70df1c5175,
	0x3fe3fa4504ac801c,
	0x3fe40822c367a024,
	0x3fe4160a21f72e2a,
	0x3fe423fb2709468a,
	0x3fe431f5d950a897,
	0x3fe43ffa3f84b9d4,
	0x3fe44e086061892d,
	0x3fe45c2042a7d232,
	0x3fe46a41ed1d0057,
	0x3fe4786d668b3237,
	0x3fe486a2b5c13cd0,
	0x3fe494e1e192aed2,
	0x3fe4a32af0d7d3de,
	0x3fe4b17dea6db7d7,
	0x3fe4bfdad5362a27,
	0x3fe4ce41b817c114,
	0x3fe4dcb299fddd0d,
	0x3fe4eb2d81d8abff,
	0x3fe4f9b2769d2ca7,
	0x3fe508417f4531ee,
	0x3fe516daa2cf6642,
	0x3fe5257de83f4eef,
	0x3fe5342b569d4f82,
	0x3fe542e2f4f6ad27,
	0x3fe551a4ca5d920f,
	0x3fe56070dde910d2,
	0x3fe56f4736b527da,
	0x3fe57e27dbe2c4cf,
	0x3fe58d12d497c7fd,
	0x3fe59c0827ff07cc,
	0x3fe5ab07dd485429,
	0x3fe5ba11fba87a03,
	0x3fe5c9268a5946b7,
	0x3fe5d84590998b93,
	0x3fe5e76f15ad2148,
	0x3fe5f6a320dceb71,
	0x3fe605e1b976dc09,
	0x3fe6152ae6cdf6f4,
	0x3fe6247eb03a5585,
	0x3fe633dd1d1929fd,
	0x3fe6434634ccc320,
	0x3fe652b9febc8fb7,
	0x3fe6623882552225,
	0x3fe671c1c70833f6,
	0x3fe68155d44ca973,
	0x3fe690f4b19e9538,
	0x3fe6a09e667f3bcd,
	0x3fe6b052fa75173e,
	0x3fe6c012750bdabf,
	0x3fe6cfdcddd47645,
	0x3fe6dfb23c651a2f,
	0x3fe6ef9298593ae5,
	0x3fe6ff7df9519484,
	0x3fe70f7466f42e87,
	0x3fe71f75e8ec5f74,
	0x3fe72f8286ead08a,
	0x3fe73f9a48a58174,
	0x3fe74fbd35d7cbfd,
	0x3fe75feb564267c9,
	0x3fe77024b1ab6e09,
	0x3fe780694fde5d3f,
	0x3fe790b938ac1cf6,
	0x3fe7a11473eb0187,
	0x3fe7b17b0976cfdb,
	0x3fe7c1ed0130c132,
	0x3fe7d26a62ff86f0,
	0x3fe7e2f336cf4e62,
	0x3fe7f3878491c491,
	0x3fe80427543e1a12,
	0x3fe814d2add106d9,
	0x3fe82589994cce13,
	0x3fe8364c1eb941f7,
	0x3fe8471a4623c7ad,
	0x3fe857f4179f5b21,
	0x3fe868d99b4492ed,
	0x3fe879cad931a436,
	0x3fe88ac7d98a6699,
	0x3fe89bd0a478580f,
	0x3fe8ace5422aa0db,
	0x3fe8be05bad61778,
	0x3fe8cf3216b5448c,
	0x3fe8e06a5e0866d9,
	0x3fe8f1ae99157736,
	0x3fe902fed0282c8a,
	0x3fe9145b0b91ffc6,
	0x3fe925c353aa2fe2,
	0x3fe93737b0cdc5e5,
	0x3fe948b82b5f98e5,
	0x3fe95a44cbc8520f,
	0x3fe96bdd9a7670b3,
	0x3fe97d829fde4e50,
	0x3fe98f33e47a22a2,
	0x3fe9a0f170ca07ba,
	0x3fe9b2bb4d53fe0d,
	0x3fe9c49182a3f090,
	0x3fe9d674194bb8d5,
	0x3fe9e86319e32323,
	0x3fe9fa5e8d07f29e,
	0x3fea0c667b5de565,
	0x3fea1e7aed8eb8bb,
	0x3fea309bec4a2d33,
	0x3fea42c980460ad8,
	0x3fea5503b23e255d,
	0x3fea674a8af46052,
	0x3fea799e1330b358,
	0x3fea8bfe53c12e59,
	0x3fea9e6b5579fdbf,
	0x3feab0e521356eba,
	0x3feac36bbfd3f37a,
	0x3fead5ff3a3c2774,
	0x3feae89f995ad3ad,
	0x3feafb4ce622f2ff,
	0x3feb0e07298db666,
	0x3feb20ce6c9a8952,
	0x3feb33a2b84f15fb,
	0x3feb468415b749b1,
	0x3feb59728de5593a,
	0x3feb6c6e29f1c52a,
	0x3feb7f76f2fb5e47,
	0x3feb928cf22749e4,
	0x3feba5b030a1064a,
	0x3febb8e0b79a6f1f,
	0x3febcc1e904bc1d2,
	0x3febdf69c3f3a207,
	0x3febf2c25bd71e09,
	0x3fec06286141b33d,
	0x3fec199bdd85529c,
	0x3fec2d1cd9fa652c,
	0x3fec40ab5fffd07a,
	0x3fec544778fafb22,
	0x3fec67f12e57d14b,
	0x3fec7ba88988c933,
	0x3fec8f6d9406e7b5,
	0x3feca3405751c4db,
	0x3fecb720dcef9069,
	0x3feccb0f2e6d1675,
	0x3fecdf0b555dc3fa,
	0x3fecf3155b5bab74,
	0x3fed072d4a07897c,
	0x3fed1b532b08c968,
	0x3fed2f87080d89f2,
	0x3fed43c8eacaa1d6,
	0x3fed5818dcfba487,
	0x3fed6c76e862e6d3,
	0x3fed80e316c98398,
	0x3fed955d71ff6075,
	0x3feda9e603db3285,
	0x3fedbe7cd63a8315,
	0x3fedd321f301b460,
	0x3fede7d5641c0658,
	0x3fedfc97337b9b5f,
	0x3fee11676b197d17,
	0x3fee264614f5a129,
	0x3fee3b333b16ee12,
	0x3fee502ee78b3ff6,
	0x3fee653924676d76,
	0x3fee7a51fbc74c83,
	0x3fee8f7977cdb740,
	0x3feea4afa2a490da,
	0x3feeb9f4867cca6e,
	0x3feecf482d8e67f1,
	0x3feee4aaa2188510,
	0x3feefa1bee615a27,
	0x3fef0f9c1cb6412a,
	0x3fef252b376bba97,
	0x3fef3ac948dd7274,
	0x3fef50765b6e4540,
	0x3fef6632798844f8,
	0x3fef7bfdad9cbe14,
	0x3fef91d802243c89,
	0x3fefa7c1819e90d8,
	0x3fefbdba3692d514,
	0x3fefd3c22b8f71f1,
	0x3fefe9d96b2a23d9,
  0x3ff0000000000000,
};

// log2
static const double __log2_poly[] = {
    -0x1.71547652b8339p-1, 0x1.ec709dc3a04bep-2, -0x1.7154764702ffbp-2,
    0x1.2776c50034c48p-2, -0x1.ec7b328ea92bcp-3, 0x1.a6225e117f92ep-3,
};

static const double log2_special_poly[] = {
    -0x1.71547652b82fep-1, 0x1.ec709dc3a03f7p-2, -0x1.71547652b7c3fp-2, 0x1.2776c50f05be4p-2, -0x1.ec709dd768fe5p-3,
    0x1.a61761ec4e736p-3, -0x1.7153fbc64a79bp-3, 0x1.484d154f01b4ap-3, -0x1.289e4a72c383cp-3, 0x1.0b32f285aee66p-3,
};

static const double __log2_tab[][2] = {
    {0x1.724286bb1acf8p+0, -0x1.1095feecdb000p-1},
    {0x1.6e1f766d2cca1p+0, -0x1.08494bd76d000p-1},
    {0x1.6a13d0e30d48ap+0, -0x1.00143aee8f800p-1},
    {0x1.661ec32d06c85p+0, -0x1.efec5360b4000p-2},
    {0x1.623fa951198f8p+0, -0x1.dfdd91ab7e000p-2},
    {0x1.5e75ba4cf026cp+0, -0x1.cffae0cc79000p-2},
    {0x1.5ac055a214fb8p+0, -0x1.c043811fda000p-2},
    {0x1.571ed0f166e1ep+0, -0x1.b0b67323ae000p-2},
    {0x1.53909590bf835p+0, -0x1.a152f5a2db000p-2},
    {0x1.5014fed61adddp+0, -0x1.9217f5af86000p-2},
    {0x1.4cab88e487bd0p+0, -0x1.8304db0719000p-2},
    {0x1.49539b4334feep+0, -0x1.74189f9a9e000p-2},
    {0x1.460cbdfafd569p+0, -0x1.6552bb5199000p-2},
    {0x1.42d664ee4b953p+0, -0x1.56b23a29b1000p-2},
    {0x1.3fb01111dd8a6p+0, -0x1.483650f5fa000p-2},
    {0x1.3c995b70c5836p+0, -0x1.39de937f6a000p-2},
    {0x1.3991c4ab6fd4ap+0, -0x1.2baa1538d6000p-2},
    {0x1.3698e0ce099b5p+0, -0x1.1d98340ca4000p-2},
    {0x1.33ae48213e7b2p+0, -0x1.0fa853a40e000p-2},
    {0x1.30d191985bdb1p+0, -0x1.01d9c32e73000p-2},
    {0x1.2e025cab271d7p+0, -0x1.e857da2fa6000p-3},
    {0x1.2b404cf13cd82p+0, -0x1.cd3c8633d8000p-3},
    {0x1.288b02c7ccb50p+0, -0x1.b26034c14a000p-3},
    {0x1.25e2263944de5p+0, -0x1.97c1c2f4fe000p-3},
    {0x1.234563d8615b1p+0, -0x1.7d6023f800000p-3},
    {0x1.20b46e33eaf38p+0, -0x1.633a71a05e000p-3},
    {0x1.1e2eefdcda3ddp+0, -0x1.494f5e9570000p-3},
    {0x1.1bb4a580b3930p+0, -0x1.2f9e424e0a000p-3},
    {0x1.19453847f2200p+0, -0x1.162595afdc000p-3},
    {0x1.16e06c0d5d73cp+0, -0x1.f9c9a75bd8000p-4},
    {0x1.1485f47b7e4c2p+0, -0x1.c7b575bf9c000p-4},
    {0x1.12358ad0085d1p+0, -0x1.960c60ff48000p-4},
    {0x1.0fef00f532227p+0, -0x1.64ce247b60000p-4},
    {0x1.0db2077d03a8fp+0, -0x1.33f78b2014000p-4},
    {0x1.0b7e6d65980d9p+0, -0x1.0387d1a42c000p-4},
    {0x1.0953efe7b408dp+0, -0x1.a6f9208b50000p-5},
    {0x1.07325cac53b83p+0, -0x1.47a954f770000p-5},
    {0x1.05197e40d1b5cp+0, -0x1.d23a8c50c0000p-6},
    {0x1.03091c1208ea2p+0, -0x1.16a2629780000p-6},
    {0x1.0101025b37e21p+0, -0x1.720f8d8e80000p-8},
    {0x1.fc07ef9caa76bp-1, 0x1.6fe53b1500000p-7},
    {0x1.f4465d3f6f184p-1, 0x1.11ccce10f8000p-5},
    {0x1.ecc079f84107fp-1, 0x1.c4dfc8c8b8000p-5},
    {0x1.e573a99975ae8p-1, 0x1.3aa321e574000p-4},
    {0x1.de5d6f0bd3de6p-1, 0x1.918a0d08b8000p-4},
    {0x1.d77b681ff38b3p-1, 0x1.e72e9da044000p-4},
    {0x1.d0cb5724de943p-1, 0x1.1dcd2507f6000p-3},
    {0x1.ca4b2dc0e7563p-1, 0x1.476ab03dea000p-3},
    {0x1.c3f8ee8d6cb51p-1, 0x1.7074377e22000p-3},
    {0x1.bdd2b4f020c4cp-1, 0x1.98ede8ba94000p-3},
    {0x1.b7d6c006015cap-1, 0x1.c0db86ad2e000p-3},
    {0x1.b20366e2e338fp-1, 0x1.e840aafcee000p-3},
    {0x1.ac57026295039p-1, 0x1.0790ab4678000p-2},
    {0x1.a6d01bc2731ddp-1, 0x1.1ac056801c000p-2},
    {0x1.a16d3bc3ff18bp-1, 0x1.2db11d4fee000p-2},
    {0x1.9c2d14967feadp-1, 0x1.406464ec58000p-2},
    {0x1.970e4f47c9902p-1, 0x1.52dbe093af000p-2},
    {0x1.920fb3982bcf2p-1, 0x1.651902050d000p-2},
    {0x1.8d30187f759f1p-1, 0x1.771d2cdeaf000p-2},
    {0x1.886e5ebb9f66dp-1, 0x1.88e9c857d9000p-2},
    {0x1.83c97b658b994p-1, 0x1.9a80155e16000p-2},
    {0x1.7f405ffc61022p-1, 0x1.abe186ed3d000p-2},
    {0x1.7ad22181415cap-1, 0x1.bd0f2aea0e000p-2},
    {0x1.767dcf99eff8cp-1, 0x1.ce0a43dbf4000p-2},
};


// log1p
#define LogScaleData 0x3f400000
#define Top9Maskf 0xff800000
#define LogScaleComps 0x40800000

#define OneMHfRt2Top 0x00095f6200000000
#define HfRt2Top 0x3fe6a09e00000000

#define Ln2Hi 0x1.62e42fefa3800p-1
#define Ln2Lo 0x1.ef35793c76730p-45

static const float __log1pf_data[9]
  = {-0x1p-1f, 0x1.5555aap-2f, -0x1.000038p-2f, 0x1.99675cp-3f,
		-0x1.54ef78p-3f, 0x1.28a1f4p-3f, -0x1.0da91p-3f, 0x1.abcb6p-4f,
		-0x1.6f0d5ep-5f};

static const double __log1p_data[19] = 
    {-0x1.ffffffffffffbp-2, 0x1.55555555551a9p-2, -0x1.00000000008e3p-2,
	     0x1.9999999a32797p-3, -0x1.555555552fecfp-3, 0x1.249248e071e5ap-3,
	     -0x1.ffffff8bf8482p-4, 0x1.c71c8f07da57ap-4, -0x1.9999ca4ccb617p-4,
	     0x1.7459ad2e1dfa3p-4, -0x1.554d2680a3ff2p-4, 0x1.3b4c54d487455p-4,
	     -0x1.2548a9ffe80e6p-4, 0x1.0f389a24b2e07p-4, -0x1.eee4db15db335p-5,
	     0x1.e95b494d4a5ddp-5, -0x1.15fdf07cb7c73p-4, 0x1.0310b70800fcfp-4,
	     -0x1.cfa7385bdb37ep-6};

#define __log1p_c(i) __log1p_data[i]

// log10
#define InvLn10 0.43429448190325182765

// Asinh
static const unsigned long asinh_table_f64_la[1552]=
{0xc086232bdd7a8300,0xbe1ce91eef3fb100,
0xc086232fdc7ad828,0xbe1cefcffda73b6a,
0xc0862333d97d2ba0,0xbe1cef406748f1ff,
0xc0862337d48378e0,0xbe1cef2a9429925a,
0xc086233bcd8fb878,0xbe1cf138d17ebecb,
0xc086233fc4a3e018,0xbe1ceff2dbbbb29e,
0xc0862343b9c1e270,0xbe1cf1a42aae437b,
0xc0862347acebaf68,0xbe1cef3b152048af,
0xc086234b9e2333f0,0xbe1cef20e127805e,
0xc086234f8d6a5a30,0xbe1cf00ad6052cf4,
0xc08623537ac30980,0xbe1cefc4642ee597,
0xc0862357662f2660,0xbe1cf1f277d36e16,
0xc086235b4fb092a0,0xbe1ceed009e8d8e6,
0xc086235f37492d28,0xbe1cf1e4038cb362,
0xc08623631cfad250,0xbe1cf0b0873b8557,
0xc086236700c75b98,0xbe1cf15bb3227c0b,
0xc086236ae2b09fe0,0xbe1cf151ef8ca9ed,
0xc086236ec2b87358,0xbe1cefe1dc2cd2ed,
0xc0862372a0e0a780,0xbe1cf0d1eec5454f,
0xc08623767d2b0b48,0xbe1ceeefd570bbce,
0xc086237a57996af0,0xbe1cee99ae91b3a7,
0xc086237e302d9028,0xbe1cf0412830fbd1,
0xc086238206e94218,0xbe1ceee898588610,
0xc0862385dbce4548,0xbe1cee9a1fbcaaea,
0xc0862389aede5bc0,0xbe1ceed8e7cc1ad6,
0xc086238d801b4500,0xbe1cf10c8d059da6,
0xc08623914f86be18,0xbe1ceee6c63a8165,
0xc08623951d228180,0xbe1cf0c3592d2ff1,
0xc0862398e8f04758,0xbe1cf0026cc4cb1b,
0xc086239cb2f1c538,0xbe1cf15d48d8e670,
0xc08623a07b28ae60,0xbe1cef359363787c,
0xc08623a44196b390,0xbe1cefdf1ab2e82c,
0xc08623a8063d8338,0xbe1cefe43c02aa84,
0xc08623abc91ec960,0xbe1cf044f5ae35b7,
0xc08623af8a3c2fb8,0xbe1cf0b0b4001e1b,
0xc08623b349975d98,0xbe1cf1bae76dfbcf,
0xc08623b70731f810,0xbe1cef0a72e13a62,
0xc08623bac30da1c8,0xbe1cf184007d2b6b,
0xc08623be7d2bfb40,0xbe1cf16f4b239e98,
0xc08623c2358ea2a0,0xbe1cf0976acada87,
0xc08623c5ec3733d0,0xbe1cf066318a16ff,
0xc08623c9a1274880,0xbe1ceffaa7148798,
0xc08623cd54607820,0xbe1cf23ab02e9b6e,
0xc08623d105e45800,0xbe1cefdfef7d4fde,
0xc08623d4b5b47b20,0xbe1cf17fece44f2b,
0xc08623d863d27270,0xbe1cf18f907d0d7c,
0xc08623dc103fccb0,0xbe1cee61fe072c98,
0xc08623dfbafe1668,0xbe1cf022dd891e2f,
0xc08623e3640eda20,0xbe1ceecc1daf4358,
0xc08623e70b73a028,0xbe1cf0173c4fa380,
0xc08623eab12deec8,0xbe1cf16a2150c2f4,
0xc08623ee553f4a30,0xbe1cf1bf980b1f4b,
0xc08623f1f7a93480,0xbe1cef8b731663c2,
0xc08623f5986d2dc0,0xbe1cee9a664d7ef4,
0xc08623f9378cb3f0,0xbe1cf1eda2af6400,
0xc08623fcd5094320,0xbe1cf1923f9d68d7,
0xc086240070e45548,0xbe1cf0747cd3e03a,
0xc08624040b1f6260,0xbe1cf22ee855bd6d,
0xc0862407a3bbe078,0xbe1cf0d57360c00b,
0xc086240b3abb4398,0xbe1ceebc815cd575,
0xc086240ed01efdd0,0xbe1cf03bfb970951,
0xc086241263e87f50,0xbe1cf16e74768529,
0xc0862415f6193658,0xbe1cefec64b8becb,
0xc086241986b28f30,0xbe1cf0838d210baa,
0xc086241d15b5f448,0xbe1cf0ea86e75b11,
0xc0862420a324ce28,0xbe1cf1708d11d805,
0xc08624242f008380,0xbe1ceea988c5a417,
0xc0862427b94a7910,0xbe1cef166a7bbca5,
0xc086242b420411d0,0xbe1cf0c9d9e86a38,
0xc086242ec92eaee8,0xbe1cef0946455411,
0xc08624324ecbaf98,0xbe1cefea60907739,
0xc0862435d2dc7160,0xbe1cf1ed0934ce42,
0xc086243955624ff8,0xbe1cf191ba746c7d,
0xc086243cd65ea548,0xbe1ceeec78cf2a7e,
0xc086244055d2c968,0xbe1cef345284c119,
0xc0862443d3c012b8,0xbe1cf24f77355219,
0xc08624475027d5e8,0xbe1cf05bf087e114,
0xc086244acb0b65d0,0xbe1cef3504a32189,
0xc086244e446c1398,0xbe1ceff54b2a406f,
0xc0862451bc4b2eb8,0xbe1cf0757d54ed4f,
0xc086245532aa04f0,0xbe1cf0c8099fdfd5,
0xc0862458a789e250,0xbe1cf0b173796a31,
0xc086245c1aec1138,0xbe1cf11d8734540d,
0xc086245f8cd1da60,0xbe1cf1916a723ceb,
0xc0862462fd3c84d8,0xbe1cf19a911e1da7,
0xc08624666c2d5608,0xbe1cf23a9ef72e4f,
0xc0862469d9a591c0,0xbe1cef503d947663,
0xc086246d45a67a18,0xbe1cf0fceeb1a0b2,
0xc0862470b0314fa8,0xbe1cf107e27e4fbc,
0xc086247419475160,0xbe1cf03dd9922331,
0xc086247780e9bc98,0xbe1cefce1a10e129,
0xc086247ae719cd18,0xbe1ceea47f73c4f6,
0xc086247e4bd8bd10,0xbe1ceec0ac56d100,
0xc0862481af27c528,0xbe1cee8a6593278a,
0xc086248511081c70,0xbe1cf2231dd9dec7,
0xc0862488717af888,0xbe1cf0b4b8ed7da8,
0xc086248bd0818d68,0xbe1cf1bd8d835002,
0xc086248f2e1d0d98,0xbe1cf259acc107f4,
0xc08624928a4eaa20,0xbe1cee897636b00c,
0xc0862495e5179270,0xbe1cee757f20c326,
0xc08624993e78f490,0xbe1cefafd3aa54a4,
0xc086249c9673fd10,0xbe1cee7298d38b97,
0xc086249fed09d6f8,0xbe1ceedc158d4ceb,
0xc08624a3423babe0,0xbe1cf2282987cb2e,
0xc08624a6960aa400,0xbe1cefe7381ecc4b,
0xc08624a9e877e600,0xbe1cef328dbbce80,
0xc08624ad39849728,0xbe1cefde45f3cc71,
0xc08624b08931db58,0xbe1cefa8b89433b9,
0xc08624b3d780d500,0xbe1cef6773c0b139,
0xc08624b72472a528,0xbe1cf031c931c11f,
0xc08624ba70086b78,0xbe1cf088f49275e7,
0xc08624bdba434630,0xbe1cf17de0eaa86d,
0xc08624c103245238,0xbe1cefd492f1ba75,
0xc08624c44aacab08,0xbe1cf1253e154466,
0xc08624c790dd6ad0,0xbe1cf0fb09ee6d55,
0xc08624cad5b7aa58,0xbe1cf1f08dd048fe,
0xc08624ce193c8120,0xbe1ceeca0809697f,
0xc08624d15b6d0538,0xbe1cef8d5662d968,
0xc08624d49c4a4b78,0xbe1cee97b556ed78,
0xc08624d7dbd56750,0xbe1cf1b14b6acb75,
0xc08624db1a0f6b00,0xbe1cef1e860623f2,
0xc08624de56f96758,0xbe1ceeaf4d156f3d,
0xc08624e192946bf0,0xbe1ceecc12b400ed,
0xc08624e4cce18710,0xbe1cf180c40c794f,
0xc08624e805e1c5c8,0xbe1cf185a08f7f65,
0xc08624eb3d9633d8,0xbe1cef45fc924078,
0xc08624ee73ffdbb0,0xbe1cf1e4f457f32a,
0xc08624f1a91fc6a0,0xbe1cf040147b8a5a,
0xc08624f4dcf6fc98,0xbe1cf1effca0dfb2,
0xc08624f80f868468,0xbe1cf0470146e5bc,
0xc08624fb40cf6390,0xbe1cef4dd186e501,
0xc08624fe70d29e60,0xbe1ceebe257f66c7,
0xc08625019f9137f0,0xbe1ceefb7a1c395c,
0xc0862504cd0c3220,0xbe1cf209dedfed8c,
0xc0862507f9448db0,0xbe1cf082da464994,
0xc086250b243b4a18,0xbe1cee88694a73cf,
0xc086250e4df165a0,0xbe1cf0b61e8f0531,
0xc08625117667dd78,0xbe1cf1106599c962,
0xc08625149d9fad98,0xbe1ceff1ee88af1f,
0xc0862517c399d0c8,0xbe1cf0f746994ef6,
0xc086251ae85740b8,0xbe1cefe8a1d077e4,
0xc086251e0bd8f5e0,0xbe1cf1a1da036092,
0xc08625212e1fe7a8,0xbe1cf0f8a7786fcd,
0xc08625244f2d0c48,0xbe1cefa1174a07a7,
0xc08625276f0158d8,0xbe1cef1043aa5b25,
0xc086252a8d9dc150,0xbe1cf15d521c169d,
0xc086252dab033898,0xbe1cf220bba8861f,
0xc0862530c732b078,0xbe1cef51e310eae2,
0xc0862533e22d1988,0xbe1cf222fcedd8ae,
0xc0862536fbf36370,0xbe1cefdb4da4bda8,
0xc086253a14867ca0,0xbe1ceeafc1112171,
0xc086253d2be75280,0xbe1cee99dfb4b408,
0xc08625404216d160,0xbe1cf22d2536f06b,
0xc08625435715e498,0xbe1cef6abbf2e268,
0xc08625466ae57648,0xbe1cf093a14789f5,
0xc08625497d866fa0,0xbe1cf0f93655603c,
0xc086254c8ef9b8b8,0xbe1cf1cc40c9aafc,
0xc086254f9f4038a8,0xbe1ceeea5f4e9157,
0xc0862552ae5ad568,0xbe1cefa9f52d4997,
0xc0862555bc4a7400,0xbe1cefa490a638ff,
0xc0862558c90ff868,0xbe1cef7fcf797d6f,
0xc086255bd4ac4590,0xbe1cf1b4c51113c9,
0xc086255edf203d78,0xbe1cef55e5b4a55d,
0xc0862561e86cc100,0xbe1cf0d37a25f9dc,
0xc0862564f092b028,0xbe1ceebe9efc19d9,
0xc0862567f792e9d8,0xbe1cee8ad30a57b5,
0xc086256afd6e4c08,0xbe1cef4e1817b90b,
0xc086256e0225b3b8,0xbe1cee7fa9229996,
0xc086257105b9fce0,0xbe1cf0b54963d945,
0xc0862574082c0298,0xbe1cee5f2f3c7995,
0xc0862577097c9ee0,0xbe1cf0828e303a2c,
0xc086257a09acaae0,0xbe1cf172c3078947,
0xc086257d08bcfec0,0xbe1cf189252afa22,
0xc086258006ae71b8,0xbe1cefdb80426923,
0xc08625830381da08,0xbe1ceef1391a0372,
0xc0862585ff380d00,0xbe1cf17720c78d13,
0xc0862588f9d1df18,0xbe1ceef1f9027d83,
0xc086258bf35023b8,0xbe1cf06fac99dec9,
0xc086258eebb3ad78,0xbe1cf1373eeb45c0,
0xc0862591e2fd4e00,0xbe1cef777536bb81,
0xc0862594d92dd600,0xbe1cf0f43ca40766,
0xc0862597ce461558,0xbe1cefb2cfc6766b,
0xc086259ac246daf0,0xbe1ceea49e64ffa2,
0xc086259db530f4c8,0xbe1cf250fa457dec,
0xc08625a0a7053018,0xbe1cf17d8bb2a44e,
0xc08625a397c45918,0xbe1cf1d5906d54b7,
0xc08625a6876f3b30,0xbe1cf08fe7b31780,
0xc08625a97606a0e0,0xbe1cef13edfc9d11,
0xc08625ac638b53c8,0xbe1cef9d2b107219,
0xc08625af4ffe1cb0,0xbe1cf1ddd4ff6160,
0xc08625b23b5fc390,0xbe1cefa02a996495,
0xc08625b525b10f68,0xbe1cf166a7e37ee5,
0xc08625b80ef2c680,0xbe1cef0b171068a5,
0xc08625baf725ae28,0xbe1cf05c80779283,
0xc08625bdde4a8af0,0xbe1cf1bbfbffb889,
0xc08625c0c4622090,0xbe1cf0b8666c0124,
0xc08625c3a96d31e0,0xbe1cf0a8fcf47a86,
0xc08625c68d6c80f0,0xbe1cef46e18cb092,
0xc08625c97060cef0,0xbe1cf1458a350efb,
0xc08625cc524adc58,0xbe1ceeea1dadce12,
0xc08625cf332b68b0,0xbe1cf0a1bfdc44c7,
0xc08625d2130332d0,0xbe1cef96d02da73e,
0xc08625d4f1d2f8a8,0xbe1cf2451c3c7701,
0xc08625d7cf9b7778,0xbe1cf10d08f83812,
0xc08625daac5d6ba0,0xbe1ceec5b4895c5e,
0xc08625dd881990b0,0xbe1cf14e1325c5e4,
0xc08625e062d0a188,0xbe1cf21d0904be12,
0xc08625e33c835838,0xbe1ceed0839bcf21,
0xc08625e615326df0,0xbe1cf1bb944889d2,
0xc08625e8ecde9b48,0xbe1cee738e85eece,
0xc08625ebc38897e0,0xbe1cf25c2bc6ef12,
0xc08625ee99311ac8,0xbe1cf132b70a41ad,
0xc08625f16dd8da28,0xbe1cf1984236a6e3,
0xc08625f441808b78,0xbe1cf19ae74998f9,
0xc08625f71428e370,0xbe1cef3e175d61a1,
0xc08625f9e5d295f8,0xbe1cf101f9868fd9,
0xc08625fcb67e5658,0xbe1cee69db83dcd2,
0xc08625ff862cd6f8,0xbe1cf081b636af51,
0xc086260254dec9a8,0xbe1cee62c7d59b3e,
0xc08626052294df58,0xbe1cf1b745c57716,
0xc0862607ef4fc868,0xbe1cef3d2800ea23,
0xc086260abb103458,0xbe1cef480ff1acd2,
0xc086260d85d6d200,0xbe1cf2424c9a17ef,
0xc08626104fa44f90,0xbe1cf12cfde90fd5,
0xc086261318795a68,0xbe1cf21f590dd5b6,
0xc0862615e0569f48,0xbe1cf0c50f9cd28a,
0xc0862618a73cca30,0xbe1ceedbdb520545,
0xc086261b6d2c8668,0xbe1cf0b030396011,
0xc086261e32267e98,0xbe1cf19917010e96,
0xc0862620f62b5cb0,0xbe1cf07331355985,
0xc0862623b93bc9e8,0xbe1cf01ae921a1c3,
0xc08626267b586ed0,0xbe1cefe5cf0dbf0c,
0xc08626293c81f348,0xbe1cf01b258aeb50,
0xc086262bfcb8fe88,0xbe1cee6b9e7f4c68,
0xc086262ebbfe3710,0xbe1cee684a9b21c9,
0xc08626317a5242b8,0xbe1cf1f8bcde9a8b,
0xc086263437b5c6c0,0xbe1cf1d063d36238,
0xc0862636f42967a8,0xbe1cf1e31a19075e,
0xc0862639afadc950,0xbe1cf1d8efdf7e7d,
0xc086263c6a438ef0,0xbe1cf1812ee72dba,
0xc086263f23eb5b18,0xbe1cf1449a9a2279,
0xc0862641dca5cfb8,0xbe1cee96edce5085,
0xc086264494738e08,0xbe1cf06797bd03b2,
0xc08626474b5536b8,0xbe1cef91b9b7ffc1,
0xc086264a014b69c0,0xbe1cef4b6721278f,
0xc086264cb656c678,0xbe1cf1942925eb4a,
0xc086264f6a77eba8,0xbe1cefa2c7bc2e39,
0xc08626521daf7758,0xbe1cf252595aceb3,
0xc0862654cffe0718,0xbe1cee8e9ae47ec2,
0xc0862657816437a8,0xbe1cf1bf913828fa,
0xc086265a31e2a558,0xbe1cf23475d6b366,
0xc086265ce179ebc8,0xbe1cef8df00a922b,
0xc086265f902aa5f0,0xbe1cef279bfa43e0,
0xc08626623df56e38,0xbe1cf080e10b8365,
0xc0862664eadade70,0xbe1cf1a518f9b544,
0xc086266796db8fd0,0xbe1cef9308fed9e9,
0xc086266a41f81ae8,0xbe1ceea3ae6b19c9,
0xc086266cec3117b8,0xbe1ceef06003d4c2,
0xc086266f95871da8,0xbe1cf0b8457ffb0c,
0xc08626723dfac390,0xbe1cf0c526745ad6,
0xc0862674e58c9fa8,0xbe1cf0cf91ff7b5d,
0xc08626778c3d4798,0xbe1cefe260819380,
0xc086267a320d5070,0xbe1ceebd90aa27a3,
0xc086267cd6fd4ea8,0xbe1cf0388121dffa,
0xc086267f7b0dd630,0xbe1cf1a3881435f1,
0xc08626821e3f7a68,0xbe1cef28e9d9ac52,
0xc0862684c092ce08,0xbe1cf02d300062dd,
0xc086268762086350,0xbe1cefaee1edfa35,
0xc086268a02a0cbe0,0xbe1cf0a5a052e936,
0xc086268ca25c98d8,0xbe1cee60a4a497ed,
0xc086268f413c5ab0,0xbe1cf0e4a5d0cf49,
0xc0862691df40a170,0xbe1cf149235a4e6e,
0xc08626947c69fc80,0xbe1cf215180b9fcc,
0xc086269718b8fac8,0xbe1cef9b156a9840,
0xc0862699b42e2a90,0xbe1cf054c91441be,
0xc086269c4eca19a8,0xbe1cf13ded26512c,
0xc086269ee88d5550,0xbe1cf22ea4d8ac06,
0xc08626a181786a40,0xbe1cf2354666ee2e,
0xc08626a4198be4a8,0xbe1cefef936752b3,
0xc08626a6b0c85020,0xbe1cf1e360a9db68,
0xc08626a9472e37d8,0xbe1ceed6aeb812c5,
0xc08626abdcbe2650,0xbe1cf227340b4986,
0xc08626ae7178a5b0,0xbe1cf0215a0cbe0d,
0xc08626b1055e3f70,0xbe1cf256adf0ae26,
0xc08626b3986f7ca8,0xbe1ceff3c67aed06,
0xc08626b62aace5c8,0xbe1cf2159fb93652,
0xc08626b8bc1702e0,0xbe1cf01e6dbd1c7f,
0xc08626bb4cae5b60,0xbe1cf009e75d1c0c,
0xc08626bddc737648,0xbe1ceec10a020e73,
0xc08626c06b66da08,0xbe1cf06d5783eee7,
0xc08626c2f9890ca0,0xbe1cf0cb8f169ffe,
0xc08626c586da9388,0xbe1cef7de2452430,
0xc08626c8135bf3b0,0xbe1cf05da6f783ae,
0xc08626ca9f0db198,0xbe1cefcc877d681d,
0xc08626cd29f05138,0xbe1cef0531954ab3,
0xc08626cfb4045608,0xbe1cf06b8565ea3d,
0xc08626d23d4a4310,0xbe1cefdc455d9d7e,
0xc08626d4c5c29ad0,0xbe1ceefc47e8fa64,
0xc08626d74d6ddf48,0xbe1cf1872bf033f2,
0xc08626d9d44c9210,0xbe1cf19d91087f9d,
0xc08626dc5a5f3438,0xbe1cf012d444c6ab,
0xc08626dedfa64650,0xbe1cf0ba528ee153,
0xc08626e164224880,0xbe1ceeb431709788,
0xc08626e3e7d3ba60,0xbe1cf0b9af31a6a5,
0xc08626e66abb1b28,0xbe1cf168fb2e135b,
0xc08626e8ecd8e990,0xbe1cef9097461c93,
0xc08626eb6e2da3d0,0xbe1cee7a434735d8,
0xc08626edeeb9c7a8,0xbe1cf235732b86f2,
0xc08626f06e7dd280,0xbe1cefe1510b89e6,
0xc08626f2ed7a4120,0xbe1cf1f64b9b80ef,
0xc08626f56baf9000,0xbe1cf08f320ca339,
0xc08626f7e91e3b08,0xbe1cf1b1de2808a1,
0xc08626fa65c6bdc0,0xbe1cf1976d778b28,
0xc08626fce1a99338,0xbe1ceef40a4f076f,
0xc08626ff5cc73600,0xbe1cef3e45869ce3,
0xc0862701d7202048,0xbe1ceef601b4c9d6,
0xc086270450b4cbc0,0xbe1cf1eaf0b57fd6,
0xc0862706c985b1c0,0xbe1cef82a44990f3,
0xc086270941934b10,0xbe1ceefe32981f2c,
0xc086270bb8de1018,0xbe1cefbf6f5a0445,
0xc086270e2f6678d0,0xbe1cf18dba75792c,
0xc0862710a52cfcc8,0xbe1cf0da64ce995f,
0xc08627131a321318,0xbe1cef04ac0fb802,
0xc08627158e763268,0xbe1cee9d4e2ad9bd,
0xc086271801f9d0f8,0xbe1cefa9b55407b5,
0xc086271a74bd64a0,0xbe1cefe6bd329570,
0xc086271ce6c162c8,0xbe1cef0b1205dc85,
0xc086271f58064068,0xbe1cef092a785e3f,
0xc0862721c88c7210,0xbe1cf050dcdaac30,
0xc086272438546be8,0xbe1cf210907ded8b,
0xc0862726a75ea1b8,0xbe1cee760be44f99,
0xc086272915ab86c0,0xbe1ceeeee07c2bcc,
0xc086272b833b8df0,0xbe1cf06874992df5,
0xc086272df00f29d0,0xbe1cef8fac5d4899,
0xc08627305c26cc70,0xbe1cf1103241cc99,
0xc0862732c782e788,0xbe1cf1d35fef83fe,
0xc08627353223ec68,0xbe1cef3ec8133e1d,
0xc08627379c0a4be8,0xbe1cef7261daccd8,
0xc086273a05367688,0xbe1cf18656c50806,
0xc086273c6da8dc68,0xbe1cf1c8736e049a,
0xc086273ed561ed38,0xbe1cf1f93bff4911,
0xc08627413c621848,0xbe1cf188a4ea680c,
0xc0862743a2a9cc80,0xbe1cf1d270930c80,
0xc086274608397868,0xbe1cf25a328c28e2,
0xc08627486d118a28,0xbe1cf106f90aa3b8,
0xc086274ad1326f80,0xbe1cee5e9d2e885a,
0xc086274d349c95c0,0xbe1cf1c0bac27228,
0xc086274f975069f8,0xbe1cf1a1500f9b1c,
0xc0862751f94e58c0,0xbe1cefc30663ac44,
0xc08627545a96ce48,0xbe1cf17123e427a2,
0xc0862756bb2a3678,0xbe1cefb92749fea4,
0xc08627591b08fcc0,0xbe1cefa40e1ea74a,
0xc086275b7a338c40,0xbe1cee6f4612c3e9,
0xc086275dd8aa4fa8,0xbe1cf1c54a053627,
0xc0862760366db168,0xbe1ceff5eb503d9e,
0xc0862762937e1b70,0xbe1cf02e47f10cee,
0xc0862764efdbf768,0xbe1ceeb06e1d0dad,
0xc08627674b87ae88,0xbe1cf10aadd6dba5,
0xc0862769a681a9c0,0xbe1cf24e9913d30f,
0xc086276c00ca51a0,0xbe1cef47b301e312,
0xc086276e5a620e48,0xbe1ceeb1cefc2e85,
0xc0862770b3494788,0xbe1cf16f1fbbe011,
0xc08627730b8064e8,0xbe1ceebdf75174c7,
0xc08627756307cd70,0xbe1cf06e3871a0da,
0xc0862777b9dfe7f0,0xbe1cef16799fd554,
0xc086277a10091ac0,0xbe1cf248dabf5377,
0xc086277c6583cc00,0xbe1cf0c78d92a2cd,
0xc086277eba506158,0xbe1cf0b911b029f0,
0xc08627810e6f4028,0xbe1cefdc24719766,
0xc086278361e0cd70,0xbe1cefbb6562b7e7,
0xc0862785b4a56dd8,0xbe1cf1e0afb349ec,
0xc086278806bd85c0,0xbe1cf008292e52fc,
0xc086278a58297918,0xbe1cf053073872bf,
0xc086278ca8e9ab88,0xbe1cf17a0a55a947,
0xc086278ef8fe8068,0xbe1ceeffb0b60234,
0xc086279148685aa0,0xbe1cf162204794a8,
0xc086279397279ce0,0xbe1cf24cc8cb48ac,
0xc0862795e53ca978,0xbe1cf0c9be68d5c3,
0xc086279832a7e258,0xbe1cf172cd3d7388,
0xc086279a7f69a930,0xbe1ceea2465fbce5,
0xc086279ccb825f40,0xbe1cf0a386d2500f,
0xc086279f16f26590,0xbe1cf1e338ddc18a,
0xc08627a161ba1cd0,0xbe1cef1f5049867f,
0xc08627a3abd9e548,0xbe1cef96c1ea8b1f,
0xc08627a5f5521f00,0xbe1cf138f6fd3c26,
0xc08627a83e2329b0,0xbe1cf0d4fcbfdf3a,
0xc08627aa864d64b0,0xbe1cf24870c12c81,
0xc08627accdd12f18,0xbe1cf0ae2a56348d,
0xc08627af14aee7a0,0xbe1cee8ca1a9b893,
0xc08627b15ae6eca8,0xbe1cf20414d637b0,
0xc08627b3a0799c60,0xbe1cf0fc6b7b12d8,
0xc08627b5e5675488,0xbe1cf152d93c4a00,
0xc08627b829b072a0,0xbe1cf1073f9b77c2,
0xc08627ba6d5553d8,0xbe1cee694f97d5a4,
0xc08627bcb0565500,0xbe1cf0456b8239d7,
0xc08627bef2b3d2b0,0xbe1cf211497127e3,
0xc08627c1346e2930,0xbe1cf01856c0384d,
0xc08627c37585b468,0xbe1cefa7dd05479e,
0xc08627c5b5fad000,0xbe1cef3ae8e50b93,
0xc08627c7f5cdd750,0xbe1ceea5f32fdd3a,
0xc08627ca34ff2560,0xbe1cef424caeb8d9,
0xc08627cc738f14f0,0xbe1cf0194d07a81f,
0xc08627ceb17e0070,0xbe1cf20f452000c1,
0xc08627d0eecc4210,0xbe1cf00e356218e4,
0xc08627d32b7a33a0,0xbe1cef30484b4bcb,
0xc08627d567882eb0,0xbe1ceeea11a6641b,
0xc08627d7a2f68c80,0xbe1cf13492d5bd7b,
0xc08627d9ddc5a618,0xbe1ceeb7048fad96,
0xc08627dc17f5d418,0xbe1ceef0666f0477,
0xc08627de51876ee8,0xbe1cf060d4b8b5c2,
0xc08627e08a7acea8,0xbe1cf0b2a4b6ff8c,
0xc08627e2c2d04b28,0xbe1cf0e34809a875,
0xc08627e4fa883bf0,0xbe1cf16bf74a3522,
0xc08627e731a2f848,0xbe1cee6a24623d57,
0xc08627e96820d718,0xbe1cefc7b4f1528e,
0xc08627eb9e022f18,0xbe1cf163051f3548,
0xc08627edd34756b8,0xbe1cef36b3366305,
0xc08627f007f0a408,0xbe1cf18134625550,
0xc08627f23bfe6cf0,0xbe1cf0ec32ec1a11,
0xc08627f46f710700,0xbe1ceeb3b64f3edc,
0xc08627f6a248c778,0xbe1cf0cd15805bc8,
0xc08627f8d4860368,0xbe1cf20db3bddebe,
0xc08627fb06290f90,0xbe1cf25188430e25,
0xc08627fd37324070,0xbe1ceea1713490f9,
0xc08627ff67a1ea28,0xbe1cf159521d234c,
0xc0862801977860b8,0xbe1cf24dfe50783b,
0xc0862803c6b5f7d0,0xbe1ceef2ef89a60b,
0xc0862805f55b02c8,0xbe1cee7fc919d62c,
0xc08628082367d4c0,0xbe1cf215a7fb513a,
0xc086280a50dcc0a8,0xbe1cf0e4401c5ed4,
0xc086280c7dba1910,0xbe1cf04ec734d256,
0xc086280eaa003050,0xbe1cf010ad787fea,
0xc0862810d5af5880,0xbe1cee622478393d,
0xc086281300c7e368,0xbe1cf01c7482564f,
0xc08628152b4a22a0,0xbe1cf0de20d33536,
0xc086281755366778,0xbe1cef2edae5837d,
0xc08628197e8d02f0,0xbe1cf0a345318cc9,
0xc086281ba74e45d8,0xbe1cf20085aa34b8,
0xc086281dcf7a80c0,0xbe1cef5fa845ad83,
0xc086281ff71203e0,0xbe1cf050d1df69c4,
0xc08628221e151f48,0xbe1ceffe43c035b9,
0xc0862824448422b8,0xbe1cf14f3018d3c2,
0xc08628266a5f5dc0,0xbe1cef0a5fbae83d,
0xc08628288fa71f98,0xbe1ceff8a95b72a1,
0xc086282ab45bb750,0xbe1cef073aa9849b,
0xc086282cd87d73a8,0xbe1cef69b3835c02,
0xc086282efc0ca328,0xbe1cf0bc139379a9,
0xc08628311f099420,0xbe1cef247a9ec596,
0xc086283341749490,0xbe1cef74bbcc488a,
0xc0862835634df248,0xbe1cef4bc42e7b8e,
0xc08628378495fad0,0xbe1cf136d4d5a810,
0xc0862839a54cfb80,0xbe1cf0d290b24dd8,
0xc086283bc5734168,0xbe1ceeebde8e0065,
0xc086283de5091950,0xbe1cf1a09f60aa1e,
0xc0862840040ecfe0,0xbe1cf0803947a234,
0xc08628422284b168,0xbe1cf0abf7638127,
0xc0862844406b0a08,0xbe1cf0f73ee12058,
0xc08628465dc225a0,0xbe1cf2079971b26c,
0xc08628487a8a4fe0,0xbe1cee74957564b1,
0xc086284a96c3d420,0xbe1ceee77c1b7d43,
0xc086284cb26efd90,0xbe1cf23addba6e09,
0xc086284ecd8c1730,0xbe1cf199f4a1da60,
0xc0862850e81b6bb0,0xbe1cf09fdea81393,
0xc0862853021d4588,0xbe1cf176adb417f7,
0xc08628551b91ef00,0xbe1cf0f64f84a8da,
0xc08628573479b220,0xbe1ceec34cf49523,
0xc08628594cd4d8a8,0xbe1cf16d60fbe0bb,
0xc086285b64a3ac40,0xbe1cee8de7acfc7b,
0xc086285d7be67630,0xbe1ceee6256cce8d,
0xc086285f929d7fa0,0xbe1cee7d66a3d8a5,
0xc0862861a8c91170,0xbe1cf0bef8265792,
0xc0862863be697458,0xbe1cf097f890c6f8,
0xc0862865d37ef0c8,0xbe1cf09502d5c3fc,
0xc0862867e809cf00,0xbe1ceeffb239dac7,
0xc0862869fc0a56f8,0xbe1cf1fbfff95c98,
0xc086286c0f80d090,0xbe1cefa57ad3eef7,
0xc086286e226d8348,0xbe1cf22c58b9183d,
0xc086287034d0b690,0xbe1ceff262d0a248,
0xc086287246aab180,0xbe1cefa7bc194186,
0xc086287457fbbb08,0xbe1cf06782d784d9,
0xc086287668c419e0,0xbe1cf1d44d0eaa07,
0xc086287879041490,0xbe1cf034803c8a48,
0xc086287a88bbf158,0xbe1cf08e84916b6f,
0xc086287c97ebf650,0xbe1cf0c4d3dc1bc7,
0xc086287ea6946958,0xbe1cefb1e4625943,
0xc0862880b4b59010,0xbe1cf143efdd1fd0,
0xc0862882c24faff8,0xbe1cee9896d016da,
0xc0862884cf630e38,0xbe1cf2186072f2cc,
0xc0862886dbefeff0,0xbe1cef9217633d34,
0xc0862888e7f699e0,0xbe1cf05603549486,
0xc086288af37750b0,0xbe1cef50fff513d3,
0xc086288cfe7258c0,0xbe1cf127713b32d0,
0xc086288f08e7f650,0xbe1cf05015520f3d,
0xc086289112d86d58,0xbe1cf12eb458b26f,
0xc08628931c4401a8,0xbe1cf22eae2887ed,
0xc0862895252af6e0,0xbe1cefdd6656dd2d,
0xc08628972d8d9058,0xbe1cf1048ea4e646,
0xc0862899356c1150,0xbe1ceec4501167e9,
0xc086289b3cc6bcb8,0xbe1cf0ad52becc3f,
0xc086289d439dd568,0xbe1cf0daa4e00e35,
0xc086289f49f19df8,0xbe1cf00b80de8d6a,
0xc08628a14fc258c8,0xbe1cf1bcf2ea8464,
0xc08628a355104818,0xbe1cf0435e2782b0,
0xc08628a559dbade0,0xbe1cf0e3e1a5f56c,
0xc08628a75e24cbf8,0xbe1cefed9d5a721d,
0xc08628a961ebe3f8,0xbe1cf0d2d74321e2,
0xc08628ab65313750,0xbe1cf24200eb55e9,
0xc08628ad67f50740,0xbe1cf23e9d7cf979,
0xc08628af6a3794d0,0xbe1cf23a088f421c,
0xc08628b16bf920e0,0xbe1cef2c1de1ab32,
0xc08628b36d39ec08,0xbe1cf1abc231f7b2,
0xc08628b56dfa36d0,0xbe1cf2074d5ba303,
0xc08628b76e3a4180,0xbe1cf05cd5eed880,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x8000000000000000,0xbf5ff802a9ab10e6,
0xbf6ff00aa2b10bc0,0xbf77ee11ebd82e94,
0xbf7fe02a6b106789,0xbf83e7295d25a7d9,
0xbf87dc475f810a77,0xbf8bcf712c74384c,
0xbf8fc0a8b0fc03e4,0xbf91d7f7eb9eebe7,
0xbf93cea44346a575,0xbf95c45a51b8d389,
0xbf97b91b07d5b11b,0xbf99ace7551cc514,
0xbf9b9fc027af9198,0xbf9d91a66c543cc4,
0xbf9f829b0e783300,0xbfa0b94f7c196176,
0xbfa1b0d98923d980,0xbfa2a7ec2214e873,
0xbfa39e87b9febd60,0xbfa494acc34d911c,
0xbfa58a5bafc8e4d5,0xbfa67f94f094bd98,
0xbfa77458f632dcfc,0xbfa868a83083f6cf,
0xbfa95c830ec8e3eb,0xbfaa4fe9ffa3d235,
0xbfab42dd711971bf,0xbfac355dd0921f2d,
0xbfad276b8adb0b52,0xbfae19070c276016,
0xbfaf0a30c01162a6,0xbfaffae9119b9303,
0xbfb075983598e471,0xbfb0ed839b5526fe,
0xbfb16536eea37ae1,0xbfb1dcb263db1944,
0xbfb253f62f0a1417,0xbfb2cb0283f5de1f,
0xbfb341d7961bd1d1,0xbfb3b87598b1b6ee,
0xbfb42edcbea646f0,0xbfb4a50d3aa1b040,
0xbfb51b073f06183f,0xbfb590cafdf01c28,
0xbfb60658a93750c4,0xbfb67bb0726ec0fc,
0xbfb6f0d28ae56b4c,0xbfb765bf23a6be13,
0xbfb7da766d7b12cd,0xbfb84ef898e8282a,
0xbfb8c345d6319b21,0xbfb9375e55595ede,
0xbfb9ab42462033ad,0xbfba1ef1d8061cd4,
0xbfba926d3a4ad563,0xbfbb05b49bee43fe,
0xbfbb78c82bb0eda1,0xbfbbeba818146765,
0xbfbc5e548f5bc743,0xbfbcd0cdbf8c13e1,
0xbfbd4313d66cb35d,0xbfbdb5270187d927,
0xbfbe27076e2af2e6,0xbfbe98b549671467,
0xbfbf0a30c01162a6,0xbfbf7b79fec37ddf,
0xbfbfec9131dbeabb,0xbfc02ebb42bf3d4b,
0xbfc0671512ca596e,0xbfc09f561ee719c3,
0xbfc0d77e7cd08e59,0xbfc10f8e422539b1,
0xbfc14785846742ac,0xbfc17f6458fca611,
0xbfc1b72ad52f67a0,0xbfc1eed90e2dc2c3,
0xbfc2266f190a5acb,0xbfc25ded0abc6ad2,
0xbfc29552f81ff523,0xbfc2cca0f5f5f251,
0xbfc303d718e47fd3,0xbfc33af575770e4f,
0xbfc371fc201e8f74,0xbfc3a8eb2d31a376,
0xbfc3dfc2b0ecc62a,0xbfc41682bf727bc0,
0xbfc44d2b6ccb7d1e,0xbfc483bccce6e3dd,
0xbfc4ba36f39a55e5,0xbfc4f099f4a230b2,
0xbfc526e5e3a1b438,0xbfc55d1ad4232d6f,
0xbfc59338d9982086,0xbfc5c940075972b9,
0xbfc5ff3070a793d4,0xbfc6350a28aaa758,
0xbfc66acd4272ad51,0xbfc6a079d0f7aad2,
0xbfc6d60fe719d21d,0xbfc70b8f97a1aa75,
0xbfc740f8f54037a5,0xbfc7764c128f2127,
0xbfc7ab890210d909,0xbfc7e0afd630c274,
0xbfc815c0a14357eb,0xbfc84abb75865139,
0xbfc87fa06520c911,0xbfc8b46f8223625b,
0xbfc8e928de886d41,0xbfc91dcc8c340bde,
0xbfc9525a9cf456b4,0xbfc986d3228180ca,
0xbfc9bb362e7dfb83,0xbfc9ef83d2769a34,
0xbfca23bc1fe2b563,0xbfca57df28244dcd,
0xbfca8becfc882f19,0xbfcabfe5ae46124c,
0xbfcaf3c94e80bff3,0xbfcb2797ee46320c,
0xbfcb5b519e8fb5a4,0xbfcb8ef670420c3b,
0xbfcbc286742d8cd6,0xbfcbf601bb0e44e2,
0xbfcc2968558c18c1,0xbfcc5cba543ae425,
0xbfcc8ff7c79a9a22,0xbfccc320c0176502,
0xbfccf6354e09c5dc,0xbfcd293581b6b3e7,
0xbfcd5c216b4fbb91,0xbfcd8ef91af31d5e,
0xbfcdc1bca0abec7d,0xbfcdf46c0c722d2f,
0xbfce27076e2af2e6,0xbfce598ed5a87e2f,
0xbfce8c0252aa5a60,0xbfcebe61f4dd7b0b,
0xbfcef0adcbdc5936,0xbfcf22e5e72f105d,
0xbfcf550a564b7b37,0xbfcf871b28955045,
0xbfcfb9186d5e3e2b,0xbfcfeb0233e607cc,
0xbfd00e6c45ad501d,0xbfd0274dc16c232f,
0xbfd0402594b4d041,0xbfd058f3c703ebc6,
0xbfd071b85fcd590d,0xbfd08a73667c57af,
0xbfd0a324e27390e3,0xbfd0bbccdb0d24bd,
0xbfd0d46b579ab74b,0xbfd0ed005f657da4,
0xbfd1058bf9ae4ad5,0xbfd11e0e2dad9cb7,
0xbfd136870293a8b0,0xbfd14ef67f88685a,
0xbfd1675cababa60e,0xbfd17fb98e15095d,
0xbfd1980d2dd4236f,0xbfd1b05791f07b49,
0xbfd1c898c16999fb,0xbfd1e0d0c33716be,
0xbfd1f8ff9e48a2f3,0xbfd211255986160c,
0xbfd22941fbcf7966,0xbfd241558bfd1404,
0xbfd2596010df763a,0xbfd27161913f853d,
0xbfd2895a13de86a3,0xbfd2a1499f762bc9,
0xbfd2b9303ab89d25,0xbfd2d10dec508583,
0xbfd2e8e2bae11d31,0xbfd300aead06350c,
0xbfd31871c9544185,0xbfd3302c16586588,
0xbfd347dd9a987d55,0xbfd35f865c93293e,
0xbfd3772662bfd85b,0xbfd38ebdb38ed321,
0xbfd3a64c556945ea,0xbfd3bdd24eb14b6a,
0xbfd3d54fa5c1f710,0xbfd3ecc460ef5f50,
0xbfd404308686a7e4,0xbfd41b941cce0bee,
0xbfd432ef2a04e814,0xbfd44a41b463c47c,
0xbfd4618bc21c5ec2,0xbfd478cd5959b3d9,
0xbfd49006804009d1,0xbfd4a7373cecf997,
0xbfd4be5f957778a1,0xbfd4d57f8fefe27f,
0xbfd4ec973260026a,0xbfd503a682cb1cb3,
0xbfd51aad872df82d,0xbfd531ac457ee77e,
0xbfd548a2c3add263,0xbfd55f9107a43ee2,
0xbfd5767717455a6c,0xbfd58d54f86e02f2,
0xbfd5a42ab0f4cfe2,0xbfd5baf846aa1b19,
0xbfd5d1bdbf5809ca,0xbfd5e87b20c2954a,
0xbfd5ff3070a793d4,0xbfd615ddb4bec13c,
0xbfd62c82f2b9c795,0x3fd61965cdb02c1f,
0x3fd602d08af091ec,0x3fd5ec433d5c35ae,
0x3fd5d5bddf595f30,0x3fd5bf406b543db2,
0x3fd5a8cadbbedfa1,0x3fd5925d2b112a59,
0x3fd57bf753c8d1fb,0x3fd565995069514c,
0x3fd54f431b7be1a9,0x3fd538f4af8f72fe,
0x3fd522ae0738a3d8,0x3fd50c6f1d11b97c,
0x3fd4f637ebba9810,0x3fd4e0086dd8baca,
0x3fd4c9e09e172c3c,0x3fd4b3c077267e9a,
0x3fd49da7f3bcc41f,0x3fd487970e958770,
0x3fd4718dc271c41b,0x3fd45b8c0a17df13,
0x3fd44591e0539f49,0x3fd42f9f3ff62642,
0x3fd419b423d5e8c7,0x3fd403d086cea79c,
0x3fd3edf463c1683e,0x3fd3d81fb5946dba,
0x3fd3c25277333184,0x3fd3ac8ca38e5c5f,
0x3fd396ce359bbf54,0x3fd3811728564cb2,
0x3fd36b6776be1117,0x3fd355bf1bd82c8b,
0x3fd3401e12aecba1,0x3fd32a84565120a8,
0x3fd314f1e1d35ce4,0x3fd2ff66b04ea9d4,
0x3fd2e9e2bce12286,0x3fd2d46602adccee,
0x3fd2bef07cdc9354,0x3fd2a982269a3dbf,
0x3fd2941afb186b7c,0x3fd27ebaf58d8c9d,
0x3fd269621134db92,0x3fd25410494e56c7,
0x3fd23ec5991eba49,0x3fd22981fbef797b,
0x3fd214456d0eb8d4,0x3fd1ff0fe7cf47a7,
0x3fd1e9e1678899f4,0x3fd1d4b9e796c245,
0x3fd1bf99635a6b95,0x3fd1aa7fd638d33f,
0x3fd1956d3b9bc2fa,0x3fd180618ef18adf,
0x3fd16b5ccbacfb73,0x3fd1565eed455fc3,
0x3fd14167ef367783,0x3fd12c77cd00713b,
0x3fd1178e8227e47c,0x3fd102ac0a35cc1c,
0x3fd0edd060b78081,0x3fd0d8fb813eb1ef,
0x3fd0c42d676162e3,0x3fd0af660eb9e279,
0x3fd09aa572e6c6d4,0x3fd085eb8f8ae797,
0x3fd07138604d5862,0x3fd05c8be0d9635a,
0x3fd047e60cde83b8,0x3fd03346e0106062,
0x3fd01eae5626c691,0x3fd00a1c6adda473,
0x3fcfeb2233ea07cd,0x3fcfc218be620a5e,
0x3fcf991c6cb3b379,0x3fcf702d36777df0,
0x3fcf474b134df229,0x3fcf1e75fadf9bde,
0x3fcef5ade4dcffe6,0x3fceccf2c8fe920a,
0x3fcea4449f04aaf5,0x3fce7ba35eb77e2a,
0x3fce530effe71012,0x3fce2a877a6b2c12,
0x3fce020cc6235ab5,0x3fcdd99edaf6d7e9,
0x3fcdb13db0d48940,0x3fcd88e93fb2f450,
0x3fcd60a17f903515,0x3fcd38666871f465,
0x3fcd1037f2655e7b,0x3fcce816157f1988,
0x3fccc000c9db3c52,0x3fcc97f8079d44ec,
0x3fcc6ffbc6f00f71,0x3fcc480c0005ccd1,
0x3fcc2028ab17f9b4,0x3fcbf851c067555f,
0x3fcbd087383bd8ad,0x3fcba8c90ae4ad19,
0x3fcb811730b823d2,0x3fcb5971a213acdb,
0x3fcb31d8575bce3d,0x3fcb0a4b48fc1b46,
0x3fcae2ca6f672bd4,0x3fcabb55c31693ad,
0x3fca93ed3c8ad9e3,0x3fca6c90d44b704e,
0x3fca454082e6ab05,0x3fca1dfc40f1b7f1,
0x3fc9f6c407089664,0x3fc9cf97cdce0ec3,
0x3fc9a8778debaa38,0x3fc981634011aa75,
0x3fc95a5adcf7017f,0x3fc9335e5d594989,
0x3fc90c6db9fcbcd9,0x3fc8e588ebac2dbf,
0x3fc8beafeb38fe8c,0x3fc897e2b17b19a5,
0x3fc871213750e994,0x3fc84a6b759f512f,
0x3fc823c16551a3c2,0x3fc7fd22ff599d4f,
0x3fc7d6903caf5ad0,0x3fc7b0091651528c,
0x3fc7898d85444c73,0x3fc7631d82935a86,
0x3fc73cb9074fd14d,0x3fc716600c914054,
0x3fc6f0128b756abc,0x3fc6c9d07d203fc7,
0x3fc6a399dabbd383,0x3fc67d6e9d785771,
0x3fc6574ebe8c133a,0x3fc6313a37335d76,
0x3fc60b3100b09476,0x3fc5e533144c1719,
0x3fc5bf406b543db2,0x3fc59958ff1d52f1,
0x3fc5737cc9018cdd,0x3fc54dabc26105d2,
0x3fc527e5e4a1b58d,0x3fc5022b292f6a45,
0x3fc4dc7b897bc1c8,0x3fc4b6d6fefe22a4,
0x3fc4913d8333b561,0x3fc46baf0f9f5db7,
0x3fc4462b9dc9b3dc,0x3fc420b32740fdd4,
0x3fc3fb45a59928cc,0x3fc3d5e3126bc27f,
0x3fc3b08b6757f2a9,0x3fc38b3e9e027479,
0x3fc365fcb0159016,0x3fc340c59741142e,
0x3fc31b994d3a4f85,0x3fc2f677cbbc0a96,
0x3fc2d1610c86813a,0x3fc2ac55095f5c59,
0x3fc28753bc11aba5,0x3fc2625d1e6ddf57,
0x3fc23d712a49c202,0x3fc2188fd9807263,
0x3fc1f3b925f25d41,0x3fc1ceed09853752,
0x3fc1aa2b7e23f72a,0x3fc185747dbecf34,
0x3fc160c8024b27b1,0x3fc13c2605c398c3,
0x3fc1178e8227e47c,0x3fc0f301717cf0fb,
0x3fc0ce7ecdccc28d,0x3fc0aa06912675d5,
0x3fc08598b59e3a07,0x3fc06135354d4b18,
0x3fc03cdc0a51ec0d,0x3fc0188d2ecf6140,
0x3fbfe89139dbd566,0x3fbfa01c9db57ce2,
0x3fbf57bc7d9005db,0x3fbf0f70cdd992e3,
0x3fbec739830a1120,0x3fbe7f1691a32d3e,
0x3fbe3707ee30487b,0x3fbdef0d8d466db9,
0x3fbda727638446a2,0x3fbd5f55659210e2,
0x3fbd179788219364,0x3fbccfedbfee13a8,
0x3fbc885801bc4b23,0x3fbc40d6425a5cb1,
0x3fbbf968769fca11,0x3fbbb20e936d6974,
0x3fbb6ac88dad5b1c,0x3fbb23965a52ff00,
0x3fbadc77ee5aea8c,0x3fba956d3ecade63,
0x3fba4e7640b1bc38,0x3fba0792e9277cac,
0x3fb9c0c32d4d2548,0x3fb97a07024cbe74,
0x3fb9335e5d594989,0x3fb8ecc933aeb6e8,
0x3fb8a6477a91dc29,0x3fb85fd927506a48,
0x3fb8197e2f40e3f0,0x3fb7d33687c293c9,
0x3fb78d02263d82d3,0x3fb746e100226ed9,
0x3fb700d30aeac0e1,0x3fb6bad83c1883b6,
0x3fb674f089365a7a,0x3fb62f1be7d77743,
0x3fb5e95a4d9791cb,0x3fb5a3abb01ade25,
0x3fb55e10050e0384,0x3fb518874226130a,
0x3fb4d3115d207eac,0x3fb48dae4bc31018,
0x3fb4485e03dbdfad,0x3fb403207b414b7f,
0x3fb3bdf5a7d1ee64,0x3fb378dd7f749714,
0x3fb333d7f8183f4b,0x3fb2eee507b40301,
0x3fb2aa04a44717a5,0x3fb26536c3d8c369,
0x3fb2207b5c78549e,0x3fb1dbd2643d190b,
0x3fb1973bd1465567,0x3fb152b799bb3cc9,
0x3fb10e45b3cae831,0x3fb0c9e615ac4e17,
0x3fb08598b59e3a07,0x3fb0415d89e74444,
0x3faffa6911ab9301,0x3faf723b517fc523,
0x3faeea31c006b87c,0x3fae624c4a0b5e1b,
0x3fadda8adc67ee4e,0x3fad52ed6405d86f,
0x3faccb73cdddb2cc,0x3fac441e06f72a9e,
0x3fabbcebfc68f420,0x3fab35dd9b58baad,
0x3faaaef2d0fb10fc,0x3faa282b8a936171,
0x3fa9a187b573de7c,0x3fa91b073efd7314,
0x3fa894aa149fb343,0x3fa80e7023d8ccc4,
0x3fa788595a3577ba,0x3fa70265a550e777,
0x3fa67c94f2d4bb58,0x3fa5f6e73078efb8,
0x3fa5715c4c03ceef,0x3fa4ebf43349e26f,
0x3fa466aed42de3ea,0x3fa3e18c1ca0ae92,
0x3fa35c8bfaa1306b,0x3fa2d7ae5c3c5bae,
0x3fa252f32f8d183f,0x3fa1ce5a62bc353a,
0x3fa149e3e4005a8d,0x3fa0c58fa19dfaaa,
0x3fa0415d89e74444,0x3f9f7a9b16782856,
0x3f9e72bf2813ce51,0x3f9d6b2725979802,
0x3f9c63d2ec14aaf2,0x3f9b5cc258b718e6,
0x3f9a55f548c5c43f,0x3f994f6b99a24475,
0x3f98492528c8cabf,0x3f974321d3d006d3,
0x3f963d6178690bd6,0x3f9537e3f45f3565,
0x3f9432a925980cc1,0x3f932db0ea132e22,
0x3f9228fb1fea2e28,0x3f912487a5507f70,
0x3f90205658935847,0x3f8e38ce3033310c,
0x3f8c317384c75f06,0x3f8a2a9c6c170462,
0x3f882448a388a2aa,0x3f861e77e8b53fc6,
0x3f841929f96832f0,0x3f82145e939ef1e9,
0x3f8010157588de71,0x3f7c189cbb0e27fb,
0x3f78121214586b54,0x3f740c8a747878e2,
0x3f70080559588b35,0x3f680904828985c0,
0x3f60040155d5889e,0x3f50020055655889,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000};


static const unsigned long __tanh_table_f32[536]=
{0x0000000000000000,0x3ff00000022c70eb,
0xbed00e878cffa194,0xbfd551766d0607a9,
0xbe53d60ce3e4c297,0x3ff000024177cf5c,
0xbf1758bc94a51a25,0xbfd53eae67e0d4f0,
0xbe5a9e47ef32d6fe,0x3ff00002da983057,
0xbf1bd953509e94aa,0xbfd53bdb562eedd5,
0xbe6191bbe496d294,0x3ff0000390492017,
0xbf20727e814a57ce,0xbfd538de060a6f22,
0xbe66dafa2a893a25,0x3ff0000465e08cd1,
0xbf2341c765ef91b6,0xbfd535b6841faf9e,
0xbe6d5794e361e964,0x3ff000055ee2a0cb,
0xbf265e6c77e66c8b,0xbfd53264ddcceda6,
0xbe729c844d374a6e,0x3ff000067f019093,
0xbf29cc5348d6dce5,0xbfd52ee92121ed35,
0xbe775aea17eaa872,0x3ff00007ca1d66b8,
0xbf2d8f5eb98a2637,0xbfd52b435cdf9128,
0xbe7d04da28c343f0,0x3ff000094443ccf5,
0xbf30d5b76c947ae5,0xbfd52773a0776fad,
0xbe81dd77a12c51c7,0x3ff0000af1afd2da,
0xbf331230624c1680,0xbfd52379fc0b61df,
0xbe85d04eeeb3c435,0x3ff0000cd6c9b1f2,
0xbf357f0742faddd4,0xbfd51f56806d0e81,
0xbe8a6e289b59681b,0x3ff0000ef8268f72,
0xbf381e277a1b747a,0xbfd51b093f1d6fd4,
0xbe8fcbc40ee9abd5,0x3ff000115a883b6c,
0xbf3af17ac974b3d9,0xbfd516924a4c549c,
0xbe92ffbc60a3f956,0x3ff0001402dced8a,
0xbf3dfae9390c4801,0xbfd511f1b4d7dc3a,
0xbe9690a22f96d5ad,0x3ff00016f63eff5d,
0xbf409e2c839605bb,0xbfd50d27924bee00,
0xbe9aa56c65e72a73,0x3ff0001a39f4a43e,
0xbf425bd74c3d6667,0xbfd50833f6e1aba2,
0xbe9f4bd4ff1a83b0,0x3ff0001dd36f9ec2,
0xbf44376634149405,0xbfd50316f77edee5,
0xbea3b625387bb079,0x3ff00023e14cfba9,
0xbf47392f923218d2,0xbfd4fb1facdeb938,
0xbeaa6e24f543500a,0x3ff0002d5c6e8412,
0xbf4baf02bd7fdd70,0xbfd4efee6527a7de,
0xbeb16e3ebe2157d0,0x3ff00038990fee2f,
0xbf50569481c574cb,0xbfd4e419278da2b4,
0xbeb6a7b6723165d4,0x3ff00045cab4158e,
0xbf531d7c9c849108,0xbfd4d7a0bb33b152,
0xbebd0ee2a8654afd,0x3ff00055276f18d6,
0xbf562fdba3fb6c6c,0xbfd4ca85f1b93db2,
0xbec269d4036a207e,0x3ff00066e7da6e4e,
0xbf5991499fc36b3a,0xbfd4bcc9a72283d6,
0xbec7154b6c09cfe1,0x3ff0007b47086b80,
0xbf5d455433b4f8f4,0xbfd4ae6cc1bfe145,
0xbecca68cc64a0f8a,0x3ff00092827742f7,
0xbf60a7bf15a527af,0xbfd49f703214084c,
0xbed19e68676b241b,0x3ff000acda037b26,
0xbf62d99f836a02f8,0xbfd48fd4f2b91b28,
0xbed57cf4b0c7aa54,0x3ff000ca8fd9e1a1,
0xbf653a014548e686,0xbfd47f9c0844b38f,
0xbeda012b1b1a41e2,0x3ff000ebe868fdf4,
0xbf67ca9427e0a544,0xbfd46ec6812adb37,
0xbedf3eac5bf12194,0x3ff001112a520784,
0xbf6a8d01abda4dc4,0xbfd45d55759ffa4a,
0xbee2a541bc274267,0x3ff0013a9e5961f2,
0xbf6d82ecd080c540,0xbfd44b4a0779c0ad,
0xbee61d97609a27f4,0x3ff001688f56a3af,
0xbf7056f8efb683ec,0xbfd438a5620f0f74,
0xbeea145429edd370,0x3ff0019b4a242a67,
0xbf7207d31ca78d9b,0xbfd42568ba16e7cd,
0xbeee96370d52680f,0x3ff001d31d8e4115,
0xbf73d4cc11edc094,0xbfd411954d8664e7,
0xbef338c046215ef8,0x3ff00230c32c2ec1,
0xbf76bd019bcc5daf,0xbfd3f2c7156dc21e,
0xbef9b15eae411eae,0x3ff002c2df057a4d,
0xbf7b08ccd9ac1e30,0xbfd3c7a7a114fed8,
0xbf00e36483c373b3,0x3ff0036f419480d7,
0xbf7fd255d1777007,0xbfd39a453911d6ce,
0xbf05dfa04dd12059,0x3ff00438b2a03d8d,
0xbf828f8dbb4a9d10,0xbfd36aab704697d9,
0xbf0bf3e0c647defb,0x3ff005221063d36d,
0xbf857a2cb3c96102,0xbfd338e65bbb4fec,
0xbf11a506ed7c9d31,0x3ff0062e4d0ea92a,
0xbf88ab82c2761af3,0xbfd305028d6bd206,
0xbf1607c0922d9bf1,0x3ff007606c341961,
0xbf8c25e6da487bcf,0xbfd2cf0d0ee8f7b5,
0xbf1b3a8480a0a16d,0x3ff008bb802d02d6,
0xbf8feb8ae99fd100,0xbfd297135bd0911b,
0xbf20abb9bdb75c65,0x3ff00a42a76d8cd1,
0xbf91ff3d752bb9e6,0xbfd25d235c1f88b4,
0xbf243d3254425461,0x3ff00bf909d1795e,
0xbf94304e04d44942,0xbfd2214b5e61cfa6,
0xbf286070011b61ce,0x3ff00de1d5e1627e,
0xbf9689d5f4163f59,0xbfd1e39a11c3b42c,
0xbf2d250b366a79e8,0x3ff010003e134001,
0xbf990c9ff91f6f81,0xbfd1a41e80084cdc,
0xbf314db5ddc2a30e,0x3ff012577608921b,
0xbf9bb9626875b0c9,0xbfd162e80768a9d0,
0xbf346a6133808864,0x3ff014eaafcc88a3,
0xbf9e90bef9bf7419,0xbfd12006545f7fad,
0xbf37f180dc3848ea,0x3ff017bd19147861,
0xbfa0c9a14c702e07,0xbfd0db895b650092,
0xbf3bec6aac6d7635,0x3ff01ad1d884e719,
0xbfa260b2a1b1434a,0xbfd09581529e93d6,
0xbf4164e26167882b,0x3ff01fef14b62b81,
0xbfa4eb014538aa42,0xbfd029d36feaf41f,
0xbf46f6fff4e53dc8,0x3ff027cbb51cbba0,
0xbfa89dec9fec112e,0xbfcf2a99464d0db4,
0xbf4dcc9c4f66a4d9,0x3ff030e7cfccd583,
0xbfacaa3b95814081,0xbfcdf78f156be7cf,
0xbf5308ed74e5c7a6,0x3ff03b5986412ecb,
0xbfb087eba88dcc3f,0xbfccbb9bd134862f,
0xbf57fa23c00df4b5,0x3ff0473558a1bcc0,
0xbfb2e702bc6360ef,0xbfcb77d546379288,
0xbf5dd12971557f71,0x3ff0548ddf5000a8,
0xbfb571b63da186e1,0xbfca2d5202605148,
0xbf6252b1ad5d4f17,0x3ff063738a910bf7,
0xbfb8270c8e6b601b,0xbfc8dd27d950a07e,
0xbf66470c91730cfc,0x3ff073f468fcf331,
0xbfbb05c2952191e4,0xbfc7886a770de2bd,
0xbf6ad114ac8e98ec,0x3ff0861bf53e5226,
0xbfbe0c4f9b461507,0xbfc6302a037cde3a,
0xbf6ffbde2a6c2af8,0x3ff099f2eb8e7da3,
0xbfc09c74d192ddf0,0xbfc4d571d8e3079f,
0xbf72e8fdc0b952aa,0x3ff0af7f273c9533,
0xbfc244c512736f10,0xbfc379474f58b902,
0xbf762eabaf17395b,0x3ff0c6c3886f63fb,
0xbfc3fdf9918ea12a,0xbfc21ca89ecab895,
0xbf79d387ce5b2bae,0x3ff0dfbfe2346376,
0xbfc5c6da43602620,0xbfc0c08bd8db6631,
0xbf7ddba8e8da9060,0x3ff0fa70f0d1b464,
0xbfc79e18d92baa7c,0xbfbecbbbf74c2669,
0xbf81254e76ea25da,0x3ff116d05835ebd0,
0xbfc982539e2ed224,0xbfbc1b043c350159,
0xbf8391acba863403,0x3ff134d4aa477fe2,
0xbfcb7218609feafb,0xbfb970a16cb88329,
0xbf87935088e48e8b,0x3ff1649892ad7dd3,
0xbfce6971dde75409,0xbfb58291e88cb251,
0xbf8db3a62c325325,0x3ff1a9c900c6deea,
0xbfd13dbc65b0e08e,0xbfb06696f62696d1,
0xbf92583699f2e27a,0x3ff1f451b85aa9f0,
0xbfd34fd5f8288180,0xbfa6fb692825b683,
0xbf9641c26e673d6f,0x3ff24364da5e2b07,
0xbfd564a5a5ef5890,0xbf9b43712011a982,
0xbf9a901038ec2f39,0x3ff2961356dffeba,
0xbfd775ebb17198c7,0xbf833b1a926cd462,
0xbf9f396a6a461b91,0x3ff2eb53baef534b,
0xbfd97dabf8ad8bbd,0x3f7b8f6a3e0f8837,
0xbfa21878590f8baa,0x3ff34209790236e1,
0xbfdb764c0e71becb,0x3f962fe0c03f84c0,
0xbfa4b36b9ad27ecc,0x3ff3990c5b12fc16,
0xbfdd5aabb0d01390,0x3fa21daf5ca162db,
0xbfa7645e4d7bf28b,0x3ff3ef2fd51c0d9f,
0xbfdf26377e1b686e,0x3fa8803e756ee812,
0xbfaa210925c64413,0x3ff44349f897d8e7,
0xbfe06a7b02c6d8e2,0x3fae3f194734f5d0,
0xbfacde48f8a19bbb,0x3ff49439d5466582,
0xbfe131c7c1063ddc,0x3fb1adeec36ad805,
0xbfaf905d8f585680,0x3ff4e0ed1fd27f99,
0xbfe1e7a859dc1d3d,0x3fb3ed018e4642a1,
0xbfb11595104160ba,0x3ff528650340490b,
0xbfe28b14b40bc974,0x3fb5df49f5baf6d7,
0xbfb2513a97344ba4,0x3ff569ba0db5ee14,
0xbfe31b53a8b67b20,0x3fb787f297bb0544,
0xbfb37512e848fafa,0x3ff5a41f33b403c8,
0xbfe397f6ea9a58a5,0x3fb8eaa9ff25ca06,
0xbfb47b3e603afc5d,0x3ff5d6e3ede40487,
0xbfe400d5bca6d631,0x3fba0b830ed567fe,
0xbfb5bbfe8ac90496,0x3ff612ba70107e95,
0xbfe477eaf1fa7693,0x3fbb4784b7c08a95,
0xbfb6d5d940743939,0x3ff644a8748f70ce,
0xbfe4d646ab07ea37,0x3fbc354f4e1d5292,
0xbfb7223d19e4f3d1,0x3ff6518feb42b7fa,
0xbfe4ed86cb87498c,0x3fbc6d29f28cca9b,
0xbfb6878652ff6312,0x3ff63948c302d040,
0xbfe4c4e2e7904e17,0x3fbc127356ca1abe,
0xbfb4f5d18b0c91d6,0x3ff5fd27eb7dd0b8,
0xbfe464e01a2b2fc6,0x3fbb460547674a30,
0xbfb26642fa16a685,0x3ff59f9bede1c95a,
0xbfe3d67920c8fbea,0x3fba24f6a8d3cbc1,
0xbfadb5294794f097,0x3ff523ea7b9cf453,
0xbfe322a8b55e35db,0x3fb8c8673b1b3e37,
0xbfa4b7d661965c6a,0x3ff48de3e2ce3122,
0xbfe251fed1a7f445,0x3fb745699fcabdb9,
0xbf93e60456e4ee1d,0x3ff3e1a14e628a59,
0xbfe16c5ab660e876,0x3fb5ad33aa8c188f,
0x3f738c17c47c7961,0x3ff3234dde3bd146,
0xbfe078c0d77a9d3b,0x3fb40d74b3e276b8,
0x3fa0474becc689c7,0x3ff256fb4fa7d18a,
0xbfdefa8e3fb285e2,0x3fb270c007493d59,
0x3faf5bd51e479bdc,0x3ff18081d0b53bc5,
0xbfdcfe2439bd0c03,0x3fb0defe5a45afdd,
0x3fb7bd5d2806ea26,0x3ff0a369e35b4440,
0xbfdb04bc5c9951e7,0x3faebbbaa9d6deef,
0x3fc01be411098dbc,0x3fef85bdabc031c1,
0xbfd91521375097c2,0x3fabe26f0086d982,
0x3fc481d7ff5776b9,0x3fedc3506c1e7218,
0xbfd7349a88da7d4f,0x3fa936e2dff8e2ae,
0x3fc90471f96fa27a,0x3fec0451601987a2,
0xbfd5671cd4b898dc,0x3fa6bb9594603b67,
0x3fcfd8adb9ed944c,0x3fe978c073f6809a,
0xbfd2df7e00bcd5a9,0x3fa3614033d490b2,
0x3fd4846a12afe5a0,0x3fe63a1147d40472,
0xbfcfa2268ad34450,0x3f9f150201d9ffe0,
0x3fd9018641f82beb,0x3fe33b7c220ffbdc,
0xbfca4e4187e29c86,0x3f98c30ced19f8f4,
0x3fdd4b8255beb078,0x3fe0858b19d3a49b,
0xbfc5bc929eace564,0x3f93a083ce57de2b,
0x3fe0a8e5e039295c,0x3fdc35e1234583fe,
0xbfc1de034e31aeb9,0x3f8efdebb3471bdc,
0x3fe2851b603cb2a5,0x3fd7f4a44abbb286,
0xbfbd3eeb67087de7,0x3f8864f38329e8bd,
0x3fe437dbe3c34ac1,0x3fd43f6f789441b5,
0xbfb7d92e7901b9a4,0x3f8327ed342308e1,
0x3fe5c0977766d55c,0x3fd10b42a764d8f9,
0xbfb3633351d3d70f,0x3f7e079e30ff899c,
0x3fe7202ce08a88c4,0x3fcc973eb5662b01,
0xbfaf70a455f9920b,0x3f77812411ce99b6,
0x3fe85879424095b1,0x3fc7e73bd1674d84,
0xbfa96f84e4bf333b,0x3f72606ddca6e117,
0x3fe96bfe4957f4dd,0x3fc3ed4780d25478,
0xbfa489c5f9a56b58,0x3f6cb5dc17e9ad2a,
0x3fea5d9cb2f41234,0x3fc091a758374dcf,
0xbfa08e436d4b5ce0,0x3f666997ad53e6b7,
0x3feb3060342cb850,0x3fbb7d30bbc7dc1b,
0xbf9aa6ba3443d9e3,0x3f617ca764b7850b,
0x3febe759a6a0c7b8,0x3fb6c10de6a703ff,
0xbf956c566d8be1f6,0x3f5b46d1a4a59cf8,
0x3fec858494887a04,0x3fb2cc31f543394d,
0xbf9133477ff69137,0x3f5544482fbb4da5,
0x3fed0db59d0e32e9,0x3faf006baffc6ef4,
0xbf8b97146fa2b97a,0x3f5093b01f4cdc69,
0x3fedb487c3ec457c,0x3fa7390c09d0bd1d,
0xbf83d9f7c3181106,0x3f46e34a0a3c0e64,
0x3fee5ffcb4e6eb00,0x3f9f4913ed00aadf,
0xbf79670bd0e59b5c,0x3f3bc998ebcaf96d,
0x3feedba41e9542fe,0x3f94f5dd18d9c24d,
0xbf7034896aa122b9,0x3f30dccb47810b39,
0x3fef33f2882520ed,0x3f8bf37f2cf553ff,
0xbf649f6f05a69619,0x3f247623c950aac9,
0x3fef727757751741,0x3f828e67912c4400,
0xbf5a2f51a806cc2c,0x3f18d35d7687e613,
0x3fef9e6325c5942a,0x3f788ab117618f76,
0xbf5096eab0b1ea89,0x3f0e1e50ec4435ab,
0x3fefbd0784049369,0x3f702bbd8294035f,
0xbf44fb55e0f00593,0x3f0244dcd723230a,
0x3fefd245e2366a43,0x3f653d82ec088433,
0xbf3a7df75e013cb8,0x3ef6298e69f991cd,
0x3fefe0eaa508bc69,0x3f5bd0771af3fdda,
0xbf30b2e1254de571,0x3eeae28b70ec0256,
0x3fefeaf5303d7f96,0x3f5229111365657e,
0xbf250572d04dfe66,0x3ee04e89bb57c981,
0x3feff1cf52f1cf44,0x3f47a71316147ceb,
0xbf1a6d7604055719,0x3ed3c8047586a85c,
0x3feff6770369ef69,0x3f3ebb261180fbf0,
0xbf1097754fe19d7f,0x3ec7feff83bca0a7,
0x3feff99d42371ac4,0x3f33eb2aec271f59,
0xbf04cf18e0fc0d79,0x3ebd1bdbd6019be9,
0x3feffbbca32b0d91,0x3f29c41e1615110a,
0xbefa11f93d9dcb5a,0x3eb1a7ca4546f7a7,
0x3feffd298b8e8de2,0x3f20a1c42d523c5b,
0xbef0507a364afae4,0x3ea56aca17e7cdf4,
0x3feffe1dc82ba5a3,0x3f156e73b90f1769,
0xbee4663579d0a09f,0x3e99faf6fec5d4c1,
0x3feffef8d0bb5e81,0x3f06686da18d39c3,
0xbed46bc298073e90,0x3e88e42286b9d0fd,
0x3fefff8dbc68ddc7,0x3ef26b2953a80af0,
0xbebfc4472d580f83,0x3e72505b4553d19f,
0x3fefffced1276609,0x3ede1a94c7cc58f5,
0xbea8a2c988744e57,0x3e5af30036bbbaf4,
0x3fefffeafe70fcfc,0x3ec879175e3549f5,
0xbe930e36677d1813,0x3e43d4005b42d48f,
0x3ff0000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000};


static const unsigned long tanh_table_f64[960]={
0x0000000000000000,0x0000000000000000,
0x3ff0000000000000,0xbd197dead79668d3,
0xbfd555555553af3c,0xbe052f7cca134846,
0x3fc11111563849d6,0xbeb038623673ffb2,
0xbfab9f685e64022e,0xbf2a54e2b28f2207,
0x3f97cfb9328a230e,0xbf75ca6d61723e02,
0x0000000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c3708a564fad29a,0x3fc0e6973998da48,
0x3fef712eb25c0888,0xbfc09b296f7c1ea9,
0xbfd3dd77541edda7,0x3fb58ffcf4309615,
0x3fbd3abe845dcf49,0xbfa791df538c37fa,
0xbfa4f872f69cd6e8,0x3f9772e49ef6412b,
0x3f8cbc0807393909,0xbf85f06a30f93319,
0xbfc1000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6004ee5739deac,0x3fc2dc968e6e0d62,
0x3fef4e1e606d96df,0xbfc273bd70994ab9,
0xbfd382b548270d2c,0x3fb7cd2d582a6b29,
0x3fbc1278cccbf0db,0xbfa9c7f5115b86a1,
0xbfa371c21baf618e,0x3f9958943f68417e,
0x3f8930d5cffd4152,0xbf875cf7add31b76,
0xbfc3000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7eabe24e052a1f,0x3fc4d04783618c71,
0x3fef2765af97a4b3,0xbfc443654205fea5,
0xbfd31f2e208a5b97,0x3fb9f235bd339878,
0x3fbad0b0dfcca141,0xbfabd1b9600e608e,
0xbfa1cebeaf07db58,0x3f9afc9fb1d8efd2,
0x3f8573444f1ab502,0xbf8874fbc8f24406,
0xbfc5000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7fb199d361a790,0x3fc6c170259e21f7,
0x3feefd17479f7c65,0xbfc609530fe4df8d,
0xbfd2b3465d71b4de,0x3fbbfd2d34ac509b,
0x3fb9778c3c16a0fe,0xbfadac4d9e63c665,
0xbfa0139ccad02d60,0x3f9c5bf43ba6f19d,
0x3f8190b703350341,0xbf8936606782858a,
0xbfc7000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6a917ca3624d50,0x3fc8afd7b974fabb,
0x3feecf47624a5d03,0xbfc7c4c2cb4fde4d,
0xbfd23f69cb2c1f9d,0x3fbdec5703a03814,
0x3fb8095003d0cf15,0xbfaf554b47b10cbb,
0xbf9c89743fe7bc1b,0x3f9d74725b746e7c,
0x3f7b2d8afb70b88c,0xbf89a0a2883ef6cb,
0xbfc9000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7608279e8609cb,0x3fca9b46d2ddc5e3,
0x3fee9e0bb72a01a1,0xbfc974fad10c5330,
0xbfd1c40accba4044,0x3fbfbe24e2987853,
0x3fb6885b4345e47f,0xbfb06563d5670584,
0xbf98cd1d620df6e2,0x3f9e44ef3e844d21,
0x3f7325fa0148caae,0xbf89b4c8556c2d92,
0xbfcb000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6f19daa20f51d5,0x3fcc83876ca98e15,
0x3fee697b662d07cd,0xbfcb194c7ed76acf,
0xbfd141a19e419762,0x3fc0b89c64bc7b98,
0x3fb4f721150bbfc5,0xbfb105aafab87898,
0xbf94fb3b31248c01,0x3f9ecd31e588709c,
0x3f664a91a335c105,0xbf89754e32e1e26e,
0xbfcd000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6ac6c889d8111d,0x3fce6864fe55a3d0,
0x3fee31aee116b82b,0xbfccb114b69e808b,
0xbfd0b8ab913ba99d,0x3fc1823322bed48a,
0x3fb35822b7929893,0xbfb18b03cc78d2da,
0xbf911ccc3c8d5e5d,0x3f9f0dec2d99b12f,
0x3f4a28398b4ebd98,0xbf88e60cb2fab9a4,
0xbfcf000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c89d2b6774fb61d,0x3fd09c744f539be4,
0x3fedd823b0400d42,0xbfcefbf7ff305fcc,
0xbfcfc01dc4f24a41,0x3fc291a2c26d5548,
0x3fb0d562e672d188,0xbfb2201ecc119e06,
0xbf8695d50f778d31,0x3f9eec8cfbc031a0,
0xbf6030f0a4d3660a,0xbf87845288a4aef5,
0xbfd1000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8b6aab614d1c8d,0x3fd275f7e1cf7f63,
0x3fed56658f74c9cc,0xbfd0ecc045ebd596,
0xbfcd5a4bde179180,0x3fc3c00047d34767,
0x3faac7ce84fd609f,0xbfb288948d2e8b43,
0xbf6d6605aad5a1c0,0x3f9ddb0790848e97,
0xbf75fde291bad5b4,0xbf84cea5c52e0a78,
0xbfd3000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7139a81c8a6ecf,0x3fd4470650036407,
0x3fecc9a69dfddd48,0xbfd23ded3a37a09f,
0xbfcad302395d51c1,0x3fc4a8fe3f309c22,
0x3fa3d161188aa436,0xbfb288cfe5494e98,
0x3f6c7903eed8d334,0x3f9be023cdfb02f6,
0xbf80f8296f2c3a95,0xbf8152df4790049b,
0xbfd5000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7751fe0fee8335,0x3fd60ef7120502a9,
0x3fec32d951e56e6f,0xbfd370255fc004f8,
0xbfc832f0ebc6bb41,0x3fc54c99a0ff432f,
0x3f99dac0cc283c18,0xbfb227b3896a026d,
0x3f84663364e1fb19,0x3f9922d70de07c57,
0xbf85c4a4eb6f86bc,0xbf7aab61214ffe17,
0xbfd7000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3bfe67f266843b2c,0x3fd7cd3115fc0f16,
0x3feb92f96ccc2c5b,0xbfd4827320135092,
0xbfc582b15550168a,0x3fc5ac3b9a2e4c31,
0x3f88fa599fcadafb,0xbfb16ec8f5ca169e,
0x3f90140efc748bbe,0x3f95cfc49c1a28dc,
0xbf8946ed8b1bf454,0xbf7239e55c1dd50f,
0xbfd9000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6412330191189c,0x3fd9812b3b03f0a5,
0x3feaeb08c3c0e84d,0xbfd57446b1bc46cf,
0xbfc2ca9abc0444ad,0x3fc5ca95f9460d18,
0xbf2c2daa35dd05c3,0xbfb069a516eeb75d,
0x3f9512716416fdc7,0x3f921630cb1319a3,
0xbf8b76da2ec99526,0xbf63a97474a161e4,
0xbfdb000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c89b79f5783381c,0x3fdb2a6c993b829d,
0x3fea3c0c1fba328c,0xbfd6457212f78de0,
0xbfc0129bda380a66,0x3fc5ab77f388fbde,
0xbf8822f3a6cadb7c,0xbfae4a876370a4bd,
0x3f991a89bc3b7710,0x3f8c4a4328204d4b,
0xbf8c5f921d01ec0b,0xbf3ee844c5b79fb8,
0xbfdd000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c73fa437ad7ad87,0x3fdcc88c9902cf45,
0x3fe9870845162d1d,0xbfd6f62358f73da8,
0xbfbac4345d675fe1,0x3fc5539da8287019,
0xbf96e3e0dc04a09f,0xbfab5ec7147c207d,
0x3f9c24166ffa7a58,0x3f8451b907819844,
0xbf8c1c6d19191fcb,0x3f547372df72e35a,
0xbfdf000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c848fe06ee49950,0x3fdf20211a36475d,
0x3fe86e67e6b80ac2,0xbfd7c37c55474d9b,
0xbfb2ebf15f3cb036,0x3fc4718c8ef6e3aa,
0xbfa277f8394e9b07,0xbfa680312ab207e3,
0x3f9edc9a8b57e286,0x3f71b8c5e648eaf6,
0xbf89db218356730c,0x3f6b05728e6ebc8e,
0xbfe1000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8429831edd94de,0x3fe10af47e0bf610,
0x3fe6ec5879f87eee,0xbfd86ad001bfe200,
0xbfa239045b661385,0x3fc2b4572d9cc147,
0xbfa99f4f01740705,0xbf9f449c484f4879,
0x3f9f5f42169d7dde,0xbf6111b1ba632a97,
0xbf84725fbe5b6e61,0x3f7438a2986cfa9c,
0xbfe3000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6be9160bfb3505,0x3fe26d76f73233c7,
0x3fe56363b5b93937,0xbfd8a2244b27297e,
0xbf52ca2f101eef63,0x3fc081bc342243ad,
0xbfae38db4a932344,0xbf91f814d4ae90c6,
0x3f9d056ae193c4f3,0xbf7bd0b502d8f3a0,
0xbf7b763f7bb8ae2f,0x3f76036f42d9ab69,
0xbfe5000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8b64af0450486e,0x3fe3b75f8bcb742d,
0x3fe3da23bc12369f,0xbfd8768ff4b46416,
0x3f9d67cb8ad9cb1a,0x3fbc168cb7827df4,
0xbfb03a2b83c9272e,0xbf789feb595297dc,
0x3f98bd01b4c335e7,0xbf83badc303d6535,
0xbf6c54e7a1c1e3f3,0x3f7408394b7ef3e7,
0xbfe7000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6a48557f6e0d3e,0x3fe4e8d895b010dc,
0x3fe25652faaf8a73,0xbfd7f6c3a57c444b,
0x3fab7866e3f99ebe,0x3fb6fa1df47ccd40,
0xbfb05508d3741b8e,0x3f6c3efdf7bb279c,
0x3f9372badd6d3e27,0xbf860fd5ae65f3da,
0xbf47266ffb07e628,0x3f6f9763992c2a05,
0xbfe9000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6bb6a2b194e3ab,0x3fe602609aae7c22,
0x3fe0dcbafe191c7f,0xbfd732028428a9fb,
0x3fb2d92389be065b,0x3fb1f6a9c8c49993,
0xbfaf47c0b50b56ee,0x3f85a8edd1356223,
0x3f8be05c5cd1b4fa,0xbf85a0efe4552f76,
0x3f559f2a6a356194,0x3f6576f5e989208d,
0xbfeb000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c80328bd86c8b74,0x3fe704bb1b7fcb81,
0x3fdee264aad6c40c,0xbfd637493ce659f1,
0x3fb6be3a3dee6f4a,0x3faa85eb6470ac0f,
0xbfacc0146ea4858d,0x3f8f8fb683cddac5,
0x3f819515dee2cb91,0xbf834e45e6af9ea1,
0x3f65250f197ca56d,0x3f57a766026d036c,
0xbfed000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c716f7eef7b61ad,0x3fe7f0e1a4cd846e,
0x3fdc2d4cc872dc09,0xbfd514a99f92ed53,
0x3fb9846a6cf2f337,0x3fa20896939ab161,
0xbfa97e801f31ee0d,0x3f92a11f47b82085,
0x3f717d70fe289c34,0xbf7fdcf1d3f6ce2d,
0x3f69f607e81af6b6,0x3f3f925c80d0f889,
0xbfef000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c931a11d7e8606e,0x3fe92bfb370d9b71,
0x3fd866160e454111,0xbfd33149f3801dba,
0x3fbbdb6d4c949899,0x3f8d6ab2a74b9343,
0xbfa404d1047c5d72,0x3f93c47d9accd919,
0xbf41b755642cff1b,0xbf74b5301aa1e788,
0x3f69a84c5b2a3e68,0xbf3cf47830328c11,
0xbff1000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c884d471b8fd396,0x3fea8dbcbc31897a,
0x3fd3ee730537c8ea,0xbfd08a05ad27ce32,
0x3fbc5255406f84b6,0xbf772fa2f633aa5e,
0xbf99dd8e4c473fc4,0x3f9183c935b6495d,
0xbf70471a3a591480,0xbf603ddd4debb9a4,
0x3f62591e44d3c17f,0xbf4c195d3a9b1ab4,
0xbff3000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c90dd1c9bff7f64,0x3febad50a4a68bc1,
0x3fd01fba72cee1a5,0xbfcbe432f647c4d6,
0x3fbabf92b6e5ac73,0xbf922983aa24e217,
0xbf8c72214c14e23a,0x3f8acb4d1f388e8b,
0xbf740ef8b4a2ee3b,0xbf0ea9f30c8dc900,
0x3f53cc40d18713ae,0xbf4848b86029cba1,
0xbff5000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8fb61781d22681,0x3fec950a3340c8bf,
0x3fc9e1dffd385423,0xbfc71e2ff88eba23,
0x3fb80aebd07ab5ba,0xbf98404e27eae6ed,
0xbf772da520b5006e,0x3f824c9268af9423,
0xbf722ae76d206ae3,0x3f4b807f56298d5e,
0x3f3d71027df95d2a,0xbf3ebd17676755fb,
0xbff7000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c95393c63ce8224,0x3fed4e6f464286b0,
0x3fc4a45842b7de1e,0xbfc2e7885afdd3d0,
0x3fb4dd6dd51d3feb,0xbf9a05d3adab489c,
0xbf3459b643b4995c,0x3f766b30745f2e3a,
0xbf6c2c891e555bdf,0x3f5194f30d6c576d,
0x3ef4dbb43c3132a2,0xbf2e45ebab3c15a0,
0xbff9000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c75111669651daa,0x3fede1eb5937518f,
0x3fc06129c7c8ebb1,0xbfbe9763041064e1,
0x3fb1a5b9f9113928,0xbf992145039f9afe,
0x3f66cb116ea49c89,0x3f67f972fdf30001,
0xbf63a7b5975f02f3,0x3f4fde7b8777f4c8,
0xbf25918876626ba4,0xbf1495123c991f00,
0xbffb000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9f29a5b7426d27,0x3fee56b6f3efabfc,
0x3fb9e3efd94bb9fc,0xbfb88bd9760feca7,
0x3fad48a0350b3acf,0xbf96cc6a5110f129,
0x3f71934687170384,0x3f5407baf73b3df9,
0xbf591b626c0646dd,0x3f48b0e1dd283558,
0xbf2b322292840d2b,0xbe99e4061120c741,
0xbffd000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6af8c2041c67cd,0x3feeb2dfedd5ec93,
0x3fb465a205cfb638,0xbfb3914bf68d39ff,
0x3fa7f21a08c5c734,0xbf93da9560ea9960,
0x3f73953fec62820e,0x3f2749d5e1273e3c,
0xbf4d46b0b498ce5a,0x3f4153d680e1f4c4,
0xbf28477014eca6a2,0x3effac54e07ceb4b,
0xbfff000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7a8af2bb2231f2,0x3fef1994df724fc8,
0x3fac65b1bc0c9d58,0xbfab9937bda747c8,
0x3fa15b42d9ef931c,0xbf8eacd8e8507a3c,
0x3f7263a15721c682,0xbf42a032acdc3b32,
0xbf3431e79b5ad185,0x3f31b51667c7df5e,
0xbf1f8709579250ad,0x3f01ed8ed1bf9595,
0xc001000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c86f3f7c3dafc55,0x3fef73776b2aa2db,
0x3fa16a7fc4d7b900,0xbfa11e03803ad621,
0x3f9609591597297f,0xbf847e74ed9bbb0c,
0x3f6bff771725cd65,0xbf491d1ff73c18fa,
0x3ef53ee467b51dc5,0x3f160135be0d94a0,
0xbf0b32cb1d276a40,0x3ef4daf70c12d555,
0xc003000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c19dbf4e2e5b7dc,0x3fefaa7934b75ebd,
0x3f9545200830a42c,0xbf950c46d285f6bc,
0x3f8b79f5bfc6513f,0xbf7a50adad777898,
0x3f633a19be8255e3,0xbf44e609bc2557b7,
0x3f1afcbad60eaacd,0x3ee80476ac34a8ef,
0xbef278e23de463e9,0x3ee209faf377264d,
0xc005000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c979d62702c631c,0x3fefcc04cdbcdc4b,
0x3f89e87d088d269a,0xbf89be6721012b80,
0x3f80f1c13e8d39d3,0xbf7082dbc9602757,
0x3f590be9bd4e0a11,0xbf3dcc2bef6d0283,
0x3f1a08065c4a8e85,0xbee528117d0410f3,
0xbed0be73a44ff565,0x3ec9b0c11e342e38,
0xc007000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c804b931ad7a3cc,0x3fefe06eb0688212,
0x3f7f81bd8876224d,0xbf7f62a8c699a963,
0x3f74c31e2b2a6a28,0xbf6470d537f16227,
0x3f4faeef61c89673,0xbf33c5e80b349783,
0x3f138f3d31037a6b,0xbeeb3c780996ffe3,
0x3e9d0c75bc8bfefc,0x3eac3865227764d4,
0xc009000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c5b978b202749f9,0x3fefecd6b7ea3128,
0x3f73238b786137fe,0xbf731815acea072e,
0x3f6956f0816d5aee,0xbf591a16286c4885,
0x3f43b3e3a00c6096,0xbf29441b2a56dec7,
0x3f0a99c3a2e857b6,0xbee61cb034ddc151,
0x3eb792bbc76d6107,0x3e761472362a16f0,
0xc00b000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9c290afcbde00d,0x3feff45f6d36133a,
0x3f673cec093032de,0xbf67347a7cd844d5,
0x3f5eda25530355db,0xbf4ead3bbabc1ba9,
0x3f3842e61cd35432,0xbf1f9ab7fd1a3ddd,
0x3f0136c154ea3ded,0xbedf12807f721e66,
0x3eb5b53687ad5112,0xbe801e90fbfed147,
0xc00d000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9e323294294877,0x3feff8f21cdaaa62,
0x3f5c3470628813f2,0xbf5c2e38ac6ff8d2,
0x3f52c13234626f43,0xbf42b0a47df47bb4,
0x3f2db2889e32fbfd,0xbf1385fbd54c5a55,
0x3ef5afa812c6984e,0xbed47097c188a03c,
0x3eaff2b982f7ee8c,0xbe828ec5b57d424d,
0xc00f000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9ba40da6983bec,0x3feffcaac3f20e65,
0x3f4aa87cf664754c,0xbf4aa5b62919e224,
0x3f41c01b53b0b312,0xbf31b8b54d091751,
0x3f1c431305954ecc,0xbf02b7dead0d44e6,
0x3ee51c6eff109ea9,0xbec48cfb08072d17,
0x3ea1585ec59cae34,0xbe78832baf950ba9,
0xc011000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8fbf237f4afe10,0x3feffec61279a3a4,
0x3f339e78281a00ea,0xbf339db7b072ad62,
0x3f2a259e658ef4e4,0xbf1a219c312b10ba,
0x3f04e146b4f5f4b7,0xbeebc5f137088210,
0x3ecf96736e300b00,0xbeaf4874840b91eb,
0x3e8b6ab2b5c8fd3f,0xbe650bcce62fd2b7,
0xc013000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9c869c85471703,0x3fefff8c81c6dc33,
0x3f1cdf5a2e4d7c69,0xbf1cdef1f9be63be,
0x3f133ec10c83aaa0,0xbf033dab325faacb,
0x3eeec598fa98bad8,0xbed47f1a15ba368e,
0x3eb761fbe7d201c1,0xbe974cd75a43bf6b,
0x3e74b02965bbf8dc,0xbe504ef4e3892a66,
0xc015000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c643810400471b0,0x3fefffd583014825,
0x3f053e71416c43ca,0xbf053e550c7c8cc9,
0x3efc52d0d90d4843,0xbeec523a6adbe142,
0x3ed6a73e22d844b3,0xbebe31d10f23acd0,
0x3ea13e14264deab2,0xbe81385abb98edcc,
0x3e5eb9164593e0b6,0xbe387218cfe7772e,
0xc017000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c92530433f4c703,0x3feffff05e8d3191,
0x3eef42ddfa52b575,0xbeef42ceb54212aa,
0x3ee4d7201cbcb853,0xbed4d6f764b66c37,
0x3ec0abb806ebde71,0xbea6399cf854f876,
0x3e8964b91728d7c9,0xbe6961a0528444d6,
0x3e46ae3b0814ee00,0xbe221b8194dacd16,
0xc019000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c7bb5622ce1a79e,0x3feffffa3ff22708,
0x3ed7003552d53503,0xbed7003130c1ab92,
0x3eceaae13b699c45,0xbebeaacb305f3d07,
0x3ea8887f5f9c87ef,0xbe905ad08df8454f,
0x3e72b068300b703f,0xbe52af921a71c058,
0x3e30b53eaa35300d,0xbe0ab60cdad7e22e,
0xc01b000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8bd1acf80d7256,0x3feffffde2760a41,
0x3ec0ec4f1ec27e55,0xbec0ec4e005e6eac,
0x3eb6906504bc4610,0xbea6905f0d52c8b5,
0x3e920d0f5cce152b,0xbe7811505b10e753,
0x3e5b811ee4f9b8ee,0xbe3b80abc067e840,
0x3e1898e394e09335,0xbdf3abb5ba711db7,
0xc01d000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8ae01db39a3791,0x3fefffff38c76668,
0x3ea8e712e56e1188,0xbea8e7124a650791,
0x3ea09a0b62d8ef94,0xbe909a09c56c2107,
0x3e7a900a90a54a6e,0xbe61b5557bb449b6,
0x3e443cc74732cdca,0xbe243ca8aa8d6e54,
0x3e0219c341e0d1b4,0xbddcf49a10950f13,
0xc01f000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c75cb18f3775414,0x3fefffffd38c39f0,
0x3e8639e2f89493bb,0xbe8639e2d9b29562,
0x3e7da2836a1f706e,0xbe6da282c6733dae,
0x3e57b53a278851fd,0xbe3f9c4a72536e22,
0x3e220e81fbe19cdd,0xbe020e8875ada8d8,
0x3de07634328384fc,0xbdba54078e3c351f,
0xc021000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c98b78738b0edef,0x3feffffff9fbea40,
0x3e581056fac28c46,0xbe581056f63a4351,
0x3e500ae49533790a,0xbe400ae489acba90,
0x3e29ab0d59a1967b,0xbe111cb32d6eef2b,
0x3df38cbadf396908,0xbdd38cc7b92cecd3,
0x3db1d2bbe2705032,0xbd8c8199294e6380,
0xc023000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8eeec16618b984,0x3fefffffff2f9279,
0x3e2a0db0d052b148,0xbe2a0db0cfa6ab71,
0x3e215e75d53a3105,0xbe115e75d40aa47f,
0x3dfbca5cdc12ed1c,0xbde286e85704fc22,
0x3dc52a8925354517,0xbda52a97ea3f5f4a,
0x3d834c011a2ac0f7,0xbd5edd05bdcb3a62,
0xc025000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6bd8b474bbf792,0x3fefffffffe3cad8,
0x3dfc3527e43c565f,0xbdfc3527e420f415,
0x3df2ce1a8d806dad,0xbde2ce1a8ddf690a,
0x3dce169832d8bd68,0xbdb40f0fe853da5b,
0x3d96ea8d930d31a1,0xbd76ea9db0d09839,
0x3d54e474fd4303a1,0xbd30b526ca2b228a,
0xc027000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c56e8953d525fd5,0x3feffffffffc2eb9,
0x3dce8a37a48016c2,0xbdce8a37a479b7d4,
0x3dc45c250cfa9c16,0xbdb45c250d9f8467,
0x3da049bb33cbd4e9,0xbd85b7a407c422c1,
0x3d68cf9ced2b3fd5,0xbd48cfae64c352b3,
0x3d269eae08690d52,0xbd0216cbeafff5aa,
0xc029000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c8acf1392b106d3,0x3fefffffffff7bbd,
0x3da088529889b316,0xbda088529887f4c4,
0x3d960b18bf1df711,0xbd860b18bfd99a48,
0x3d71a27e7ca64143,0xbd5783530ea76d91,
0x3d3adcc75cbd2a03,0xbd1adcda46be5f17,
0x3cf87d77650be5b8,0xbcd395ae6e74c6d2,
0xc02b000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c97a8a295292858,0x3fefffffffffee19,
0x3d71e642bb008f95,0xbd71e642bafeec54,
0x3d67ddae41647741,0xbd57ddae4230f34b,
0x3d4317c33fae2536,0xbd2975040d3e26b9,
0x3d0d155dcd0f0afb,0xbced157247832b20,
0x3cca83d70f607c28,0xbca5343952c1e19e,
0xc02d000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c9b7876cbc5306e,0x3feffffffffffd93,
0x3d436121e2640d76,0xbd436121e26250ea,
0x3d39d6d7ca259186,0xbd29d6d7cb0327ce,
0x3d14abe4dc31244a,0xbcfb8fdb82ab6bb7,
0x3cdf7cf757491b60,0xbcbf7d0d833640fb,
0x3c9cb512f6bdc754,0xbc76f50ab1b0e9ba,
0xc02f000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c6ffe15d5f78543,0x3fefffffffffffe1,
0x3cfee00288b99c26,0xbcfee0027d060ee2,
0x3cf4954aa23148a2,0xbce4954b5dad3010,
0x3cd07883dd8793bd,0xbcb5f5f4bb87adcf,
0x3c98f1a905097685,0xbc78f2d585007222,
0x3c58a37cc5082b5f,0xbc33ae7917f94d17,
0xc031000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x3c91bf1d80474f0f,0x3feffffffffffffe,
0x3cb72071400e6275,0xbcb72071400a9f37,
0x3caed5ec39a77629,0xbc9ed5ec3b530600,
0x3c88ab2bfed159de,0xbc70721d1220b3fc,
0x3c52c96049721fb8,0xbc32c971215735dc,
0x3c112ef658ab41a9,0xbbeb7b598c6ad3de,
0xc03287e0c98f84e5,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x3ff0000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000};


static const unsigned long atanh_table_f64_la[1552]=
{
    0xc086232bdd7a8300,0xbe1ce91eef3fb100,
    0xc086232fdc7ad828,0xbe1cefcffda73b6a,
    0xc0862333d97d2ba0,0xbe1cef406748f1ff,
    0xc0862337d48378e0,0xbe1cef2a9429925a,
    0xc086233bcd8fb878,0xbe1cf138d17ebecb,
    0xc086233fc4a3e018,0xbe1ceff2dbbbb29e,
    0xc0862343b9c1e270,0xbe1cf1a42aae437b,
    0xc0862347acebaf68,0xbe1cef3b152048af,
    0xc086234b9e2333f0,0xbe1cef20e127805e,
    0xc086234f8d6a5a30,0xbe1cf00ad6052cf4,
    0xc08623537ac30980,0xbe1cefc4642ee597,
    0xc0862357662f2660,0xbe1cf1f277d36e16,
    0xc086235b4fb092a0,0xbe1ceed009e8d8e6,
    0xc086235f37492d28,0xbe1cf1e4038cb362,
    0xc08623631cfad250,0xbe1cf0b0873b8557,
    0xc086236700c75b98,0xbe1cf15bb3227c0b,
    0xc086236ae2b09fe0,0xbe1cf151ef8ca9ed,
    0xc086236ec2b87358,0xbe1cefe1dc2cd2ed,
    0xc0862372a0e0a780,0xbe1cf0d1eec5454f,
    0xc08623767d2b0b48,0xbe1ceeefd570bbce,
    0xc086237a57996af0,0xbe1cee99ae91b3a7,
    0xc086237e302d9028,0xbe1cf0412830fbd1,
    0xc086238206e94218,0xbe1ceee898588610,
    0xc0862385dbce4548,0xbe1cee9a1fbcaaea,
    0xc0862389aede5bc0,0xbe1ceed8e7cc1ad6,
    0xc086238d801b4500,0xbe1cf10c8d059da6,
    0xc08623914f86be18,0xbe1ceee6c63a8165,
    0xc08623951d228180,0xbe1cf0c3592d2ff1,
    0xc0862398e8f04758,0xbe1cf0026cc4cb1b,
    0xc086239cb2f1c538,0xbe1cf15d48d8e670,
    0xc08623a07b28ae60,0xbe1cef359363787c,
    0xc08623a44196b390,0xbe1cefdf1ab2e82c,
    0xc08623a8063d8338,0xbe1cefe43c02aa84,
    0xc08623abc91ec960,0xbe1cf044f5ae35b7,
    0xc08623af8a3c2fb8,0xbe1cf0b0b4001e1b,
    0xc08623b349975d98,0xbe1cf1bae76dfbcf,
    0xc08623b70731f810,0xbe1cef0a72e13a62,
    0xc08623bac30da1c8,0xbe1cf184007d2b6b,
    0xc08623be7d2bfb40,0xbe1cf16f4b239e98,
    0xc08623c2358ea2a0,0xbe1cf0976acada87,
    0xc08623c5ec3733d0,0xbe1cf066318a16ff,
    0xc08623c9a1274880,0xbe1ceffaa7148798,
    0xc08623cd54607820,0xbe1cf23ab02e9b6e,
    0xc08623d105e45800,0xbe1cefdfef7d4fde,
    0xc08623d4b5b47b20,0xbe1cf17fece44f2b,
    0xc08623d863d27270,0xbe1cf18f907d0d7c,
    0xc08623dc103fccb0,0xbe1cee61fe072c98,
    0xc08623dfbafe1668,0xbe1cf022dd891e2f,
    0xc08623e3640eda20,0xbe1ceecc1daf4358,
    0xc08623e70b73a028,0xbe1cf0173c4fa380,
    0xc08623eab12deec8,0xbe1cf16a2150c2f4,
    0xc08623ee553f4a30,0xbe1cf1bf980b1f4b,
    0xc08623f1f7a93480,0xbe1cef8b731663c2,
    0xc08623f5986d2dc0,0xbe1cee9a664d7ef4,
    0xc08623f9378cb3f0,0xbe1cf1eda2af6400,
    0xc08623fcd5094320,0xbe1cf1923f9d68d7,
    0xc086240070e45548,0xbe1cf0747cd3e03a,
    0xc08624040b1f6260,0xbe1cf22ee855bd6d,
    0xc0862407a3bbe078,0xbe1cf0d57360c00b,
    0xc086240b3abb4398,0xbe1ceebc815cd575,
    0xc086240ed01efdd0,0xbe1cf03bfb970951,
    0xc086241263e87f50,0xbe1cf16e74768529,
    0xc0862415f6193658,0xbe1cefec64b8becb,
    0xc086241986b28f30,0xbe1cf0838d210baa,
    0xc086241d15b5f448,0xbe1cf0ea86e75b11,
    0xc0862420a324ce28,0xbe1cf1708d11d805,
    0xc08624242f008380,0xbe1ceea988c5a417,
    0xc0862427b94a7910,0xbe1cef166a7bbca5,
    0xc086242b420411d0,0xbe1cf0c9d9e86a38,
    0xc086242ec92eaee8,0xbe1cef0946455411,
    0xc08624324ecbaf98,0xbe1cefea60907739,
    0xc0862435d2dc7160,0xbe1cf1ed0934ce42,
    0xc086243955624ff8,0xbe1cf191ba746c7d,
    0xc086243cd65ea548,0xbe1ceeec78cf2a7e,
    0xc086244055d2c968,0xbe1cef345284c119,
    0xc0862443d3c012b8,0xbe1cf24f77355219,
    0xc08624475027d5e8,0xbe1cf05bf087e114,
    0xc086244acb0b65d0,0xbe1cef3504a32189,
    0xc086244e446c1398,0xbe1ceff54b2a406f,
    0xc0862451bc4b2eb8,0xbe1cf0757d54ed4f,
    0xc086245532aa04f0,0xbe1cf0c8099fdfd5,
    0xc0862458a789e250,0xbe1cf0b173796a31,
    0xc086245c1aec1138,0xbe1cf11d8734540d,
    0xc086245f8cd1da60,0xbe1cf1916a723ceb,
    0xc0862462fd3c84d8,0xbe1cf19a911e1da7,
    0xc08624666c2d5608,0xbe1cf23a9ef72e4f,
    0xc0862469d9a591c0,0xbe1cef503d947663,
    0xc086246d45a67a18,0xbe1cf0fceeb1a0b2,
    0xc0862470b0314fa8,0xbe1cf107e27e4fbc,
    0xc086247419475160,0xbe1cf03dd9922331,
    0xc086247780e9bc98,0xbe1cefce1a10e129,
    0xc086247ae719cd18,0xbe1ceea47f73c4f6,
    0xc086247e4bd8bd10,0xbe1ceec0ac56d100,
    0xc0862481af27c528,0xbe1cee8a6593278a,
    0xc086248511081c70,0xbe1cf2231dd9dec7,
    0xc0862488717af888,0xbe1cf0b4b8ed7da8,
    0xc086248bd0818d68,0xbe1cf1bd8d835002,
    0xc086248f2e1d0d98,0xbe1cf259acc107f4,
    0xc08624928a4eaa20,0xbe1cee897636b00c,
    0xc0862495e5179270,0xbe1cee757f20c326,
    0xc08624993e78f490,0xbe1cefafd3aa54a4,
    0xc086249c9673fd10,0xbe1cee7298d38b97,
    0xc086249fed09d6f8,0xbe1ceedc158d4ceb,
    0xc08624a3423babe0,0xbe1cf2282987cb2e,
    0xc08624a6960aa400,0xbe1cefe7381ecc4b,
    0xc08624a9e877e600,0xbe1cef328dbbce80,
    0xc08624ad39849728,0xbe1cefde45f3cc71,
    0xc08624b08931db58,0xbe1cefa8b89433b9,
    0xc08624b3d780d500,0xbe1cef6773c0b139,
    0xc08624b72472a528,0xbe1cf031c931c11f,
    0xc08624ba70086b78,0xbe1cf088f49275e7,
    0xc08624bdba434630,0xbe1cf17de0eaa86d,
    0xc08624c103245238,0xbe1cefd492f1ba75,
    0xc08624c44aacab08,0xbe1cf1253e154466,
    0xc08624c790dd6ad0,0xbe1cf0fb09ee6d55,
    0xc08624cad5b7aa58,0xbe1cf1f08dd048fe,
    0xc08624ce193c8120,0xbe1ceeca0809697f,
    0xc08624d15b6d0538,0xbe1cef8d5662d968,
    0xc08624d49c4a4b78,0xbe1cee97b556ed78,
    0xc08624d7dbd56750,0xbe1cf1b14b6acb75,
    0xc08624db1a0f6b00,0xbe1cef1e860623f2,
    0xc08624de56f96758,0xbe1ceeaf4d156f3d,
    0xc08624e192946bf0,0xbe1ceecc12b400ed,
    0xc08624e4cce18710,0xbe1cf180c40c794f,
    0xc08624e805e1c5c8,0xbe1cf185a08f7f65,
    0xc08624eb3d9633d8,0xbe1cef45fc924078,
    0xc08624ee73ffdbb0,0xbe1cf1e4f457f32a,
    0xc08624f1a91fc6a0,0xbe1cf040147b8a5a,
    0xc08624f4dcf6fc98,0xbe1cf1effca0dfb2,
    0xc08624f80f868468,0xbe1cf0470146e5bc,
    0xc08624fb40cf6390,0xbe1cef4dd186e501,
    0xc08624fe70d29e60,0xbe1ceebe257f66c7,
    0xc08625019f9137f0,0xbe1ceefb7a1c395c,
    0xc0862504cd0c3220,0xbe1cf209dedfed8c,
    0xc0862507f9448db0,0xbe1cf082da464994,
    0xc086250b243b4a18,0xbe1cee88694a73cf,
    0xc086250e4df165a0,0xbe1cf0b61e8f0531,
    0xc08625117667dd78,0xbe1cf1106599c962,
    0xc08625149d9fad98,0xbe1ceff1ee88af1f,
    0xc0862517c399d0c8,0xbe1cf0f746994ef6,
    0xc086251ae85740b8,0xbe1cefe8a1d077e4,
    0xc086251e0bd8f5e0,0xbe1cf1a1da036092,
    0xc08625212e1fe7a8,0xbe1cf0f8a7786fcd,
    0xc08625244f2d0c48,0xbe1cefa1174a07a7,
    0xc08625276f0158d8,0xbe1cef1043aa5b25,
    0xc086252a8d9dc150,0xbe1cf15d521c169d,
    0xc086252dab033898,0xbe1cf220bba8861f,
    0xc0862530c732b078,0xbe1cef51e310eae2,
    0xc0862533e22d1988,0xbe1cf222fcedd8ae,
    0xc0862536fbf36370,0xbe1cefdb4da4bda8,
    0xc086253a14867ca0,0xbe1ceeafc1112171,
    0xc086253d2be75280,0xbe1cee99dfb4b408,
    0xc08625404216d160,0xbe1cf22d2536f06b,
    0xc08625435715e498,0xbe1cef6abbf2e268,
    0xc08625466ae57648,0xbe1cf093a14789f5,
    0xc08625497d866fa0,0xbe1cf0f93655603c,
    0xc086254c8ef9b8b8,0xbe1cf1cc40c9aafc,
    0xc086254f9f4038a8,0xbe1ceeea5f4e9157,
    0xc0862552ae5ad568,0xbe1cefa9f52d4997,
    0xc0862555bc4a7400,0xbe1cefa490a638ff,
    0xc0862558c90ff868,0xbe1cef7fcf797d6f,
    0xc086255bd4ac4590,0xbe1cf1b4c51113c9,
    0xc086255edf203d78,0xbe1cef55e5b4a55d,
    0xc0862561e86cc100,0xbe1cf0d37a25f9dc,
    0xc0862564f092b028,0xbe1ceebe9efc19d9,
    0xc0862567f792e9d8,0xbe1cee8ad30a57b5,
    0xc086256afd6e4c08,0xbe1cef4e1817b90b,
    0xc086256e0225b3b8,0xbe1cee7fa9229996,
    0xc086257105b9fce0,0xbe1cf0b54963d945,
    0xc0862574082c0298,0xbe1cee5f2f3c7995,
    0xc0862577097c9ee0,0xbe1cf0828e303a2c,
    0xc086257a09acaae0,0xbe1cf172c3078947,
    0xc086257d08bcfec0,0xbe1cf189252afa22,
    0xc086258006ae71b8,0xbe1cefdb80426923,
    0xc08625830381da08,0xbe1ceef1391a0372,
    0xc0862585ff380d00,0xbe1cf17720c78d13,
    0xc0862588f9d1df18,0xbe1ceef1f9027d83,
    0xc086258bf35023b8,0xbe1cf06fac99dec9,
    0xc086258eebb3ad78,0xbe1cf1373eeb45c0,
    0xc0862591e2fd4e00,0xbe1cef777536bb81,
    0xc0862594d92dd600,0xbe1cf0f43ca40766,
    0xc0862597ce461558,0xbe1cefb2cfc6766b,
    0xc086259ac246daf0,0xbe1ceea49e64ffa2,
    0xc086259db530f4c8,0xbe1cf250fa457dec,
    0xc08625a0a7053018,0xbe1cf17d8bb2a44e,
    0xc08625a397c45918,0xbe1cf1d5906d54b7,
    0xc08625a6876f3b30,0xbe1cf08fe7b31780,
    0xc08625a97606a0e0,0xbe1cef13edfc9d11,
    0xc08625ac638b53c8,0xbe1cef9d2b107219,
    0xc08625af4ffe1cb0,0xbe1cf1ddd4ff6160,
    0xc08625b23b5fc390,0xbe1cefa02a996495,
    0xc08625b525b10f68,0xbe1cf166a7e37ee5,
    0xc08625b80ef2c680,0xbe1cef0b171068a5,
    0xc08625baf725ae28,0xbe1cf05c80779283,
    0xc08625bdde4a8af0,0xbe1cf1bbfbffb889,
    0xc08625c0c4622090,0xbe1cf0b8666c0124,
    0xc08625c3a96d31e0,0xbe1cf0a8fcf47a86,
    0xc08625c68d6c80f0,0xbe1cef46e18cb092,
    0xc08625c97060cef0,0xbe1cf1458a350efb,
    0xc08625cc524adc58,0xbe1ceeea1dadce12,
    0xc08625cf332b68b0,0xbe1cf0a1bfdc44c7,
    0xc08625d2130332d0,0xbe1cef96d02da73e,
    0xc08625d4f1d2f8a8,0xbe1cf2451c3c7701,
    0xc08625d7cf9b7778,0xbe1cf10d08f83812,
    0xc08625daac5d6ba0,0xbe1ceec5b4895c5e,
    0xc08625dd881990b0,0xbe1cf14e1325c5e4,
    0xc08625e062d0a188,0xbe1cf21d0904be12,
    0xc08625e33c835838,0xbe1ceed0839bcf21,
    0xc08625e615326df0,0xbe1cf1bb944889d2,
    0xc08625e8ecde9b48,0xbe1cee738e85eece,
    0xc08625ebc38897e0,0xbe1cf25c2bc6ef12,
    0xc08625ee99311ac8,0xbe1cf132b70a41ad,
    0xc08625f16dd8da28,0xbe1cf1984236a6e3,
    0xc08625f441808b78,0xbe1cf19ae74998f9,
    0xc08625f71428e370,0xbe1cef3e175d61a1,
    0xc08625f9e5d295f8,0xbe1cf101f9868fd9,
    0xc08625fcb67e5658,0xbe1cee69db83dcd2,
    0xc08625ff862cd6f8,0xbe1cf081b636af51,
    0xc086260254dec9a8,0xbe1cee62c7d59b3e,
    0xc08626052294df58,0xbe1cf1b745c57716,
    0xc0862607ef4fc868,0xbe1cef3d2800ea23,
    0xc086260abb103458,0xbe1cef480ff1acd2,
    0xc086260d85d6d200,0xbe1cf2424c9a17ef,
    0xc08626104fa44f90,0xbe1cf12cfde90fd5,
    0xc086261318795a68,0xbe1cf21f590dd5b6,
    0xc0862615e0569f48,0xbe1cf0c50f9cd28a,
    0xc0862618a73cca30,0xbe1ceedbdb520545,
    0xc086261b6d2c8668,0xbe1cf0b030396011,
    0xc086261e32267e98,0xbe1cf19917010e96,
    0xc0862620f62b5cb0,0xbe1cf07331355985,
    0xc0862623b93bc9e8,0xbe1cf01ae921a1c3,
    0xc08626267b586ed0,0xbe1cefe5cf0dbf0c,
    0xc08626293c81f348,0xbe1cf01b258aeb50,
    0xc086262bfcb8fe88,0xbe1cee6b9e7f4c68,
    0xc086262ebbfe3710,0xbe1cee684a9b21c9,
    0xc08626317a5242b8,0xbe1cf1f8bcde9a8b,
    0xc086263437b5c6c0,0xbe1cf1d063d36238,
    0xc0862636f42967a8,0xbe1cf1e31a19075e,
    0xc0862639afadc950,0xbe1cf1d8efdf7e7d,
    0xc086263c6a438ef0,0xbe1cf1812ee72dba,
    0xc086263f23eb5b18,0xbe1cf1449a9a2279,
    0xc0862641dca5cfb8,0xbe1cee96edce5085,
    0xc086264494738e08,0xbe1cf06797bd03b2,
    0xc08626474b5536b8,0xbe1cef91b9b7ffc1,
    0xc086264a014b69c0,0xbe1cef4b6721278f,
    0xc086264cb656c678,0xbe1cf1942925eb4a,
    0xc086264f6a77eba8,0xbe1cefa2c7bc2e39,
    0xc08626521daf7758,0xbe1cf252595aceb3,
    0xc0862654cffe0718,0xbe1cee8e9ae47ec2,
    0xc0862657816437a8,0xbe1cf1bf913828fa,
    0xc086265a31e2a558,0xbe1cf23475d6b366,
    0xc086265ce179ebc8,0xbe1cef8df00a922b,
    0xc086265f902aa5f0,0xbe1cef279bfa43e0,
    0xc08626623df56e38,0xbe1cf080e10b8365,
    0xc0862664eadade70,0xbe1cf1a518f9b544,
    0xc086266796db8fd0,0xbe1cef9308fed9e9,
    0xc086266a41f81ae8,0xbe1ceea3ae6b19c9,
    0xc086266cec3117b8,0xbe1ceef06003d4c2,
    0xc086266f95871da8,0xbe1cf0b8457ffb0c,
    0xc08626723dfac390,0xbe1cf0c526745ad6,
    0xc0862674e58c9fa8,0xbe1cf0cf91ff7b5d,
    0xc08626778c3d4798,0xbe1cefe260819380,
    0xc086267a320d5070,0xbe1ceebd90aa27a3,
    0xc086267cd6fd4ea8,0xbe1cf0388121dffa,
    0xc086267f7b0dd630,0xbe1cf1a3881435f1,
    0xc08626821e3f7a68,0xbe1cef28e9d9ac52,
    0xc0862684c092ce08,0xbe1cf02d300062dd,
    0xc086268762086350,0xbe1cefaee1edfa35,
    0xc086268a02a0cbe0,0xbe1cf0a5a052e936,
    0xc086268ca25c98d8,0xbe1cee60a4a497ed,
    0xc086268f413c5ab0,0xbe1cf0e4a5d0cf49,
    0xc0862691df40a170,0xbe1cf149235a4e6e,
    0xc08626947c69fc80,0xbe1cf215180b9fcc,
    0xc086269718b8fac8,0xbe1cef9b156a9840,
    0xc0862699b42e2a90,0xbe1cf054c91441be,
    0xc086269c4eca19a8,0xbe1cf13ded26512c,
    0xc086269ee88d5550,0xbe1cf22ea4d8ac06,
    0xc08626a181786a40,0xbe1cf2354666ee2e,
    0xc08626a4198be4a8,0xbe1cefef936752b3,
    0xc08626a6b0c85020,0xbe1cf1e360a9db68,
    0xc08626a9472e37d8,0xbe1ceed6aeb812c5,
    0xc08626abdcbe2650,0xbe1cf227340b4986,
    0xc08626ae7178a5b0,0xbe1cf0215a0cbe0d,
    0xc08626b1055e3f70,0xbe1cf256adf0ae26,
    0xc08626b3986f7ca8,0xbe1ceff3c67aed06,
    0xc08626b62aace5c8,0xbe1cf2159fb93652,
    0xc08626b8bc1702e0,0xbe1cf01e6dbd1c7f,
    0xc08626bb4cae5b60,0xbe1cf009e75d1c0c,
    0xc08626bddc737648,0xbe1ceec10a020e73,
    0xc08626c06b66da08,0xbe1cf06d5783eee7,
    0xc08626c2f9890ca0,0xbe1cf0cb8f169ffe,
    0xc08626c586da9388,0xbe1cef7de2452430,
    0xc08626c8135bf3b0,0xbe1cf05da6f783ae,
    0xc08626ca9f0db198,0xbe1cefcc877d681d,
    0xc08626cd29f05138,0xbe1cef0531954ab3,
    0xc08626cfb4045608,0xbe1cf06b8565ea3d,
    0xc08626d23d4a4310,0xbe1cefdc455d9d7e,
    0xc08626d4c5c29ad0,0xbe1ceefc47e8fa64,
    0xc08626d74d6ddf48,0xbe1cf1872bf033f2,
    0xc08626d9d44c9210,0xbe1cf19d91087f9d,
    0xc08626dc5a5f3438,0xbe1cf012d444c6ab,
    0xc08626dedfa64650,0xbe1cf0ba528ee153,
    0xc08626e164224880,0xbe1ceeb431709788,
    0xc08626e3e7d3ba60,0xbe1cf0b9af31a6a5,
    0xc08626e66abb1b28,0xbe1cf168fb2e135b,
    0xc08626e8ecd8e990,0xbe1cef9097461c93,
    0xc08626eb6e2da3d0,0xbe1cee7a434735d8,
    0xc08626edeeb9c7a8,0xbe1cf235732b86f2,
    0xc08626f06e7dd280,0xbe1cefe1510b89e6,
    0xc08626f2ed7a4120,0xbe1cf1f64b9b80ef,
    0xc08626f56baf9000,0xbe1cf08f320ca339,
    0xc08626f7e91e3b08,0xbe1cf1b1de2808a1,
    0xc08626fa65c6bdc0,0xbe1cf1976d778b28,
    0xc08626fce1a99338,0xbe1ceef40a4f076f,
    0xc08626ff5cc73600,0xbe1cef3e45869ce3,
    0xc0862701d7202048,0xbe1ceef601b4c9d6,
    0xc086270450b4cbc0,0xbe1cf1eaf0b57fd6,
    0xc0862706c985b1c0,0xbe1cef82a44990f3,
    0xc086270941934b10,0xbe1ceefe32981f2c,
    0xc086270bb8de1018,0xbe1cefbf6f5a0445,
    0xc086270e2f6678d0,0xbe1cf18dba75792c,
    0xc0862710a52cfcc8,0xbe1cf0da64ce995f,
    0xc08627131a321318,0xbe1cef04ac0fb802,
    0xc08627158e763268,0xbe1cee9d4e2ad9bd,
    0xc086271801f9d0f8,0xbe1cefa9b55407b5,
    0xc086271a74bd64a0,0xbe1cefe6bd329570,
    0xc086271ce6c162c8,0xbe1cef0b1205dc85,
    0xc086271f58064068,0xbe1cef092a785e3f,
    0xc0862721c88c7210,0xbe1cf050dcdaac30,
    0xc086272438546be8,0xbe1cf210907ded8b,
    0xc0862726a75ea1b8,0xbe1cee760be44f99,
    0xc086272915ab86c0,0xbe1ceeeee07c2bcc,
    0xc086272b833b8df0,0xbe1cf06874992df5,
    0xc086272df00f29d0,0xbe1cef8fac5d4899,
    0xc08627305c26cc70,0xbe1cf1103241cc99,
    0xc0862732c782e788,0xbe1cf1d35fef83fe,
    0xc08627353223ec68,0xbe1cef3ec8133e1d,
    0xc08627379c0a4be8,0xbe1cef7261daccd8,
    0xc086273a05367688,0xbe1cf18656c50806,
    0xc086273c6da8dc68,0xbe1cf1c8736e049a,
    0xc086273ed561ed38,0xbe1cf1f93bff4911,
    0xc08627413c621848,0xbe1cf188a4ea680c,
    0xc0862743a2a9cc80,0xbe1cf1d270930c80,
    0xc086274608397868,0xbe1cf25a328c28e2,
    0xc08627486d118a28,0xbe1cf106f90aa3b8,
    0xc086274ad1326f80,0xbe1cee5e9d2e885a,
    0xc086274d349c95c0,0xbe1cf1c0bac27228,
    0xc086274f975069f8,0xbe1cf1a1500f9b1c,
    0xc0862751f94e58c0,0xbe1cefc30663ac44,
    0xc08627545a96ce48,0xbe1cf17123e427a2,
    0xc0862756bb2a3678,0xbe1cefb92749fea4,
    0xc08627591b08fcc0,0xbe1cefa40e1ea74a,
    0xc086275b7a338c40,0xbe1cee6f4612c3e9,
    0xc086275dd8aa4fa8,0xbe1cf1c54a053627,
    0xc0862760366db168,0xbe1ceff5eb503d9e,
    0xc0862762937e1b70,0xbe1cf02e47f10cee,
    0xc0862764efdbf768,0xbe1ceeb06e1d0dad,
    0xc08627674b87ae88,0xbe1cf10aadd6dba5,
    0xc0862769a681a9c0,0xbe1cf24e9913d30f,
    0xc086276c00ca51a0,0xbe1cef47b301e312,
    0xc086276e5a620e48,0xbe1ceeb1cefc2e85,
    0xc0862770b3494788,0xbe1cf16f1fbbe011,
    0xc08627730b8064e8,0xbe1ceebdf75174c7,
    0xc08627756307cd70,0xbe1cf06e3871a0da,
    0xc0862777b9dfe7f0,0xbe1cef16799fd554,
    0xc086277a10091ac0,0xbe1cf248dabf5377,
    0xc086277c6583cc00,0xbe1cf0c78d92a2cd,
    0xc086277eba506158,0xbe1cf0b911b029f0,
    0xc08627810e6f4028,0xbe1cefdc24719766,
    0xc086278361e0cd70,0xbe1cefbb6562b7e7,
    0xc0862785b4a56dd8,0xbe1cf1e0afb349ec,
    0xc086278806bd85c0,0xbe1cf008292e52fc,
    0xc086278a58297918,0xbe1cf053073872bf,
    0xc086278ca8e9ab88,0xbe1cf17a0a55a947,
    0xc086278ef8fe8068,0xbe1ceeffb0b60234,
    0xc086279148685aa0,0xbe1cf162204794a8,
    0xc086279397279ce0,0xbe1cf24cc8cb48ac,
    0xc0862795e53ca978,0xbe1cf0c9be68d5c3,
    0xc086279832a7e258,0xbe1cf172cd3d7388,
    0xc086279a7f69a930,0xbe1ceea2465fbce5,
    0xc086279ccb825f40,0xbe1cf0a386d2500f,
    0xc086279f16f26590,0xbe1cf1e338ddc18a,
    0xc08627a161ba1cd0,0xbe1cef1f5049867f,
    0xc08627a3abd9e548,0xbe1cef96c1ea8b1f,
    0xc08627a5f5521f00,0xbe1cf138f6fd3c26,
    0xc08627a83e2329b0,0xbe1cf0d4fcbfdf3a,
    0xc08627aa864d64b0,0xbe1cf24870c12c81,
    0xc08627accdd12f18,0xbe1cf0ae2a56348d,
    0xc08627af14aee7a0,0xbe1cee8ca1a9b893,
    0xc08627b15ae6eca8,0xbe1cf20414d637b0,
    0xc08627b3a0799c60,0xbe1cf0fc6b7b12d8,
    0xc08627b5e5675488,0xbe1cf152d93c4a00,
    0xc08627b829b072a0,0xbe1cf1073f9b77c2,
    0xc08627ba6d5553d8,0xbe1cee694f97d5a4,
    0xc08627bcb0565500,0xbe1cf0456b8239d7,
    0xc08627bef2b3d2b0,0xbe1cf211497127e3,
    0xc08627c1346e2930,0xbe1cf01856c0384d,
    0xc08627c37585b468,0xbe1cefa7dd05479e,
    0xc08627c5b5fad000,0xbe1cef3ae8e50b93,
    0xc08627c7f5cdd750,0xbe1ceea5f32fdd3a,
    0xc08627ca34ff2560,0xbe1cef424caeb8d9,
    0xc08627cc738f14f0,0xbe1cf0194d07a81f,
    0xc08627ceb17e0070,0xbe1cf20f452000c1,
    0xc08627d0eecc4210,0xbe1cf00e356218e4,
    0xc08627d32b7a33a0,0xbe1cef30484b4bcb,
    0xc08627d567882eb0,0xbe1ceeea11a6641b,
    0xc08627d7a2f68c80,0xbe1cf13492d5bd7b,
    0xc08627d9ddc5a618,0xbe1ceeb7048fad96,
    0xc08627dc17f5d418,0xbe1ceef0666f0477,
    0xc08627de51876ee8,0xbe1cf060d4b8b5c2,
    0xc08627e08a7acea8,0xbe1cf0b2a4b6ff8c,
    0xc08627e2c2d04b28,0xbe1cf0e34809a875,
    0xc08627e4fa883bf0,0xbe1cf16bf74a3522,
    0xc08627e731a2f848,0xbe1cee6a24623d57,
    0xc08627e96820d718,0xbe1cefc7b4f1528e,
    0xc08627eb9e022f18,0xbe1cf163051f3548,
    0xc08627edd34756b8,0xbe1cef36b3366305,
    0xc08627f007f0a408,0xbe1cf18134625550,
    0xc08627f23bfe6cf0,0xbe1cf0ec32ec1a11,
    0xc08627f46f710700,0xbe1ceeb3b64f3edc,
    0xc08627f6a248c778,0xbe1cf0cd15805bc8,
    0xc08627f8d4860368,0xbe1cf20db3bddebe,
    0xc08627fb06290f90,0xbe1cf25188430e25,
    0xc08627fd37324070,0xbe1ceea1713490f9,
    0xc08627ff67a1ea28,0xbe1cf159521d234c,
    0xc0862801977860b8,0xbe1cf24dfe50783b,
    0xc0862803c6b5f7d0,0xbe1ceef2ef89a60b,
    0xc0862805f55b02c8,0xbe1cee7fc919d62c,
    0xc08628082367d4c0,0xbe1cf215a7fb513a,
    0xc086280a50dcc0a8,0xbe1cf0e4401c5ed4,
    0xc086280c7dba1910,0xbe1cf04ec734d256,
    0xc086280eaa003050,0xbe1cf010ad787fea,
    0xc0862810d5af5880,0xbe1cee622478393d,
    0xc086281300c7e368,0xbe1cf01c7482564f,
    0xc08628152b4a22a0,0xbe1cf0de20d33536,
    0xc086281755366778,0xbe1cef2edae5837d,
    0xc08628197e8d02f0,0xbe1cf0a345318cc9,
    0xc086281ba74e45d8,0xbe1cf20085aa34b8,
    0xc086281dcf7a80c0,0xbe1cef5fa845ad83,
    0xc086281ff71203e0,0xbe1cf050d1df69c4,
    0xc08628221e151f48,0xbe1ceffe43c035b9,
    0xc0862824448422b8,0xbe1cf14f3018d3c2,
    0xc08628266a5f5dc0,0xbe1cef0a5fbae83d,
    0xc08628288fa71f98,0xbe1ceff8a95b72a1,
    0xc086282ab45bb750,0xbe1cef073aa9849b,
    0xc086282cd87d73a8,0xbe1cef69b3835c02,
    0xc086282efc0ca328,0xbe1cf0bc139379a9,
    0xc08628311f099420,0xbe1cef247a9ec596,
    0xc086283341749490,0xbe1cef74bbcc488a,
    0xc0862835634df248,0xbe1cef4bc42e7b8e,
    0xc08628378495fad0,0xbe1cf136d4d5a810,
    0xc0862839a54cfb80,0xbe1cf0d290b24dd8,
    0xc086283bc5734168,0xbe1ceeebde8e0065,
    0xc086283de5091950,0xbe1cf1a09f60aa1e,
    0xc0862840040ecfe0,0xbe1cf0803947a234,
    0xc08628422284b168,0xbe1cf0abf7638127,
    0xc0862844406b0a08,0xbe1cf0f73ee12058,
    0xc08628465dc225a0,0xbe1cf2079971b26c,
    0xc08628487a8a4fe0,0xbe1cee74957564b1,
    0xc086284a96c3d420,0xbe1ceee77c1b7d43,
    0xc086284cb26efd90,0xbe1cf23addba6e09,
    0xc086284ecd8c1730,0xbe1cf199f4a1da60,
    0xc0862850e81b6bb0,0xbe1cf09fdea81393,
    0xc0862853021d4588,0xbe1cf176adb417f7,
    0xc08628551b91ef00,0xbe1cf0f64f84a8da,
    0xc08628573479b220,0xbe1ceec34cf49523,
    0xc08628594cd4d8a8,0xbe1cf16d60fbe0bb,
    0xc086285b64a3ac40,0xbe1cee8de7acfc7b,
    0xc086285d7be67630,0xbe1ceee6256cce8d,
    0xc086285f929d7fa0,0xbe1cee7d66a3d8a5,
    0xc0862861a8c91170,0xbe1cf0bef8265792,
    0xc0862863be697458,0xbe1cf097f890c6f8,
    0xc0862865d37ef0c8,0xbe1cf09502d5c3fc,
    0xc0862867e809cf00,0xbe1ceeffb239dac7,
    0xc0862869fc0a56f8,0xbe1cf1fbfff95c98,
    0xc086286c0f80d090,0xbe1cefa57ad3eef7,
    0xc086286e226d8348,0xbe1cf22c58b9183d,
    0xc086287034d0b690,0xbe1ceff262d0a248,
    0xc086287246aab180,0xbe1cefa7bc194186,
    0xc086287457fbbb08,0xbe1cf06782d784d9,
    0xc086287668c419e0,0xbe1cf1d44d0eaa07,
    0xc086287879041490,0xbe1cf034803c8a48,
    0xc086287a88bbf158,0xbe1cf08e84916b6f,
    0xc086287c97ebf650,0xbe1cf0c4d3dc1bc7,
    0xc086287ea6946958,0xbe1cefb1e4625943,
    0xc0862880b4b59010,0xbe1cf143efdd1fd0,
    0xc0862882c24faff8,0xbe1cee9896d016da,
    0xc0862884cf630e38,0xbe1cf2186072f2cc,
    0xc0862886dbefeff0,0xbe1cef9217633d34,
    0xc0862888e7f699e0,0xbe1cf05603549486,
    0xc086288af37750b0,0xbe1cef50fff513d3,
    0xc086288cfe7258c0,0xbe1cf127713b32d0,
    0xc086288f08e7f650,0xbe1cf05015520f3d,
    0xc086289112d86d58,0xbe1cf12eb458b26f,
    0xc08628931c4401a8,0xbe1cf22eae2887ed,
    0xc0862895252af6e0,0xbe1cefdd6656dd2d,
    0xc08628972d8d9058,0xbe1cf1048ea4e646,
    0xc0862899356c1150,0xbe1ceec4501167e9,
    0xc086289b3cc6bcb8,0xbe1cf0ad52becc3f,
    0xc086289d439dd568,0xbe1cf0daa4e00e35,
    0xc086289f49f19df8,0xbe1cf00b80de8d6a,
    0xc08628a14fc258c8,0xbe1cf1bcf2ea8464,
    0xc08628a355104818,0xbe1cf0435e2782b0,
    0xc08628a559dbade0,0xbe1cf0e3e1a5f56c,
    0xc08628a75e24cbf8,0xbe1cefed9d5a721d,
    0xc08628a961ebe3f8,0xbe1cf0d2d74321e2,
    0xc08628ab65313750,0xbe1cf24200eb55e9,
    0xc08628ad67f50740,0xbe1cf23e9d7cf979,
    0xc08628af6a3794d0,0xbe1cf23a088f421c,
    0xc08628b16bf920e0,0xbe1cef2c1de1ab32,
    0xc08628b36d39ec08,0xbe1cf1abc231f7b2,
    0xc08628b56dfa36d0,0xbe1cf2074d5ba303,
    0xc08628b76e3a4180,0xbe1cf05cd5eed880,
    0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,
    0x8000000000000000,0xbf5ff802a9ab10e6,
    0xbf6ff00aa2b10bc0,0xbf77ee11ebd82e94,
    0xbf7fe02a6b106789,0xbf83e7295d25a7d9,
    0xbf87dc475f810a77,0xbf8bcf712c74384c,
    0xbf8fc0a8b0fc03e4,0xbf91d7f7eb9eebe7,
    0xbf93cea44346a575,0xbf95c45a51b8d389,
    0xbf97b91b07d5b11b,0xbf99ace7551cc514,
    0xbf9b9fc027af9198,0xbf9d91a66c543cc4,
    0xbf9f829b0e783300,0xbfa0b94f7c196176,
    0xbfa1b0d98923d980,0xbfa2a7ec2214e873,
    0xbfa39e87b9febd60,0xbfa494acc34d911c,
    0xbfa58a5bafc8e4d5,0xbfa67f94f094bd98,
    0xbfa77458f632dcfc,0xbfa868a83083f6cf,
    0xbfa95c830ec8e3eb,0xbfaa4fe9ffa3d235,
    0xbfab42dd711971bf,0xbfac355dd0921f2d,
    0xbfad276b8adb0b52,0xbfae19070c276016,
    0xbfaf0a30c01162a6,0xbfaffae9119b9303,
    0xbfb075983598e471,0xbfb0ed839b5526fe,
    0xbfb16536eea37ae1,0xbfb1dcb263db1944,
    0xbfb253f62f0a1417,0xbfb2cb0283f5de1f,
    0xbfb341d7961bd1d1,0xbfb3b87598b1b6ee,
    0xbfb42edcbea646f0,0xbfb4a50d3aa1b040,
    0xbfb51b073f06183f,0xbfb590cafdf01c28,
    0xbfb60658a93750c4,0xbfb67bb0726ec0fc,
    0xbfb6f0d28ae56b4c,0xbfb765bf23a6be13,
    0xbfb7da766d7b12cd,0xbfb84ef898e8282a,
    0xbfb8c345d6319b21,0xbfb9375e55595ede,
    0xbfb9ab42462033ad,0xbfba1ef1d8061cd4,
    0xbfba926d3a4ad563,0xbfbb05b49bee43fe,
    0xbfbb78c82bb0eda1,0xbfbbeba818146765,
    0xbfbc5e548f5bc743,0xbfbcd0cdbf8c13e1,
    0xbfbd4313d66cb35d,0xbfbdb5270187d927,
    0xbfbe27076e2af2e6,0xbfbe98b549671467,
    0xbfbf0a30c01162a6,0xbfbf7b79fec37ddf,
    0xbfbfec9131dbeabb,0xbfc02ebb42bf3d4b,
    0xbfc0671512ca596e,0xbfc09f561ee719c3,
    0xbfc0d77e7cd08e59,0xbfc10f8e422539b1,
    0xbfc14785846742ac,0xbfc17f6458fca611,
    0xbfc1b72ad52f67a0,0xbfc1eed90e2dc2c3,
    0xbfc2266f190a5acb,0xbfc25ded0abc6ad2,
    0xbfc29552f81ff523,0xbfc2cca0f5f5f251,
    0xbfc303d718e47fd3,0xbfc33af575770e4f,
    0xbfc371fc201e8f74,0xbfc3a8eb2d31a376,
    0xbfc3dfc2b0ecc62a,0xbfc41682bf727bc0,
    0xbfc44d2b6ccb7d1e,0xbfc483bccce6e3dd,
    0xbfc4ba36f39a55e5,0xbfc4f099f4a230b2,
    0xbfc526e5e3a1b438,0xbfc55d1ad4232d6f,
    0xbfc59338d9982086,0xbfc5c940075972b9,
    0xbfc5ff3070a793d4,0xbfc6350a28aaa758,
    0xbfc66acd4272ad51,0xbfc6a079d0f7aad2,
    0xbfc6d60fe719d21d,0xbfc70b8f97a1aa75,
    0xbfc740f8f54037a5,0xbfc7764c128f2127,
    0xbfc7ab890210d909,0xbfc7e0afd630c274,
    0xbfc815c0a14357eb,0xbfc84abb75865139,
    0xbfc87fa06520c911,0xbfc8b46f8223625b,
    0xbfc8e928de886d41,0xbfc91dcc8c340bde,
    0xbfc9525a9cf456b4,0xbfc986d3228180ca,
    0xbfc9bb362e7dfb83,0xbfc9ef83d2769a34,
    0xbfca23bc1fe2b563,0xbfca57df28244dcd,
    0xbfca8becfc882f19,0xbfcabfe5ae46124c,
    0xbfcaf3c94e80bff3,0xbfcb2797ee46320c,
    0xbfcb5b519e8fb5a4,0xbfcb8ef670420c3b,
    0xbfcbc286742d8cd6,0xbfcbf601bb0e44e2,
    0xbfcc2968558c18c1,0xbfcc5cba543ae425,
    0xbfcc8ff7c79a9a22,0xbfccc320c0176502,
    0xbfccf6354e09c5dc,0xbfcd293581b6b3e7,
    0xbfcd5c216b4fbb91,0xbfcd8ef91af31d5e,
    0xbfcdc1bca0abec7d,0xbfcdf46c0c722d2f,
    0xbfce27076e2af2e6,0xbfce598ed5a87e2f,
    0xbfce8c0252aa5a60,0xbfcebe61f4dd7b0b,
    0xbfcef0adcbdc5936,0xbfcf22e5e72f105d,
    0xbfcf550a564b7b37,0xbfcf871b28955045,
    0xbfcfb9186d5e3e2b,0xbfcfeb0233e607cc,
    0xbfd00e6c45ad501d,0xbfd0274dc16c232f,
    0xbfd0402594b4d041,0xbfd058f3c703ebc6,
    0xbfd071b85fcd590d,0xbfd08a73667c57af,
    0xbfd0a324e27390e3,0xbfd0bbccdb0d24bd,
    0xbfd0d46b579ab74b,0xbfd0ed005f657da4,
    0xbfd1058bf9ae4ad5,0xbfd11e0e2dad9cb7,
    0xbfd136870293a8b0,0xbfd14ef67f88685a,
    0xbfd1675cababa60e,0xbfd17fb98e15095d,
    0xbfd1980d2dd4236f,0xbfd1b05791f07b49,
    0xbfd1c898c16999fb,0xbfd1e0d0c33716be,
    0xbfd1f8ff9e48a2f3,0xbfd211255986160c,
    0xbfd22941fbcf7966,0xbfd241558bfd1404,
    0xbfd2596010df763a,0xbfd27161913f853d,
    0xbfd2895a13de86a3,0xbfd2a1499f762bc9,
    0xbfd2b9303ab89d25,0xbfd2d10dec508583,
    0xbfd2e8e2bae11d31,0xbfd300aead06350c,
    0xbfd31871c9544185,0xbfd3302c16586588,
    0xbfd347dd9a987d55,0xbfd35f865c93293e,
    0xbfd3772662bfd85b,0xbfd38ebdb38ed321,
    0xbfd3a64c556945ea,0xbfd3bdd24eb14b6a,
    0xbfd3d54fa5c1f710,0xbfd3ecc460ef5f50,
    0xbfd404308686a7e4,0xbfd41b941cce0bee,
    0xbfd432ef2a04e814,0xbfd44a41b463c47c,
    0xbfd4618bc21c5ec2,0xbfd478cd5959b3d9,
    0xbfd49006804009d1,0xbfd4a7373cecf997,
    0xbfd4be5f957778a1,0xbfd4d57f8fefe27f,
    0xbfd4ec973260026a,0xbfd503a682cb1cb3,
    0xbfd51aad872df82d,0xbfd531ac457ee77e,
    0xbfd548a2c3add263,0xbfd55f9107a43ee2,
    0xbfd5767717455a6c,0xbfd58d54f86e02f2,
    0xbfd5a42ab0f4cfe2,0xbfd5baf846aa1b19,
    0xbfd5d1bdbf5809ca,0xbfd5e87b20c2954a,
    0xbfd5ff3070a793d4,0xbfd615ddb4bec13c,
    0xbfd62c82f2b9c795,0x3fd61965cdb02c1f,
    0x3fd602d08af091ec,0x3fd5ec433d5c35ae,
    0x3fd5d5bddf595f30,0x3fd5bf406b543db2,
    0x3fd5a8cadbbedfa1,0x3fd5925d2b112a59,
    0x3fd57bf753c8d1fb,0x3fd565995069514c,
    0x3fd54f431b7be1a9,0x3fd538f4af8f72fe,
    0x3fd522ae0738a3d8,0x3fd50c6f1d11b97c,
    0x3fd4f637ebba9810,0x3fd4e0086dd8baca,
    0x3fd4c9e09e172c3c,0x3fd4b3c077267e9a,
    0x3fd49da7f3bcc41f,0x3fd487970e958770,
    0x3fd4718dc271c41b,0x3fd45b8c0a17df13,
    0x3fd44591e0539f49,0x3fd42f9f3ff62642,
    0x3fd419b423d5e8c7,0x3fd403d086cea79c,
    0x3fd3edf463c1683e,0x3fd3d81fb5946dba,
    0x3fd3c25277333184,0x3fd3ac8ca38e5c5f,
    0x3fd396ce359bbf54,0x3fd3811728564cb2,
    0x3fd36b6776be1117,0x3fd355bf1bd82c8b,
    0x3fd3401e12aecba1,0x3fd32a84565120a8,
    0x3fd314f1e1d35ce4,0x3fd2ff66b04ea9d4,
    0x3fd2e9e2bce12286,0x3fd2d46602adccee,
    0x3fd2bef07cdc9354,0x3fd2a982269a3dbf,
    0x3fd2941afb186b7c,0x3fd27ebaf58d8c9d,
    0x3fd269621134db92,0x3fd25410494e56c7,
    0x3fd23ec5991eba49,0x3fd22981fbef797b,
    0x3fd214456d0eb8d4,0x3fd1ff0fe7cf47a7,
    0x3fd1e9e1678899f4,0x3fd1d4b9e796c245,
    0x3fd1bf99635a6b95,0x3fd1aa7fd638d33f,
    0x3fd1956d3b9bc2fa,0x3fd180618ef18adf,
    0x3fd16b5ccbacfb73,0x3fd1565eed455fc3,
    0x3fd14167ef367783,0x3fd12c77cd00713b,
    0x3fd1178e8227e47c,0x3fd102ac0a35cc1c,
    0x3fd0edd060b78081,0x3fd0d8fb813eb1ef,
    0x3fd0c42d676162e3,0x3fd0af660eb9e279,
    0x3fd09aa572e6c6d4,0x3fd085eb8f8ae797,
    0x3fd07138604d5862,0x3fd05c8be0d9635a,
    0x3fd047e60cde83b8,0x3fd03346e0106062,
    0x3fd01eae5626c691,0x3fd00a1c6adda473,
    0x3fcfeb2233ea07cd,0x3fcfc218be620a5e,
    0x3fcf991c6cb3b379,0x3fcf702d36777df0,
    0x3fcf474b134df229,0x3fcf1e75fadf9bde,
    0x3fcef5ade4dcffe6,0x3fceccf2c8fe920a,
    0x3fcea4449f04aaf5,0x3fce7ba35eb77e2a,
    0x3fce530effe71012,0x3fce2a877a6b2c12,
    0x3fce020cc6235ab5,0x3fcdd99edaf6d7e9,
    0x3fcdb13db0d48940,0x3fcd88e93fb2f450,
    0x3fcd60a17f903515,0x3fcd38666871f465,
    0x3fcd1037f2655e7b,0x3fcce816157f1988,
    0x3fccc000c9db3c52,0x3fcc97f8079d44ec,
    0x3fcc6ffbc6f00f71,0x3fcc480c0005ccd1,
    0x3fcc2028ab17f9b4,0x3fcbf851c067555f,
    0x3fcbd087383bd8ad,0x3fcba8c90ae4ad19,
    0x3fcb811730b823d2,0x3fcb5971a213acdb,
    0x3fcb31d8575bce3d,0x3fcb0a4b48fc1b46,
    0x3fcae2ca6f672bd4,0x3fcabb55c31693ad,
    0x3fca93ed3c8ad9e3,0x3fca6c90d44b704e,
    0x3fca454082e6ab05,0x3fca1dfc40f1b7f1,
    0x3fc9f6c407089664,0x3fc9cf97cdce0ec3,
    0x3fc9a8778debaa38,0x3fc981634011aa75,
    0x3fc95a5adcf7017f,0x3fc9335e5d594989,
    0x3fc90c6db9fcbcd9,0x3fc8e588ebac2dbf,
    0x3fc8beafeb38fe8c,0x3fc897e2b17b19a5,
    0x3fc871213750e994,0x3fc84a6b759f512f,
    0x3fc823c16551a3c2,0x3fc7fd22ff599d4f,
    0x3fc7d6903caf5ad0,0x3fc7b0091651528c,
    0x3fc7898d85444c73,0x3fc7631d82935a86,
    0x3fc73cb9074fd14d,0x3fc716600c914054,
    0x3fc6f0128b756abc,0x3fc6c9d07d203fc7,
    0x3fc6a399dabbd383,0x3fc67d6e9d785771,
    0x3fc6574ebe8c133a,0x3fc6313a37335d76,
    0x3fc60b3100b09476,0x3fc5e533144c1719,
    0x3fc5bf406b543db2,0x3fc59958ff1d52f1,
    0x3fc5737cc9018cdd,0x3fc54dabc26105d2,
    0x3fc527e5e4a1b58d,0x3fc5022b292f6a45,
    0x3fc4dc7b897bc1c8,0x3fc4b6d6fefe22a4,
    0x3fc4913d8333b561,0x3fc46baf0f9f5db7,
    0x3fc4462b9dc9b3dc,0x3fc420b32740fdd4,
    0x3fc3fb45a59928cc,0x3fc3d5e3126bc27f,
    0x3fc3b08b6757f2a9,0x3fc38b3e9e027479,
    0x3fc365fcb0159016,0x3fc340c59741142e,
    0x3fc31b994d3a4f85,0x3fc2f677cbbc0a96,
    0x3fc2d1610c86813a,0x3fc2ac55095f5c59,
    0x3fc28753bc11aba5,0x3fc2625d1e6ddf57,
    0x3fc23d712a49c202,0x3fc2188fd9807263,
    0x3fc1f3b925f25d41,0x3fc1ceed09853752,
    0x3fc1aa2b7e23f72a,0x3fc185747dbecf34,
    0x3fc160c8024b27b1,0x3fc13c2605c398c3,
    0x3fc1178e8227e47c,0x3fc0f301717cf0fb,
    0x3fc0ce7ecdccc28d,0x3fc0aa06912675d5,
    0x3fc08598b59e3a07,0x3fc06135354d4b18,
    0x3fc03cdc0a51ec0d,0x3fc0188d2ecf6140,
    0x3fbfe89139dbd566,0x3fbfa01c9db57ce2,
    0x3fbf57bc7d9005db,0x3fbf0f70cdd992e3,
    0x3fbec739830a1120,0x3fbe7f1691a32d3e,
    0x3fbe3707ee30487b,0x3fbdef0d8d466db9,
    0x3fbda727638446a2,0x3fbd5f55659210e2,
    0x3fbd179788219364,0x3fbccfedbfee13a8,
    0x3fbc885801bc4b23,0x3fbc40d6425a5cb1,
    0x3fbbf968769fca11,0x3fbbb20e936d6974,
    0x3fbb6ac88dad5b1c,0x3fbb23965a52ff00,
    0x3fbadc77ee5aea8c,0x3fba956d3ecade63,
    0x3fba4e7640b1bc38,0x3fba0792e9277cac,
    0x3fb9c0c32d4d2548,0x3fb97a07024cbe74,
    0x3fb9335e5d594989,0x3fb8ecc933aeb6e8,
    0x3fb8a6477a91dc29,0x3fb85fd927506a48,
    0x3fb8197e2f40e3f0,0x3fb7d33687c293c9,
    0x3fb78d02263d82d3,0x3fb746e100226ed9,
    0x3fb700d30aeac0e1,0x3fb6bad83c1883b6,
    0x3fb674f089365a7a,0x3fb62f1be7d77743,
    0x3fb5e95a4d9791cb,0x3fb5a3abb01ade25,
    0x3fb55e10050e0384,0x3fb518874226130a,
    0x3fb4d3115d207eac,0x3fb48dae4bc31018,
    0x3fb4485e03dbdfad,0x3fb403207b414b7f,
    0x3fb3bdf5a7d1ee64,0x3fb378dd7f749714,
    0x3fb333d7f8183f4b,0x3fb2eee507b40301,
    0x3fb2aa04a44717a5,0x3fb26536c3d8c369,
    0x3fb2207b5c78549e,0x3fb1dbd2643d190b,
    0x3fb1973bd1465567,0x3fb152b799bb3cc9,
    0x3fb10e45b3cae831,0x3fb0c9e615ac4e17,
    0x3fb08598b59e3a07,0x3fb0415d89e74444,
    0x3faffa6911ab9301,0x3faf723b517fc523,
    0x3faeea31c006b87c,0x3fae624c4a0b5e1b,
    0x3fadda8adc67ee4e,0x3fad52ed6405d86f,
    0x3faccb73cdddb2cc,0x3fac441e06f72a9e,
    0x3fabbcebfc68f420,0x3fab35dd9b58baad,
    0x3faaaef2d0fb10fc,0x3faa282b8a936171,
    0x3fa9a187b573de7c,0x3fa91b073efd7314,
    0x3fa894aa149fb343,0x3fa80e7023d8ccc4,
    0x3fa788595a3577ba,0x3fa70265a550e777,
    0x3fa67c94f2d4bb58,0x3fa5f6e73078efb8,
    0x3fa5715c4c03ceef,0x3fa4ebf43349e26f,
    0x3fa466aed42de3ea,0x3fa3e18c1ca0ae92,
    0x3fa35c8bfaa1306b,0x3fa2d7ae5c3c5bae,
    0x3fa252f32f8d183f,0x3fa1ce5a62bc353a,
    0x3fa149e3e4005a8d,0x3fa0c58fa19dfaaa,
    0x3fa0415d89e74444,0x3f9f7a9b16782856,
    0x3f9e72bf2813ce51,0x3f9d6b2725979802,
    0x3f9c63d2ec14aaf2,0x3f9b5cc258b718e6,
    0x3f9a55f548c5c43f,0x3f994f6b99a24475,
    0x3f98492528c8cabf,0x3f974321d3d006d3,
    0x3f963d6178690bd6,0x3f9537e3f45f3565,
    0x3f9432a925980cc1,0x3f932db0ea132e22,
    0x3f9228fb1fea2e28,0x3f912487a5507f70,
    0x3f90205658935847,0x3f8e38ce3033310c,
    0x3f8c317384c75f06,0x3f8a2a9c6c170462,
    0x3f882448a388a2aa,0x3f861e77e8b53fc6,
    0x3f841929f96832f0,0x3f82145e939ef1e9,
    0x3f8010157588de71,0x3f7c189cbb0e27fb,
    0x3f78121214586b54,0x3f740c8a747878e2,
    0x3f70080559588b35,0x3f680904828985c0,
    0x3f60040155d5889e,0x3f50020055655889,
    0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000
};


//log2
static const double __log2f_tab[][2] = {
        { 0x1.661ec79f8f3bep+0, -0x1.efec65b963019p-2 },
        { 0x1.571ed4aaf883dp+0, -0x1.b0b6832d4fca4p-2 },
        { 0x1.49539f0f010bp+0, -0x1.7418b0a1fb77bp-2 },
        { 0x1.3c995b0b80385p+0, -0x1.39de91a6dcf7bp-2 },
        { 0x1.30d190c8864a5p+0, -0x1.01d9bf3f2b631p-2 },
        { 0x1.25e227b0b8eap+0, -0x1.97c1d1b3b7afp-3 },
        { 0x1.1bb4a4a1a343fp+0, -0x1.2f9e393af3c9fp-3 },
        { 0x1.12358f08ae5bap+0, -0x1.960cbbf788d5cp-4 },
        { 0x1.0953f419900a7p+0, -0x1.a6f9db6475fcep-5 },
        { 0x1p+0, 0x0p+0 },
        { 0x1.e608cfd9a47acp-1, 0x1.338ca9f24f53dp-4 },
        { 0x1.ca4b31f026aap-1, 0x1.476a9543891bap-3 },
        { 0x1.b2036576afce6p-1, 0x1.e840b4ac4e4d2p-3 },
        { 0x1.9c2d163a1aa2dp-1, 0x1.40645f0c6651cp-2 },
        { 0x1.886e6037841edp-1, 0x1.88e9c2c1b9ff8p-2 },
        { 0x1.767dcf5534862p-1, 0x1.ce0a44eb17bccp-2 },
    };

static const double __log2f_poly[4] = 
    {-0x1.712b6f70a7e4dp-2, 0x1.ecabf496832ep-2, -0x1.715479ffae3dep-1, 0x1.715475f35c8b8p0};

static const double __acos_data[12] = {
    0.032143616007816851, -0.016582846167623556, 0.019772600367158048, 0.006431771759956202,
    0.012193412839768863, 0.013881175183171264, 0.017360165087820061, 0.022371723076271322,
    0.030381960865917483, 0.044642856775805428, 0.075000000004254969, 0.16666666666664731
};


// add by me common function

typedef union 
{
    int i;
    unsigned int u;
    float f;
}llvm_32suf;

typedef union
{
    long i;
    unsigned long u;
    double f;
    struct
    {
        unsigned int lsw;
        unsigned int msw;
    } u32s;
    struct
    {
        unsigned int manl : 32;
        unsigned int manh : 20;
        unsigned int exp : 11;
        unsigned int sign : 1;
    } bits;
}llvm_64suf;

typedef union 
{
    struct{
        int p3;
        int p2;
        int p1;
        int p0;
    } s32s;
    struct{
        unsigned int p3;
        unsigned int p2;
        unsigned int p1;
        unsigned int p0;
    } u32s;
    struct
    {
        unsigned long p1;
        unsigned long p0;
    } u64s;
    struct{
        unsigned int mantissa3:32;
        unsigned int mantissa2:32;
        unsigned int mantissa1:32;
        unsigned int mantissa0:16;
        unsigned int exponent:15;
        unsigned int negative:1;
    }ieee;
    struct
    {
        uint64_t manl : 64;
        uint64_t manh : 48;
        unsigned int exp : 15;
        unsigned int sign : 1;
    } bits;
    struct
    {
        uint64_t manl : 64;
        uint64_t manh : 48;
        unsigned int expsign : 16;
    } xbits;
    long double f;
}llvm_128suf;

// for log
template<class Abi>
static inline ldoublev<Abi> neval(ldoublev<Abi> x, const long double *p, int n)
{
    ldoublev<Abi> y;

    p += (n);
    y = *p--;
    do
    {
        y = y * x + *p--;
    } while ((--n > 0));
    return y;
}

template<class Abi>
static inline ldoublev<Abi> deval(ldoublev<Abi> x, const long double *p, int n)
{
    ldoublev<Abi> y;

    p += (n);
    y = x + *p--;
    do
    {
        y = y * x + *p--;
    } while ((--n > 0));

    return y;
}



template<class Abi>
uintv<Abi> GET_LONGDOUBLE_U32_MID_HI(uint128v<Abi> in)
{
  return static_simd_cast<uintv<Abi>>((in >> 64) & 0xffffffffULL);
}

template<class Abi>
uintv<Abi> GET_LONGDOUBLE_U32_MID_LO(uint128v<Abi> in)
{
  return static_simd_cast<uintv<Abi>>((in >> 32) & 0xffffffffULL);
}

template<class Abi>
uintv<Abi> GET_LONGDOUBLE_U32_HI(uint128v<Abi> in)
{
  return static_simd_cast<uintv<Abi>>((in >> 96) & 0xffffffffULL);
}

template<class Abi>
uintv<Abi> GET_LONGDOUBLE_U32_LO(uint128v<Abi> in)
{
  return static_simd_cast<uintv<Abi>>((in) & 0xffffffffULL);
}

template<class Abi>
ushortv<Abi> GET_LONGDOUBLE_TOP(uint128v<Abi> in)
{
  return static_simd_cast<ushortv<Abi>>((in >> 98) & 0xffffULL);
}


template<typename Abi>
uintv<Abi> GET_DOUBLE_MANH(ulongv<Abi> tmp)
{
  return static_simd_cast<uintv<Abi>>((tmp & 0x0fffffU));
}

template<typename Abi>
uintv<Abi> GET_DOUBLE_EXP(ulongv<Abi> tmp)
{
  return static_simd_cast<uintv<Abi>>((tmp & 0x7ff00000));
}

template<typename Abi>
uintv<Abi> GET_DOUBLE_SIGN(ulongv<Abi> tmp)
{
  return static_simd_cast<uintv<Abi>>((tmp >> 31));
}


#define GET_LDOUBLE_WORDS64(ix0, ix1, d) \
    do                                   \
    {                                    \
        llvm_128suf qw_u;                \
        qw_u.f = (d);                    \
        (ix0) = qw_u.u64s.p0;            \
        (ix1) = qw_u.u64s.p1;            \
    } while (0)

#define SET_LDOUBLE_WORDS64(d, ix0, ix1) \
    do                                   \
    {                                    \
        llvm_128suf qw_u;                \
        qw_u.u64s.p0 = (ix0);            \
        qw_u.u64s.p1 = (ix1);            \
        (d) = qw_u.f;                    \
    } while (0)

#define GET_LDOUBLE_MSW64(v, d) \
    do                          \
    {                           \
        llvm_128suf sh_u;       \
        sh_u.f = (d);           \
        (v) = sh_u.u64s.p0;     \
    } while (0)

#define SET_LDOUBLE_MSW64(d, v) \
    do                          \
    {                           \
        llvm_128suf sh_u;       \
        sh_u.f = (d);           \
        sh_u.u64s.p0 = (v);     \
        (d) = sh_u.f;           \
    } while (0)

#define GET_LDOUBLE_LSW64(v, d) \
    do                          \
    {                           \
        llvm_128suf sh_u;       \
        sh_u.f = (d);           \
        (v) = sh_u.u64s.p1;     \
    } while (0)

#define GET_HIGH_WORD(i, d)  \
    do                       \
    {                        \
        llvm_64suf gh_u;     \
        gh_u.f = (d);        \
        (i) = gh_u.u32s.msw; \
    } while (0)

#define SET_HIGH_WORD(d, v)  \
    do                       \
    {                        \
        llvm_64suf sh_u;     \
        sh_u.f = (d);        \
        sh_u.u32s.msw = (v); \
        (d) = sh_u.f;        \
    } while (0)

#define EXTRACT_WORDS(ix0, ix1, d) \
    do                             \
    {                              \
        llvm_64suf ew_u;           \
        ew_u.f = (d);              \
        (ix0) = ew_u.u32s.msw;     \
        (ix1) = ew_u.u32s.lsw;     \
    } while (0)

#define INSERT_WORDS(d, ix0, ix1) \
    do                            \
    {                             \
        llvm_64suf iw_u;          \
        iw_u.u32s.msw = (ix0);    \
        iw_u.u32s.lsw = (ix1);    \
        (d) = iw_u.f;             \
    } while (0)


// #define GET_FLOAT_WORD(i, d)        \
//     do                              \
//     {                               \
//         llvm_32suf gf_u; 			\
//         gf_u.f = (d);           	\
//         (i) = gf_u.u;            	\
//     } while (0)

/* Set a float from a 32 bit int.  */

// #define SET_FLOAT_WORD(d, i)        \
//     do                              \
//     {                               \
//         llvm_32suf sf_u; 			\
//         sf_u.u = (i);            	\
//         (d) = sf_u.f;           	\
//     } while (0)




double llvm_copysign(double x, double y)
{
    uint32_t hx, hy;
    GET_HIGH_WORD(hx, x);
    GET_HIGH_WORD(hy, y);
    SET_HIGH_WORD(x, (hx & 0x7fffffff) | (hy & 0x80000000));
    return x;
}

double llvm_scalbn(double x, int n)
{
    static const double two54 = 1.80143985094819840000e+16;  /* 0x43500000, 0x00000000 */
    static const double twom54 = 5.55111512312578270212e-17; /* 0x3C900000, 0x00000000 */
    static const double huge = 1.0e+300;
    static const double tiny = 1.0e-300;
    int32_t k, hx, lx;
    EXTRACT_WORDS(hx, lx, x);
    k = (hx & 0x7ff00000) >> 20; /* extract exponent */
    if (k == 0)
    { /* 0 or subnormal x */
        if ((lx | (hx & 0x7fffffff)) == 0)
            return x; /* +-0 */
        x *= two54;
        GET_HIGH_WORD(hx, x);
        k = ((hx & 0x7ff00000) >> 20) - 54;
        if (n < -50000)
            return tiny * x; /*underflow*/
    }
    if (k == 0x7ff)
        return x + x; /* NaN or Inf */
    k = k + n;
    if (k > 0x7fe)
        return huge * llvm_copysign(huge, x); /* overflow  */
    if (k > 0)                               /* normal result */
    {
        SET_HIGH_WORD(x, (hx & 0x800fffff) | (k << 20));
        return x;
    }
    if (k <= -54)
    {
        if (n > 50000)                           /* in case integer overflow in n+k */
            return huge * llvm_copysign(huge, x); /*overflow*/
        else
            return tiny * llvm_copysign(tiny, x); /*underflow*/
    }
    k += 54; /* subnormal result */
    SET_HIGH_WORD(x, (hx & 0x800fffff) | (k << 20));
    return x * twom54;
}

double llvm_floor(double x)
{
    static const double huge = 1.0e300;
    int32_t i0, i1, j0;
    uint32_t i, j;
    EXTRACT_WORDS(i0, i1, x);
    j0 = ((i0 >> 20) & 0x7ff) - 0x3ff;
    if (j0 < 20)
    {
        if (j0 < 0)
        { /* raise inexact if x != 0 */
            if (huge + x > 0.0)
            { /* return 0*sign(x) if |x|<1 */
                if (i0 >= 0)
                {
                    i0 = i1 = 0;
                }
                else if (((i0 & 0x7fffffff) | i1) != 0)
                {
                    i0 = 0xbff00000;
                    i1 = 0;
                }
            }
        }
        else
        {
            i = (0x000fffff) >> j0;
            if (((i0 & i) | i1) == 0)
                return x; /* x is integral */
            if (huge + x > 0.0)
            { /* raise inexact flag */
                if (i0 < 0)
                    i0 += (0x00100000) >> j0;
                i0 &= (~i);
                i1 = 0;
            }
        }
    }
    else if (j0 > 51)
    {
        if (j0 == 0x400)
            return x + x; /* inf or NaN */
        else
            return x; /* x is integral */
    }
    else
    {
        i = ((uint32_t)(0xffffffff)) >> (j0 - 20);
        if ((i1 & i) == 0)
            return x; /* x is integral */
        if (huge + x > 0.0)
        { /* raise inexact flag */
            if (i0 < 0)
            {
                if (j0 == 20)
                    i0 += 1;
                else
                {
                    j = i1 + (1 << (52 - j0));
                    if (j < (uint32_t)i1)
                        i0 += 1; /* got a carry */
                    i1 = j;
                }
            }
            i1 &= (~i);
        }
    }
    INSERT_WORDS(x, i0, i1);
    return x;
}




template <class Abi> 
floatv<Abi> scalbn(floatv<Abi> x, samesize<int, floatv<Abi>> n){
  Abi_32suf<Abi> ux, uxt;
  Abi_64suf<Abi> ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 211106232532992.0;
  ut.f = nd;
  ut.i = (ut.i >> 5) << 52;
  ut.i = ut.i + 0x3ff0000000000000;
  ux.f = x * static_simd_cast<floatv<Abi>>(ut.f);

  floatv<Abi> nf = static_simd_cast<floatv<Abi>>(n);
  auto jdt1 = (nf > 1024.f);
  auto jdt2 = (nf < -1023.f);

  where(jdt1, ux.f) = LLVM_INF_32F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffff;
  auto jd1 = uxt.u == 0x7f800000;
  auto jd2 = uxt.u == 0x0;
  auto jd3 = x == x;
  where(change_simd_mask_type<unsigned int, float, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}
template <class Abi>
doublev<Abi> scalbn(doublev<Abi> x, samesize<int, doublev<Abi>> n){
  Abi_64suf<Abi> ux, uxt, ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 52776558134271.0;
  ut.f = nd;
  ut.u = (ut.u & 0xffffff80) << 45;
  ux.f = x * (ut.f);

  doublev<Abi> nf = static_simd_cast<doublev<Abi>>(n);
  auto jdt1 = (nf > 1024.0);
  auto jdt2 = (nf < -1023.0);

  where(jdt1, ux.f) = LLVM_INF_64F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffffffffffffUL;
  auto jd1 = uxt.u == 0x7ff0000000000000UL;
  auto jd2 = uxt.u == 0x0UL;
  auto jd3 = x == x;
  where(change_simd_mask_type<unsigned long int, double, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> scalbn(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> n){
  const ldoublev<Abi> huge = 0x1p16000L;
  const ldoublev<Abi> tiny = 0x1p-16000L;

  Abi_128suf<Abi> ux, uxt;
  ldoublev<Abi> retv(1.0L);
  int128v<Abi> k, nt;
  uint128v<Abi> ext_fracl, ext_fraclm, ext_frachm, ext_frach, ext_exp;

  simd_mask<long double, Abi> jd, jdt, jdtt;
  
  ux.f = x;
  ext_fracl = ux.u & 0xffffffff;
  ext_fraclm = (ux.u >> 32) & 0xffffffff;
  ext_frachm = (ux.u >> 64) & 0xffffffff;
  ext_frach = (ux.u >> 96) & 0xffff;
  ext_exp = (ux.u >> 112) & 0x7fff;
  nt = static_simd_cast<int128v<Abi>>(n);
  k = static_simd_cast<int128v<Abi>>(ext_exp);

  jd = change_simd_mask_type<__int128_t, long double, Abi>(k==0);
  jdt = change_simd_mask_type<__uint128_t, long double, Abi>((ext_frach | ext_frachm | ext_fraclm | ext_fracl) == 0);
  where(jd && jdt, retv) = x;

  uxt.f = ux.f * 0x1p+128;
  where(change_simd_mask_type<long double, __int128_t, Abi>(jd && !jdt), k) = k - 128;

  jdtt = change_simd_mask_type<__int128_t, long double, Abi>(nt < -50000);
  where(jd && jdt && jdtt, retv) = tiny * x;

  jd = change_simd_mask_type<__int128_t, long double, Abi>(k==0x7fff);
  where(jd, retv) = x + x;

  k = k + nt;

  jd = change_simd_mask_type<__int128_t, long double, Abi>(k>=0x7fff);
  where(jd, retv) = huge * copysign(huge, x);

  jd = change_simd_mask_type<__int128_t, long double, Abi>(k>0 && k<0x7fff);
  uxt.f = SET_LONGDOUBLE_EXP(ux.f, static_simd_cast<uint128v<Abi>>(k));
  where(jd, retv) = uxt.f;

  jd = change_simd_mask_type<__int128_t, long double, Abi>(k<=-128);
  jdt = change_simd_mask_type<__int128_t, long double, Abi>(nt > 50000);
  where(jd && jdt, retv) = huge * copysign(huge, x);
  where(jd && !jdt, retv) = tiny * copysign(tiny, x);

  k += 128;
  uxt.f = SET_LONGDOUBLE_EXP(ux.f, static_simd_cast<uint128v<Abi>>(k));
  jd = change_simd_mask_type<__int128_t, long double, Abi>(k>-128 && k<0);
  where(jd, retv) = uxt.f * 0x1p-128;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> scalbn(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<samesize<int, doublev<Abi>>>(y);
  dst = scalbn(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi> 
floatv<Abi> scalbln(floatv<Abi> x, samesize<long int, floatv<Abi>> n){
  Abi_32suf<Abi> ux, uxt;
  Abi_64suf<Abi> ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 211106232532992.0;
  ut.f = nd;
  ut.i = (ut.i >> 5) << 52;
  ut.i = ut.i + 0x3ff0000000000000;
  ux.f = x * static_simd_cast<floatv<Abi>>(ut.f);

  floatv<Abi> nf = static_simd_cast<floatv<Abi>>(n);
  auto jdt1 = (nf > 1024.f);
  auto jdt2 = (nf < -1023.f);

  where(jdt1, ux.f) = LLVM_INF_32F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffff;
  auto jd1 = uxt.u == 0x7f800000;
  auto jd2 = uxt.u == 0x0;
  auto jd3 = x == x;
  where(change_simd_mask_type<unsigned int, float, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}
template <class Abi>
doublev<Abi> scalbln(doublev<Abi> x, samesize<long int, doublev<Abi>> n){
  Abi_64suf<Abi> ux, uxt, ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 52776558134271.0;
  ut.f = nd;
  ut.u = (ut.u & 0xffffff80) << 45;
  ux.f = x * (ut.f);

  doublev<Abi> nf = static_simd_cast<doublev<Abi>>(n);
  auto jdt1 = (nf > 1024.0);
  auto jdt2 = (nf < -1023.0);

  where(jdt1, ux.f) = LLVM_INF_64F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffffffffffffUL;
  auto jd1 = uxt.u == 0x7ff0000000000000UL;
  auto jd2 = uxt.u == 0x0UL;
  auto jd3 = x == x;
  where(change_simd_mask_type<unsigned long int, double, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> scalbln(ldoublev<Abi> x, samesize<long int, ldoublev<Abi>> n){
  samesize<int, ldoublev<Abi>> in = static_simd_cast<samesize<int, ldoublev<Abi>>>(n);
  auto jd(static_simd_cast<samesize<long int, ldoublev<Abi>>>(in) != n);
  auto jdt(n > 0);
  where(jd && jdt, in) = INT_MAX;
  where(jd && !jdt, in) = INT_MIN;
  return scalbn(x, in);
}
#else
template <class Abi> ldoublev<Abi> scalbln(ldoublev<Abi> x, samesize<long int, ldoublev<Abi>> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<samesize<long int, doublev<Abi>>>(y);
  dst = scalbln(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi> floatv<Abi> modf(floatv<Abi> x, floatv<Abi>* iptr){
  floatv<Abi> res;
  Abi_32suf<Abi> u, u1;
  
  u.f = x;
  u1.f = x;
  u1.u &= 0x80000000U;
	uintv<Abi> mask;
	intv<Abi> e = static_simd_cast<intv<Abi>>(u.u>>23 & 0xffU) - 0x7f;
	mask = 0x007fffffU >> static_simd_cast<uintv<Abi>>(e);

  auto jd1 = simd_mask<float, Abi>((u.u & mask) == 0);
  auto jd2 = simd_mask<float, Abi>(e < 0);
  auto jd3 = simd_mask<float, Abi>(e >= 23);
	u.u &= ~mask;
	*iptr = u.f;
	res = x - u.f;

  where(jd1, *iptr) = x;
  where(jd1, res) = u1.f;
  where(jd2, *iptr) = u1.f;
  where(jd2, res) = x;
  where(jd3, *iptr) = x;
  where(jd3, res) = u1.f;
  where(jd3 && isnan(x), res) = x;

  return res; 
}
template <class Abi> doublev<Abi> modf(doublev<Abi> x, doublev<Abi>* iptr){
  doublev<Abi> res;
  Abi_64suf<Abi> u, u1;
  
  u.f = x;
  u1.f = x;
  u1.u &= 1UL<<63;
	ulongv<Abi> mask;
	intv<Abi> e = static_simd_cast<intv<Abi>>(u.u>>52 & 0x7ffU) - 0x3ff;
	mask = -1UL>>12>> static_simd_cast<ulongv<Abi>>(e);

  auto jd1 = simd_mask<double, Abi>((u.u & mask) == 0);
  auto jd2 = simd_mask<double, Abi>(e < 0);
  auto jd3 = simd_mask<double, Abi>(e >= 52);
	u.u &= ~mask;
	*iptr = u.f;
	res = x - u.f;

  where(jd1, *iptr) = x;
  where(jd1, res) = u1.f;
  where(jd2, *iptr) = u1.f;
  where(jd2, res) = x;
  where(jd3, *iptr) = x;
  where(jd3, res) = u1.f;
  where(jd3 && isnan(x), res) = x;

  return res; 
}

template <class Abi> ldoublev<Abi> modf(ldoublev<Abi> x, ldoublev<Abi>* iptr){
  ldoublev<Abi> res, absx, y;
  Abi_128suf<Abi> u, u1;
  __uint128_t tmp = 0x1;
  static const long double toint = 1/LDBL_EPSILON;
  
  u.f = x;
  u1.f = x;
  u1.u &= tmp << 127;
	intv<Abi> e = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_SE(u.u))& 0x7fffU) - 0x3fff;
  auto jd0 = simd_mask<long double, Abi>((u1.u >> 127) == 0);
	where(jd0, absx) = x;
	where(!jd0, absx) = -x;
  y = absx + toint - toint - absx;  
  
  auto jd1 = simd_mask<long double, Abi>((y) == 0);
  auto jd2 = simd_mask<long double, Abi>(e < 0);
  auto jd3 = simd_mask<long double, Abi>(e >= LDBL_MANT_DIG-1);
	
	where(y>0, y) = y-1;
	where(!jd0, y) = -y;
  *iptr = x + y;
  res = -y;

  where(jd1, *iptr) = x;
  where(jd1, res) = u1.f;
  where(jd2, *iptr) = u1.f;
  where(jd2, res) = x;
  where(jd3, *iptr) = x;
  where(jd3, res) = u1.f;
  where(jd3 && isnan(x), res) = x;

  return res;
}


template <class Abi> floatv<Abi>
frexp(floatv<Abi> x, samesize<int, floatv<Abi>>* exp){
  static float two25 =  3.3554432000e+07f;
  uintv<Abi> hx,ix;
  Abi_32suf<Abi> ux;
  floatv<Abi> res;
  ux.f = x;
  hx = ux.u;
	ix = 0x7fffffffU&hx;
	*exp = 0;
  auto jd = simd_mask<uint32_t, Abi>(ix<0x00800000U);
  where(jd, x) = x * two25;
  ux.f = x;
  where(jd, hx) = ux.u;
  where(jd, ix) = hx&0x7fffffff;
  where(jd, *exp) = *exp - 25;
	*exp += static_simd_cast<samesize<int, floatv<Abi>>>(static_simd_cast<intv<Abi>>(ix>>23)-126);
	hx = (hx&0x807fffffU)|0x3f000000U;
  ux.u = hx;
	res = ux.f;
  auto jd2 = simd_mask<float, Abi>(ix>=0x7f800000||(ix==0)); 
  where(jd2, res) = x + x;
  where(jd2, *exp) = 0;

  return res;
}

template <class Abi> doublev<Abi> frexp(doublev<Abi> value, samesize<int, doublev<Abi>>* exp)
{
  doublev<Abi> result;
	Abi_64suf<Abi> ux;
  longv<Abi> ix;
  intv<Abi> ex, e;
  ux.f = value;
  ix = ux.i;
  ex = 0x7ff & static_simd_cast<intv<Abi>>(ix >> 52);
  e = 0;
  auto spc1 = (ex != 0x7ff) && simd_mask<int, Abi>(value != 0.0);
  where(spc1, e) = ex - 1022;
  auto spc1_1 = (ex == 0);
  auto spc_part1 = (spc1 & spc1_1);
  auto spc_part1_f = simd_mask<double, Abi>(spc_part1);
  where(spc_part1_f, ux.f) = value * 0x1p54;
  ix = ux.i;
  where(spc_part1, ex) = 0x7ff & static_simd_cast<intv<Abi>>(ix >> 52);
  where(spc_part1, e) = ex - 1022 - 54;
  where(simd_mask<long, Abi>(spc1), ix) = static_simd_cast<longv<Abi>>((static_simd_cast<ulongv<Abi>>(ix) & 0x800fffffffffffffUL) | 0x3fe0000000000000UL);
  ux.i = ix;
  result = value + value;
  where(simd_mask<double, Abi>(spc1), result) = ux.f;
  *exp = e;

  return result;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> frexp(ldoublev<Abi> x, samesize<int, ldoublev<Abi>>* exp)
{
  Abi_128suf<Abi> ux, result;
  ulongv<Abi> n_exp;
  ux.f = x;
  n_exp = GET_LONGDOUBLE_HI(ux.u) & 0x8000ffffffffffffUL;
  samesize<int, ldoublev<Abi>> x_exp, re_exp;
  re_exp = *exp;
  x_exp = static_simd_cast<intv<Abi>>(ux.u >> 112) & 0x7fff;
  auto spc_0 = (x_exp == 0);
  auto spc_0x7fff = (x_exp == 0x7fff);
  *exp = x_exp - 0x3ffe;
  result.u = static_simd_cast<uint128v<Abi>>(n_exp | 0x3ffe000000000000UL) << 64 | GET_LONGDOUBLE_LO(ux.u);
  where(spc_0x7fff, *exp) = re_exp;
  auto spc0_1 = simd_mask<int, Abi>((GET_LONGDOUBLE_HI(ux.u) & 0x0000ffffffffffffUL | GET_LONGDOUBLE_LO(ux.u)) == 0);
  auto switch0_1 = spc_0 & spc0_1;
  where(switch0_1, *exp) = 0;
  where(simd_mask<long double, Abi>(spc_0x7fff | switch0_1), result.f) = x;
  auto switch0_2 = spc_0 & !spc0_1;
  ux.f = x * 0x1.0p514;
  x_exp = static_simd_cast<intv<Abi>>(ux.u >> 112) & 0x7fff;
  n_exp = GET_LONGDOUBLE_HI(ux.u) & 0x8000ffffffffffffUL;
  where(switch0_2, *exp) = x_exp - 0x4200;
  where(simd_mask<__uint128_t, Abi>(switch0_2), result.u) = static_simd_cast<uint128v<Abi>>(n_exp | 0x3ffe000000000000UL) << 64 | GET_LONGDOUBLE_LO(ux.u);
  return result.f;
}
#else
template <class Abi> ldoublev<Abi> frexp(ldoublev<Abi> x, samesize<int, ldoublev<Abi>>* exp)
{
  doublev<Abi> src1, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  dst = frexp(src1, exp);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


union _float_long
{
    float f;
    long l;
};

float ldexpfff(float x, int pw2)
{
    union _float_long fl;
    long e;

    fl.f = x;

    e = (fl.l >> 23) & 0x000000ff;
    e += pw2;
    fl.l = ((e & 0xff) << 23) | (fl.l & 0x807fffff);

    return (fl.f);
}

template <class Abi>
floatv<Abi> ldexp(floatv<Abi> x, samesize<int, floatv<Abi>> n) {
  Abi_32suf<Abi> ux, uxt;
  Abi_64suf<Abi> ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 211106232532992.0;
  ut.f = nd;
  ut.i = (ut.i >> 5) << 52;
  ut.i = ut.i + 0x3ff0000000000000;
  ux.f = x * static_simd_cast<floatv<Abi>>(ut.f);

  floatv<Abi> nf = static_simd_cast<floatv<Abi>>(n);
  auto jdt1 = (nf > 1024.f);
  auto jdt2 = (nf < -1023.f);

  where(jdt1, ux.f) = LLVM_INF_32F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffff;
  auto jd1 = uxt.u == 0x7f800000;
  auto jd2 = uxt.u == 0x0;
  auto jd3 = x == x;
  where(change_simd_mask_type<unsigned int, float, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}
template <class Abi> doublev<Abi> ldexp(doublev<Abi> x, samesize<int, doublev<Abi>> n) 
{
  Abi_64suf<Abi> ux, uxt, ut;

  doublev<Abi> nd = static_simd_cast<doublev<Abi>>(n);
  nd += 52776558134271.0;
  ut.f = nd;
  ut.u = (ut.u & 0xffffff80) << 45;
  ux.f = x * (ut.f);

  doublev<Abi> nf = static_simd_cast<doublev<Abi>>(n);
  auto jdt1 = (nf > 1024.0);
  auto jdt2 = (nf < -1023.0);

  where(jdt1, ux.f) = LLVM_INF_64F;
  where(jdt2, ux.f) = 0;
  where((jdt1 || jdt2), ux.f) = -ux.f;

  uxt.f = x;
  uxt.u = uxt.u & 0x7fffffffffffffffUL;
  auto jd1 = uxt.u == 0x7ff0000000000000UL;
  auto jd2 = uxt.u == 0x0UL;
  auto jd3 = x == x;
  where(simd_mask<double, Abi>(jd1 || jd2) || !jd3, ux.f) = x;

  return ux.f;
}


template <class Abi>
floatv<Abi> floor(floatv<Abi> x) {
  intv<Abi> xi = static_simd_cast<intv<Abi>>(x);
  floatv<Abi> fx = static_simd_cast<floatv<Abi>>(xi);
  where(x<0&&fx<=0, fx) = fx-1;

  intv<Abi> j0;
  Abi_32suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((ux.u>>23)&0xff)-0x7f;
  auto jd1 = simd_mask<float, Abi>(j0 >= 23);
  where(jd1, fx) = x;
  where(jd1 && change_simd_mask_type<int, float, Abi>(j0 == 0x80), fx) = x + x;
  return fx;
  return fx;
}
template <class Abi>
doublev<Abi> floor(doublev<Abi> x) {
  longv<Abi> xi = static_simd_cast<longv<Abi>>(x);
  doublev<Abi> dx = static_simd_cast<doublev<Abi>>(xi);
  where(x<0 && dx<=0, dx) = dx-1;

  intv<Abi> j0;
  Abi_64suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((ux.u>>52)&0x7ff)-0x3ff;
  auto jd1 = simd_mask<double, Abi>(j0 >= 52);
  where(jd1, dx) = x;
  where(jd1 && change_simd_mask_type<int, double, Abi>(j0 == 0x400), dx) = x + x;
  return dx;
}

template <class Abi> 
ldoublev<Abi> floor(ldoublev<Abi> x){
  longv<Abi> xi = static_simd_cast<longv<Abi>>(x);
  ldoublev<Abi> ldx = static_simd_cast<ldoublev<Abi>>(xi);
  where(x<0&&ldx<=0, ldx) = ldx-1;

  longv<Abi> j0;
  Abi_128suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u)>>48)&0x7fff)-0x3fff;
  auto jd1 = simd_mask<long double, Abi>(j0 >= 111);
  where(jd1, ldx) = x;
  where(jd1 && change_simd_mask_type<int64_t, long double, Abi>(j0 == 0x4000), ldx) = x + x;
  return ldx;
}

template <class Abi>
floatv<Abi> ceil(floatv<Abi> x) {
  intv<Abi> xi = static_simd_cast<intv<Abi>>(x);
  floatv<Abi> fx = static_simd_cast<floatv<Abi>>(xi);
  where(x>0&&fx>=0, fx) = fx+1;

  intv<Abi> j0;
  Abi_32suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((ux.u>>23)&0xff)-0x7f;
  auto jd1 = simd_mask<float, Abi>(j0 >= 23);
  where(jd1, fx) = x;
  where(jd1 && change_simd_mask_type<int, float, Abi>(j0 == 0x80), fx) = x + x;
  return fx;
}
template <class Abi>
doublev<Abi> ceil(doublev<Abi> x) {
  longv<Abi> xi = static_simd_cast<longv<Abi>>(x);
  doublev<Abi> dx = static_simd_cast<doublev<Abi>>(xi);
  where(x>0&&dx>=0, dx) = dx+1;

  intv<Abi> j0;
  Abi_64suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((ux.u>>52)&0x7ff)-0x3ff;
  auto jd1 = simd_mask<double, Abi>(j0 >= 52);
  where(jd1, dx) = x;
  where(jd1 && change_simd_mask_type<int, double, Abi>(j0 == 0x400), dx) = x + x;
  return dx;
}

template <class Abi> 
ldoublev<Abi> ceil(ldoublev<Abi> x){
  longv<Abi> xi = static_simd_cast<longv<Abi>>(x);
  ldoublev<Abi> ldx = static_simd_cast<ldoublev<Abi>>(xi);
  where(x>0&&ldx>=0, ldx) = ldx+1;

  longv<Abi> j0;
  Abi_128suf<Abi> ux;
  ux.f = x;
  j0 = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u)>>48)&0x7fff)-0x3fff;
  auto jd1 = simd_mask<long double, Abi>(j0 >= 111);
  where(jd1, ldx) = x;
  where(jd1 && change_simd_mask_type<int64_t, long double, Abi>(j0 == 0x4000), ldx) = x + x;
  return ldx;
}

template <class Abi>
floatv<Abi> round(floatv<Abi> x) {
  x = x + ExpShift23;
  return x - ExpShift23;
}

template <class Abi>
doublev<Abi> round(doublev<Abi> x) {
  x = x + ExpShift52;
  return x - ExpShift52;
}

template <class Abi>
ldoublev<Abi> round(ldoublev<Abi> x) {
  x = x + ExpShift112;
  return x - ExpShift112;
}

template <class Abi>
floatv<Abi> sqrt(floatv<Abi> x) {
  doublev<Abi> xd = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> ux;
  ux.f = xd;
  ulongv<Abi> sign = (ux.u >> 52) & SqrtAbsMask;
  sign -= SqrtSignMask;
  ux.i = ux.i & s2v<long, longv<Abi>>(ExpMask);
  ux.i = ux.i | s2v<long, longv<Abi>>(HalfOne_N);
  auto c1=0.4173075996388649989089, c2=0.59016206709064458299663;
  ux.f = c1 + c2 * ux.f;
  where(static_simd_cast<doublev<Abi>>(sign & 1) != 0, ux.f) = ux.f * SQRT2;
  ux.f = ldexp<Abi>(ux.f, static_simd_cast<samesize<int, doublev<Abi>>>(sign >> 1) );
  ux.f = 0.5*(ux.f + xd/ux.f);
  ux.f = 0.5*(ux.f + xd/ux.f);
  ux.f = 0.5*(ux.f + xd/ux.f);
  where(static_simd_cast<doublev<Abi>>(x)<0, ux.f) = LLVM_NAN_64F;
  return static_simd_cast<floatv<Abi>>(ux.f);
}

template <class Abi>
doublev<Abi> sqrt(doublev<Abi> x) {
  Abi_64suf<Abi> ux;
  ux.f = x;
  ulongv<Abi> sign = (ux.u >> 52) & SqrtAbsMask;
  sign -= SqrtSignMask;
  ux.i = ux.i & s2v<long, longv<Abi>>(ExpMask);
  ux.i = ux.i | s2v<long, longv<Abi>>(HalfOne_N);

  auto c1=0.4173075996388649989089, c2=0.59016206709064458299663;
  ux.f = c1 + c2 * ux.f;
  where(static_simd_cast<doublev<Abi>>(sign & 1) != 0, ux.f) = ux.f * SQRT2;
  ux.f = ldexp<Abi>(ux.f, static_simd_cast<samesize<int, doublev<Abi>>>(sign >> 1) );

  ux.f = 0.5*(ux.f + x/ux.f);
  ux.f = 0.5*(ux.f + x/ux.f);
  ux.f = 0.5*(ux.f + x/ux.f);

  where(x<0, ux.f) = LLVM_NAN_64F;
  return ux.f;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> sqrt(ldoublev<Abi> x)
{
  Abi_128suf<Abi> ux;
  intv<Abi> k, r, exp;
  ldoublev<Abi> lo, xn;
  fenv_t env;

  ux.f = x;
  exp = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u) & 0x7fff000000000000UL) >> 48);
  auto spc1_mask = simd_mask<long double, Abi>(exp == 0x7fff);
  ldoublev<Abi> spc1_result = x * x + x;

  auto spc2_mask = simd_mask<long double, Abi>(((GET_LONGDOUBLE_HI(ux.u) & 0x7fffffffffffffffUL) == 0) & ((GET_LONGDOUBLE_LO(ux.u)) == 0));
  ldoublev<Abi> spc2_result = x;

  auto spc3_mask = simd_mask<long double, Abi>((GET_LONGDOUBLE_HI(ux.u) & 0x8000000000000000UL) == 0x8000000000000000UL);
  ldoublev<Abi> spc3_result = ((x - x) / (x - x));

  feholdexcept(&env);

  auto spc4 = (exp == 0);
  auto spc4_f = simd_mask<long double, Abi>(spc4);

  where(spc4_f, ux.f) = ux.f * 0x1.0p514;
  k = 0;
  where(spc4, k) = -514;

  exp = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u) & 0x7fff000000000000UL) >> 48);
  auto spc5 = ((exp - 0x3ffe) & 1) == 0;

  where(!spc5, k) = k + exp - 0x3fff;
  where(!spc5, exp) = 0x3fff;
  where(spc5, k) = k + exp - 0x4000;
  where(spc5, exp) = 0x4000;

  ux.u = (static_simd_cast<uint128v<Abi>>((static_simd_cast<ulongv<Abi>>(exp & 0x7fff) << 48) | (GET_LONGDOUBLE_HI(ux.u) & 0x8000ffffffffffffUL)) << 64) | static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(ux.u));

  xn = static_simd_cast<ldoublev<Abi>>(sqrt(static_simd_cast<doublev<Abi>>(ux.f)));

  xn = (xn + (ux.f / xn)) * 0.5L;
  lo = ux.f;
  ux.u = static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(ux.u)) << 64;
  lo = (lo - ux.f) / xn;
  xn = xn + (ux.f / xn);
  ux.f = xn + lo;
  exp = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u) & 0x7fff000000000000UL) >> 48) + (k >> 1) - 1;
  feclearexcept(FE_INEXACT);
  r = fegetround();
  fesetround(FE_TOWARDZERO);

  ux.u = (static_simd_cast<uint128v<Abi>>((static_simd_cast<ulongv<Abi>>(exp & 0x7fff) << 48) | (GET_LONGDOUBLE_HI(ux.u) & 0x8000ffffffffffffUL)) << 64) | static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(ux.u));
  xn = x / ux.f;
  auto spc6 = simd_mask<long double, Abi>(r == FE_TONEAREST);
  where(spc6, xn) = inc(xn);
  auto spc7 = simd_mask<long double, Abi>(r == FE_UPWARD);
  where(spc7, ux.f) = inc(ux.f);
  where(spc7, xn) = inc(xn);
  ux.f = ux.f + xn;
  feupdateenv(&env);
  exp = static_simd_cast<intv<Abi>>((GET_LONGDOUBLE_HI(ux.u) & 0x7fff000000000000UL) >> 48) - 1;
  ux.u = (static_simd_cast<uint128v<Abi>>((static_simd_cast<ulongv<Abi>>(exp & 0x7fff) << 48) | (GET_LONGDOUBLE_HI(ux.u) & 0x8000ffffffffffffUL)) << 64) | static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(ux.u));

  where(spc3_mask, ux.f) = spc3_result;
  where(spc2_mask, ux.f) = spc2_result;
  where(spc1_mask, ux.f) = spc1_result;
  return ux.f;
}
#else
template <class Abi> ldoublev<Abi> sqrt(ldoublev<Abi> x)
{
  doublev<Abi> src1, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  dst = sqrt(src1);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

template <class Abi>
floatv<Abi> asin(floatv<Abi> x) {
  Abi_32suf<Abi> ux, uax, uy;
  floatv<Abi> z, z2, p;
  ux.f = x;
  uax.u = ux.u & AbsMaskf;
  where(ux.f < -1.f, ux.u) = 0; 

  auto ax_halfone = (uax.u < HalfOnef_N);

  where(ax_halfone, z2) = uax.f*uax.f;

  where(!ax_halfone, z2) = fma(s2v<float,floatv<Abi>>(-0.5f), uax.f, s2v<float,floatv<Abi>>(0.5f));
  where(ax_halfone, z) = uax.f;
  where(!ax_halfone, z) = sqrt<Abi>(z2);
  p = HORNER_NEON_4(z2, __asinf_c);
  p = fma(z * z2, p, z);
  where(ax_halfone, uy.f) = p;
  where(!ax_halfone, uy.f) = fma(s2v<float, floatv<Abi>>(-2.0f), p, s2v<float, floatv<Abi>>(PiD2f));

  uy.u = (AbsMaskf & uy.u) | (~AbsMaskf & ux.u);

  where(x>=1, uy.f) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);
  where(x<=-1, uy.f) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);

  return uy.f;
}

template <class Abi>
doublev<Abi> asin(doublev<Abi> x) {
  Abi_64suf<Abi> ux, uax, uy;
  doublev<Abi> z, z2, z4, z8, z16, p;
  ux.f = x;
  uax.u = ux.u & (unsigned long)(AbsMask);
  where(ux.f < -1.0, ux.u) = 0; 

  auto ax_halfone = change_simd_mask_type<unsigned long, double, Abi>((uax.u < (unsigned long)HalfOne_N));
  where(ax_halfone, z2) = uax.f*uax.f;
  where(!ax_halfone, z2) = fma(s2v<double,doublev<Abi>>(-0.5f), uax.f, s2v<double,doublev<Abi>>(0.5f));
  where(ax_halfone, z) = uax.f;
  where(!ax_halfone, z) = sqrt<Abi>(z2);
  z4 = z2 * z2;
  z8 = z4 * z4;
  z16 = z8 * z8;
  p = ESTRIN_NEON_11(z2, z4, z8, z16, __asin_c);
  p = fma(z * z2, p, z);
  where(ax_halfone, uy.f) = p;
  where(!ax_halfone, uy.f) = fma(s2v<double, doublev<Abi>>(-2.0f), p, s2v<double, doublev<Abi>>(PiD2));

  uy.u = ((unsigned long)AbsMask & uy.u) | (~(unsigned long)AbsMask & ux.u);
  where(x>=1.0, uy.f) = s2v<double, doublev<Abi>>(LLVM_NAN_64F);
  where(x<=-1.0, uy.f) = s2v<double, doublev<Abi>>(LLVM_NAN_64F);
  return uy.f;
}

template <class Abi>
ldoublev<Abi> asin(ldoublev<Abi> x){
  long double one = 1,
    pio2_hi = (1.5707963267948966192313216916397514420986L),
    pio2_lo = (4.3359050650618905123985220130216759843812E-35L),
    pio4_hi = (7.8539816339744830961566084581987569936977E-1L),
    pS0 = (-8.358099012470680544198472400254596543711E2L),
    pS1 =  (3.674973957689619490312782828051860366493E3L),
    pS2 = (-6.730729094812979665807581609853656623219E3L),
    pS3 =  (6.643843795209060298375552684423454077633E3L),
    pS4 = (-3.817341990928606692235481812252049415993E3L),
    pS5 =  (1.284635388402653715636722822195716476156E3L),
    pS6 = (-2.410736125231549204856567737329112037867E2L),
    pS7 =  (2.219191969382402856557594215833622156220E1L),
    pS8 = (-7.249056260830627156600112195061001036533E-1L),
    pS9 =  (1.055923570937755300061509030361395604448E-3L),

    qS0 = (-5.014859407482408326519083440151745519205E3L),
    qS1 =  (2.430653047950480068881028451580393430537E4L),
    qS2 = (-4.997904737193653607449250593976069726962E4L),
    qS3 =  (5.675712336110456923807959930107347511086E4L),
    qS4 = (-3.881523118339661268482937768522572588022E4L),
    qS5 =  (1.634202194895541569749717032234510811216E4L),
    qS6 = (-4.151452662440709301601820849901296953752E3L),
    qS7 =  (5.956050864057192019085175976175695342168E2L),
    qS8 = (-4.175375777334867025769346564600396877176E1L),

    rS0 = (-5.619049346208901520945464704848780243887E0L),
    rS1 =  (4.460504162777731472539175700169871920352E1L),
    rS2 = (-1.317669505315409261479577040530751477488E2L),
    rS3 =  (1.626532582423661989632442410808596009227E2L),
    rS4 = (-3.144806644195158614904369445440583873264E1L),
    rS5 = (-9.806674443470740708765165604769099559553E1L),
    rS6 =  (5.708468492052010816555762842394927806920E1L),
    rS7 =  (1.396540499232262112248553357962639431922E1L),
    rS8 = (-1.126243289311910363001762058295832610344E1L),
    rS9 = (-4.956179821329901954211277873774472383512E-1L),
    rS10 =  (3.313227657082367169241333738391762525780E-1L),

    sS0 = (-4.645814742084009935700221277307007679325E0L),
    sS1 =  (3.879074822457694323970438316317961918430E1L),
    sS2 = (-1.221986588013474694623973554726201001066E2L),
    sS3 =  (1.658821150347718105012079876756201905822E2L),
    sS4 = (-4.804379630977558197953176474426239748977E1L),
    sS5 = (-1.004296417397316948114344573811562952793E2L),
    sS6 =  (7.530281592861320234941101403870010111138E1L),
    sS7 =  (1.270735595411673647119592092304357226607E1L),
    sS8 = (-1.815144839646376500705105967064792930282E1L),
    sS9 = (-7.821597334910963922204235247786840828217E-2L),
    asinr5625 =  (5.9740641664535021430381036628424864397707E-1L);

  ldoublev<Abi> t, w, p, q, c, r, s, y;
  intv<Abi> ix, sign, flag=0;
  Abi_128suf<Abi> ux;
  __uint128_t tmpi;

  ux.f = x;
  sign = static_simd_cast<intv<Abi>>(ux.i >> 96);
  ix = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(sign) & AbsMaskf);
  tmpi= 0x1;
  ux.u = static_simd_cast<uint128v<Abi>>(ux.u & ~(tmpi<<127));
  auto jd1=change_simd_mask_type<int, long double, Abi>(ix>=0x3fff0000);

  intv<Abi> 
  p1 = static_simd_cast<intv<Abi>>((ux.u >> 36) & (Bottom32Mask)),
  p2 = static_simd_cast<intv<Abi>>((ux.u >> 64) & (Bottom32Mask)),
  p3 = static_simd_cast<intv<Abi>>((ux.u >> 96));

  auto jd2=change_simd_mask_type<int, long double, Abi>((ix==0x3fff0000) && (p1|p2|p3)==0);

  where(jd1 && jd2, y) = x * pio2_hi + x * pio2_lo;
  where(jd1 && (!jd2), y) = (x - x) / (x - x);

  jd2=change_simd_mask_type<int, long double, Abi>(ix<0x3ffe0000);
  auto jd3=change_simd_mask_type<int, long double, Abi>(ix<0x3fc60000);

  where((!jd1) && jd2 && jd3, y) = x;
  where((!jd1) && jd2 && !jd3, t) = x * x;
  where((!jd1) && jd2 && !jd3, flag) = 1;

  jd3=change_simd_mask_type<int, long double, Abi>(ix<0x3ffe4000);
  where((!jd1) && !jd2 && jd3, t) = ux.f - 0.5625;
  where((!jd1) && !jd2 && jd3, p) = ((((((((((rS10 * t
            + rS9) * t
            + rS8) * t
            + rS7) * t
            + rS6) * t
            + rS5) * t
            + rS4) * t
            + rS3) * t
            + rS2) * t
            + rS1) * t
            + rS0) * t;
  where((!jd1) && !jd2 && jd3, q) = (((((((((t
            + sS9) * t
            + sS8) * t
            + sS7) * t
            + sS6) * t
            + sS5) * t
            + sS4) * t
            + sS3) * t
            + sS2) * t
            + sS1) * t
            + sS0;
  where((!jd1) && !jd2 && jd3, t) = asinr5625 + p / q;
  auto jd4 = change_simd_mask_type<int, long double, Abi>((sign & (int)MASKf_sign) == 0);
  where((!jd1) && !jd2 && jd3 && jd4, y) = t;
  where((!jd1) && !jd2 && jd3 && !jd4, y) = -t;
  

  where((!jd1) && !jd2 && !jd3, w) = one - ux.f;
  where((!jd1) && !jd2 && !jd3, t) = w * 0.5;

  p = (((((((((pS9 * t
        + pS8) * t
        + pS7) * t
        + pS6) * t
        + pS5) * t
        + pS4) * t
        + pS3) * t
        + pS2) * t
        + pS1) * t
        + pS0) * t;

  q = (((((((( t
      + qS8) * t
      + qS7) * t
      + qS6) * t
      + qS5) * t
      + qS4) * t
      + qS3) * t
      + qS2) * t
      + qS1) * t
      + qS0;
  
  where(flag==1, w) = p / q;
  where(flag==1, y) = x + x * w;
  s = sqrt(t);
  auto jd5 = change_simd_mask_type<int, long double, Abi>(ix >= 0x3ffef333);
  where(jd5, w) = p / q;
  where(jd5, t) = pio2_hi - (2.0 * (s + s * w) - pio2_lo);

  where((!jd5), ux.f) = s;
  tmpi = Bottom32Mask;

  where((!jd5), ux.u) = ux.u & (~(tmpi<<36 | tmpi));
  where((!jd5), w) = ux.f;
  where((!jd5), c) = (t - w * w) / (s + w);
  where((!jd5), r) = p / q;
  where((!jd5), p) = 2.0 * s * r - (pio2_lo - 2.0 * c);
  where((!jd5), q) = pio4_hi - 2.0 * w;
  where((!jd5), t) = pio4_hi - (p - q);

  where(!jd1 && !jd2 && !jd3 && change_simd_mask_type<int, long double, Abi>((flag!=1) && (sign & (int)MASKf_sign) == 0), y) = t;
  where(!jd1 && !jd2 && !jd3 && change_simd_mask_type<int, long double, Abi>((flag!=1) && (sign & (int)MASKf_sign) != 0), y) = -t;

  return y;
}

// add by me

template <class Abi> floatv<Abi> expm1(floatv<Abi> x)
{
  floatv<Abi> huge = 1.0e+30f;
  floatv<Abi> tiny = 1.0e-30f;
  floatv<Abi> o_threshold = 8.8721679688e+01f;
  floatv<Abi> ln2_hi = 6.9313812256e-01f;
  floatv<Abi> ln2_lo = 9.0580006145e-06f;
  floatv<Abi> invln2 = 1.4426950216e+00f;
  floatv<Abi> e1 = -3.3333335072e-02f;
  floatv<Abi> e2 = 1.5873016091e-03f;
  floatv<Abi> e3 = -7.9365076090e-05f;
  floatv<Abi> e4 = 4.0082177293e-06f;
  floatv<Abi> e5 = -2.0109921195e-07f;
  floatv<Abi> re_x, y, hi, lo, c, t, e, hxs, hfx, r1;
  intv<Abi> k, xsb;
  Abi_32suf<Abi> ux;

  ux.f = x;
  re_x = x;
  xsb = static_simd_cast<intv<Abi>>(ux.u & 0x80000000);
  auto spc1_1_1 = simd_mask<uint, Abi>(xsb == 0);
  auto spc1_1_1_f = simd_mask<float, Abi>(xsb == 0);
  where(spc1_1_1_f, y) = x;
  where(!spc1_1_1_f, y) = -x;
  ux.u = ux.u & 0x7fffffff;

  auto mask1 = (ux.u >= 0x4195b844);
  auto mask1_1 = (ux.u >= 0x42b17218);
  auto mask1_1_1 = (ux.u > 0x7f800000);
  auto mask1_1_1_mask = simd_mask<float, Abi>(mask1 & mask1_1 & mask1_1_1);
  floatv<Abi> mask1_1_1_result = x + x;
  auto mask1_1_2 = (ux.u == 0x7f800000);
  auto mask1_1_2_1 = simd_mask<float, Abi>(mask1 & mask1_1 & mask1_1_2 & spc1_1_1);
  auto mask1_1_2_2 = simd_mask<float, Abi>(mask1 & mask1_1 & mask1_1_2 & !spc1_1_1);
  auto mask1_1_3 = (x > o_threshold);
  auto mask1_1_3_mask = simd_mask<float, Abi>(mask1 & mask1_1 & simd_mask<uint, Abi>(mask1_1_3));
  floatv<Abi> mask1_1_3_result = huge * huge;
  auto mask1_2_mask = simd_mask<float, Abi>(mask1 & !spc1_1_1);
  floatv<Abi> mask1_2_result = tiny - 1.0f;

  k = 0;
  auto spc1 = (ux.u > 0x3eb17218);
  auto spc1_f = simd_mask<float, Abi>(spc1);
  auto spc1_1 = (ux.u < 0x3F851592);
  auto spc_part1 = spc1 & spc1_1 & simd_mask<uint, Abi>(spc1_1_1);
  auto spc_part1_f = simd_mask<float, Abi>(spc_part1);
  where(spc_part1_f, hi) = x - ln2_hi;
  where(spc_part1_f, lo) = ln2_lo;
  where(spc_part1, k) = 1;

  auto spc_part2 = spc1 & spc1_1 & simd_mask<uint, Abi>(!spc1_1_1);
  auto spc_part2_f = simd_mask<float, Abi>(spc_part2);
  where(spc_part2_f, hi) = x + ln2_hi;
  where(spc_part2_f, lo) = -ln2_lo;
  where(spc_part2, k) = -1;

  auto spc2_part1 = spc1 & !spc1_1;
  auto spc2_part1_f = simd_mask<float, Abi>(spc2_part1);
  where(spc2_part1 & simd_mask<uint, Abi>(spc1_1_1), k) = static_simd_cast<intv<Abi>>(invln2 * x + 0.5f);
  where(spc2_part1 & simd_mask<uint, Abi>(!spc1_1_1), k) = static_simd_cast<intv<Abi>>(invln2 * x - 0.5f);
  where(spc2_part1, t) = static_simd_cast<floatv<Abi>>(k);
  where(spc2_part1_f, hi) = x - t * ln2_hi;
  where(spc2_part1_f, lo) = t * ln2_lo;
  where(spc1_f, x) = hi - lo;
  where(spc1_f, c) = (hi - x) - lo;

  auto spc2 = (ux.u < 0x33000000);
  t = huge + x;
  floatv<Abi> spc2_result = x - (t - (huge + x));


  hfx = 0.5f * x;
  hxs = x * hfx;
  r1 = 1.0f + hxs * (e1 + hxs * (e2 + hxs * (e3 + hxs * (e4 + hxs * e5))));
  t = 3.0f - r1 * hfx;
  e = hxs * ((r1 - t) / (6.0f - x * t));

  auto spc3 = (k == 0);
  auto spc3_f = simd_mask<float, Abi>(spc3);
  floatv<Abi> spc3_result = x - (x * e - hxs);

  where(!spc3_f, e) = (x * (e - c) - c) - hxs;
  auto spc3_1 = (k == -1);
  auto spc3_1_mask = simd_mask<float, Abi>(!spc3 & spc3_1);
  floatv<Abi> spc3_1_result = 0.5f * (x - e) - 0.5f;
  auto spc3_2 = (k == 1);
  auto spc3_2_1 = (x < -0.25f);
  auto spc3_2_1_mask = simd_mask<float, Abi>(!spc3 & spc3_2 & simd_mask<int, Abi>(spc3_2_1));
  floatv<Abi> spc_3_2_1_result = 1.0f + 2.0f * (x - e);

  auto spc3_3 = (k <= -2 || k > 56);
  auto spc3_3_mask = simd_mask<float, Abi>(!spc3 & spc3_3);
  Abi_32suf<Abi> tmp_y;
  tmp_y.f = 1.0f - (e - x);
  tmp_y.i = tmp_y.i + (k << 23);
  floatv<Abi> spc_3_3_result = tmp_y.f - 1.0f;

  where(simd_mask<float, Abi>(!spc3), t) = 1.0f;

  auto spc3_4 = (k < 23);
  auto spc3_4_part_f = simd_mask<float, Abi>(!spc3 & spc3_4);
  Abi_32suf<Abi> ut;
  ut.i = 0x3f800000 - (0x1000000 >> k);
  tmp_y.f = ut.f - (e - x);
  tmp_y.i = tmp_y.i + (k << 23);
  where(spc3_4_part_f, y) = tmp_y.f;

  ut.i = ((0x7f - k) << 23);
  tmp_y.f = x - (e + t) + 1.0f;
  tmp_y.i = tmp_y.i + (k << 23);
  auto spc3_5_partf = simd_mask<float, Abi>(!spc3 & !spc3_4);
  
  where(spc3_5_partf, y) = tmp_y.f;
  where(spc3_3_mask, y) = spc_3_3_result;
  where(spc3_2_1_mask, y) = spc_3_2_1_result;
  where(spc3_1_mask, y) = spc3_1_result;
  where(spc3_f, y) = spc3_result;
  where(simd_mask<float, Abi>(spc2), y) = spc2_result;
  where(mask1_2_mask, y) = mask1_2_result;
  where(mask1_1_3_mask, y) = mask1_1_3_result;
  where(mask1_1_2_2, y) = -1.0f;
  where(mask1_1_2_1, y) = re_x;
  where(mask1_1_1_mask, y) = mask1_1_1_result;

  return y;
}

template <class Abi> doublev<Abi> expm1(doublev<Abi> x)
{
  doublev<Abi> huge = 1.0e+300;
  doublev<Abi> tiny = 1.0e-300;
  doublev<Abi> o_threshold = 7.09782712893383973096e+02;
  doublev<Abi> ln2_hi = 6.93147180369123816490e-01;
  doublev<Abi> ln2_lo = 1.90821492927058770002e-10;
  doublev<Abi> invln2 = 1.44269504088896338700e+00;
  doublev<Abi> e1 = -3.33333333333331316428e-02;
  doublev<Abi> e2 = 1.58730158725481460165e-03;
  doublev<Abi> e3 = -7.93650757867487942473e-05;
  doublev<Abi> e4 = 4.00821782732936239552e-06;
  doublev<Abi> e5 = -2.01099218183624371326e-07;

  doublev<Abi> re_x, y, hi, lo, c, t, e, hxs, hfx, r1, twopk;
  intv<Abi> k, xsb;
  uintv<Abi> hx, low;
  Abi_64suf<Abi> ux;

  ux.f = x;
  re_x = x;
  hx = static_simd_cast<uintv<Abi>>(ux.u >> 32);
  xsb = static_simd_cast<intv<Abi>>(hx & 0x80000000);
  auto spc1_1_1 = simd_mask<uint, Abi>(xsb == 0);
  hx = hx & 0x7fffffff;

  auto mask1 = (hx >= 0x4043687A);
  auto mask1_1 = (hx >= 0x40862E42);
  auto mask1_1_1 = (hx > 0x7ff00000);
  low = static_simd_cast<uintv<Abi>>(ux.u & 0xffffffff);
  auto mask1_1_1_1 = ((hx & 0xfffff) | low) != 0;
  auto mask1_1_1_1_mask = simd_mask<double, Abi>(mask1 & mask1_1 & mask1_1_1 & mask1_1_1_1);
  doublev<Abi> mask1_1_1_1_result = x + x;
  auto mask1_1_1_2_1_mask = simd_mask<double, Abi>(mask1 & mask1_1 & mask1_1_1 & !mask1_1_1_1 & spc1_1_1);
  auto mask1_1_1_2_2_mask = simd_mask<double, Abi>(mask1 & mask1_1 & mask1_1_1 & !mask1_1_1_1 & !spc1_1_1);
  auto mask1_1_2 = simd_mask<uint, Abi>(x > o_threshold);
  auto mask1_1_2_mask = simd_mask<double, Abi>(mask1 & mask1_1 & mask1_1_2);
  doublev<Abi> mask1_1_2_result = huge * huge;
  auto mask1_2_mask = simd_mask<double, Abi>(mask1 & !spc1_1_1);
  doublev<Abi> mask1_2_result = tiny - 1.0;

  k = 0;
  auto spc1 = (hx > 0x3fd62e42);
  auto spc1_1 = (hx < 0x3FF0A2B2);
  auto spc1_1_1_part = (spc1 & spc1_1 & spc1_1_1);
  auto spc1_1_1_part_f = simd_mask<double, Abi>(spc1_1_1_part);
  where(spc1_1_1_part_f, hi) = x - ln2_hi;
  where(spc1_1_1_part_f, lo) = ln2_lo;
  where(spc1_1_1_part, k) = 1;
  auto spc1_1_2_part = (spc1 & spc1_1 & !spc1_1_1);
  auto spc1_1_2_part_f = simd_mask<double, Abi>(spc1_1_2_part);
  where(spc1_1_2_part_f, hi) = x + ln2_hi;
  where(spc1_1_2_part_f, lo) = -ln2_lo;
  where(spc1_1_2_part, k) = -1;
  
  auto spc1_2_part = (spc1 & !spc1_1);
  auto spc1_2_part_f = simd_mask<double, Abi>(spc1_2_part);
  where(spc1_2_part & spc1_1_1, k) = static_simd_cast<intv<Abi>>(invln2 * x + 0.5);
  where(spc1_2_part & !spc1_1_1, k) = static_simd_cast<intv<Abi>>(invln2 * x - 0.5);
  where(spc1_2_part_f, t) = static_simd_cast<doublev<Abi>>(k);
  where(spc1_2_part_f, hi) = x - t * ln2_hi;
  where(spc1_2_part_f, lo) = t * ln2_lo;
  auto spc1_f = simd_mask<double, Abi>(spc1);
  where(spc1_f, x) = hi - lo;
  where(spc1_f, c) = (hi - x) - lo;

  auto spc2_f = simd_mask<double, Abi>(hx < 0x3c900000);
  where(spc2_f, t) = huge + x;
  doublev<Abi> spc2_result = x - (t - (huge + x));

  hfx = 0.5 * x;
  hxs = x * hfx;
  r1 = 1.0 + hxs * (e1 + hxs * (e2 + hxs * (e3 + hxs * (e4 + hxs * e5))));
  t = 3.0 - r1 * hfx;
  e = hxs * ((r1 - t) / (6.0 - x * t));

  auto spc3 = (k != 0);
  auto spc3_f = simd_mask<double, Abi>(spc3);
  doublev<Abi> spc3_result = x - (x * e - hxs);
  Abi_64suf<Abi> u_tmp;
  u_tmp.u = ((0x3ff00000UL + static_simd_cast<ulongv<Abi>>(k << 20)) << 32);
  where(spc3_f, twopk) = u_tmp.f;
  where(spc3_f, e) = (x * (e - c) - c) - hxs;
  auto spc3_1_f = simd_mask<double, Abi>(k == -1);
  doublev<Abi> spc3_1_result = 0.5 * (x - e) - 0.5;
  
  auto spc3_2 = (k == 1);
  auto spc3_2_f = simd_mask<double, Abi>(spc3_2);
  auto spc3_2_1_f = (x < -0.25);
  auto spc3_2_1_mask = (spc3_2_f & spc3_2_1_f);
  doublev<Abi> spc3_2_1_result = -2.0 * (e - (x + 0.5));
  auto spc3_2_2_mask = (spc3_2_f & !spc3_2_1_f);
  doublev<Abi> spc3_2_2_result = 1.0 + 2.0 * (x - e);

  auto spc3_3 = (k <= -2 || k > 56);
  auto spc3_3_p = (spc3 & spc3_3);
  auto spc3_3_mask = simd_mask<double, Abi>(spc3 & spc3_3);
  where(spc3_3_mask, y) = 1.0 - (e - x);
  auto spc3_3_1 = (k == 1024);
  where(simd_mask<double, Abi>(spc3_3_p & spc3_3_1), y) = y * 2.0 * 0x1p1023;
  where(simd_mask<double, Abi>(spc3_3_p & !spc3_3_1), y) = y * twopk;
  doublev<Abi> spc3_3_result = y - 1.0;

  t = 1.0;
  auto spc3_4 = (k < 20);
  auto spc3_4_f = simd_mask<double, Abi>(spc3 & spc3_4);
  u_tmp.f = t;
  u_tmp.u = (u_tmp.u & 0x00000000ffffffffUL) | ((0x3ff00000UL - static_simd_cast<ulongv<Abi>>(0x200000 >> k)) << 32);
  where(spc3_4_f, y) = (u_tmp.f - (e - x)) * twopk;
  auto spc3_5_f = simd_mask<double, Abi>(spc3 & !spc3_4);
  u_tmp.f = t;
  u_tmp.u = (u_tmp.u & 0x00000000ffffffffUL) | (((0x3ffUL - static_simd_cast<ulongv<Abi>>(k)) << 20) << 32);
  where(spc3_5_f, y) = (x - (e + u_tmp.f) + 1.0) * twopk;

  where(spc3_3_mask, y) = spc3_3_result;
  where(spc3_2_1_mask, y) = spc3_2_1_result;
  where(spc3_2_2_mask, y) = spc3_2_2_result;
  where(spc3_1_f, y) = spc3_1_result;
  where(simd_mask<double, Abi>(!spc3), y) = spc3_result;
  where(spc2_f, y) = spc2_result;
  where(mask1_2_mask, y) = mask1_2_result;
  where(mask1_1_2_mask, y) = mask1_1_2_result;
  where(mask1_1_1_2_1_mask, y) = re_x;
  where(mask1_1_1_2_2_mask, y) = -1.0;
  where(mask1_1_1_1_mask, y) = mask1_1_1_1_result;
  return y;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> expm1(ldoublev<Abi> x)
{
  ldoublev<Abi> tmp_one = 1.0L;
  ldoublev<Abi> P0 = 2.943520915569954073888921213330863757240E8L;
  ldoublev<Abi> P1 = -5.722847283900608941516165725053359168840E7L;
  ldoublev<Abi> P2 = 8.944630806357575461578107295909719817253E6L;
  ldoublev<Abi> P3 = -7.212432713558031519943281748462837065308E5L;
  ldoublev<Abi> P4 = 4.578962475841642634225390068461943438441E4L;
  ldoublev<Abi> P5 = -1.716772506388927649032068540558788106762E3L;
  ldoublev<Abi> P6 = 4.401308817383362136048032038528753151144E1L;
  ldoublev<Abi> P7 = -4.888737542888633647784737721812546636240E-1L;
  ldoublev<Abi> q0 = 1.766112549341972444333352727998584753865E9L;
  ldoublev<Abi> q1 = -7.848989743695296475743081255027098295771E8L;
  ldoublev<Abi> q2 = 1.615869009634292424463780387327037251069E8L;
  ldoublev<Abi> q3 = -2.019684072836541751428967854947019415698E7L;
  ldoublev<Abi> q4 = 1.682912729190313538934190635536631941751E6L;
  ldoublev<Abi> q5 = -9.615511549171441430850103489315371768998E4L;
  ldoublev<Abi> q6 = 3.697714952261803935521187272204485251835E3L;
  ldoublev<Abi> q7 = -8.802340681794263968892934703309274564037E1L;
  ldoublev<Abi> C1 = 6.93145751953125E-1L;
  ldoublev<Abi> C2 = 1.428606820309417232121458176568075500134E-6L;
  ldoublev<Abi> maxlog = 1.1356523406294143949491931077970764891253E4L;
  ldoublev<Abi> minarg = -7.9018778583833765273564461846232128760607E1L;
  ldoublev<Abi> big = 1e4932L;
  ldoublev<Abi> re_x, px, qx, xx;
  samesize<int, ldoublev<Abi>> ix, sign, k;
  Abi_128suf<Abi> u;

  u.f = x;
  re_x = x;
  ix = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_HI(u.u) >> 32);
  sign = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(ix) & 0x80000000);
  ix = ix & 0x7fffffff;

  auto spc1 = (ix >= 0x7fff0000);
  auto spc1_mask = simd_mask<long double, Abi>(spc1);
  auto spc1_1 = (ix & 0xffff) == 0;
  auto end_zero = simd_mask<int, Abi>(((GET_LONGDOUBLE_HI(u.u) & 0xffffffff) | (GET_LONGDOUBLE_LO(u.u) & 0xffffffffffffffffUL)) == 0);
  auto spc1_1_1 = (sign == 0);
  auto spc1_1_1_mask = simd_mask<long double, Abi>(spc1 & spc1_1 & end_zero & !spc1_1_1);
  auto spc1_1_2_mask = simd_mask<long double, Abi>(spc1 & spc1_1 & end_zero & spc1_1_1);
  auto spc2_mask = simd_mask<long double, Abi>((ix == 0) & end_zero);
  auto spc3_mask = (x > maxlog);
  ldoublev<Abi> spc3_result = big * big;
  auto spc4_mask = (x < minarg);
  ldoublev<Abi> spc4_result = 4.0 / big - 1.0L;

  xx = C1 + C2;
  px = floor(0.5L + x / xx);
  k = static_simd_cast<intv<Abi>>(px);
  x = x - px * C1;
  x = x - px * C2;

  px = (((((((P7 * x + P6) * x + P5) * x + P4) * x + P3) * x + P2) * x + P1) * x + P0) * x;
  qx = (((((((x + q7) * x + q6) * x + q5) * x + q4) * x + q3) * x + q2) * x + q1) * x + q0;

  xx = x * x;
  qx = x + (0.5 * xx + xx * px / qx);

  px = scalbn(tmp_one, k);
  x = px * qx + (px - 1.0);

  where(spc4_mask, x) = spc4_result;
  where(spc3_mask, x) = spc3_result;
  where(spc2_mask | spc1_mask | spc1_1_2_mask, x) = re_x;
  where(spc1_1_1_mask, x) = -1.0L;

  return x;
}
#else
template <class Abi> ldoublev<Abi> expm1(ldoublev<Abi> x)
{
  doublev<Abi> src1, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  dst = expm1(src1);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

float __expf_idx_tab1[4] = {0, 3.19341815e-08, 1.71142709e-08, -1.47196051e-08};
float __expf_idx_tab2[4] = {1, 1.18920708, 1.41421354, 1.68179286};

template <class Abi>
floatv<Abi> exp(floatv<Abi> x) {
  floatv<Abi> shift_mkl(12583420), invln2_mkl(5.77078009f), ln2_mkl(0.173278809f), 
  comp_mkl(7.98654582e-06f), a_mkl(0.0416823104f), b_mkl(0.166729242f), c_mkl(0.49999997f);
  uintv<Abi> mask_mkl(MASKf_exp), mask2_mkl(3);

  Abi_32suf<Abi> uz;
  floatv<Abi> n, r, r2, q, y1, y2, y3, yf;
  uintv<Abi> idx;

  uz.f = fma(invln2_mkl, x, shift_mkl);
  n = uz.f - shift_mkl;
  y2 = fma(n, -ln2_mkl, x);
  r = fma(-comp_mkl, n, y2);
  r2 = r * r;
  q = fma(r, a_mkl, b_mkl);
  q = fma(r, q, c_mkl);
  idx = uz.u & mask2_mkl;

  for (unsigned i = 0; i < idx.size(); ++i){
    y1[i] = __expf_idx_tab1[idx[i]];
    y2[i] = __expf_idx_tab2[idx[i]];
  }

  uz.u <<= 21;
  q = fma(r2, q, y1);
  uz.u = uz.u & mask_mkl;

  y3 = y2 * uz.f;
  y1 = q + r;
  yf = fma(y3, y1, y3);

  return yf;
}

#define LLVM_FLT_MAX FLT_MAX
#define LLVM_DBL_MAX DBL_MAX

#define LLVM_FLT_MIN FLT_MIN
#define LLVM_DBL_MIN DBL_MIN

#define LLVM_EXP_FLT_MAX 88.376270294f
#define LLVM_EXP_FLT_MIN -88.376270294f
#define LLVM_EXP_DBL_MAX 709.77729768
#define LLVM_EXP_DBL_MIN -709.77729768

template <class Abi>
doublev<Abi> exp(doublev<Abi> x) {
  Abi_64suf<Abi> uz, ux0, ucomp, ux, utemp, utiny;
  doublev<Abi> n, r, r2, q, p, y;
  ulongv<Abi> idx, e, u, axu12;

  uz.f = InvLn2_ha * x + Shift_ha;
  n = uz.f - Shift_ha;
  r = x - Ln2hi_ha * n;
  r = r - Ln2lo_ha * n;
  r2 = r * r;
  idx = (uz.u & 0x3f) << 1;
  e = (uz.u & 0xffffffc0) << 46;

  for (unsigned i = 0; i < idx.size(); ++i){
    u[i] = *(_etab + idx[i]);
    ucomp.u[i] = *(_etab + idx[i] + 1);
  }

  ux0.u = u ^ e;
  double w1=0.008333343515397208,w2=0.04166671757732759,w3=0.16666666666652805,w4=0.49999999999962674;
  q = r * w1 + w2;
  p = r * w3 + w4;
  p = fma(r2, q, p);
  q = r + ucomp.f;
  q = fma(p, r2, q);
  y = fma(ux0.f, q, ux0.f);

  ux.f = x;
  axu12 = (ux.u >> 52) & 0x7ffUL;
  utemp.f = 512.0;
  utiny.f = 0x1p-54;
  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>((axu12-(utiny.u >> 52)) >= ((utemp.u>>52)-(utiny.u >> 52)));
  simd_mask<double, Abi> jd1 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 - (utiny.u >> 52) == 0x80000000UL);
  utemp.f = 1024.0;
  simd_mask<double, Abi> jd2 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 >= (utemp.u>>52));
  simd_mask<double, Abi> jd21 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0xfff0000000000000UL);
  simd_mask<double, Abi> jd22 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7ff0000000000000UL);
  simd_mask<double, Abi> jd23 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 >= 0x7ff);
  simd_mask<double, Abi> jd24 = x < 0.0;

  where(jd && jd1, y) = 1.0 + x;
  where(jd && (!jd1) && jd2 && jd21, y) = 0.0;
  where(jd && (!jd1) && jd2 && !jd21 && jd22, y) = LLVM_INF_64F;
  where(jd && (!jd1) && jd2 && !(jd21 || jd22) && jd23, y) = 1.0 + x;
  where(jd && (!jd1) && jd2 && !(jd21 || jd22 || jd23) && jd24, y) = LLVM_DBL_MIN;
  where(jd && (!jd1) && jd2 && !(jd21 || jd22 || jd23 || jd24), y) = LLVM_DBL_MAX;

  where(jd && !(jd1 || jd2) && (x >= LLVM_EXP_DBL_MAX), y) = LLVM_DBL_MAX;
  where(jd && !(jd1 || jd2) && (x <= LLVM_EXP_DBL_MIN), y) = LLVM_DBL_MIN;

  return y;
}

typedef union{
  long double f;
  __uint128_t u;
} Vml_128suf;

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> exp(ldoublev<Abi> x)
{
  ldoublev<Abi> C1 = -6.93145751953125E-1L;
  ldoublev<Abi> C2 = -1.428606820309417232121458176568075500134E-6L;
  ldoublev<Abi> LOG2EL = 1.442695040888963407359924681001892137426646L;
  ldoublev<Abi> MAXLOGL = 1.1356523406294143949491931077970764891253E4L;
  ldoublev<Abi> MINLOGL = -1.143276959615573793352782661133116431383730e4L;
  ldoublev<Abi> huge = 0x1p10000L;
  ldoublev<Abi> twom10000 = 0x1p-10000L;
  ldoublev<Abi> expl_P1 = 3.279723985560247033712687707263393506266E-10L;
  ldoublev<Abi> expl_P2 = 6.141506007208645008909088812338454698548E-7L;
  ldoublev<Abi> expl_P3 = 2.708775201978218837374512615596512792224E-4L;
  ldoublev<Abi> expl_P4 = 3.508710990737834361215404761139478627390E-2L;
  ldoublev<Abi> expl_P5 = 9.999999999999999999999999999999999998502E-1L;
  ldoublev<Abi> expl_Q1 = 2.980756652081995192255342779918052538681E-12L;
  ldoublev<Abi> expl_Q2 = 1.771372078166251484503904874657985291164E-8L;
  ldoublev<Abi> expl_Q3 = 1.504792651814944826817779302637284053660E-5L;
  ldoublev<Abi> expl_Q4 = 3.611828913847589925056132680618007270344E-3L;
  ldoublev<Abi> expl_Q5 = 2.368408864814233538909747618894558968880E-1L;
  ldoublev<Abi> expl_Q6 = 2.000000000000000000000000000000000000150E0L;
  ldoublev<Abi> px, xx, polevll;
  intv<Abi> n;

  auto spc_mask1 = (x > MAXLOGL);
  ldoublev<Abi> spc_result1 = huge * huge;
  auto spc_mask2 = (x < MINLOGL);
  ldoublev<Abi> spc_result2 = twom10000 * twom10000;

  px = floor(LOG2EL * x + 0.5L);
  n = static_simd_cast<intv<Abi>>(px);
  x += px * C1;
  x += px * C2;
  xx = x * x;
  polevll = xx * expl_P1 + expl_P2;
  polevll = xx * polevll + expl_P3;
  polevll = xx * polevll + expl_P4;
  polevll = xx * polevll + expl_P5;
  px = x * polevll;
  polevll = xx * expl_Q1 + expl_Q2;
  polevll = xx * polevll + expl_Q3;
  polevll = xx * polevll + expl_Q4;
  polevll = xx * polevll + expl_Q5;
  polevll = xx * polevll + expl_Q6;
  xx = polevll;
  x = px / (xx - px);
  x = 1.0L + x + x;
  x = scalbn(x, n);

  where(spc_mask2, x) = spc_result2;
  where(spc_mask1, x) = spc_result1;
  return x;
}
#else
template <class Abi> ldoublev<Abi> exp(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = exp(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif



template <class Abi>
floatv<Abi> log(floatv<Abi> x) {
  Abi_32suf<Abi> ux;
  floatv<Abi> n, y, p, q, r, r2;

  ux.f = x;
  ux.u = ux.u - TwoThirdf;
  n = static_simd_cast<floatv<Abi>>(ux.i >> 23);

  ux.u = ux.u & MASKf_mant;
  ux.u = ux.u + TwoThirdf;
  r = ux.f - 1.f;
  r2 = r * r;

  p = _ln_pf[5] * r + _ln_pf[4];
  q = _ln_pf[3] * r + _ln_pf[2];
  y = _ln_pf[1] * r + _ln_pf[0];
  p = _ln_pf[6] * r2 + p;
  q = p * r2 + q;
  y = q * r2 + y;
  // p = static_simd_cast<floatv<Abi>>(LN_2 * static_simd_cast<doublev<Abi>>(n) + static_simd_cast<doublev<Abi>>(r));
  p = (float)LN_2 * n + r;
  y = y * r2 + p;

  where(x<=0, y) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);
  return y;
}

template <class Abi>
doublev<Abi> log(doublev<Abi> x) {
  Abi_64suf<Abi> ux, x6, x9, utmp;
  Abi_32suf<Abi> xf0;
  doublev<Abi> n, y, q, p, r, r2, xd0, xd1, tmp;
  ulongv<Abi> idx, xu16, xu0, m;
  intv<Abi> ni;

  const double ln2hi=0.6931471805601177;
  const double ln2lo=-1.7239444212694711e-13;
  doublev<Abi> one(1.0);

  ux.f = x;
  xu0 = ux.u & 0x000fffffffffffffUL;
  ni = static_simd_cast<intv<Abi>>((ux.u >> 52) - 0x000003ffUL);
  n = static_simd_cast<doublev<Abi>>(ni);
  xu0 = xu0 ^ 0x07f0000000000000UL;
  xf0.u = static_simd_cast<uintv<Abi>>(xu0 >> 29);
  xf0.f = 1/xf0.f;
  m = static_simd_cast<ulongv<Abi>>(xf0.u + 0x00008000);//uint add
  x6.u = (m >> 16) << 45;
  m = x6.u >> 44;

  idx = m & 0x1fe;
  x9.u = 0x7000000000000000UL ^ xu0;

  for (unsigned i = 0; i < idx.size(); ++i){
    r[i] = x9.f[i] * x6.f[i] - 1.0;
  }

  utmp.f = r;


  for (unsigned i = 0; i < idx.size(); ++i){
    unsigned long int __idx = idx[i];
    double __n = n[i];
    xd1[i] = __log1p_tbl[__idx+1] + ln2lo * __n;
    xd0[i] = __log1p_tbl[__idx] + ln2hi * __n;
  }

  r2 = r * r;
  p = LogB1 + LogB0 * r;
  tmp = LogB3 + LogB2 * r;
  q = r + xd0;
  p = tmp + r2 * p;
  tmp = LogB5 + r * LogB4;
  xd0 = q - xd0;
  p = tmp + r2 * p;
  tmp = r - xd0 + xd1;
  p = tmp + r2 * p;
  y = q + p;

  xu16 = ux.u >> 48;
  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>(xu16 - 0x0010UL >= 0x7ff0UL - 0x0010UL);
  simd_mask<double, Abi> jd1 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u * 2 == 0);
  simd_mask<double, Abi> jd2 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7ff0000000000000UL);
  simd_mask<double, Abi> jd3 = change_simd_mask_type<unsigned long int, double, Abi>(((xu16 & 0x8000) == 0x8000) || ((xu16 & 0x7ff0) == 0x7ff0));
  where(jd && jd1, y) = LLVM_INF_64F;
  where(jd && jd2, y) = x;
  where(jd && jd3, y) = LLVM_NAN_64F;

  return y;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> log(ldoublev<Abi> x)
{

  static const long double logtbl[92] = {
-5.5345593589352099112142921677820359632418E-2L,
-5.2108257402767124761784665198737642086148E-2L,
-4.8991686870576856279407775480686721935120E-2L,
-4.5993270766361228596215288742353061431071E-2L,
-4.3110481649613269682442058976885699556950E-2L,
-4.0340872319076331310838085093194799765520E-2L,
-3.7682072451780927439219005993827431503510E-2L,
-3.5131785416234343803903228503274262719586E-2L,
-3.2687785249045246292687241862699949178831E-2L,
-3.0347913785027239068190798397055267411813E-2L,
-2.8110077931525797884641940838507561326298E-2L,
-2.5972247078357715036426583294246819637618E-2L,
-2.3932450635346084858612873953407168217307E-2L,
-2.1988775689981395152022535153795155900240E-2L,
-2.0139364778244501615441044267387667496733E-2L,
-1.8382413762093794819267536615342902718324E-2L,
-1.6716169807550022358923589720001638093023E-2L,
-1.5138929457710992616226033183958974965355E-2L,
-1.3649036795397472900424896523305726435029E-2L,
-1.2244881690473465543308397998034325468152E-2L,
-1.0924898127200937840689817557742469105693E-2L,
-9.6875626072830301572839422532631079809328E-3L,
-8.5313926245226231463436209313499745894157E-3L,
-7.4549452072765973384933565912143044991706E-3L,
-6.4568155251217050991200599386801665681310E-3L,
-5.5356355563671005131126851708522185605193E-3L,
-4.6900728132525199028885749289712348829878E-3L,
-3.9188291218610470766469347968659624282519E-3L,
-3.2206394539524058873423550293617843896540E-3L,
-2.5942708080877805657374888909297113032132E-3L,
-2.0385211375711716729239156839929281289086E-3L,
-1.5522183228760777967376942769773768850872E-3L,
-1.1342191863606077520036253234446621373191E-3L,
-7.8340854719967065861624024730268350459991E-4L,
-4.9869831458030115699628274852562992756174E-4L,
-2.7902661731604211834685052867305795169688E-4L,
-1.2335696813916860754951146082826952093496E-4L,
-3.0677461025892873184042490943581654591817E-5L,
#define ZERO logtbl[38]
 0.0000000000000000000000000000000000000000E0L,
-3.0359557945051052537099938863236321874198E-5L,
-1.2081346403474584914595395755316412213151E-4L,
-2.7044071846562177120083903771008342059094E-4L,
-4.7834133324631162897179240322783590830326E-4L,
-7.4363569786340080624467487620270965403695E-4L,
-1.0654639687057968333207323853366578860679E-3L,
-1.4429854811877171341298062134712230604279E-3L,
-1.8753781835651574193938679595797367137975E-3L,
-2.3618380914922506054347222273705859653658E-3L,
-2.9015787624124743013946600163375853631299E-3L,
-3.4938307889254087318399313316921940859043E-3L,
-4.1378413103128673800485306215154712148146E-3L,
-4.8328735414488877044289435125365629849599E-3L,
-5.5782063183564351739381962360253116934243E-3L,
-6.3731336597098858051938306767880719015261E-3L,
-7.2169643436165454612058905294782949315193E-3L,
-8.1090214990427641365934846191367315083867E-3L,
-9.0486422112807274112838713105168375482480E-3L,
-1.0035177140880864314674126398350812606841E-2L,
-1.1067990155502102718064936259435676477423E-2L,
-1.2146457974158024928196575103115488672416E-2L,
-1.3269969823361415906628825374158424754308E-2L,
-1.4437927104692837124388550722759686270765E-2L,
-1.5649743073340777659901053944852735064621E-2L,
-1.6904842527181702880599758489058031645317E-2L,
-1.8202661505988007336096407340750378994209E-2L,
-1.9542647000370545390701192438691126552961E-2L,
-2.0924256670080119637427928803038530924742E-2L,
-2.2346958571309108496179613803760727786257E-2L,
-2.3810230892650362330447187267648486279460E-2L,
-2.5313561699385640380910474255652501521033E-2L,
-2.6856448685790244233704909690165496625399E-2L,
-2.8438398935154170008519274953860128449036E-2L,
-3.0058928687233090922411781058956589863039E-2L,
-3.1717563112854831855692484086486099896614E-2L,
-3.3413836095418743219397234253475252001090E-2L,
-3.5147290019036555862676702093393332533702E-2L,
-3.6917475563073933027920505457688955423688E-2L,
-3.8723951502862058660874073462456610731178E-2L,
-4.0566284516358241168330505467000838017425E-2L,
-4.2444048996543693813649967076598766917965E-2L,
-4.4356826869355401653098777649745233339196E-2L,
-4.6304207416957323121106944474331029996141E-2L,
-4.8285787106164123613318093945035804818364E-2L,
-5.0301169421838218987124461766244507342648E-2L,
-5.2349964705088137924875459464622098310997E-2L,
-5.4431789996103111613753440311680967840214E-2L,
-5.6546268881465384189752786409400404404794E-2L,
-5.8693031345788023909329239565012647817664E-2L,
-6.0871713627532018185577188079210189048340E-2L,
-6.3081958078862169742820420185833800925568E-2L,
-6.5323413029406789694910800219643791556918E-2L,
-6.7595732653791419081537811574227049288168E-2L
};


  long double ln2a = 6.93145751953125e-1L,
              ln2b = 1.4286068203094172321214581765680755001344E-6L,
              l3 =   3.333333333333333333333333333333336096926E-1L,
              l4 =  -2.499999999999999999999999999486853077002E-1L,
              l5 =   1.999999999999999999999999998515277861905E-1L,
              l6 =  -1.666666666666666666666798448356171665678E-1L,
              l7 =   1.428571428571428571428808945895490721564E-1L,
              l8 =  -1.249999999999999987884655626377588149000E-1L,
              l9 =   1.111111111111111093947834982832456459186E-1L,
              l10 = -1.000000000000532974938900317952530453248E-1L,
              l11 =  9.090909090915566247008015301349979892689E-2L,
              l12 = -8.333333211818065121250921925397567745734E-2L,
              l13 =  7.692307559897661630807048686258659316091E-2L,
              l14 = -7.144242754190814657241902218399056829264E-2L,
              l15 =  6.668057591071739754844678883223432347481E-2L;
  ldoublev<Abi> z, y, w, res;
  Abi_128suf<Abi> u, t;
  uintv<Abi> m;
  intv<Abi> k, e;

  u.f = x;
  m = GET_LONGDOUBLE_U32_HI(u.u);
  k = static_simd_cast<intv<Abi>>(m & 0x7fffffff);

  auto jd1 = change_simd_mask_type<unsigned int, long double, Abi>((static_simd_cast<uintv<Abi>>(k) | GET_LONGDOUBLE_U32_MID_HI(u.u) | GET_LONGDOUBLE_U32_MID_LO(u.u) | GET_LONGDOUBLE_U32_LO(u.u)) == 0);
  auto jd2 = change_simd_mask_type<unsigned int, long double, Abi>((m & 0x80000000) != 0);
  auto jd3 = change_simd_mask_type<int, long double, Abi>(k >= 0x7fff0000);
  where(jd1, res) =  -0.5L / ZERO;
  where(!jd1 & jd2, res) = (x - x) / ZERO;
  where(!jd1 & !jd2 & jd3, res) = x + x;
  jd1 = !jd1 & !jd2 & !jd3;

  /* Extract exponent and reduce domain to 0.703125 <= u < 1.40625  */
  e = static_simd_cast<intv<Abi>>(m >> 16) - (int)0x3ffe;
  m &= 0xffffU;
  u.u = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(m | 0x3ffe0000) << 96);
  m |= 0x10000;
  /* Find lookup table index k from high order bits of the significand. */

  auto jd4 = change_simd_mask_type<unsigned int, int, Abi>(m < 0x16800);
  k = static_simd_cast<intv<Abi>>((m - 0xfe00) >> 10);
  t.u = 0x0ULL;
  t.u = static_simd_cast<uint128v<Abi>>(0x3ffe0000 + (static_simd_cast<uintv<Abi>>(k) << 10)) << 96;

  where(jd4, k) = static_simd_cast<intv<Abi>>((m - 0xff00) >> 9);
  where(change_simd_mask_type<int, long double, Abi>(jd4), t.u) = static_simd_cast<uint128v<Abi>>(0x3fff0000 + (static_simd_cast<uintv<Abi>>(k) << 9)) << 96;
  where(change_simd_mask_type<int, long double, Abi>(jd4), u.u) = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_U32_HI(u.u) + 0x10000U) << 96);
  where(jd4, e) = e - 1;
  where(jd4, k) = k + 64;

  jd2 = ((x <= 1.0078125L) && (x >= 0.9921875L));
  where(jd2, z) = x - 1.0L;
  where(!jd2, z) = (u.f - t.f) / t.f;
  where(change_simd_mask_type<long double, int, Abi>(jd2), k) = 64;
  where((jd2), t.f) = 1.0L;
  where(change_simd_mask_type<long double, int, Abi>(jd2), e) = 0;

  
  /* Series expansion of log(1+z).  */
  
  w = z * z;
  y = ((((((((((((l15 * z + l14) * z + l13) * z + l12) * z + l11) * z + l10) * z + l9) * z + l8) * z + l7) * z + l6) * z + l5) * z + l4) * z + l3) * z * w;
  y -= 0.5 * w;
  y += static_simd_cast<ldoublev<Abi>>(e) * ln2b; /* Base 2 exponent offset times ln(2).  */
  y += z;
  for(size_t i = 0; i < x.size(); i++)
  {
    if(jd1[i])
      y[i] += logtbl[k[i] - 26]; /* log(t) - (t-1) */
  }
  
  y += (t.f - 1.0L);
  y += static_simd_cast<ldoublev<Abi>>(e) * ln2a;
  where(jd1, res) = y;
  return res;
}
#else
template <class Abi> ldoublev<Abi> log(ldoublev<Abi> x)
{
  doublev<Abi> xd = static_simd_cast<doublev<Abi>>(x);
  xd = log(xd);
  return static_simd_cast<ldoublev<Abi>>(xd);
}
#endif

template <class Abi>
floatv<Abi> log1p(floatv<Abi> x){
  floatv<Abi> p, k, res;
  intv<Abi> k_scale;
  Abi_32suf<Abi> ux, um, us;

  ux.f = x;
  um.f = ux.f + 1.0f;
  k_scale = static_simd_cast<intv<Abi>>((um.u - LogScaleData) & Top9Maskf);
  um.u = ux.u - static_simd_cast<uintv<Abi>>(k_scale);
  us.u = static_simd_cast<uintv<Abi>>(LogScaleComps - k_scale);
  um.f += (0.25f * us.f - 1.f);

  floatv<Abi> m, m2, m4, m8, p_12, p_34, p_56, p_78, p_02, p_36, p_79, p_06;
  m = um.f;
  p_12 = m * __log1pf_data[1] + __log1pf_data[0];
  p_34 = m * __log1pf_data[3] + __log1pf_data[2];
  p_56 = m * __log1pf_data[5] + __log1pf_data[4];
  p_78 = m * __log1pf_data[7] + __log1pf_data[6];

  m2 = m * m;
  p_02 = m2 * p_12 + m;
  p_36 = m2 * p_56 + p_34;
  p_79 = m2 * __log1pf_data[8] + p_78;
  m4 = m2 * m2;
  p_06 = m4 * p_36 + p_02;
  m8 = m4 * m4;
  p = m8 * p_79 + p_06;
  k = static_simd_cast<floatv<Abi>>(k_scale >> 23);
  res = k * (float)Ln2 + p;

  uintv<Abi> vect_xu12 = (ux.u & 0x7fffffffU)>>20;
  where((ux.u == 0xff800000U) | (vect_xu12 >= 0x7f8) | change_simd_mask_type<float, uint32_t, Abi>(x < -1), res) = LLVM_NAN_32F;
  where(ux.u == 0xbf800000U, res) = -LLVM_INF_32F;
  where(ux.u == 0x7f800000U, res) = x;
  return res;
}

template <class Abi>
doublev<Abi> log1p(doublev<Abi> x){
  doublev<Abi> cm, p, q, k, ylo, yhi, res;
  longv<Abi> k_bi;
  ulongv<Abi> u, utop, xu16;
  Abi_64suf<Abi> um, uf, ux;

  ux.f = x;
  xu16 = (ux.u & 0x7fffffffffffffffUL) >> 48;
  auto jd1 = change_simd_mask_type<unsigned long int, double, Abi>(xu16 >= 0x7ff0UL | ux.u >= 0xbff0000000000000UL | ux.u == 0x8000000000000000UL);
  intv<Abi> jdtmp = 0;
  where(change_simd_mask_type<double, int, Abi>(jd1), jdtmp) = 1;
  if(reduce(jdtmp) != 0) [[unlikely]]
  {
    auto jd2 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x8000000000000000UL | ux.u == 0x7ff0000000000000UL);
    auto jd3 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0xbff0000000000000UL);
    where(jd1 & jd2, res) = x;
    where(jd1 & !jd2 & jd3, res) = LLVM_INF_64F;
    where(jd1 & !jd3 & !jd2, res) = LLVM_NAN_64F;
  }
  jd1 = (!jd1);

  um.f = x + 1;
  u = um.u + (unsigned long)OneMHfRt2Top;
  k_bi = static_simd_cast<longv<Abi>>((u >> 52) - ExponetBase);
  k = static_simd_cast<doublev<Abi>>(k_bi);
  cm = (x - (um.f - 1)) / um.f;
  utop = (u & (unsigned long)0x000fffff00000000) + (unsigned long)HfRt2Top;
  uf.u = utop | (um.u & Bottom32Mask);
  uf.f -= 1;

  doublev<Abi> f, f2, f4, f8;
  f = uf.f;
  f2 = f * f;
  f4 = f2 * f2;
  f8 = f4 * f4;
  q = ESTRIN_NEON_18 (f, f2, f4, f8, f8 * f8, __log1p_c);

  p = fma(uf.f, q * uf.f, uf.f);
  ylo = Ln2Lo * k + cm;
  yhi = Ln2Hi * k + p;
  where(jd1, res) = ylo + yhi;
  return res;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> log1p(ldoublev<Abi> xm1)
{
    static const long double P12 = 1.538612243596254322971797716843006400388E-6L;
    static const long double P11 = 4.998469661968096229986658302195402690910E-1L;
    static const long double P10 = 2.321125933898420063925789532045674660756E1L;
    static const long double P9 = 4.114517881637811823002128927449878962058E2L;
    static const long double P8 = 3.824952356185897735160588078446136783779E3L;
    static const long double P7 = 2.128857716871515081352991964243375186031E4L;
    static const long double P6 = 7.594356839258970405033155585486712125861E4L;
    static const long double P5 = 1.797628303815655343403735250238293741397E5L;
    static const long double P4 = 2.854829159639697837788887080758954924001E5L;
    static const long double P3 = 3.007007295140399532324943111654767187848E5L;
    static const long double P2 = 2.014652742082537582487669938141683759923E5L;
    static const long double P1 = 7.771154681358524243729929227226708890930E4L;
    static const long double P0 = 1.313572404063446165910279910527789794488E4L;

    static const long double Q11 = 4.839208193348159620282142911143429644326E1L;
    static const long double Q10 = 9.104928120962988414618126155557301584078E2L;
    static const long double Q91 = 9.147150349299596453976674231612674085381E3L;
    static const long double Q81 = 5.605842085972455027590989944010492125825E4L;
    static const long double Q71 = 2.248234257620569139969141618556349415120E5L;
    static const long double Q61 = 6.132189329546557743179177159925690841200E5L;
    static const long double Q51 = 1.158019977462989115839826904108208787040E6L;
    static const long double Q4 = 1.514882452993549494932585972882995548426E6L;
    static const long double Q3 = 1.347518538384329112529391120390701166528E6L;
    static const long double Q2 = 7.777690340007566932935753241556479363645E5L;
    static const long double Q1 = 2.626900195321832660448791748036714883242E5L;
    static const long double Q0 = 3.940717212190338497730839731583397586124E4L;

    static const long double R51 = -8.828896441624934385266096344596648080902E-1L;
    static const long double R4 = 8.057002716646055371965756206836056074715E1L;
    static const long double R3 = -2.024301798136027039250415126250455056397E3L;
    static const long double R2 = 2.048819892795278657810231591630928516206E4L;
    static const long double R1 = -8.977257995689735303686582344659576526998E4L;
    static const long double R0 = 1.418134209872192732479751274970992665513E5L;
    static const long double S5 = -1.186359407982897997337150403816839480438E2L;
    static const long double S4 = 3.998526750980007367835804959888064681098E3L;
    static const long double S3 = -5.748542087379434595104154610899551484314E4L;
    static const long double S2 = 4.001557694070773974936904547424676279307E5L;
    static const long double S1 = -1.332535117259762928288745111081235577029E6L;
    static const long double S0 = 1.701761051846631278975701529965589676574E6L;

    static const long double C1 = 6.93145751953125E-1L;
    static const long double C2 = 1.428606820309417232121458176568075500134E-6L;

    static const long double sqrth = 0.7071067811865475244008443621048490392848L;
    static const long double zero = 0.0L;

    ldoublev<Abi> x, y, z, r, s, res = 0;
    Abi_128suf<Abi> u;
    intv<Abi> hx;
    intv<Abi> e;

    /* Test for NaN or infinity input. */
    u.f = xm1;
    hx = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_U32_HI(u.u));

    auto jd1 = change_simd_mask_type<int, long double, Abi>(hx >= 0x7fff0000);
    auto jd2 = change_simd_mask_type<unsigned int, long double, Abi>(((static_simd_cast<uintv<Abi>>(hx) & 0x7fffffff) == 0)
       && (GET_LONGDOUBLE_U32_MID_HI(u.u) | GET_LONGDOUBLE_U32_MID_LO(u.u) | GET_LONGDOUBLE_U32_LO(u.u)) == 0);
    where(jd1 | jd2, res) = xm1;
    jd1 = (!jd1) & !(jd2);

    x = xm1 + 1.0L;
    jd2 = (x <= 0.0L);
    auto jd3 = x == (0.0L);
    where(jd1 & jd2 & jd3, res) = (-1.0L / (x - x));
    where(jd1 & jd2 & !jd3, res) = (zero / (x - x));

    samesize<int, ldoublev<Abi>> tmpe;
    x = frexp(x, &tmpe);
    e = tmpe;

    /* Logarithm using log(x) = z + z^3 P(z^2)/Q(z^2),
       where z = 2(x-1)/x+1).  */
    ldoublev<Abi> tmpx = x;
    jd3 = change_simd_mask_type<int, long double, Abi>((e > 2) || (e < -2));
    auto jd4 = (x < sqrth);
    z = x - 0.5L;
    z -= 0.5L;
    y = 0.5L * x + 0.5L;
    where(change_simd_mask_type<long double, int, Abi>(jd4 & jd3), e) = e - 1;
    where(jd4, z) = x - 0.5L;
    where(jd4, y) = 0.5L * z + 0.5L;

    x = z / y;
    z = x * x;
    r = ((((R51 * z + R4) * z + R3) * z + R2) * z + R1) * z + R0;
    s = (((((z + S5) * z + S4) * z + S3) * z + S2) * z + S1) * z + S0;
    z = x * (z * r / s);
    z = z + static_simd_cast<ldoublev<Abi>>(e) * C2;
    z = z + x;
    z = z + static_simd_cast<ldoublev<Abi>>(e) * C1;
    where(jd1 & !jd2 & jd3, res) = z;
    jd1 = jd1 & !jd2 & !jd3;

    where(change_simd_mask_type<long double, int, Abi>(jd4), e) = e - 1;
    jd2 = change_simd_mask_type<int, long double, Abi>(e != 0);
    where(jd4 & jd2, x) = 2.0L * tmpx - 1.0L;
    where(jd4 & !jd2, x) = xm1;
    where(!jd4 & jd2, x) = tmpx - 1.0L;
    where(!jd4 & !jd2, x) = xm1;
    z = x * x;
    r = (((((((((((P12 * x + P11) * x + P10) * x + P9) * x + P8) * x + P7) * x + P6) * x + P5) * x + P4) * x + P3) * x + P2) * x + P1) * x + P0;
    s = (((((((((((x + Q11) * x + Q10) * x + Q91) * x + Q81) * x + Q71) * x + Q61) * x + Q51) * x + Q4) * x + Q3) * x + Q2) * x + Q1) * x + Q0;
    y = x * (z * r / s);
    y = y + static_simd_cast<ldoublev<Abi>>(e) * C2;
    z = y - 0.5L * z;
    z = z + x;
    z = z + static_simd_cast<ldoublev<Abi>>(e) * C1;
    where(jd1, res) = z;
    return res;
}
#else
template<typename Abi> ldoublev<Abi> log1p(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = log1p(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif


typedef union
{
  float value;
  /* FIXME: Assumes 32 bit int.  */
  unsigned int word;
} ieee_float_shape_type;

#define GET_FLOAT_WORDff(i,d)					\
do {								\
  ieee_float_shape_type gf_u;					\
  gf_u.value = (d);						\
  (i) = gf_u.word;						\
} while (0)


/* Set a float from a 32 bit int.  */

#define SET_FLOAT_WORDff(d,i)					\
do {								\
  ieee_float_shape_type sf_u;					\
  sf_u.word = (i);						\
  (d) = sf_u.value;						\
} while (0)

// get uint
template <class Abi> 
uintv<Abi> GET_FLOAT_WORD(floatv<Abi> d){
  Abi_32suf<Abi> tmp;
  tmp.f = d;
  return tmp.u;
}

// get float
template <class Abi> 
floatv<Abi> SET_FLOAT_WORD(uintv<Abi> d){
  Abi_32suf<Abi> tmp;
  tmp.u = d;
  return tmp.f;
}


// template<class Abi>
// floatv<Abi> 
// __ieee754_powf(floatv<Abi> x, floatv<Abi> y)
// {
// 	floatv<Abi> z,ax,z_h,z_l,p_h,p_l, res;
// 	floatv<Abi> y1,t1,t2,r,s,sn,t,u,v,w;
// 	intv<Abi> i,j,k,yisint,n;
// 	intv<Abi> hx,hy,ix,iy,is;
//   float bp[] = {1.0, 1.5,},
//         dp_h[] = { 0.0, 5.84960938e-01,}, /* 0x3f15c000 */
//         dp_l[] = { 0.0, 1.56322085e-06,}, /* 0x35d1cfdc */
//         // zero    =  0.0,
//         half    =  0.5,
//         qrtr    =  0.25,
//         thrd    =  3.33333343e-01, /* 0x3eaaaaab */
//         one	=  1.0,
//         two	=  2.0,
//         two24	=  16777216.0,	/* 0x4b800000 */
//         // huge	=  1.0e30,
//         // tiny    =  1.0e-30,
//           /* poly coefs for (3/2)*(log(x)-2s-2/3*s**3 */
//         L1  =  6.0000002384e-01, /* 0x3f19999a */
//         L2  =  4.2857143283e-01, /* 0x3edb6db7 */
//         L3  =  3.3333334327e-01, /* 0x3eaaaaab */
//         L4  =  2.7272811532e-01, /* 0x3e8ba305 */
//         L5  =  2.3066075146e-01, /* 0x3e6c3255 */
//         L6  =  2.0697501302e-01, /* 0x3e53f142 */
//         P1   =  1.6666667163e-01, /* 0x3e2aaaab */
//         P2   = -2.7777778450e-03, /* 0xbb360b61 */
//         P3   =  6.6137559770e-05, /* 0x388ab355 */
//         P4   = -1.6533901999e-06, /* 0xb5ddea0e */
//         P5   =  4.1381369442e-08, /* 0x3331bb4c */
//         lg2  =  6.9314718246e-01, /* 0x3f317218 */
//         lg2_h  =  6.93145752e-01, /* 0x3f317200 */
//         lg2_l  =  1.42860654e-06, /* 0x35bfbe8c */
//         // ovt =  4.2995665694e-08, /* -(128-log2(ovfl+.5ulp)) */
//         cp    =  9.6179670095e-01, /* 0x3f76384f =2/(3ln2) */
//         cp_h  =  9.6191406250e-01, /* 0x3f764000 =12b cp */
//         cp_l  = -1.1736857402e-04, /* 0xb8f623c6 =tail of cp_h */
//         ivln2    =  1.4426950216e+00, /* 0x3fb8aa3b =1/ln2 */
//         ivln2_h  =  1.4426879883e+00, /* 0x3fb8aa00 =16b 1/ln2*/
//         ivln2_l  =  7.0526075433e-06; /* 0x36eca570 =1/ln2 tail*/


// 	hx = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(x));
// 	hy = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(y));
// 	ix = hx&0x7fffffff;  iy = hy&0x7fffffff;


//   yisint  = 0;

//   auto jd1 = (hx < 0);
//   auto jd2 = (iy>=0x4b800000);
//   auto jd3 = (iy>=0x3f800000);
//   where(jd1 & jd2, yisint) = 2;
//   where(jd1 & !jd2 & jd3, k) = (iy>>23)-0x7f;
//   where(jd1 & !jd2 & jd3, j) = iy>>(23-k);
//   where(jd1 & !jd2 & jd3 & ((j<<(23-k))==iy), yisint) = 2-(j&1);

// 	ax   = abs(x);


// 	n = static_simd_cast<intv<Abi>>((static_simd_cast<uintv<Abi>>(hx)>>31)-1);


// 	sn = one; /* s (sign of result -ve**odd) = -1 else = 1 */

//   where((n|(yisint-1))==0, sn) = s2v<float, floatv<Abi>>(-one);

//   jd3 = (iy>0x4d000000);

//   floatv<Abi> s2,s_h,s_l,t_h,t_l;
// 	    n = 0;
// 	/* take care subnormal number */

//       jd1 = ix<0x00800000;
//       where(jd1, ax) = ax*two24;
//       where(jd1, n) = n-24;
//       where(jd1, ix) = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(ax));
// 	    n  += ((ix)>>23)-0x7f;
// 	    j  = ix&0x007fffff;
// 	/* determine interval */
// 	    ix = j|0x3f800000;		/* normalize ix */

//       jd1 = (j<=0x1cc471);
//       jd2 = (j<0x5db3d7);
//       where(jd1, k) = 0;
//       where(!jd1 & jd2, k) = 1;
//       where(!jd1 & !jd2, k) = 0;
//       where(!jd1 & !jd2, n) = n+1;
//       where(!jd1 & !jd2, ix) = ix - 0x00800000;
// 	    ax = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(ix));

// 	/* compute s = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */

//       for(size_t m = 0; m < x.size(); m++)
//       {
//         if(!jd3[m])
//         {
//           u[m] = ax[m]-bp[k[m]];		/* bp[0]=1.0, bp[1]=1.5 */
// 	        v[m] = one/(ax[m]+bp[k[m]]);
//         }
//       }
	    
// 	    s = u*v;
// 	    s_h = s;
// 	    is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(s_h));
// 	    s_h = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000U);
// 	/* t_h=ax+bp[k] High */
// 	    is = static_simd_cast<intv<Abi>>(((static_simd_cast<uintv<Abi>>(ix)>>1)&0xfffff000)|0x20000000);
// 	    t_h = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is+0x00400000)+(static_simd_cast<uintv<Abi>>(k)<<21));
//       for(size_t m = 0; m < x.size(); m++)
//       {
//         if(!jd3[m])
//         {
//           t_l[m] = ax[m] - (t_h[m]-bp[k[m]]);
//         }
//       }
	    
// 	    s_l = v*((u-s_h*t_h)-s_h*t_l);
// 	/* compute log(ax) */
// 	    s2 = s*s;
// 	    r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
// 	    r += s_l*(s_h+s);
// 	    s2  = s_h*s_h;
// 	    t_h = 3+s2+r;
// 	    is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(t_h));
// 	    t_h = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000U);
// 	    t_l = r-((t_h-3)-s2);
// 	/* u+v = s*(1+...) */
// 	    u = s_h*t_h;
// 	    v = s_l*t_h+t_l*s;
// 	/* 2/(3log2)*(s+...) */
// 	    p_h = u+v;
// 	    is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(p_h));
// 	    p_h = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000);
// 	    p_l = v-(p_h-u);
// 	    z_h = cp_h*p_h;		/* cp_h+cp_l = 2/(3*log2) */
//       t = static_simd_cast<floatv<Abi>>(n);
//       for(size_t m = 0; m < x.size(); m++)
//       {
//         if(!jd3[m])
//         {
//           z_l[m] = cp_l*p_h[m]+p_l[m]*cp+dp_l[k[m]];
// 	        t1[m] = (((z_h[m]+z_l[m])+dp_h[k[m]])+t[m]);
//         }
//       }
	    
// 	/* log2(ax) = (s+..)*2/(3*log2) = n + dp_h + z_h + z_l */
	    
// 	    is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(t1));
// 	    t1 = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000);

//       for(size_t m = 0; m < x.size(); m++)
//       {
//         if(!jd3[m])
//         {
//           t2[m] = z_l[m]-(((t1[m]-t[m])-dp_h[k[m]])-z_h[m]);
//         }
//       }
  



// 	/* now |1-x| is tiny <= 2**-20, suffice to compute
// 	   log(x) by x-x^2/2+x^3/3-x^4/4 */
// 	    where(jd3, t) = ax-1;		/* t has 20 trailing zeros */
// 	    where(jd3, w) = (t*t)*(half-t*(thrd-t*qrtr));
// 	    where(jd3, u) = ivln2_h*t;	/* ivln2_h has 16 sig. bits */
// 	    where(jd3, v) = t*ivln2_l-w*ivln2;
// 	    where(jd3, t1) = u+v;
// 	    where(jd3, is) = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(t1));
// 	    where(jd3, t1) = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000);
// 	    where(jd3, t2) = v-(t1-u);


//     /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
// 	is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(y));
// 	y1 = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(is)&0xfffff000);
// 	p_l = (y-y1)*t1+y*t2;
// 	p_h = y1*t1;
// 	z = p_l+p_h;
// 	j = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(z));


// 	i = j&0x7fffffff;
// 	k = (i>>23)-0x7f;
// 	n = 0;

//   jd1 = (i>0x3f000000);

// 	    where(jd1, n) = j+(0x00800000>>(k+1));
// 	    where(jd1, k) = ((n&0x7fffffff)>>23)-0x7f;	/* new k for n */
// 	    where(jd1, t) = SET_FLOAT_WORD(n&~(0x007fffff>>k));
// 	    where(jd1, n) = ((n&0x007fffff)|0x00800000)>>(23-k);
// 	    where(jd1 & (j<0), n) = -n;
// 	    where(jd1, p_h) = p_h - t;
	
  
// 	t = p_l+p_h;
// 	is = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(t));
// 	t = SET_FLOAT_WORD(is&0xffff8000);
// 	u = t*lg2_h;
// 	v = (p_l-(t-p_h))*lg2+t*lg2_l;
// 	z = u+v;
// 	w = v-(z-u);
// 	t  = z*z;
// 	t1  = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
// 	r  = (z*t1)/(t1-two)-(w+z*w);
// 	z  = one-(r-z);
// 	j = static_simd_cast<intv<Abi>>(GET_FLOAT_WORD(z));
// 	j += (n<<23);


//   z = SET_FLOAT_WORD(static_simd_cast<uintv<Abi>>(j));
//   where((j>>23)<=0, z) = scalbn(z, n);
// 	res = sn*z;

//   return res;
// }



template <class Abi>
floatv<Abi> pow(floatv<Abi> x, floatv<Abi> n) {

  floatv<Abi> y;

  //  y =  __ieee754_powf(x, n);
  
  y = exp2(log2(x) * n);
  return y;
}


template <class Abi>
doublev<Abi> pow(doublev<Abi> x, doublev<Abi> n) {
  doublev<Abi> sign = 1;
  auto jd = x<0 && n/2==0;
  where(jd, sign) = -1;
  where(jd, x) = -x;

  doublev<Abi> y = log(x);
  y = exp(y*n);

  return sign*y;
}


template <class Abi>
floatv<Abi> acos(floatv<Abi> x) {
  Abi_32suf<Abi> ux, ax_m, uk, sqrt_z, sqrt_k, upi, upi_div2;
  floatv<Abi> w, z, skp;
  uintv<Abi> judge_ax_halfone, judge_x_minus;

  ux.f = x;
  ax_m.u = MASKf_sign | ux.u;
  z = (1.f + ax_m.f) * 0.5f;
  w = x * x;

  where(z<w, uk.f) = z;
  where(z>=w, uk.f) = w;

  where(uk.f>=z, judge_ax_halfone) = 0xffffffff;
  where(uk.f<z, judge_ax_halfone) = 0x00000000;

  sqrt_z.f = 2 * sqrt(z);

  where(judge_ax_halfone == 0x00000000, sqrt_k.u) = ax_m.u;
  where(judge_ax_halfone != 0x00000000, sqrt_k.u) = sqrt_z.u;

  floatv<Abi> k2, p1, p2, p, kp;
  float c1 = 0.0455576926f, c2 = 0.0749436766f, c3 = 0.0426903032f, c4 = 0.0238239374f, c5 = 0.166667923f;
  p1 = c1 * uk.f + c2;
  k2 = uk.f * uk.f;
  p2 = c3 * uk.f + c4;
  p = k2 * p2 + p1;
  p = uk.f * p + c5;
  kp = uk.f * p;

  where(ux.f < uk.f, judge_x_minus) = 0xffffffff;
  where(ux.f >= uk.f, judge_x_minus) = 0x00000000;

  sqrt_k.u = sqrt_k.u ^ (MASKf_sign & ux.u);
  skp = sqrt_k.f * kp + sqrt_k.f;

  upi.u = (Pif & judge_ax_halfone) & judge_x_minus;
  upi_div2.u = Pid2f & ~(judge_ax_halfone);

  return (upi.f + upi_div2.f) + skp;
}

template <class Abi>
doublev<Abi> acos(doublev<Abi> x) {
  Abi_64suf<Abi> ux, ax_m, uk, u2z, u2sz, uy, pi2pi, sk, skp;
  doublev<Abi> z, w, d1_d_sz, d1_d_z, e, k2, k4, p, kp, f, szef, dtmp1, dtmp2;
  ulongv<Abi> judge_ax_halfone, judge_x_minus, judge_x_mho, x_sign;

  ux.f = x;
  ax_m.u = MASK_sign | ux.u;
  z = 0.5 * ax_m.f + 0.5;
  w = ax_m.f * ax_m.f;
  where(w < z, uk.f) = w;
  where(w >= z, uk.f) = z;

  where(uk.f>=z, judge_ax_halfone) = 0xffffffffffffffff;
  where(uk.f<z, judge_ax_halfone) = 0x0;
  where(uk.f>=ux.f, judge_x_minus) = 0xffffffffffffffff;
  where(uk.f<ux.f, judge_x_minus) = 0x0;
  judge_x_mho = judge_x_minus & judge_ax_halfone;

  d1_d_sz = 1 / sqrt(z);
  u2z.f = 2 * z;
  d1_d_z = d1_d_sz * d1_d_sz;
  u2z.u = u2z.u & judge_ax_halfone;
  ax_m.u = ax_m.u & ~(judge_ax_halfone);

  double a1=-0.017089852669219818, a2=0.039062512973409326, a3=-0.09374999999999499, a4=0.24999999999999725;
  e = u2z.f * d1_d_z - 2.;
  f = e * a1 + a2;
  f = e * f + a3;
  f = e * f + a4;

  doublev<Abi> p1, p2, p3, p4, p5, p6, p7;
  p1 = uk.f * __acos_data[0] + __acos_data[1];
  p2 = uk.f * __acos_data[2] + __acos_data[3];
  p3 = uk.f * __acos_data[4] + __acos_data[5];
  p4 = uk.f * __acos_data[6] + __acos_data[7];
  p5 = uk.f * __acos_data[8] + __acos_data[9];
  k2 = uk.f * uk.f;
  p6 = k2 * p1 + p2;
  p7 = k2 * p3 + p4;
  k4 = k2 * k2;
  p = k4 * p6 + p7;
  p = k2 * p + p5;
  p = uk.f * p + __acos_data[10];
  p = uk.f * p + __acos_data[11];
  kp = uk.f * p;

  pi2pi.u = ((unsigned long)Pi & judge_x_mho) | ((unsigned long)Pid2 & ~(judge_ax_halfone));
  uy.u = ((unsigned long)Yd2 & ~(judge_ax_halfone)) | ((unsigned long)Y & judge_x_mho);

  x_sign = MASK_sign & ux.u;
  uy.u = uy.u ^ x_sign;
  u2sz.f = d1_d_sz * u2z.f;
  szef = e * u2sz.f * f;
  sk.u = u2sz.u | ax_m.u;
  dtmp1 = sk.f - szef;
  dtmp2 = uy.f - szef;
  skp.f = dtmp1 * kp + dtmp2;
  skp.f = sk.f + skp.f;
  skp.u = skp.u ^ x_sign;
  return pi2pi.f + skp.f;
}

#define LDBL_NBIT 0
#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> acos(ldoublev<Abi> x){
#define	BIAS (LDBL_MAX_EXP - 1)
#define	ACOS_CONST	(BIAS - 113)	/* 2**-113 */

  static const long double
        one = 1.0L,
        pS0 = 1.66666666666666666666666666666700314e-01L,
        pS1 = -7.32816946414566252574527475428622708e-01L,
        pS2 = 1.34215708714992334609030036562143589e+00L,
        pS3 = -1.32483151677116409805070261790752040e+00L,
        pS4 = 7.61206183613632558824485341162121989e-01L,
        pS5 = -2.56165783329023486777386833928147375e-01L,
        pS6 = 4.80718586374448793411019434585413855e-02L,
        pS7 = -4.42523267167024279410230886239774718e-03L,
        pS8 = 1.44551535183911458253205638280410064e-04L,
        pS9 = -2.10558957916600254061591040482706179e-07L,

        qS1 = -4.84690167848739751544716485245697428e+00L,
        qS2 = 9.96619113536172610135016921140206980e+00L,
        qS3 = -1.13177895428973036660836798461641458e+01L,
        qS4 = 7.74004374389488266169304117714658761e+00L,
        qS5 = -3.25871986053534084709023539900339905e+00L,
        qS6 = 8.27830318881232209752469022352928864e-01L,
        qS7 = -1.18768052702942805423330715206348004e-01L,
        qS8 = 8.32600764660522313269101537926539470e-03L,
        qS9 = -1.99407384882605586705979504567947007e-04L,

        pio2_hi = 1.57079632679489661923132169163975140e+00L,
        pio2_lo = 4.33590506506189051239852201302167613e-35L,
        pi = 3.14159265358979323846264338327950280e+00L;
  Abi_128suf<Abi> u;
  ldoublev<Abi> z, p, q, r, w, s, c, df, res;
  shortv<Abi> expsign, expt;
  u.f = x;
  expsign = static_simd_cast<shortv<Abi>>(u.u >> 112);
  expt = expsign & 0x7fff;


  auto jd1 = change_simd_mask_type<short, long double, Abi>(expt >= BIAS);
  auto jd2 = change_simd_mask_type<short, long double, Abi>(expt == BIAS) 
            && change_simd_mask_type<unsigned long int, long double, Abi>(((((GET_LONGDOUBLE_HI(u.u) << 16) >> 16) & ~LDBL_NBIT) | GET_LONGDOUBLE_LO(u.u)) == 0);
  auto jd3 = change_simd_mask_type<short, long double, Abi>(expsign > 0);
  where(jd1 & jd2 & jd3, res) = 0.0;
  where(jd1 & jd2 & !jd3, res) = pi + 2.0 * pio2_lo;
  where(jd1 & !jd2, res) = (x - x) / (x - x);

  jd2 = change_simd_mask_type<short, long double, Abi>(expt < BIAS - 1);
  jd3 = change_simd_mask_type<short, long double, Abi>(expt < ACOS_CONST);
  where(!jd1 & jd2 & jd3, res) = pio2_hi + pio2_lo;
  z = x * x;
  p = (z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * (pS5 + z * (pS6 + z * (pS7 + z * (pS8 + z * pS9))))))))));
  q = (1.0 + z * (qS1 + z * (qS2 + z * (qS3 + z * (qS4 + z * (qS5 + z * (qS6 + z * (qS7 + z * (qS8 + z * qS9)))))))));
  r = p / q;
  where(!jd1 & jd2, res) = pio2_hi - (x - (pio2_lo - x * r));

  jd3 = change_simd_mask_type<short, long double, Abi>(expsign < 0);
  z = (one + x) * 0.5;
  p = (z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * (pS5 + z * (pS6 + z * (pS7 + z * (pS8 + z * pS9))))))))));
  q = (1.0 + z * (qS1 + z * (qS2 + z * (qS3 + z * (qS4 + z * (qS5 + z * (qS6 + z * (qS7 + z * (qS8 + z * qS9)))))))));
  s = sqrt(z);
  r = p / q;
  w = r * s - pio2_lo;
  where(!jd1 & !jd2 & jd3, res) = pi - 2.0 * (s + w);

  z = (one - x) * 0.5;
  s = sqrt(z);
  u.f = s;
  u.u = (u.u >> 64) << 64;
  df = u.f;
  c = (z - df * df) / (s + df);
  p = (z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * (pS5 + z * (pS6 + z * (pS7 + z * (pS8 + z * pS9))))))))));
  q = (1.0 + z * (qS1 + z * (qS2 + z * (qS3 + z * (qS4 + z * (qS5 + z * (qS6 + z * (qS7 + z * (qS8 + z * qS9)))))))));
  r = p / q;
  w = r * s + c;
  where(!jd1 & !jd2 & !jd3, res) =  2.0 * (df + w);
  return res;
  

#undef BIAS
#undef ACOS_CONST
}
#else
template<typename Abi> ldoublev<Abi> acos(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = acos(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi>
floatv<Abi> asinh(floatv<Abi> x) {
  Abi_32suf<Abi> m_x, r, u1, res, sign;
  Abi_32suf<Abi> x2, x2p1, x2p1_mk, recip, recip_mk;
  Abi_32suf<Abi> cond1, cond2, c1, c2, c3, c4, c5, c6, c7, c8, c9, num, num2, y1, y2, y3;

  floatv<Abi> err1, err2, err3, err4, err5, err6, err7;
  floatv<Abi> x2_er1,x2_er2, x2_er3, x2_er4, x2_er5, x2_er6, x2_er7, x2_er8;
  floatv<Abi> coef1, coef2, coef3, coef4, coef5, coef6, coef7, coef8, coef9, coef10, coef11;
  floatv<Abi> r_2, a1, a2, a3, a4, a5, a6, a7, a8, b1, t, temp;

  m_x.f = x;
  x2.f = m_x.f * m_x.f;
  x2p1.f = x2.f + 1;
  x2p1_mk.u = x2p1.u & Top16Maskf;
  recip.f = 1 / sqrt(x2p1_mk.f);
  recip_mk.u = recip.u & Top16Maskf;

  err1 = 1 - x2p1.f;
  err2 = x2p1.f - x2p1_mk.f;
  err3 = x2.f + err1;
  temp = m_x.f;
  err4 = -x2.f + m_x.f * temp;
  err5 = err4 + err3;
  err6 = err5 + err2;
  err7 = err6 * recip_mk.f;

  float p1=0.375,p2=0.3125,p3=0.5,p5=0.000000000931323;
  x2_er1 = x2.f + err4;
  x2_er2 = p3 * x2_er1;
  x2_er3 = x2_er2 * x2_er2;
  x2_er4 = -x2_er3 + x2_er3 * x2_er2;
  x2_er5 = p3 * x2_er4;
  x2_er6 = x2_er2 + x2_er5;
  x2_er7 = x2_er2 - x2_er6;
  x2_er8 = x2_er5 + x2_er7;

  coef1 = x2p1_mk.f * recip_mk.f;
  coef2 = 1 - coef1 * recip_mk.f;
  coef3 = err7 + coef1;
  coef4 = coef2 - recip_mk.f * err7;
  coef5 = p1 + coef4 * p2;
  coef5 = p3 + coef4 * coef5;
  coef6 = coef4 * coef5;
  coef7 = coef1 - 1;
  coef8 = err7 + coef3 * coef6;
  coef9 = coef7 + coef8;
  coef10 = coef7 - coef9;
  coef11 = coef8 + coef10;

  r.u = m_x.u & AbsMaskf;
  r_2 = r.f * p5;

  where(r.f >= ASCTH_NAN, cond1.u) = 0x0;
  where(r.f > 0.0625f, cond2.u) = 0x0;
  where(r.f < ASCTH_NAN, cond1.u) = 0xffffffff;
  where(r.f <= 0.0625f, cond2.u) = 0xffffffff;

  where(cond2.u==0xffffffff, a1) = x2_er6;
  where(cond2.u!=0xffffffff, a1) = coef9;

  a2 = r.f + a1;
  where(a2 > 1, a3) = a2;
  where(a2 <= 1, a3) = 1;

  where(a2 < 1, a4) = a2;
  where(a2 >= 1, a4) = 1;
  a5 = r.f - a2;
  a6 = a3 + a4;
  a7 = a5 + a1;
  a8 = a3 - a6;

  where(cond2.u!=0x0, b1) = x2_er8;
  where(cond2.u==0x0, b1) = coef11;

  unsigned int p4=TwoThirdf;
  where(cond1.u!=0x0, c1.f) = a6;
  where(cond1.u==0x0, c1.f) = r_2;
  c2.f = b1 + a7;
  c3.f = a4 + a8;
  c4.f = c2.f + c3.f; 
  c5.u = c1.u - p4;
  c6.u = c5.u >> 0x17;
  c7.u = c5.u & MASKf_mant;
  c8.u = c6.u << 0x17;
  c9.u = c7.u + p4;

  num.f = static_simd_cast<floatv<Abi>>(c6.u) ;

  u1.f = 1;
  y1.u = u1.u - c8.u;
  y2.f = c9.f - u1.f;
  y3.u = c4.u & cond1.u;

  y1.f = y2.f + y1.f * y3.f;

  float q=0.138202384114265,q1=-0.151221796870232,q2=0.140423089265823,q3=-0.164723262190819,
      q4=0.200079202651978,q5=-0.250042378902435,q6=0.333332657814026,q7=-0.5,q8=0.693147182464600;

  t = q1 + y1.f * q;
  t = q2 + y1.f * t;
  t = q3 + y1.f * t;
  t = q4 + y1.f * t;
  t = q5 + y1.f * t;
  t = q6 + y1.f * t;
  t = q7 + y1.f * t;
  t = y1.f * t;
  t = y1.f + y1.f * t;

  num2.f = num.f + 31;
  where(cond1.u==0x0, num.f) = num2.f;

  res.f = t + num.f * q8;
  sign.u = m_x.u & MASKf_sign;
  res.u = sign.u ^ res.u;
  return res.f;
}

template <class Abi> doublev<Abi> asinh(doublev<Abi> x) 
{
  doublev<Abi> one = 1.00000000000000000000e+00;
  doublev<Abi> ln2 = 6.93147180559945286227e-01;
  doublev<Abi> huge = 1.00000000000000000000e+300;
  doublev<Abi> w, xa, t, wt;
  intv<Abi> ix;
  Abi_64suf<Abi> ux;
  ux.f = x;
  w = x;
  ix = static_simd_cast<intv<Abi>>(ux.u >> 32) & 0x7fffffff;
  auto jd1 = change_simd_mask_type<int, double, Abi>(ix < 0x3e300000);

  jd1 = jd1 && ((huge + x) > one);
  where(jd1, wt) = x;

  xa = abs(x);
  auto jd2 = change_simd_mask_type<int, double, Abi>(ix > 0x41b00000);
  auto jd21 = change_simd_mask_type<int, double, Abi>(ix >= 0x7ff00000);
  where(!jd1 && jd2 && jd21, wt) = x + x;
  where(jd2, wt) = log(xa) + ln2;

  auto jd3 = !jd1 && !jd2;
  auto jd31 = change_simd_mask_type<int, double, Abi>(ix > 0x40000000);
  t = xa * xa;
  where(jd3 && jd31, wt) = log(2.0 * xa + one / (sqrt(t + one) + xa));
  where(jd3 && !jd31, wt) = log1p(xa + t / (one + sqrt(one + t)));
  where(!(jd1 || (!jd1 && jd2 && jd21)), w) = copysign(wt, x);
  return w;
}

#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> asinh(ldoublev<Abi> x)
{
    ldoublev<Abi> ln2 = 6.931471805599453094172321214581765681e-1L;
    ldoublev<Abi> huge = 1.0e+4900L;
    ldoublev<Abi> one = 1.0L;
    ldoublev<Abi> t, w, res;
    intv<Abi> ix, sign;
    Abi_128suf<Abi> u;

    u.f = x;
    sign = static_simd_cast<intv<Abi>>(u.u >> 96);
    ix = sign & 0x7fffffff;

    auto jd1 = change_simd_mask_type<int, long double, Abi>(ix == 0x7fff0000);
    where(jd1, res) = x + x;

    auto jd2 = change_simd_mask_type<int, long double, Abi>(ix < 0x3fc70000);
    auto jd3 = (huge + x > one);
    where(!jd1 & jd2 & jd3, res) = x;
    u.u = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(ix) << 96);

    jd3 = change_simd_mask_type<int, long double, Abi>(ix > 0x40350000);
    where(jd3, w) = log(u.f) + ln2;

    auto jd4 = change_simd_mask_type<int, long double, Abi>(ix > 0x40000000);
    where(!jd3 & jd4, t) = u.f;
    where(!jd3 & jd4, w) = log(2.0 * t + one / (sqrt(x * x + one) + t));
    where(!jd3 & !jd4, t) = x * x;
    where(!jd3 & !jd4, w) = log1p(u.f + t / (one + sqrt(one + t)));

    jd3 = change_simd_mask_type<uint32_t, long double, Abi>((static_simd_cast<uintv<Abi>>(sign) & 0x80000000) != 0);
    where(!jd1 & !jd2 & jd3, res) = -w;
    where(!jd1 & !jd2 & !jd3, res) = w;
    return res;
}
#else
template <class Abi> ldoublev<Abi> asinh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = asinh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif



static inline float scalarSpecialHandelffff(float x){
    llvm_32suf ux;
    ux.f = x;

    if(x == 1)
        return +0;

    if(ux.u == 0x7f800000)
        return x;

    if(x < 1 || (ux.u & 0x7f800000) >= 0x7f800000)
        return LLVM_NAN_32F;

    return -1;
}
float acosh_f32_la(float x) {
    llvm_32suf ux, um, uw_a_1, u1dk2, ux2m1, ux2m1_t, u1dsx2m1_t, u1dsx2m1_t_t, err2, uone;
    float ux2m1_b, usx2m1_t_t, usx2m1_b_t, usx2m1_tb_t, z, w, k, e, p, ep, y, tmp, err1, w1_max, w1_min;
    uint32_t ku, jd_nonan;

    float specialCaseRes = scalarSpecialHandelffff(x);
    if(specialCaseRes!= -1)
        return specialCaseRes;

    ux.f = x;
    uone.f = 1;
    ux2m1.f = ux.f * ux.f - 1.0f;
    // ux2m1.f -= 1.0f;
    // std::cout << setprecision(40) << (float)ux.f << std::endl;
    // std::cout << setprecision(40) << (float)ux2m1.f << std::endl;
    // ux2m1.f = ux2m1.f - 1;
    jd_nonan = ux.f < 1073741824 ? 0xffffffff : 0;

    ux2m1_t.u = Top16Maskf & ux2m1.u;
    u1dsx2m1_t.f = 1 / std::sqrt((float)ux2m1_t.f);
    u1dsx2m1_t_t.u = u1dsx2m1_t.u & Top16Maskf;
    usx2m1_t_t = ux2m1_t.f * u1dsx2m1_t_t.f;
    ux2m1_b = ux2m1.f - ux2m1_t.f;
    usx2m1_b_t = ux2m1_b * u1dsx2m1_t_t.f;
    usx2m1_tb_t = usx2m1_t_t + usx2m1_b_t;

    // std::cout << setprecision(40) << (float)ux2m1.f << std::endl;
    // std::cout << setprecision(40) << (float)ux2m1_t.f << std::endl;
    // std::cout << setprecision(40) << (float)u1dsx2m1_t.f << std::endl;
    // std::cout << setprecision(40) << (float)u1dsx2m1_t_t.f << std::endl;
    // std::cout << setprecision(40) << (float)usx2m1_t_t << std::endl;
    // std::cout << setprecision(40) << (float)ux2m1_b << std::endl;
    // std::cout << setprecision(40) << (float)usx2m1_b_t << std::endl;
    // std::cout << setprecision(40) << (float)usx2m1_tb_t << std::endl;
    // assert(0);

    float a1=0.375f, a2=0.3125f, a3=0.5f;
    e = 1 - usx2m1_tb_t * u1dsx2m1_t_t.f;
    tmp = a1 + e * a2;
    p = a3 + e * tmp;
    ep = e * p;
    err1 = usx2m1_tb_t + ep * usx2m1_tb_t;

    // std::cout << setprecision(40) << (float)e << std::endl;
    // std::cout << setprecision(40) << (float)tmp << std::endl;
    // std::cout << setprecision(40) << (float)p << std::endl;
    // std::cout << setprecision(40) << (float)ep << std::endl;
    // std::cout << setprecision(40) << (float)err1 << std::endl;
    // assert(0);

    w = ux.f - 1 + err1;
    w1_max = 1 > w ? 1 : w;
    w1_min = 1 < w ? 1 : w;
    uw_a_1.f = w1_max + w1_min;
    err2.f = w1_max - uw_a_1.f + w1_min;
    err2.u = err2.u & jd_nonan;

    uw_a_1.f = jd_nonan ? uw_a_1.f : ux.f * 9.31322575e-10f;
    ku = uw_a_1.u - TwoThirdf;
    um.u = (ku & 0x007fffff) + TwoThirdf;  // the range specified
    ku >>= 0x17;
    k = ku;
    u1dk2.u = uone.u - (ku << 0x17);

    float c1=-0.151221797, c2=0.138202384114265, c3=0.140423089, c4=-0.164723262,
        c5=0.200079203, c6=-0.250042379, c7=0.333332658, c8=-0.5;

    z = um.f - uone.f;
    z += u1dk2.f * err2.f;
    y = c1 + z * c2;
    y = c3 + z * y;
    y = c4 + z * y;
    y = c5 + z * y;
    y = c6 + z * y;
    y = c7 + z * y;
    y = c8 + z * y;
    y = z * y;
    y = z + z * y;

    k = jd_nonan ? k : k + 31;

    return y + k * LN2f;
}

template <class Abi>
floatv<Abi> acosh(floatv<Abi> x) {
  // Abi_32suf<Abi> ux, um, uw_a_1, u1dk2, ux2m1, ux2m1_t, u1dsx2m1_t, u1dsx2m1_t_t, err2, uone;
  // floatv<Abi> ux2m1_b, usx2m1_t_t, usx2m1_b_t, usx2m1_tb_t, z, w, k, e, p, ep, y, tmp, err1, w1_max, w1_min;
  // uintv<Abi> ku;
  // // , cmp = 0;;

  // ux.f = x;
  // // where(((ux.u & 0x7fffffffU) & 0x7f800000U) >= 0x7f800000U || change_simd_mask_type<float, unsigned int, Abi>(x<=1.0f), cmp) = s2v<int, unsigned int>(-1);
  // uone.f = 1;
  // ux2m1.f = (ux.f * ux.f) - 1.0f;
  // doublev<Abi> test_b = ux.f;
  // test_b = test_b * test_b;
  // std::cout << setprecision(40) << (float)ux.f[0] << std::endl;
  // std::cout << setprecision(40) << (float)ux2m1.f[0] << std::endl;
  // std::cout << setprecision(40) << (ux.f[0] * ux.f[0] - 1.0f) << std::endl;
  // std::cout << setprecision(40) << test_b[0] << std::endl;
  // // ux2m1.f -= 1.0f;
  // // for(size_t i  = 0; i < x.size(); i++)
  // // ux2m1.f[i] = ux.f[i] * ux.f[i] - 1;

  // auto jd_nonan = ux.f < float(1073741824) && ux.f >= 1;
  // ux2m1_t.u = Top16Maskf & ux2m1.u;
  // // u1dsx2m1_t.f = 1 / sqrt(ux2m1_t.f);
  // for(size_t i = 0; i < x.size(); i++)
  //   u1dsx2m1_t.f[i] = 1 / std::sqrt(ux2m1_t.f[i]);

  // u1dsx2m1_t_t.u = u1dsx2m1_t.u & Top16Maskf;
  // usx2m1_t_t = ux2m1_t.f * u1dsx2m1_t_t.f;
  // ux2m1_b = ux2m1.f - ux2m1_t.f;
  // usx2m1_b_t = ux2m1_b * u1dsx2m1_t_t.f;
  // usx2m1_tb_t = usx2m1_t_t + usx2m1_b_t;

  // std::cout << setprecision(40) << (float)x[0] << std::endl;
  // std::cout << setprecision(40) << (float)ux2m1.f[0] << std::endl;
  // std::cout << setprecision(40) << (float)ux2m1_t.f[0] << std::endl;
  // std::cout << setprecision(40) << (float)u1dsx2m1_t.f[0] << std::endl;
  // std::cout << setprecision(40) << (float)u1dsx2m1_t_t.f[0] << std::endl;
  // std::cout << setprecision(40) << (float)usx2m1_t_t[0] << std::endl;
  // std::cout << setprecision(40) << (float)ux2m1_b[0] << std::endl;
  // std::cout << setprecision(40) << (float)usx2m1_b_t[0] << std::endl;
  // std::cout << setprecision(40) << (float)usx2m1_tb_t[0] << std::endl;
  // assert(0);

  // float a1=0.375, a2=0.3125, a3=0.5;
  // e = 1 - usx2m1_tb_t * u1dsx2m1_t_t.f;
  // for(size_t i = 0;i < x.size(); i++)
  //   e[i] = 1 - usx2m1_tb_t[i] * u1dsx2m1_t_t.f[i];

  // tmp = a1 + e * a2;
  // p = a3 + e * tmp;
  // ep = e * p;
  // err1 = usx2m1_tb_t + ep * usx2m1_tb_t;

  // // std::cout << setprecision(40) << (float)e[0] << std::endl;
  // // std::cout << setprecision(40) << (float)tmp[0] << std::endl;
  // // std::cout << setprecision(40) << (float)p[0] << std::endl;
  // // std::cout << setprecision(40) << (float)ep[0] << std::endl;
  // // std::cout << setprecision(40) << (float)err1[0] << std::endl;
  // // assert(0);

  // w = ux.f - 1 + err1;
  // where(1>w, w1_max) = 1;
  // where(1<=w, w1_max) = w;
  // where(1<w, w1_min) = 1;
  // where(1>=w, w1_min) = w;
  // uw_a_1.f = w1_max + w1_min;
  // err2.f = w1_max - uw_a_1.f + w1_min;

  // where(!jd_nonan, err2.f) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);

  // where(!jd_nonan, uw_a_1.f) = ux.f * 9.31322575e-10f;
  // ku = uw_a_1.u - TwoThirdf;
  // um.u = (ku & MASKf_mant) + TwoThirdf;  // the range specified
  // ku >>= 0x17;
  // k = static_simd_cast<floatv<Abi>>(ku);
  // u1dk2.u = uone.u - (ku << 0x17);

  // float c1=-0.151221797, c2=0.138202384114265, c3=0.140423089, c4=-0.164723262,
  //     c5=0.200079203, c6=-0.250042379, c7=0.333332658, c8=-0.5;

  // z = um.f - uone.f;
  // z += u1dk2.f * err2.f;
  // y = c1 + z * c2;
  // y = c3 + z * y;
  // y = c4 + z * y;
  // y = c5 + z * y;
  // y = c6 + z * y;
  // y = c7 + z * y;
  // y = c8 + z * y;
  // y = z * y;
  // y = z + z * y;

  // where(!jd_nonan, k) = k+31;
  // y = y + k * (float)LN2f;

  // // if(reduce(cmp) != 0) [[unlikely]]
  // // {
  // //   for(size_t i = 0; i < x.size(); i++)
  // //   {
  // //     if(cmp[i] != 0)
  // //       y[i] = [](float x) -> float{
  // //         llvm_32suf ux;
  // //         ux.f = x;

  // //         if(x == 1)
  // //             return +0;

  // //         if(ux.u == 0x7f800000)
  // //             return x;

  // //         if(x < 1 || (ux.u & 0x7f800000) >= 0x7f800000)
  // //             return LLVM_NAN_32F;
  // //       }(x[i]);
  // //   }
  // // }


  // floatv<Abi> y;
  // for(size_t i  =0; i < x.size(); i++)
  //   y[i] = acosh_f32_la(x[i]);

  floatv<Abi> one = 1.0f;
  floatv<Abi> ln2 = 6.9314718246e-01f;
  intv<Abi> hx;
  Abi_32suf<Abi> ux;
  ux.f = x;
  hx = ux.i;

  auto spc1 = (hx > 0x40000000);
  auto spc1_f = simd_mask<float, Abi>(hx > 0x40000000);
  auto spc1_1 = (hx >= 0x4d800000);
  auto spc1_1_1 = (hx >= 0x7f800000);
  auto spc1_1_1_mask = simd_mask<float, Abi>(spc1 & spc1_1 & spc1_1_1);
  floatv<Abi> spc1_1_1_result = x + x;
  auto spc1_1_2_mask = simd_mask<float, Abi>(spc1 & spc1_1 & !spc1_1_1);
  floatv<Abi> spc1_1_2_result = log(x) + ln2;
  floatv<Abi> spc1_result = log(2.0f * x - one / (x + sqrt(x * x - one)));
  auto spc2 = simd_mask<float, Abi>(hx > 0x3f800000);
  floatv<Abi> t = x - one;
  floatv<Abi> spc2_result = log1p(t + sqrt(2.0f * t + t * t));
  auto spc3 = simd_mask<float, Abi>(hx == 0x3f800000);
  
  floatv<Abi> y = (x - x) / (x - x);
  where(spc3, y) = 0.0f;
  where(spc2, y) = spc2_result;
  where(spc1_f, y) = spc1_result;
  where(spc1_1_2_mask, y) = spc1_1_2_result;
  where(spc1_1_1_mask, y) = spc1_1_1_result;

  return y;
}

template <class Abi> doublev<Abi> acosh(doublev<Abi> x) 
{
  doublev<Abi> one = 1.0;
  doublev<Abi> ln2 = 6.93147180559945286227e-01;
  longv<Abi> hx;
  Abi_64suf<Abi> ux;
  ux.f = x;
  hx = ux.i;

  auto spc1 = (hx > 0x4000000000000000);
  auto spc1_f = simd_mask<double, Abi>(hx > 0x4000000000000000);
  auto spc1_1 = (hx >= 0x41b0000000000000);
  auto spc1_1_1 = (hx >= 0x7ff0000000000000);
  auto spc1_1_1_mask = simd_mask<double, Abi>(spc1 & spc1_1 & spc1_1_1);
  doublev<Abi> spc1_1_1_result = x + x;
  auto spc1_1_2_mask = simd_mask<double, Abi>(spc1 & spc1_1 & !spc1_1_1);
  doublev<Abi> spc1_1_2_result = log(x) + ln2;
  doublev<Abi> spc1_result = log(2.0 * x - one / (x + sqrt(x * x - one)));
  auto spc2 = simd_mask<double, Abi>(hx > 0x3ff0000000000000);
  doublev<Abi> t = x - one;
  doublev<Abi> spc2_result = log1p(t + sqrt(2.0 * t + t * t));
  auto spc3 = simd_mask<double, Abi>(hx == 0x3ff0000000000000);
  
  doublev<Abi> result = (x - x) / (x - x);
  where(spc3, result) = 0.0;
  where(spc2, result) = spc2_result;
  where(spc1_f, result) = spc1_result;
  where(spc1_1_2_mask, result) = spc1_1_2_result;
  where(spc1_1_1_mask, result) = spc1_1_1_result;

  return result;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> cosh(ldoublev<Abi> x)
{
  long double huge = 1.0e4900L,
              ovf_thresh = 1.1357216553474703894801348310092223067821E4L,
              half = 0.5L,
              one = 1.0L;
  ldoublev<Abi> t, w, res;
  intv<Abi> ex;
  Abi_128suf<Abi> u;


  /* Words of |x|. */
  u.f = x;
  ex = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(u.u) >> 32) & 0x7fffffffU);
  u.u = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(ex) << 96);

  auto jd1 = change_simd_mask_type<int32_t, long double, Abi>(ex >= 0x7fff0000);
  where(jd1, res) = x * x;

  auto jd2 = change_simd_mask_type<int32_t, long double, Abi>(ex < 0x3ffd62e4);
  where(jd2, t) = expm1(u.f);

  where(!jd1 & jd2, w) = one + t;
  where(!jd1 & jd2, res) = one + (t * t) / (w + w);
  where(!jd1 & jd2 & change_simd_mask_type<int32_t, long double, Abi>(ex < 0x3fb80000), res) = w;


  auto jd3 = change_simd_mask_type<int32_t, long double, Abi>(ex < 0x40044000);
  where(jd3 & !jd1 & !jd2, t) = exp(u.f);
  where(!jd1 & !jd2 & jd3, res) = half * t + half / t;


  auto jd4 = change_simd_mask_type<int32_t, long double, Abi>(ex <= 0x400c62e3);
  where(jd4 & !jd3 & !jd1 & !jd2, res) = half * exp(u.f);

  auto jd5 = (u.f <= ovf_thresh);
  where(jd5, w) = exp(half * u.f);
  where(jd4, t) = half * w;
  where(!jd1 & !jd2 & !jd3 & !jd4 & jd5, res) = t * w;
  where(!jd1 & !jd2 & !jd3 & !jd4 & !jd5, res) = huge * huge;

  return res;

}
#else
template<class Abi> ldoublev<Abi> cosh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = cosh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> acosh(ldoublev<Abi> x)
{
    ldoublev<Abi> ln2 = 0.6931471805599453094172321214581766L;
    ldoublev<Abi> one = 1.0L;
    ldoublev<Abi> t, res;
    ulongv<Abi> lx;
    longv<Abi> hx;
    Abi_128suf<Abi> qw_u;                
    qw_u.f = (x);                    
    (hx) = static_simd_cast<longv<Abi>>(qw_u.u >> 64);            
    (lx) = static_simd_cast<ulongv<Abi>>((qw_u.u << 64) >> 64);  

    auto jd1 = change_simd_mask_type<long int, long double, Abi>(hx < 0x3fff000000000000LL);
    where(jd1, res) = (x - x) / (x - x);

    auto jd2 = change_simd_mask_type<long int, long double, Abi>(hx >= 0x4035000000000000LL);
    auto jd3 = change_simd_mask_type<long int, long double, Abi>(hx >= 0x7fff000000000000LL);
    where(!jd1 & jd2 & jd3, res) = x + x;
    where(!jd1 & jd2 & !jd3, res) = (log(x) + ln2);

    jd3 = change_simd_mask_type<unsigned long int, long double, Abi>((static_simd_cast<ulongv<Abi>>(hx - 0x3fff000000000000LL) | lx) == 0);
    where(!jd1 & !jd2 & jd3, res) = 0.0L; 

    auto jd4 = change_simd_mask_type<long int, long double, Abi>(hx > 0x4000000000000000LL);
    where(jd4, t) = x * x;
    where(!jd1 & !jd2 & !jd3 & jd4, res) = log(2.0L * x - one / (x + sqrt(t - one)));

    t = x - one;
    where(!jd1 & !jd2 & !jd3 & !jd4, res) = log1p(t + sqrt(2.0L * t + t * t));
    return res;
}
#else
template <class Abi> ldoublev<Abi> acosh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = acosh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif



















#define HIGH_HALF 1
#define LOW_HALF 0

typedef union { int i[2]; double x; double d; } Tri_scale;


static const Tri_scale
/**/           t576 = {{0x00000000, 0x63f00000}},  /* 2 ^ 576  */
/**/          tm600 = {{0x00000000, 0x1a700000}},  /* 2 ^- 600 */
/**/           tm24 = {{0x00000000, 0x3e700000}},  /* 2 ^- 24  */
/**/            big = {{0x00000000, 0x43380000}},  /*  6755399441055744      */
/**/           big1 = {{0x00000000, 0x43580000}},  /* 27021597764222976      */
/**/            hp0 = {{0x54442D18, 0x3FF921FB}},  /* 1.5707963267948966     */
/**/            hp1 = {{0x33145C07, 0x3C91A626}},  /* 6.123233995736766e-17  */
/**/            mp1 = {{0x58000000, 0x3FF921FB}},  /* 1.5707963407039642     */
/**/            mp2 = {{0x40000000, (int)0xBE4DDE97}};  /*-1.3909067675399456e-08 */

static const double toverp[75] = { /*  2/ PI base 24*/
  10680707.0,  7228996.0,  1387004.0,  2578385.0, 16069853.0,
  12639074.0,  9804092.0,  4427841.0, 16666979.0, 11263675.0,
  12935607.0,  2387514.0,  4345298.0, 14681673.0,  3074569.0,
  13734428.0, 16653803.0,  1880361.0, 10960616.0,  8533493.0,
   3062596.0,  8710556.0,  7349940.0,  6258241.0,  3772886.0,
   3769171.0,  3798172.0,  8675211.0, 12450088.0,  3874808.0,
   9961438.0,   366607.0, 15675153.0,  9132554.0,  7151469.0,
   3571407.0,  2607881.0, 12013382.0,  4155038.0,  6285869.0,
   7677882.0, 13102053.0, 15825725.0,   473591.0,  9065106.0,
  15363067.0,  6271263.0,  9264392.0,  5636912.0,  4652155.0,
   7056368.0, 13614112.0, 10155062.0,  1944035.0,  9527646.0,
  15080200.0,  6658437.0,  6231200.0,  6832269.0, 16767104.0,
   5075751.0,  3212806.0,  1398474.0,  7579849.0,  6349435.0,
  12618859.0,  4703257.0, 12806093.0, 14477321.0,  2786137.0,
  12875403.0,  9837734.0, 14528324.0, 13719321.0,   343717.0 };

static int branred(double x, double *a, double *aa)
{


double split =  134217729.0;


  llvm_64suf ut;
  int i,k;
  Tri_scale u,gor;
  double r[6],s,t,sum,b,bb,sum1,sum2,b1,bb1,b2,bb2,x1,x2,t1,t2;
  x*=tm600.x;
  t=x*split;
  ut.f = x*split;
  ut.u += 0x1;
  t = ut.f;
  ut.f = t-(t-x);
  x1=t-(t-x);
  x2=x-x1;
  sum=0;
  u.x = x1;
  k = (u.i[HIGH_HALF]>>20)&2047;
  k = (k-450)/24;
  if (k<0)
    k=0;
  gor.x = t576.x;
  gor.i[HIGH_HALF] -= ((k*24)<<20);
  for (i=0;i<6;i++)
    { r[i] = x1*toverp[k+i]*gor.x; gor.x *= tm24.x; }
  for (i=0;i<3;i++) {
    s=(r[i]+big.x)-big.x;
    sum+=s;
    r[i]-=s;
  }
  t=0;
  for (i=0;i<6;i++)
    t+=r[5-i];
  bb=(((((r[0]-t)+r[1])+r[2])+r[3])+r[4])+r[5];
  s=(t+big.x)-big.x;
  sum+=s;
  t-=s;
  b=t+bb;
  bb=(t-b)+bb;
  s=(sum+big1.x)-big1.x;
  sum-=s;
  b1=b;
  bb1=bb;
  sum1=sum;
  sum=0;

  u.x = x2;
  k = (u.i[HIGH_HALF]>>20)&2047;
  k = (k-450)/24;
  if (k<0)
    k=0;
  gor.x = t576.x;
  gor.i[HIGH_HALF] -= ((k*24)<<20);
  for (i=0;i<6;i++)
    { r[i] = x2*toverp[k+i]*gor.x; gor.x *= tm24.x; }
  for (i=0;i<3;i++) {
    s=(r[i]+big.x)-big.x;
    sum+=s;
    r[i]-=s;
  }
  t=0;
  for (i=0;i<6;i++)
    t+=r[5-i];
  bb=(((((r[0]-t)+r[1])+r[2])+r[3])+r[4])+r[5];
  s=(t+big.x)-big.x;
  sum+=s;
  t-=s;
  b=t+bb;
  bb=(t-b)+bb;
  s=(sum+big1.x)-big1.x;
  sum-=s;

  b2=b;
  bb2=bb;
  sum2=sum;

  sum=sum1+sum2;
  b=b1+b2;
  bb = (fabs(b1)>fabs(b2))? (b1-b)+b2 : (b2-b)+b1;
  if (b > 0.5)
    {b-=1.0; sum+=1.0;}
  else if (b < -0.5)
    {b+=1.0; sum-=1.0;}
  s=b+(bb+bb1+bb2);
  t=((b-s)+bb)+(bb1+bb2);
  b=s*split;
  t1=b-(b-s);
  t2=s-t1;
  b=s*hp0.x;
  bb=(((t1*mp1.x-b)+t1*mp2.x)+t2*mp1.x)+(t2*mp2.x+s*hp1.x+t*hp0.x);
  s=b+bb;
  t=(b-s)+bb;
  *a=s;
  *aa=t;
  return ((int) sum)&3;
}



static const union {int i[880]; double x[440];} __sincostab = { .i = {
/**/                   (int)0x00000000, (int)0x00000000,
/**/                   (int)0x00000000, (int)0x00000000,
/**/                   (int)0x00000000, (int)0x3FF00000,
/**/                   (int)0x00000000, (int)0x00000000,
/**/                   (int)0xAAAEEEEF, (int)0x3F7FFFEA,
/**/                   (int)0xEC67B77C, (int)0xBC1E45E2,
/**/                   (int)0x00155552, (int)0x3FEFFFC0,
/**/                   (int)0xA0196DAE, (int)0x3C8F4A01,
/**/                   (int)0xAAEEEED5, (int)0x3F8FFFAA,
/**/                   (int)0x9A9F0777, (int)0xBC02AB63,
/**/                   (int)0x0155549F, (int)0x3FEFFF00,
/**/                   (int)0xA03A5EF3, (int)0x3C828A28,
/**/                   (int)0x01033255, (int)0x3F97FF70,
/**/                   (int)0x51527336, (int)0x3BFEFE2B,
/**/                   (int)0x06BFF7E6, (int)0x3FEFFDC0,
/**/                   (int)0xE86977BD, (int)0x3C8AE6DA,
/**/                   (int)0xAEEEE86F, (int)0x3F9FFEAA,
/**/                   (int)0xFB224AE2, (int)0xBC3CD406,
/**/                   (int)0x155527D3, (int)0x3FEFFC00,
/**/                   (int)0x92D89B5B, (int)0xBC83B544,
/**/                   (int)0xB12D45D5, (int)0x3FA3FEB2,
/**/                   (int)0x203D1C11, (int)0x3C34EC54,
/**/                   (int)0x3414A7BA, (int)0x3FEFF9C0,
/**/                   (int)0xBE6C59BF, (int)0x3C6991F4,
/**/                   (int)0x1032FBA9, (int)0x3FA7FDC0,
/**/                   (int)0xF46E997A, (int)0xBC4599BD,
/**/                   (int)0x6BFDF99F, (int)0x3FEFF700,
/**/                   (int)0x60648D5F, (int)0xBC78B3B5,
/**/                   (int)0x78586DAC, (int)0x3FABFC6D,
/**/                   (int)0x03DBF236, (int)0x3C18E4FD,
/**/                   (int)0xC8103A31, (int)0x3FEFF3C0,
/**/                   (int)0xBDDC0E66, (int)0x3C74856D,
/**/                   (int)0xEEED4EDB, (int)0x3FAFFAAA,
/**/                   (int)0x32684B69, (int)0xBC42D16D,
/**/                   (int)0x5549F4D3, (int)0x3FEFF001,
/**/                   (int)0x7B99426F, (int)0x3C832838,
/**/                   (int)0x3D808BEF, (int)0x3FB1FC34,
/**/                   (int)0xE6F3BE4F, (int)0xBC5F3D32,
/**/                   (int)0x22A8EF9F, (int)0x3FEFEBC2,
/**/                   (int)0x34F54C77, (int)0x3C579349,
/**/                   (int)0x12D1755B, (int)0x3FB3FACB,
/**/                   (int)0x5299468C, (int)0xBC592191,
/**/                   (int)0x4129EF6F, (int)0x3FEFE703,
/**/                   (int)0x37C96F97, (int)0xBC6CBF43,
/**/                   (int)0xFD10B737, (int)0x3FB5F911,
/**/                   (int)0x02BE9102, (int)0xBC50184F,
/**/                   (int)0xC3C873EB, (int)0x3FEFE1C4,
/**/                   (int)0x057C4A02, (int)0xBC35A9C9,
/**/                   (int)0x032550E4, (int)0x3FB7F701,
/**/                   (int)0x1800501A, (int)0x3C3AFC2D,
/**/                   (int)0xBF7E6B9B, (int)0x3FEFDC06,
/**/                   (int)0xB535F8DB, (int)0x3C831902,
/**/                   (int)0x2D55D1F9, (int)0x3FB9F490,
/**/                   (int)0x7EAC1DC1, (int)0x3C52696D,
/**/                   (int)0x4B43E000, (int)0x3FEFD5C9,
/**/                   (int)0xCB4F92F9, (int)0xBC62E768,
/**/                   (int)0x8568391D, (int)0x3FBBF1B7,
/**/                   (int)0x1DEA4CC8, (int)0x3C5E9184,
/**/                   (int)0x800E99B1, (int)0x3FEFCF0C,
/**/                   (int)0x86D186AC, (int)0x3C6EA3D7,
/**/                   (int)0x16C1CCE6, (int)0x3FBDEE6F,
/**/                   (int)0x2FB71673, (int)0xBC450F8E,
/**/                   (int)0x78D1BC88, (int)0x3FEFC7D0,
/**/                   (int)0x447DB685, (int)0x3C8075D2,
/**/                   (int)0xEE86EE36, (int)0x3FBFEAAE,
/**/                   (int)0xBCC6F03B, (int)0xBC4AFCB2,
/**/                   (int)0x527D5BD3, (int)0x3FEFC015,
/**/                   (int)0x5094EFB8, (int)0x3C8B68F3,
/**/                   (int)0x8DDD71D1, (int)0x3FC0F337,
/**/                   (int)0x724F0F9E, (int)0x3C6D8468,
/**/                   (int)0x2BFE0695, (int)0x3FEFB7DB,
/**/                   (int)0xF4F65AB1, (int)0x3C821DAD,
/**/                   (int)0xD7AFCEAF, (int)0x3FC1F0D3,
/**/                   (int)0x099769A5, (int)0xBC66EF95,
/**/                   (int)0x263C4BD3, (int)0x3FEFAF22,
/**/                   (int)0x133A2769, (int)0xBC552ACE,
/**/                   (int)0x5E4AB88F, (int)0x3FC2EE28,
/**/                   (int)0x05DEE058, (int)0xBC6E4D0F,
/**/                   (int)0x641C36F2, (int)0x3FEFA5EA,
/**/                   (int)0xED17CC7C, (int)0x3C404DA6,
/**/                   (int)0x2C5D66CB, (int)0x3FC3EB31,
/**/                   (int)0x6B66CB91, (int)0x3C647D66,
/**/                   (int)0x0A7CC428, (int)0x3FEF9C34,
/**/                   (int)0x063B7462, (int)0x3C8C5B6B,
/**/                   (int)0x4DC5F27B, (int)0x3FC4E7EA,
/**/                   (int)0x2AC072FC, (int)0x3C5949DB,
/**/                   (int)0x40374D01, (int)0x3FEF91FF,
/**/                   (int)0x4D3A9E4C, (int)0xBC67D03F,
/**/                   (int)0xCFA126F3, (int)0x3FC5E44F,
/**/                   (int)0x063F89B6, (int)0xBC66F443,
/**/                   (int)0x2E1EECF6, (int)0x3FEF874C,
/**/                   (int)0xE1332B16, (int)0xBC8C6514,
/**/                   (int)0xC05A4D4C, (int)0x3FC6E05D,
/**/                   (int)0x8B81C940, (int)0xBBD32C5C,
/**/                   (int)0xFEFFDE24, (int)0x3FEF7C1A,
/**/                   (int)0xC47540B1, (int)0xBC78F55B,
/**/                   (int)0x2FBAF2B5, (int)0x3FC7DC10,
/**/                   (int)0xE23C97C3, (int)0x3C45AB50,
/**/                   (int)0xDF9ECE1C, (int)0x3FEF706B,
/**/                   (int)0x0C36DCB4, (int)0xBC8698C8,
/**/                   (int)0x2EFAA944, (int)0x3FC8D763,
/**/                   (int)0x62CBB953, (int)0xBC620FA2,
/**/                   (int)0xFEB82ACD, (int)0x3FEF643E,
/**/                   (int)0xC1FE28AC, (int)0x3C76B00A,
/**/                   (int)0xD0CEC312, (int)0x3FC9D252,
/**/                   (int)0x80B1137D, (int)0x3C59C43D,
/**/                   (int)0x8CFF6797, (int)0x3FEF5794,
/**/                   (int)0x3E03B1D5, (int)0x3C6E3A0D,
/**/                   (int)0x297A0765, (int)0x3FCACCDB,
/**/                   (int)0x57D6CDEB, (int)0xBC59883B,
/**/                   (int)0xBD1E3A79, (int)0x3FEF4A6C,
/**/                   (int)0xEDAEBB57, (int)0x3C813DF0,
/**/                   (int)0x4EDC6199, (int)0x3FCBC6F8,
/**/                   (int)0x6A7B0CAB, (int)0x3C69C1A5,
/**/                   (int)0xC3B3D16E, (int)0x3FEF3CC7,
/**/                   (int)0xD28A3494, (int)0xBC621A3A,
/**/                   (int)0x588289A3, (int)0x3FCCC0A6,
/**/                   (int)0x9BC87C6B, (int)0xBC6868D0,
/**/                   (int)0xD753FFED, (int)0x3FEF2EA5,
/**/                   (int)0x5F56D583, (int)0x3C8CC421,
/**/                   (int)0x5FB5A5D0, (int)0x3FCDB9E1,
/**/                   (int)0xD6CC6FC2, (int)0xBC632E20,
/**/                   (int)0x3086649F, (int)0x3FEF2007,
/**/                   (int)0x16C1984B, (int)0x3C7B9404,
/**/                   (int)0x7F8AE5A3, (int)0x3FCEB2A5,
/**/                   (int)0xAF572CEB, (int)0xBC60BE06,
/**/                   (int)0x09C5873B, (int)0x3FEF10EC,
/**/                   (int)0x762C1283, (int)0x3C8D9072,
/**/                   (int)0xD4F31577, (int)0x3FCFAAEE,
/**/                   (int)0x508E32B8, (int)0xBC615D88,
/**/                   (int)0x9F7DEEA1, (int)0x3FEF0154,
/**/                   (int)0x99E5CAFD, (int)0x3C8D3C1E,
/**/                   (int)0xBF65155C, (int)0x3FD0515C,
/**/                   (int)0x9DFD8EC8, (int)0xBC79B8C2,
/**/                   (int)0x300D2F26, (int)0x3FEEF141,
/**/                   (int)0x08DED372, (int)0xBC82AA1B,
/**/                   (int)0xCEF36436, (int)0x3FD0CD00,
/**/                   (int)0x0C93E2B5, (int)0xBC79FB0A,
/**/                   (int)0xFBC0F11C, (int)0x3FEEE0B1,
/**/                   (int)0x80BBC3B1, (int)0xBC4BFD23,
/**/                   (int)0xAA94DDEB, (int)0x3FD14861,
/**/                   (int)0xB5B615A4, (int)0xBC6BE881,
/**/                   (int)0x44D5EFA1, (int)0x3FEECFA7,
/**/                   (int)0x4AF541D0, (int)0xBC556D0A,
/**/                   (int)0x64C6B876, (int)0x3FD1C37D,
/**/                   (int)0xFE0DCFF5, (int)0x3C746076,
/**/                   (int)0x4F76EFA8, (int)0x3FEEBE21,
/**/                   (int)0x12BA543E, (int)0xBC802F9F,
/**/                   (int)0x111AAF36, (int)0x3FD23E52,
/**/                   (int)0x334EFF18, (int)0xBC74F080,
/**/                   (int)0x61BBAF4F, (int)0x3FEEAC20,
/**/                   (int)0x3E94658D, (int)0x3C62C1D5,
/**/                   (int)0xC43EB49F, (int)0x3FD2B8DD,
/**/                   (int)0x99F2D807, (int)0x3C615538,
/**/                   (int)0xC3A7CD83, (int)0x3FEE99A4,
/**/                   (int)0x1BC53CE8, (int)0xBC82264B,
/**/                   (int)0x94049F87, (int)0x3FD3331E,
/**/                   (int)0xB40C302C, (int)0x3C7E0CB6,
/**/                   (int)0xBF29A9ED, (int)0x3FEE86AE,
/**/                   (int)0xFDBB58A7, (int)0x3C89397A,
/**/                   (int)0x9769D3D8, (int)0x3FD3AD12,
/**/                   (int)0x04878398, (int)0x3C003D55,
/**/                   (int)0xA0193D40, (int)0x3FEE733E,
/**/                   (int)0x3546CE13, (int)0xBC86428B,
/**/                   (int)0xE69EE697, (int)0x3FD426B7,
/**/                   (int)0x5705C59F, (int)0xBC7F09C7,
/**/                   (int)0xB436E9D0, (int)0x3FEE5F54,
/**/                   (int)0xD02FC8BC, (int)0x3C87EB0F,
/**/                   (int)0x9B0F3D20, (int)0x3FD4A00C,
/**/                   (int)0x6BB08EAD, (int)0x3C7823BA,
/**/                   (int)0x4B2A449C, (int)0x3FEE4AF1,
/**/                   (int)0x2E8A6833, (int)0xBC868CA0,
/**/                   (int)0xCF68A77A, (int)0x3FD5190E,
/**/                   (int)0x55EEF0F3, (int)0x3C7B3571,
/**/                   (int)0xB680D6A5, (int)0x3FEE3614,
/**/                   (int)0xAA015237, (int)0xBC727793,
/**/                   (int)0x9FA2F597, (int)0x3FD591BC,
/**/                   (int)0xAC3FE0CB, (int)0x3C67C74B,
/**/                   (int)0x49ACD6C1, (int)0x3FEE20BF,
/**/                   (int)0xC7EF636C, (int)0xBC5660AE,
/**/                   (int)0x29078775, (int)0x3FD60A14,
/**/                   (int)0x0BA89133, (int)0x3C5B1FD8,
/**/                   (int)0x5A03DBCE, (int)0x3FEE0AF1,
/**/                   (int)0x02771AE6, (int)0x3C5FE8E7,
/**/                   (int)0x8A38D7F7, (int)0x3FD68213,
/**/                   (int)0x02444AAD, (int)0xBC7D8892,
/**/                   (int)0x3EBD875E, (int)0x3FEDF4AB,
/**/                   (int)0x7E6736C4, (int)0xBC8E2D8A,
/**/                   (int)0xE33A0255, (int)0x3FD6F9B8,
/**/                   (int)0x4EE9DA0D, (int)0x3C742BC1,
/**/                   (int)0x50F228D6, (int)0x3FEDDDED,
/**/                   (int)0xD42BA2BF, (int)0xBC6E80C8,
/**/                   (int)0x55764214, (int)0x3FD77102,
/**/                   (int)0x314BB6CE, (int)0xBC66EAD7,
/**/                   (int)0xEB995912, (int)0x3FEDC6B7,
/**/                   (int)0x776DCD35, (int)0x3C54B364,
/**/                   (int)0x03C86D4E, (int)0x3FD7E7EE,
/**/                   (int)0xDABF5AF2, (int)0xBC7B63BC,
/**/                   (int)0x6B888E83, (int)0x3FEDAF0B,
/**/                   (int)0x2B5E5CEA, (int)0x3C8A249E,
/**/                   (int)0x12826949, (int)0x3FD85E7A,
/**/                   (int)0x9B5FACE0, (int)0x3C78A40E,
/**/                   (int)0x2F71A9DC, (int)0x3FED96E8,
/**/                   (int)0xD5D2039D, (int)0x3C8FF61B,
/**/                   (int)0xA774992F, (int)0x3FD8D4A4,
/**/                   (int)0xEA766326, (int)0x3C744A02,
/**/                   (int)0x97E17B4A, (int)0x3FED7E4E,
/**/                   (int)0x352BED94, (int)0xBC63B770,
/**/                   (int)0xE9F546C5, (int)0x3FD94A6B,
/**/                   (int)0x3E683F58, (int)0xBC769CE1,
/**/                   (int)0x073E4040, (int)0x3FED653F,
/**/                   (int)0x434BEC37, (int)0xBC876236,
/**/                   (int)0x02E80510, (int)0x3FD9BFCE,
/**/                   (int)0xA320B0A4, (int)0x3C709E39,
/**/                   (int)0xE1C619E0, (int)0x3FED4BB9,
/**/                   (int)0x77858F61, (int)0x3C8F34BB,
/**/                   (int)0x1CC50CCA, (int)0x3FDA34C9,
/**/                   (int)0x3B50CECD, (int)0xBC5A310E,
/**/                   (int)0x8D8D7C06, (int)0x3FED31BF,
/**/                   (int)0x3089CBDD, (int)0x3C7E60DD,
/**/                   (int)0x63A09277, (int)0x3FDAA95B,
/**/                   (int)0xB13C0381, (int)0xBC66293E,
/**/                   (int)0x727D94F0, (int)0x3FED1750,
/**/                   (int)0x1EC1A48E, (int)0x3C80D52B,
/**/                   (int)0x05321617, (int)0x3FDB1D83,
/**/                   (int)0xCB99F519, (int)0xBC7AE242,
/**/                   (int)0xFA52AD9F, (int)0x3FECFC6C,
/**/                   (int)0x508F2A0D, (int)0x3C88B5B5,
/**/                   (int)0x30DBAC43, (int)0x3FDB913E,
/**/                   (int)0x2F6C3FF1, (int)0xBC7E38AD,
/**/                   (int)0x909A82E5, (int)0x3FECE115,
/**/                   (int)0xBB31109A, (int)0x3C81F139,
/**/                   (int)0x17B140A3, (int)0x3FDC048B,
/**/                   (int)0x757E9FA7, (int)0x3C619FE6,
/**/                   (int)0xA2B2972E, (int)0x3FECC54A,
/**/                   (int)0x2BA83A98, (int)0x3C64EE16,
/**/                   (int)0xEC7FD19E, (int)0x3FDC7767,
/**/                   (int)0x1A3D5826, (int)0xBC5EB14D,
/**/                   (int)0x9FC67D0B, (int)0x3FECA90C,
/**/                   (int)0x485E3462, (int)0xBC646A81,
/**/                   (int)0xE3D4A51F, (int)0x3FDCE9D2,
/**/                   (int)0x12DAE298, (int)0xBC62FC8A,
/**/                   (int)0xF8CE1A84, (int)0x3FEC8C5B,
/**/                   (int)0xA1590123, (int)0x3C7AB3D1,
/**/                   (int)0x34047661, (int)0x3FDD5BCA,
/**/                   (int)0xA75FC29C, (int)0x3C728A44,
/**/                   (int)0x208BE53B, (int)0x3FEC6F39,
/**/                   (int)0xFBAADB42, (int)0xBC8741DB,
/**/                   (int)0x15329C9A, (int)0x3FDDCD4C,
/**/                   (int)0xE171FD9A, (int)0x3C70D4C6,
/**/                   (int)0x8B8B175E, (int)0x3FEC51A4,
/**/                   (int)0x3B9AA880, (int)0xBC61BBB4,
/**/                   (int)0xC1582A69, (int)0x3FDE3E56,
/**/                   (int)0x1099F88F, (int)0xBC50A482,
/**/                   (int)0xB01DDD81, (int)0x3FEC339E,
/**/                   (int)0xEE82C5C0, (int)0xBC8CAAF5,
/**/                   (int)0x744B05F0, (int)0x3FDEAEE8,
/**/                   (int)0x3C9B027D, (int)0xBC5789B4,
/**/                   (int)0x065B7D50, (int)0x3FEC1528,
/**/                   (int)0x1312E828, (int)0xBC889211,
/**/                   (int)0x6BC4F97B, (int)0x3FDF1EFF,
/**/                   (int)0xF8A7525C, (int)0x3C717212,
/**/                   (int)0x081E7536, (int)0x3FEBF641,
/**/                   (int)0x1628A9A1, (int)0x3C8B7BD7,
/**/                   (int)0xE76ABC97, (int)0x3FDF8E99,
/**/                   (int)0xAF2D00A3, (int)0x3C59D950,
/**/                   (int)0x310294F5, (int)0x3FEBD6EA,
/**/                   (int)0xC88C109D, (int)0x3C731BBC,
/**/                   (int)0x28D2F57A, (int)0x3FDFFDB6,
/**/                   (int)0x2E905B6A, (int)0x3C6F4A99,
/**/                   (int)0xFE630F32, (int)0x3FEBB723,
/**/                   (int)0x452D0A39, (int)0x3C772BD2,
/**/                   (int)0x39C69955, (int)0x3FE03629,
/**/                   (int)0x78397B01, (int)0xBC82D8CD,
/**/                   (int)0xEF58840E, (int)0x3FEB96EE,
/**/                   (int)0xC78FADE0, (int)0x3C545A3C,
/**/                   (int)0x86946E5B, (int)0x3FE06D36,
/**/                   (int)0x4538FF1B, (int)0x3C83F5AE,
/**/                   (int)0x84B704C2, (int)0x3FEB764B,
/**/                   (int)0xC21B389B, (int)0xBC8F5848,
/**/                   (int)0x1E9E1001, (int)0x3FE0A402,
/**/                   (int)0xA13914F6, (int)0xBC86F643,
/**/                   (int)0x410C104E, (int)0x3FEB553A,
/**/                   (int)0x47027A16, (int)0x3C58FF79,
/**/                   (int)0x26B5672E, (int)0x3FE0DA8B,
/**/                   (int)0xF0BEE909, (int)0xBC8A58DE,
/**/                   (int)0xA89C8948, (int)0x3FEB33BB,
/**/                   (int)0x1D1F6CA9, (int)0x3C8EA6A5,
/**/                   (int)0xC4B69C3B, (int)0x3FE110D0,
/**/                   (int)0x98809981, (int)0x3C8D9189,
/**/                   (int)0x4162A4C6, (int)0x3FEB11D0,
/**/                   (int)0x1EFBC0C2, (int)0x3C71DD56,
/**/                   (int)0x1F8B7F82, (int)0x3FE146D2,
/**/                   (int)0x5E2739A8, (int)0x3C7BF953,
/**/                   (int)0x930BD275, (int)0x3FEAEF78,
/**/                   (int)0x79746F94, (int)0xBC7F8362,
/**/                   (int)0x5F2EEDB0, (int)0x3FE17C8E,
/**/                   (int)0x102E2488, (int)0x3C635E57,
/**/                   (int)0x26F69DE5, (int)0x3FEACCB5,
/**/                   (int)0x8DD6B6CC, (int)0x3C88FB6A,
/**/                   (int)0xACB02FDD, (int)0x3FE1B204,
/**/                   (int)0x70CBB5FF, (int)0xBC5F190C,
/**/                   (int)0x88308913, (int)0x3FEAA986,
/**/                   (int)0x07CD5070, (int)0xBC0B83D6,
/**/                   (int)0x3236574C, (int)0x3FE1E734,
/**/                   (int)0xA4F41D5A, (int)0x3C722A3F,
/**/                   (int)0x4373E02D, (int)0x3FEA85ED,
/**/                   (int)0x385EC792, (int)0x3C69BE06,
/**/                   (int)0x1B0394CF, (int)0x3FE21C1C,
/**/                   (int)0x4B23AA31, (int)0x3C5E5B32,
/**/                   (int)0xE72586AF, (int)0x3FEA61E9,
/**/                   (int)0xE2FD453F, (int)0x3C858330,
/**/                   (int)0x93788BBB, (int)0x3FE250BB,
/**/                   (int)0x2457BCCE, (int)0x3C7EA3D0,
/**/                   (int)0x0352BDCF, (int)0x3FEA3D7D,
/**/                   (int)0xECA19669, (int)0xBC868DBA,
/**/                   (int)0xC917A067, (int)0x3FE28511,
/**/                   (int)0xD9A16B70, (int)0xBC801DF1,
/**/                   (int)0x29AEE445, (int)0x3FEA18A7,
/**/                   (int)0x736C0358, (int)0x3C395E25,
/**/                   (int)0xEA88421E, (int)0x3FE2B91D,
/**/                   (int)0xDB216AB0, (int)0xBC8FA371,
/**/                   (int)0xED912F85, (int)0x3FE9F368,
/**/                   (int)0xC5791606, (int)0xBC81D200,
/**/                   (int)0x279A3082, (int)0x3FE2ECDF,
/**/                   (int)0xE0E7E37E, (int)0x3C8D3557,
/**/                   (int)0xE3F25E5C, (int)0x3FE9CDC2,
/**/                   (int)0x12993F62, (int)0x3C83F991,
/**/                   (int)0xB148BC4F, (int)0x3FE32054,
/**/                   (int)0x095A135B, (int)0x3C8F6B42,
/**/                   (int)0xA36A6514, (int)0x3FE9A7B5,
/**/                   (int)0xCC9FA7A9, (int)0x3C8722CF,
/**/                   (int)0xB9BE0367, (int)0x3FE3537D,
/**/                   (int)0x7AF040F0, (int)0x3C6B327E,
/**/                   (int)0xC42E1310, (int)0x3FE98141,
/**/                   (int)0x0488F08D, (int)0x3C8D1FF8,
/**/                   (int)0x7456282B, (int)0x3FE38659,
/**/                   (int)0xA93B07A8, (int)0xBC710FAD,
/**/                   (int)0xE00CB1FD, (int)0x3FE95A67,
/**/                   (int)0xA21F862D, (int)0xBC80BEFD,
/**/                   (int)0x15A2840A, (int)0x3FE3B8E7,
/**/                   (int)0xA7D2F07B, (int)0xBC797653,
/**/                   (int)0x926D9E92, (int)0x3FE93328,
/**/                   (int)0x03600CDA, (int)0xBC8BB770,
/**/                   (int)0xD36CD53A, (int)0x3FE3EB25,
/**/                   (int)0xE1570FC0, (int)0xBC5BE570,
/**/                   (int)0x784DDAF7, (int)0x3FE90B84,
/**/                   (int)0x0AB93B87, (int)0xBC70FEB1,
/**/                   (int)0xE4BA6790, (int)0x3FE41D14,
/**/                   (int)0xD287ECF5, (int)0x3C84608F,
/**/                   (int)0x303D9AD1, (int)0x3FE8E37C,
/**/                   (int)0xB53D4BF8, (int)0xBC6463A4,
/**/                   (int)0x81CF386B, (int)0x3FE44EB3,
/**/                   (int)0x1E6A5505, (int)0xBC83ED6C,
/**/                   (int)0x5A5DC900, (int)0x3FE8BB10,
/**/                   (int)0x3E9474C1, (int)0x3C8863E0,
/**/                   (int)0xE431159F, (int)0x3FE48000,
/**/                   (int)0x7463ED10, (int)0xBC8B194A,
/**/                   (int)0x985D871F, (int)0x3FE89241,
/**/                   (int)0xC413ED84, (int)0x3C8C48D9,
/**/                   (int)0x46AAB761, (int)0x3FE4B0FC,
/**/                   (int)0x738CC59A, (int)0x3C20DA05,
/**/                   (int)0x8D77A6C6, (int)0x3FE86910,
/**/                   (int)0xE2BFE9DD, (int)0x3C7338FF,
/**/                   (int)0xE54ED51B, (int)0x3FE4E1A4,
/**/                   (int)0x89B7C76A, (int)0xBC8A492F,
/**/                   (int)0xDE701CA0, (int)0x3FE83F7D,
/**/                   (int)0x609BC6E8, (int)0xBC4152CF,
/**/                   (int)0xFD7B351C, (int)0x3FE511F9,
/**/                   (int)0x61C48831, (int)0xBC85C0E8,
/**/                   (int)0x31916D5D, (int)0x3FE8158A,
/**/                   (int)0x0B8228DE, (int)0xBC6DE8B9,
/**/                   (int)0xCDDBB724, (int)0x3FE541FA,
/**/                   (int)0x8520D391, (int)0x3C7232C2,
/**/                   (int)0x2EAA1488, (int)0x3FE7EB36,
/**/                   (int)0xA4A5959F, (int)0x3C5A1D65,
/**/                   (int)0x966D59B3, (int)0x3FE571A6,
/**/                   (int)0x4D0FB198, (int)0x3C5C843B,
/**/                   (int)0x7F09E54F, (int)0x3FE7C082,
/**/                   (int)0xD72AEE68, (int)0xBC6C73D6,
/**/                   (int)0x98813A12, (int)0x3FE5A0FC,
/**/                   (int)0xB7D4227B, (int)0xBC8D82E2,
/**/                   (int)0xCD7F6543, (int)0x3FE7956F,
/**/                   (int)0xE9D45AE4, (int)0xBC8AB276,
/**/                   (int)0x16BF8F0D, (int)0x3FE5CFFC,
/**/                   (int)0x70EB578A, (int)0x3C896CB3,
/**/                   (int)0xC655211F, (int)0x3FE769FE,
/**/                   (int)0xCF8C68C5, (int)0xBC6827D5,
/**/                   (int)0x552A9E57, (int)0x3FE5FEA4,
/**/                   (int)0xF7EE20B7, (int)0x3C80B6CE,
/**/                   (int)0x174EFBA1, (int)0x3FE73E30,
/**/                   (int)0x3D94AD5F, (int)0xBC65D3AE,
/**/                   (int)0x9921AC79, (int)0x3FE62CF4,
/**/                   (int)0x55B6241A, (int)0xBC8EDD98,
/**/                   (int)0x6FA77678, (int)0x3FE71204,
/**/                   (int)0xA5029C81, (int)0x3C8425B0,
/**/                   (int)0x2963E755, (int)0x3FE65AEC,
/**/                   (int)0x6B71053C, (int)0x3C8126F9,
/**/                   (int)0x800CF55E, (int)0x3FE6E57C,
/**/                   (int)0xDEDBD0A6, (int)0x3C860286,
/**/                   (int)0x4E134B2F, (int)0x3FE6888A,
/**/                   (int)0x7644D5E6, (int)0xBC86B7D3,
/**/                   (int)0xFA9EFB5D, (int)0x3FE6B898,
/**/                   (int)0x86CCF4B2, (int)0x3C715AC7,
/**/                   (int)0x50B7821A, (int)0x3FE6B5CE,
/**/                   (int)0x8F702E0F, (int)0xBC65D515,
/**/                   (int)0x92EB6253, (int)0x3FE68B5A,
/**/                   (int)0xD985F89C, (int)0xBC89A91A,
/**/                   (int)0x7C40BDE1, (int)0x3FE6E2B7,
/**/                   (int)0x857FAD53, (int)0xBC70E729,
/**/                   (int)0xFDEB8CBA, (int)0x3FE65DC1,
/**/                   (int)0x47337C77, (int)0xBC597C1B,
/**/                   (int)0x1D0A8C40, (int)0x3FE70F45,
/**/                   (int)0x3885770D, (int)0x3C697EDE,
/**/                   (int)0xF20191C7, (int)0x3FE62FCF,
/**/                   (int)0x895756EF, (int)0x3C6D9143,
/**/                   (int)0x80DEA578, (int)0x3FE73B76,
/**/                   (int)0x06DC12A2, (int)0xBC722483,
/**/                   (int)0x26F563DF, (int)0x3FE60185,
/**/                   (int)0xE0E432D0, (int)0x3C846CA5,
/**/                   (int)0xF6F7B524, (int)0x3FE7674A,
/**/                   (int)0x94AC84A8, (int)0x3C7E9D3F,
/**/                   (int)0x55F1F17A, (int)0x3FE5D2E2,
/**/                   (int)0x04C8892B, (int)0x3C803141,
/**/                   (int)0xD0041D52, (int)0x3FE792C1,
/**/                   (int)0xEEB354EB, (int)0xBC8ABF05,
/**/                   (int)0x39824077, (int)0x3FE5A3E8,
/**/                   (int)0x2759BE62, (int)0x3C8428AA,
/**/                   (int)0x5E28B3C2, (int)0x3FE7BDDA,
/**/                   (int)0x7CCD0393, (int)0x3C4AD119,
/**/                   (int)0x8D8E83F2, (int)0x3FE57497,
/**/                   (int)0xAF282D23, (int)0x3C8F4714,
/**/                   (int)0xF5037959, (int)0x3FE7E893,
/**/                   (int)0xAA650C4C, (int)0x3C80EEFB,
/**/                   (int)0x0F592CA5, (int)0x3FE544F1,
/**/                   (int)0xE6C7A62F, (int)0xBC8E7AE8,
/**/                   (int)0xE9AE4BA4, (int)0x3FE812ED,
/**/                   (int)0xDF402DDA, (int)0xBC87830A,
/**/                   (int)0x7D7BF3DA, (int)0x3FE514F5,
/**/                   (int)0x8073C259, (int)0x3C747A10 } };


#define SINCOS_TABLE_LOOKUP(u, sn, ssn, cs, ccs) \
({									      \
  int k = u.i[LOW_HALF] << 2;						      \
  sn = __sincostab.x[k];						      \
  ssn = __sincostab.x[k + 1];						      \
  cs = __sincostab.x[k + 2];						      \
  ccs = __sincostab.x[k + 3];						      \
})

// static const double s1 = -0x1.5555555555555p-3;   /* -0.16666666666666666     */
// static const double s2 = 0x1.1111111110ECEp-7;    /*  0.0083333333333323288   */
// static const double s3 = -0x1.A01A019DB08B8p-13;  /* -0.00019841269834414642  */
// static const double s4 = 0x1.71DE27B9A7ED9p-19;   /*  2.755729806860771e-06   */
// static const double s5 = -0x1.ADDFFC2FCDF59p-26;  /* -2.5022014848318398e-08  */

#define POLYNOMIAL2(xx) ((((-0x1.ADDFFC2FCDF59p-26 * (xx) + 0x1.71DE27B9A7ED9p-19) * (xx) + -0x1.A01A019DB08B8p-13) * (xx) + 0x1.1111111110ECEp-7) * (xx))
#define POLYNOMIAL(xx) (POLYNOMIAL2 (xx) + -0x1.5555555555555p-3)

#define TAYLOR_SIN(xx, x, dx) \
({									      \
  double t = ((POLYNOMIAL (xx)  * (x) - 0.5 * (dx))  * (xx) + (dx));	      \
  double res = (x) + t;							      \
  res;									      \
})


static inline double do_cos (double x, double dx)
{
  Tri_scale u;
  static const double
  sn3 = -1.66666666666664880952546298448555E-01,
  sn5 = 8.33333214285722277379541354343671E-03,
  cs2 = 4.99999999999999999999950396842453E-01,
  cs4 = -4.16666666666664434524222570944589E-02,
  cs6 = 1.38888874007937613028114285595617E-03,
  fbig = 0x1.8000000000000p45;   /*  52776558133248          */


  if (x < 0)
    dx = -dx;

  u.x = fbig + fabs (x);

  x = fabs (x) - (u.x - fbig) + dx;

  double xx, s, sn, ssn, c, cs, ccs, cor;
  xx = x * x;
  s = x + x * xx * (sn3 + xx * sn5);
  c = xx * (cs2 + xx * (cs4 + xx * cs6));
  SINCOS_TABLE_LOOKUP (u, sn, ssn, cs, ccs);
  cor = (ccs - s * ssn - cs * c) - sn * s;
  return cs + cor;
}

static inline double do_sin (double x, double dx)
{
    Tri_scale u;
    double xold = x;
    static const double
    sn3 = -1.66666666666664880952546298448555E-01,
    sn5 = 8.33333214285722277379541354343671E-03,
    cs2 = 4.99999999999999999999950396842453E-01,
    cs4 = -4.16666666666664434524222570944589E-02,
    cs6 = 1.38888874007937613028114285595617E-03,
    fbig = 0x1.8000000000000p45;   /*  52776558133248          */

    if (fabs (x) < 0.126)
      return TAYLOR_SIN (x * x, x, dx);

    if (x <= 0)
        dx = -dx;
    u.x = fbig + fabs (x);
    x = fabs (x) - (u.x - fbig);

    double xx, s, sn, ssn, c, cs, ccs, cor;
    xx = x * x;
    s = x + (dx + x * xx * (sn3 + xx * sn5));
    c = x * dx + xx * (cs2 + xx * (cs4 + xx * cs6));
    SINCOS_TABLE_LOOKUP (u, sn, ssn, cs, ccs);
    cor = (ssn + s * ccs - sn * c) + cs * s;
    return copysign (sn + cor, xold);
}

static inline double do_sincos(double a, double da, int n)
{
  double retval;

  if (n & 1)
    retval = do_cos (a, da);
  else
    retval = do_sin (a, da);

  return (n & 2) ? -retval : retval;
}

double largeprocess_sin(double x){
    double a, da;
    int n = branred(x, &a, &da);
    return do_sincos(a, da, n);
}

double largeprocess_cos(double x){
    double a, da;
    int n = branred(x, &a, &da);
    return do_sincos(a, da, n+1);
}


static inline double scalarSpecialHandel(double (*F)(double), double x){
    llvm_64suf ux;
    ux.f = x;

    if(ux.u > 0xfff0000000000000)
        return -LLVM_NAN_64F;

    ux.u = ux.u & 0x7fffffffffffffff;

    if(ux.u >= 0x7ff0000000000000)
        return LLVM_NAN_64F;

    if((ux.u>>32) >= 0x419921FB){
        return F(x);
    }

    return -2;
}






typedef struct
{
  double sign[4];		/* Sign of sine in quadrants 0..3.  */
  double hpi_inv;		/* 2 / PI ( * 2^24 if !TOINT_INTRINSICS).  */
  double hpi;			/* PI / 2.  */
  double c0, c1, c2, c3, c4;	/* Cosine polynomial.  */
  double s1, s2, s3;		/* Sine polynomial.  */
} sincos_t;


const sincos_t __sincosf_table[2] =
{
  {
    { 1.0, -1.0, -1.0, 1.0 },
    0x1.45F306DC9C883p+23,
    0x1.921FB54442D18p0,
    0x1p0,
    -0x1.ffffffd0c621cp-2,
    0x1.55553e1068f19p-5,
    -0x1.6c087e89a359dp-10,
    0x1.99343027bf8c3p-16,
    -0x1.555545995a603p-3,
    0x1.1107605230bc4p-7,
    -0x1.994eb3774cf24p-13
  },
  {
    { 1.0, -1.0, -1.0, 1.0 },
    0x1.45F306DC9C883p+23,
    0x1.921FB54442D18p0,
    -0x1p0,
    0x1.ffffffd0c621cp-2,
    -0x1.55553e1068f19p-5,
    0x1.6c087e89a359dp-10,
    -0x1.99343027bf8c3p-16,
    -0x1.555545995a603p-3,
    0x1.1107605230bc4p-7,
    -0x1.994eb3774cf24p-13
  }
};
static const uint32_t __inv_pio4[24] =
{
  0xa2,       0xa2f9,	  0xa2f983,   0xa2f9836e,
  0xf9836e4e, 0x836e4e44, 0x6e4e4415, 0x4e441529,
  0x441529fc, 0x1529fc27, 0x29fc2757, 0xfc2757d1,
  0x2757d1f5, 0x57d1f534, 0xd1f534dd, 0xf534ddc0,
  0x34ddc0db, 0xddc0db62, 0xc0db6295, 0xdb629599,
  0x6295993c, 0x95993c43, 0x993c4390, 0x3c439041
};

static inline float
sinf_poly (double x, double x2, const sincos_t *p, int n)
{
  double x3, x4, x6, x7, s, c, c1, c2, s1;

  if ((n & 1) == 0)
    {
      x3 = x * x2;
      s1 = p->s2 + x2 * p->s3;

      x7 = x3 * x2;
      s = x + x3 * p->s1;

      return s + x7 * s1;
    }
  else
    {
      x4 = x2 * x2;
      c2 = p->c3 + x2 * p->c4;
      c1 = p->c0 + x2 * p->c1;

      x6 = x4 * x2;
      c = c1 + x4 * p->c2;

      return c + x6 * c2;
    }
}


static inline double
reduce_large (uint32_t xi, int *np)
{
    static const double pi63 = 0x1.921FB54442D18p-62;
    const uint32_t *arr = &__inv_pio4[(xi >> 26) & 15];
    int shift = (xi >> 23) & 7;
    uint64_t n, res0, res1, res2;
    xi = (xi & 0xffffff) | 0x800000;
    xi <<= shift;

    res0 = xi * arr[0];
    res1 = (uint64_t)xi * arr[4];
    res2 = (uint64_t)xi * arr[8];
    res0 = (res2 >> 32) | (res0 << 32);
    res0 += res1;

    n = (res0 + (1ULL << 61)) >> 62;
    res0 -= n << 62;
    double x = (int64_t)res0;
    *np = n;
    return x * pi63;
}

static inline float largeprocess_sinf(float x){
    llvm_32suf ux;
    double xd, s;
    int n, sign;
    const sincos_t *p = &__sincosf_table[0];

    ux.f = x;
    sign = ux.u >> 31;
    xd = reduce_large(ux.u, &n);

    s = p->sign[(n + sign) & 3];
    return sinf_poly (xd * s, xd * xd, p, n);
}

static inline float largeprocess_cosf(float x){
    llvm_32suf ux;
    double xd, s;
    int n, sign;
    const sincos_t *p = &__sincosf_table[0];

    ux.f = x;
    sign = ux.u >> 31;
    xd = reduce_large(ux.u, &n);

    s = p->sign[(n + sign) & 3];

    if ((n + sign) & 2)
        p = &__sincosf_table[1];

    return sinf_poly (xd * s, xd * xd, p, n ^ 1);
}

static inline float scalarSpecialHandelf(float (*F)(float), float x){
    llvm_32suf ux, u120;
    ux.f = x;

    if(ux.u > 0xff800000)
        return -LLVM_NAN_32F;

    ux.u = ux.u & 0x7fffffff;
    if(ux.u >= 0x7f800000)
        return LLVM_NAN_32F;

    u120.f = 120;
    if((ux.u>>24)>(u120.u>>24)){
        return F(x);
    }

    return -2;
}


template <class Abi>
floatv<Abi> sin(floatv<Abi> x) {
  Abi_32suf<Abi> n, r, r2, y, m_x;
  uintv<Abi> sign, odd, cmp = 0;

  m_x.f = x;  
  r.u = m_x.u & AbsMaskf;
  sign = m_x.u & ~AbsMaskf;
  r2.f = 0x1p20f;
  where(r.u >= r2.u, cmp) = s2v<int, unsigned int>(-1);

  n.f = (float)InvPi_f32 * r.f + ExpShift23;
  odd = n.u << 31;
  n.f -= ExpShift23;

  r.f = -SC_Pi1_f32 * n.f + r.f;
  r.f = -SC_Pi2_f32 * n.f + r.f;
  r.f = -SC_Pi3_f32 * n.f + r.f;

  r2.f = r.f * r.f;
  y.f = SC_A9_f32 * r2.f + SC_A7_f32;
  y.f = y.f * r2.f + SC_A5_f32;
  y.f = y.f * r2.f + SC_A3_f32;
  y.f = y.f * r2.f * r.f + r.f;
  y.u =  (y.u ^ sign ^ odd);

  if(reduce(cmp) != 0) [[unlikely]]
  {
    for(size_t i = 0; i < x.size(); i++)
    {
      if(cmp[i] != 0)
        y.f[i] = scalarSpecialHandelf(largeprocess_sinf, x[i]);
    }
  }
  return y.f;
}



template <class Abi>
doublev<Abi> sin(doublev<Abi> x) {
  Abi_64suf<Abi> n, r, r2, y, m_x;
  ulongv<Abi> sign, odd, cmp = 0;

  m_x.f = x;
  r.u = m_x.u & (unsigned long)AbsMask;
  sign = m_x.u & ~(unsigned long)AbsMask;
  r2.f = 0x1p23;
  where(r.u >= r2.u, cmp) = s2v<int, unsigned long>(-1);

  n.f = InvPi_f64 * r.f + ExpShift52;
  odd = n.u << 63;
  n.f -= ExpShift52;

  r.f = -SC_Pi1_f64 * n.f + r.f;
  r.f = -SC_Pi2_f64 * n.f + r.f;
  r.f = -SC_Pi3_f64 * n.f + r.f;
  r2.f = r.f * r.f;
  y.f = SC_C7_f64 * r2.f + SC_C6_f64;
  y.f = y.f * r2.f + SC_C5_f64;
  y.f = y.f * r2.f + SC_C4_f64;
  y.f = y.f * r2.f + SC_C3_f64;
  y.f = y.f * r2.f + SC_C2_f64;
  y.f = y.f * r2.f + SC_C1_f64;
  y.f = y.f * r2.f * r.f + r.f;

  y.u =  (y.u ^ sign ^ odd);

  if(reduce(cmp) != 0) [[unlikely]]
  {
    for(size_t i = 0; i < x.size(); i++)
    {
      if(cmp[i] != 0)
        y.f[i] = scalarSpecialHandel(largeprocess_sin, x[i]);
    }
  }
  
  return y.f;
}

// add by me

/* sinl special value */
#define	M_PI_4		0.78539816339744830962	/* pi/4 */

static const long double sincos_value[] = {
#define ONE sincos_value[0]
 1.00000000000000000000000000000000000E+00L, /* 3fff0000000000000000000000000000 */

/* cos x ~ ONE + x^2 ( SCOS1 + SCOS2 * x^2 + ... + SCOS4 * x^6 + SCOS5 * x^8 )
   x in <0,1/256>  */
#define SCOS1 sincos_value[1]
#define SCOS2 sincos_value[2]
#define SCOS3 sincos_value[3]
#define SCOS4 sincos_value[4]
#define SCOS5 sincos_value[5]
-5.00000000000000000000000000000000000E-01L, /* bffe0000000000000000000000000000 */
 4.16666666666666666666666666556146073E-02L, /* 3ffa5555555555555555555555395023 */
-1.38888888888888888888309442601939728E-03L, /* bff56c16c16c16c16c16a566e42c0375 */
 2.48015873015862382987049502531095061E-05L, /* 3fefa01a01a019ee02dcf7da2d6d5444 */
-2.75573112601362126593516899592158083E-07L, /* bfe927e4f5dce637cb0b54908754bde0 */

/* sin x ~ ONE * x + x^3 ( SIN1 + SIN2 * x^2 + ... + SIN7 * x^12 + SIN8 * x^14 )
   x in <0,0.1484375>  */
#define SIN1 sincos_value[6]
#define SIN2 sincos_value[7]
#define SIN3 sincos_value[8]
#define SIN4 sincos_value[9]
#define SIN5 sincos_value[10]
#define SIN6 sincos_value[11]
#define SIN7 sincos_value[12]
#define SIN8 sincos_value[13]
-1.66666666666666666666666666666666538e-01L, /* bffc5555555555555555555555555550 */
 8.33333333333333333333333333307532934e-03L, /* 3ff811111111111111111111110e7340 */
-1.98412698412698412698412534478712057e-04L, /* bff2a01a01a01a01a01a019e7a626296 */
 2.75573192239858906520896496653095890e-06L, /* 3fec71de3a556c7338fa38527474b8f5 */
-2.50521083854417116999224301266655662e-08L, /* bfe5ae64567f544e16c7de65c2ea551f */
 1.60590438367608957516841576404938118e-10L, /* 3fde6124613a811480538a9a41957115 */
-7.64716343504264506714019494041582610e-13L, /* bfd6ae7f3d5aef30c7bc660b060ef365 */
 2.81068754939739570236322404393398135e-15L, /* 3fce9510115aabf87aceb2022a9a9180 */

/* sin x ~ ONE * x + x^3 ( SSIN1 + SSIN2 * x^2 + ... + SSIN4 * x^6 + SSIN5 * x^8 )
   x in <0,1/256>  */
#define SSIN1 sincos_value[14]
#define SSIN2 sincos_value[15]
#define SSIN3 sincos_value[16]
#define SSIN4 sincos_value[17]
#define SSIN5 sincos_value[18]
-1.66666666666666666666666666666666659E-01L, /* bffc5555555555555555555555555555 */
 8.33333333333333333333333333146298442E-03L, /* 3ff81111111111111111111110fe195d */
-1.98412698412698412697726277416810661E-04L, /* bff2a01a01a01a01a019e7121e080d88 */
 2.75573192239848624174178393552189149E-06L, /* 3fec71de3a556c640c6aaa51aa02ab41 */
-2.50521016467996193495359189395805639E-08L, /* bfe5ae644ee90c47dc71839de75b2787 */

/* cos x ~ ONE + x^2 ( COS1 + COS2 * x^2 + ... + COS7 * x^12 + COS8 * x^14 )
   x in <0,0.1484375>  */
#define COS1 sincos_value[19]
#define COS2 sincos_value[20]
#define COS3 sincos_value[21]
#define COS4 sincos_value[22]
#define COS5 sincos_value[23]
#define COS6 sincos_value[24]
#define COS7 sincos_value[25]
#define COS8 sincos_value[26]
-4.99999999999999999999999999999999759E-01L, /* bffdfffffffffffffffffffffffffffb */
 4.16666666666666666666666666651287795E-02L, /* 3ffa5555555555555555555555516f30 */
-1.38888888888888888888888742314300284E-03L, /* bff56c16c16c16c16c16c16a463dfd0d */
 2.48015873015873015867694002851118210E-05L, /* 3fefa01a01a01a01a0195cebe6f3d3a5 */
-2.75573192239858811636614709689300351E-07L, /* bfe927e4fb7789f5aa8142a22044b51f */
 2.08767569877762248667431926878073669E-09L, /* 3fe21eed8eff881d1e9262d7adff4373 */
-1.14707451049343817400420280514614892E-11L, /* bfda9397496922a9601ed3d4ca48944b */
 4.77810092804389587579843296923533297E-14L, /* 3fd2ae5f8197cbcdcaf7c3fb4523414c */
};

#define SINCOSL_COS_HI 0
#define SINCOSL_COS_LO 1
#define SINCOSL_SIN_HI 2
#define SINCOSL_SIN_LO 3

const long double __sincosl_table[] = {

/* x =  1.48437500000000000000000000000000000e-01L 3ffc3000000000000000000000000000 */
/* cos(x) = 0.fd2f5320e1b790209b4dda2f98 f79caaa7b873aff1014b0fbc52 43766d03cb006bc837c4358 */
 0x0.fd2f5320e1b790209b4dda2f98p0L,
 0x0.f79caaa7b873aff1014b0fbc52p-104L,
/* sin(x) = 0.25dc50bc95711d0d9787d108fd 438cf5959ee0bfb7a1e36e8b1a 112968f356657420e9cc9ea */
 0x0.25dc50bc95711d0d9787d108fdp0L,
 0x0.438cf5959ee0bfb7a1e36e8b1ap-104L,

/* x = 1.56250000000000000000000000000000000e-01 3ffc4000000000000000000000000000 */
/* cos(x) = 0.fce1a053e621438b6d60c76e8c 45bf0a9dc71aa16f922acc10e9 5144ec796a249813c9cb649 */
 0x0.fce1a053e621438b6d60c76e8cp0L,
 0x0.45bf0a9dc71aa16f922acc10e9p-104L,
/* sin(x) = 0.27d66258bacd96a3eb335b365c 87d59438c5142bb56a489e9b8d b9d36234ffdebb6bdc22d8e */
 0x0.27d66258bacd96a3eb335b365cp0L,
 0x0.87d59438c5142bb56a489e9b8dp-104L,

/* x = 1.64062500000000000000000000000000000e-01 3ffc5000000000000000000000000000 */
/* cos(x) = 0.fc8ffa01ba6807417e05962b0d 9fdf1fddb0cc4c07d22e19e080 19bffa50a6c7acdb40307a3 */
 0x0.fc8ffa01ba6807417e05962b0dp0L,
 0x0.9fdf1fddb0cc4c07d22e19e080p-104L,
/* sin(x) = 0.29cfd49b8be4f665276cab01cb f0426934906c3dd105473b226e 410b1450f62e53ff7c6cce1 */
 0x0.29cfd49b8be4f665276cab01cbp0L,
 0x0.f0426934906c3dd105473b226ep-104L,

/* x = 1.71875000000000000000000000000000000e-01 3ffc6000000000000000000000000000 */
/* cos(x) = 0.fc3a6170f767ac735d63d99a9d 439e1db5e59d3ef153a4265d58 55850ed82b536bf361b80e3 */
 0x0.fc3a6170f767ac735d63d99a9dp0L,
 0x0.439e1db5e59d3ef153a4265d58p-104L,
/* sin(x) = 0.2bc89f9f424de5485de7ce03b2 514952b9faf5648c3244d4736f eb95dbb9da49f3b58a9253b */
 0x0.2bc89f9f424de5485de7ce03b2p0L,
 0x0.514952b9faf5648c3244d4736fp-104L,

/* x = 1.79687500000000000000000000000000000e-01 3ffc7000000000000000000000000000 */
/* cos(x) = 0.fbe0d7f7fef11e70aa43b8abf4 f6a457cea20c8f3f676b47781f 9821bbe9ce04b3c7b981c0b */
 0x0.fbe0d7f7fef11e70aa43b8abf4p0L,
 0x0.f6a457cea20c8f3f676b47781fp-104L,
/* sin(x) = 0.2dc0bb80b49a97ffb34e8dd1f8 db9df7af47ed2dcf58b12c8e78 27e048cae929da02c04ecac */
 0x0.2dc0bb80b49a97ffb34e8dd1f8p0L,
 0x0.db9df7af47ed2dcf58b12c8e78p-104L,

/* x = 1.87500000000000000000000000000000000e-01 3ffc8000000000000000000000000000 */
/* cos(x) = 0.fb835efcf670dd2ce6fe792469 7eea13ea358867e9cdb3899b78 3f4f9f43aa5626e8b67b3bc */
 0x0.fb835efcf670dd2ce6fe792469p0L,
 0x0.7eea13ea358867e9cdb3899b78p-104L,
/* sin(x) = 0.2fb8205f75e56a2b56a1c4792f 856258769af396e0189ef72c05 e4df59a6b00e4b44a6ea515 */
 0x0.2fb8205f75e56a2b56a1c4792fp0L,
 0x0.856258769af396e0189ef72c05p-104L,

/* x = 1.95312500000000000000000000000000000e-01 3ffc9000000000000000000000000000 */
/* cos(x) = 0.fb21f7f5c156696b00ac1fe28a c5fd76674a92b4df80d9c8a46c 684399005deccc41386257c */
 0x0.fb21f7f5c156696b00ac1fe28ap0L,
 0x0.c5fd76674a92b4df80d9c8a46cp-104L,
/* sin(x) = 0.31aec65df552876f82ece9a235 6713246eba6799983d7011b0b3 698d6e1da919c15d57c30c1 */
 0x0.31aec65df552876f82ece9a235p0L,
 0x0.6713246eba6799983d7011b0b3p-104L,

/* x = 2.03125000000000000000000000000000000e-01 3ffca000000000000000000000000000 */
/* cos(x) = 0.fabca467fb3cb8f1d069f01d8e a33ade5bfd68296ecd1cc9f7b7 609bbcf3676e726c3301334 */
 0x0.fabca467fb3cb8f1d069f01d8ep0L,
 0x0.a33ade5bfd68296ecd1cc9f7b7p-104L,
/* sin(x) = 0.33a4a5a19d86246710f602c44d f4fa513f4639ce938477aeeabb 82e8e0a7ed583a188879fd4 */
 0x0.33a4a5a19d86246710f602c44dp0L,
 0x0.f4fa513f4639ce938477aeeabbp-104L,

/* x = 2.10937500000000000000000000000000000e-01 3ffcb000000000000000000000000000 */
/* cos(x) = 0.fa5365e8f1d3ca27be1db5d76a e64d983d7470a4ab0f4ccf65a2 b8c67a380df949953a09bc1 */
 0x0.fa5365e8f1d3ca27be1db5d76ap0L,
 0x0.e64d983d7470a4ab0f4ccf65a2p-104L,
/* sin(x) = 0.3599b652f40ec999df12a0a4c8 561de159c98d4e54555de518b9 7f48886f715d8df5f4f093e */
 0x0.3599b652f40ec999df12a0a4c8p0L,
 0x0.561de159c98d4e54555de518b9p-104L,

/* x = 2.18750000000000000000000000000000000e-01 3ffcc000000000000000000000000000 */
/* cos(x) = 0.f9e63e1d9e8b6f6f2e296bae5b 5ed9c11fd7fa2fe11e09fc7bde 901abed24b6365e72f7db4e */
 0x0.f9e63e1d9e8b6f6f2e296bae5bp0L,
 0x0.5ed9c11fd7fa2fe11e09fc7bdep-104L,
/* sin(x) = 0.378df09db8c332ce0d2b53d865 582e4526ea336c768f68c32b49 6c6d11c1cd241bb9f1da523 */
 0x0.378df09db8c332ce0d2b53d865p0L,
 0x0.582e4526ea336c768f68c32b49p-104L,

/* x = 2.26562500000000000000000000000000000e-01 3ffcd000000000000000000000000000 */
/* cos(x) = 0.f9752eba9fff6b98842beadab0 54a932fb0f8d5b875ae63d6b22 88d09b148921aeb6e52f61b */
 0x0.f9752eba9fff6b98842beadab0p0L,
 0x0.54a932fb0f8d5b875ae63d6b22p-104L,
/* sin(x) = 0.39814cb10513453cb97b21bc1c a6a337b150c21a675ab85503bc 09a436a10ab1473934e20c8 */
 0x0.39814cb10513453cb97b21bc1cp0L,
 0x0.a6a337b150c21a675ab85503bcp-104L,

/* x = 2.34375000000000000000000000000000000e-01 3ffce000000000000000000000000000 */
/* cos(x) = 0.f90039843324f9b940416c1984 b6cbed1fc733d97354d4265788 a86150493ce657cae032674 */
 0x0.f90039843324f9b940416c1984p0L,
 0x0.b6cbed1fc733d97354d4265788p-104L,
/* sin(x) = 0.3b73c2bf6b4b9f668ef9499c81 f0d965087f1753fa64b086e58c b8470515c18c1412f8c2e02 */
 0x0.3b73c2bf6b4b9f668ef9499c81p0L,
 0x0.f0d965087f1753fa64b086e58cp-104L,

/* x = 2.42187500000000000000000000000000000e-01 3ffcf000000000000000000000000000 */
/* cos(x) = 0.f887604e2c39dbb20e4ec58250 59a789ffc95b275ad9954078ba 8a28d3fcfe9cc2c1d49697b */
 0x0.f887604e2c39dbb20e4ec58250p0L,
 0x0.59a789ffc95b275ad9954078bap-104L,
/* sin(x) = 0.3d654aff15cb457a0fca854698 aba33039a8a40626609204472d 9d40309b626eccc6dff0ffa */
 0x0.3d654aff15cb457a0fca854698p0L,
 0x0.aba33039a8a40626609204472dp-104L,

/* x = 2.50000000000000000000000000000000000e-01 3ffd0000000000000000000000000000 */
/* cos(x) = 0.f80aa4fbef750ba783d33cb95f 94f8a41426dbe79edc4a023ef9 ec13c944551c0795b84fee1 */
 0x0.f80aa4fbef750ba783d33cb95fp0L,
 0x0.94f8a41426dbe79edc4a023ef9p-104L,
/* sin(x) = 0.3f55dda9e62aed7513bd7b8e6a 3d1635dd5676648d7db525898d 7086af9330f03c7f285442a */
 0x0.3f55dda9e62aed7513bd7b8e6ap0L,
 0x0.3d1635dd5676648d7db525898dp-104L,

/* x = 2.57812500000000000000000000000000000e-01 3ffd0800000000000000000000000000 */
/* cos(x) = 0.f78a098069792daabc9ee42591 b7c5a68cb1ab822aeb446b3311 b4ba5371b8970e2c1547ad7 */
 0x0.f78a098069792daabc9ee42591p0L,
 0x0.b7c5a68cb1ab822aeb446b3311p-104L,
/* sin(x) = 0.414572fd94556e6473d6202713 88dd47c0ba050cdb5270112e3e 370e8c4705ae006426fb5d5 */
 0x0.414572fd94556e6473d6202713p0L,
 0x0.88dd47c0ba050cdb5270112e3ep-104L,

/* x = 2.65625000000000000000000000000000000e-01 3ffd1000000000000000000000000000 */
/* cos(x) = 0.f7058fde0788dfc805b8fe8878 9e4f4253e3c50afe8b22f41159 620ab5940ff7df9557c0d1f */
 0x0.f7058fde0788dfc805b8fe8878p0L,
 0x0.9e4f4253e3c50afe8b22f41159p-104L,
/* sin(x) = 0.4334033bcd90d6604f5f36c1d4 b84451a87150438275b77470b5 0e5b968fa7962b5ffb379b7 */
 0x0.4334033bcd90d6604f5f36c1d4p0L,
 0x0.b84451a87150438275b77470b5p-104L,

/* x = 2.73437500000000000000000000000000000e-01 3ffd1800000000000000000000000000 */
/* cos(x) = 0.f67d3a26af7d07aa4bd6d42af8 c0067fefb96d5b46c031eff536 27f215ea3242edc3f2e13eb */
 0x0.f67d3a26af7d07aa4bd6d42af8p0L,
 0x0.c0067fefb96d5b46c031eff536p-104L,
/* sin(x) = 0.452186aa5377ab20bbf2524f52 e3a06a969f47166ab88cf88c11 1ad12c55941021ef3317a1a */
 0x0.452186aa5377ab20bbf2524f52p0L,
 0x0.e3a06a969f47166ab88cf88c11p-104L,

/* x = 2.81250000000000000000000000000000000e-01 3ffd2000000000000000000000000000 */
/* cos(x) = 0.f5f10a7bb77d3dfa0c1da8b578 42783280d01ce3c0f82bae3b9d 623c168d2e7c29977994451 */
 0x0.f5f10a7bb77d3dfa0c1da8b578p0L,
 0x0.42783280d01ce3c0f82bae3b9dp-104L,
/* sin(x) = 0.470df5931ae1d946076fe0dcff 47fe31bb2ede618ebc607821f8 462b639e1f4298b5ae87fd3 */
 0x0.470df5931ae1d946076fe0dcffp0L,
 0x0.47fe31bb2ede618ebc607821f8p-104L,

/* x = 2.89062500000000000000000000000000000e-01 3ffd2800000000000000000000000000 */
/* cos(x) = 0.f561030ddd7a78960ea9f4a32c 6521554995667f5547bafee9ec 48b3155cdb0f7fd00509713 */
 0x0.f561030ddd7a78960ea9f4a32cp0L,
 0x0.6521554995667f5547bafee9ecp-104L,
/* sin(x) = 0.48f948446abcd6b0f7fccb100e 7a1b26eccad880b0d24b59948c 7cdd49514d44b933e6985c2 */
 0x0.48f948446abcd6b0f7fccb100ep0L,
 0x0.7a1b26eccad880b0d24b59948cp-104L,

/* x = 2.96875000000000000000000000000000000e-01 3ffd3000000000000000000000000000 */
/* cos(x) = 0.f4cd261d3e6c15bb369c875863 0d2ac00b7ace2a51c0631bfeb3 9ed158ba924cc91e259c195 */
 0x0.f4cd261d3e6c15bb369c875863p0L,
 0x0.0d2ac00b7ace2a51c0631bfeb3p-104L,
/* sin(x) = 0.4ae37710fad27c8aa9c4cf96c0 3519b9ce07dc08a1471775499f 05c29f86190aaebaeb9716e */
 0x0.4ae37710fad27c8aa9c4cf96c0p0L,
 0x0.3519b9ce07dc08a1471775499fp-104L,

/* x = 3.04687500000000000000000000000000000e-01 3ffd3800000000000000000000000000 */
/* cos(x) = 0.f43575f94d4f6b272f5fb76b14 d2a64ab52df1ee8ddf7c651034 e5b2889305a9ea9015d758a */
 0x0.f43575f94d4f6b272f5fb76b14p0L,
 0x0.d2a64ab52df1ee8ddf7c651034p-104L,
/* sin(x) = 0.4ccc7a50127e1de0cb6b40c302 c651f7bded4f9e7702b0471ae0 288d091a37391950907202f */
 0x0.4ccc7a50127e1de0cb6b40c302p0L,
 0x0.c651f7bded4f9e7702b0471ae0p-104L,

/* x = 3.12500000000000000000000000000000000e-01 3ffd4000000000000000000000000000 */
/* cos(x) = 0.f399f500c9e9fd37ae9957263d ab8877102beb569f101ee44953 50868e5847d181d50d3cca2 */
 0x0.f399f500c9e9fd37ae9957263dp0L,
 0x0.ab8877102beb569f101ee44953p-104L,
/* sin(x) = 0.4eb44a5da74f600207aaa090f0 734e288603ffadb3eb2542a469 77b105f8547128036dcf7f0 */
 0x0.4eb44a5da74f600207aaa090f0p0L,
 0x0.734e288603ffadb3eb2542a469p-104L,

/* x = 3.20312500000000000000000000000000000e-01 3ffd4800000000000000000000000000 */
/* cos(x) = 0.f2faa5a1b74e82fd61fa05f917 7380e8e69b7b15a945e8e5ae11 24bf3d12b0617e03af4fab5 */
 0x0.f2faa5a1b74e82fd61fa05f917p0L,
 0x0.7380e8e69b7b15a945e8e5ae11p-104L,
/* sin(x) = 0.509adf9a7b9a5a0f638a8fa3a6 0a199418859f18b37169a644fd b986c21ecb00133853bc35b */
 0x0.509adf9a7b9a5a0f638a8fa3a6p0L,
 0x0.0a199418859f18b37169a644fdp-104L,

/* x = 3.28125000000000000000000000000000000e-01 3ffd5000000000000000000000000000 */
/* cos(x) = 0.f2578a595224dd2e6bfa2eb2f9 9cc674f5ea6f479eae2eb58018 6897ae3f893df1113ca06b8 */
 0x0.f2578a595224dd2e6bfa2eb2f9p0L,
 0x0.9cc674f5ea6f479eae2eb58018p-104L,
/* sin(x) = 0.5280326c3cf481823ba6bb08ea c82c2093f2bce3c4eb4ee3dec7 df41c92c8a4226098616075 */
 0x0.5280326c3cf481823ba6bb08eap0L,
 0x0.c82c2093f2bce3c4eb4ee3dec7p-104L,

/* x = 3.35937500000000000000000000000000000e-01 3ffd5800000000000000000000000000 */
/* cos(x) = 0.f1b0a5b406b526d886c55feadc 8d0dcc8eb9ae2ac707051771b4 8e05b25b000009660bdb3e3 */
 0x0.f1b0a5b406b526d886c55feadcp0L,
 0x0.8d0dcc8eb9ae2ac707051771b4p-104L,
/* sin(x) = 0.54643b3da29de9b357155eef0f 332fb3e66c83bf4dddd9491c5e b8e103ccd92d6175220ed51 */
 0x0.54643b3da29de9b357155eef0fp0L,
 0x0.332fb3e66c83bf4dddd9491c5ep-104L,

/* x = 3.43750000000000000000000000000000000e-01 3ffd6000000000000000000000000000 */
/* cos(x) = 0.f105fa4d66b607a67d44e04272 5204435142ac8ad54dfb0907a4 f6b56b06d98ee60f19e557a */
 0x0.f105fa4d66b607a67d44e04272p0L,
 0x0.5204435142ac8ad54dfb0907a4p-104L,
/* sin(x) = 0.5646f27e8bd65cbe3a5d61ff06 572290ee826d9674a00246b05a e26753cdfc90d9ce81a7d02 */
 0x0.5646f27e8bd65cbe3a5d61ff06p0L,
 0x0.572290ee826d9674a00246b05ap-104L,

/* x = 3.51562500000000000000000000000000000e-01 3ffd6800000000000000000000000000 */
/* cos(x) = 0.f0578ad01ede707fa39c09dc6b 984afef74f3dc8d0efb0f4c5a6 b13771145b3e0446fe33887 */
 0x0.f0578ad01ede707fa39c09dc6bp0L,
 0x0.984afef74f3dc8d0efb0f4c5a6p-104L,
/* sin(x) = 0.582850a41e1dd46c7f602ea244 cdbbbfcdfa8f3189be794dda42 7ce090b5f85164f1f80ac13 */
 0x0.582850a41e1dd46c7f602ea244p0L,
 0x0.cdbbbfcdfa8f3189be794dda42p-104L,

/* x = 3.59375000000000000000000000000000000e-01 3ffd7000000000000000000000000000 */
/* cos(x) = 0.efa559f5ec3aec3a4eb0331927 8a2d41fcf9189462261125fe61 47b078f1daa0b06750a1654 */
 0x0.efa559f5ec3aec3a4eb0331927p0L,
 0x0.8a2d41fcf9189462261125fe61p-104L,
/* sin(x) = 0.5a084e28e35fda2776dfdbbb55 31d74ced2b5d17c0b1afc46475 29d50c295e36d8ceec126c1 */
 0x0.5a084e28e35fda2776dfdbbb55p0L,
 0x0.31d74ced2b5d17c0b1afc46475p-104L,

/* x = 3.67187500000000000000000000000000000e-01 3ffd7800000000000000000000000000 */
/* cos(x) = 0.eeef6a879146af0bf9b95ea2ea 0ac0d3e2e4d7e15d93f48cbd41 bf8e4fded40bef69e19eafa */
 0x0.eeef6a879146af0bf9b95ea2eap0L,
 0x0.0ac0d3e2e4d7e15d93f48cbd41p-104L,
/* sin(x) = 0.5be6e38ce8095542bc14ee9da0 d36483e6734bcab2e07624188a f5653f114eeb46738fa899d */
 0x0.5be6e38ce8095542bc14ee9da0p0L,
 0x0.d36483e6734bcab2e07624188ap-104L,

/* x = 3.75000000000000000000000000000000000e-01 3ffd8000000000000000000000000000 */
/* cos(x) = 0.ee35bf5ccac89052cd91ddb734 d3a47e262e3b609db604e21705 3803be0091e76daf28a89b7 */
 0x0.ee35bf5ccac89052cd91ddb734p0L,
 0x0.d3a47e262e3b609db604e21705p-104L,
/* sin(x) = 0.5dc40955d9084f48a94675a249 8de5d851320ff5528a6afb3f2e 24de240fce6cbed1ba0ccd6 */
 0x0.5dc40955d9084f48a94675a249p0L,
 0x0.8de5d851320ff5528a6afb3f2ep-104L,

/* x = 3.82812500000000000000000000000000000e-01 3ffd8800000000000000000000000000 */
/* cos(x) = 0.ed785b5c44741b4493c56bcb9d 338a151c6f6b85d8f8aca658b2 8572c162b199680eb9304da */
 0x0.ed785b5c44741b4493c56bcb9dp0L,
 0x0.338a151c6f6b85d8f8aca658b2p-104L,
/* sin(x) = 0.5f9fb80f21b53649c432540a50 e22c53057ff42ae0fdf1307760 dc0093f99c8efeb2fbd7073 */
 0x0.5f9fb80f21b53649c432540a50p0L,
 0x0.e22c53057ff42ae0fdf1307760p-104L,

/* x = 3.90625000000000000000000000000000000e-01 3ffd9000000000000000000000000000 */
/* cos(x) = 0.ecb7417b8d4ee3fec37aba4073 aa48f1f14666006fb431d96713 03c8100d10190ec8179c41d */
 0x0.ecb7417b8d4ee3fec37aba4073p0L,
 0x0.aa48f1f14666006fb431d96713p-104L,
/* sin(x) = 0.6179e84a09a5258a40e9b5face 03e525f8b5753cd0105d93fe62 98010c3458e84d75fe420e9 */
 0x0.6179e84a09a5258a40e9b5facep0L,
 0x0.03e525f8b5753cd0105d93fe62p-104L,

/* x = 3.98437500000000000000000000000000000e-01 3ffd9800000000000000000000000000 */
/* cos(x) = 0.ebf274bf0bda4f62447e56a093 626798d3013b5942b1abfd155a acc9dc5c6d0806a20d6b9c1 */
 0x0.ebf274bf0bda4f62447e56a093p0L,
 0x0.626798d3013b5942b1abfd155ap-104L,
/* sin(x) = 0.6352929dd264bd44a02ea76632 5d8aa8bd9695fc8def3caefba5 b94c9a3c873f7b2d3776ead */
 0x0.6352929dd264bd44a02ea76632p0L,
 0x0.5d8aa8bd9695fc8def3caefba5p-104L,

/* x = 4.06250000000000000000000000000000000e-01 3ffda000000000000000000000000000 */
/* cos(x) = 0.eb29f839f201fd13b937968279 16a78f15c85230a4e8ea4b2155 8265a14367e1abb4c30695a */
 0x0.eb29f839f201fd13b937968279p0L,
 0x0.16a78f15c85230a4e8ea4b2155p-104L,
/* sin(x) = 0.6529afa7d51b129631ec197c0a 840a11d7dc5368b0a47956feb2 85caa8371c4637ef17ef01b */
 0x0.6529afa7d51b129631ec197c0ap0L,
 0x0.840a11d7dc5368b0a47956feb2p-104L,

/* x = 4.14062500000000000000000000000000000e-01 3ffda800000000000000000000000000 */
/* cos(x) = 0.ea5dcf0e30cf03e6976ef0b1ec 26515fba47383855c3b4055a99 b5e86824b2cd1a691fdca7b */
 0x0.ea5dcf0e30cf03e6976ef0b1ecp0L,
 0x0.26515fba47383855c3b4055a99p-104L,
/* sin(x) = 0.66ff380ba0144109e39a320b0a 3fa5fd65ea0585bcbf9b1a769a 9b0334576c658139e1a1cbe */
 0x0.66ff380ba0144109e39a320b0ap0L,
 0x0.3fa5fd65ea0585bcbf9b1a769ap-104L,

/* x = 4.21875000000000000000000000000000000e-01 3ffdb000000000000000000000000000 */
/* cos(x) = 0.e98dfc6c6be031e60dd3089cbd d18a75b1f6b2c1e97f79225202 f03dbea45b07a5ec4efc062 */
 0x0.e98dfc6c6be031e60dd3089cbdp0L,
 0x0.d18a75b1f6b2c1e97f79225202p-104L,
/* sin(x) = 0.68d32473143327973bc712bcc4 ccddc47630d755850c0655243b 205934dc49ffed8eb76adcb */
 0x0.68d32473143327973bc712bcc4p0L,
 0x0.ccddc47630d755850c0655243bp-104L,

/* x = 4.29687500000000000000000000000000000e-01 3ffdb800000000000000000000000000 */
/* cos(x) = 0.e8ba8393eca7821aa563d83491 b6101189b3b101c3677f73d7ba d7c10f9ee02b7ab4009739a */
 0x0.e8ba8393eca7821aa563d83491p0L,
 0x0.b6101189b3b101c3677f73d7bap-104L,
/* sin(x) = 0.6aa56d8e8249db4eb60a761fe3 f9e559be456b9e13349ca99b0b fb787f22b95db3b70179615 */
 0x0.6aa56d8e8249db4eb60a761fe3p0L,
 0x0.f9e559be456b9e13349ca99b0bp-104L,

/* x = 4.37500000000000000000000000000000000e-01 3ffdc000000000000000000000000000 */
/* cos(x) = 0.e7e367d2956cfb16b6aa11e541 9cd0057f5c132a6455bf064297 e6a76fe2b72bb630d6d50ff */
 0x0.e7e367d2956cfb16b6aa11e541p0L,
 0x0.9cd0057f5c132a6455bf064297p-104L,
/* sin(x) = 0.6c760c14c8585a51dbd34660ae 6c52ac7036a0b40887a0b63724 f8b4414348c3063a637f457 */
 0x0.6c760c14c8585a51dbd34660aep0L,
 0x0.6c52ac7036a0b40887a0b63724p-104L,

/* x = 4.45312500000000000000000000000000000e-01 3ffdc800000000000000000000000000 */
/* cos(x) = 0.e708ac84d4172a3e2737662213 429e14021074d7e702e77d72a8 f1101a7e70410df8273e9aa */
 0x0.e708ac84d4172a3e2737662213p0L,
 0x0.429e14021074d7e702e77d72a8p-104L,
/* sin(x) = 0.6e44f8c36eb10a1c752d093c00 f4d47ba446ac4c215d26b03164 42f168459e677d06e7249e3 */
 0x0.6e44f8c36eb10a1c752d093c00p0L,
 0x0.f4d47ba446ac4c215d26b03164p-104L,

/* x = 4.53125000000000000000000000000000000e-01 3ffdd000000000000000000000000000 */
/* cos(x) = 0.e62a551594b970a770b15d41d4 c0e483e47aca550111df6966f9 e7ac3a94ae49e6a71eb031e */
 0x0.e62a551594b970a770b15d41d4p0L,
 0x0.c0e483e47aca550111df6966f9p-104L,
/* sin(x) = 0.70122c5ec5028c8cff33abf4fd 340ccc382e038379b09cf04f9a 52692b10b72586060cbb001 */
 0x0.70122c5ec5028c8cff33abf4fdp0L,
 0x0.340ccc382e038379b09cf04f9ap-104L,

/* x = 4.60937500000000000000000000000000000e-01 3ffdd800000000000000000000000000 */
/* cos(x) = 0.e54864fe33e8575cabf5bd0e5c f1b1a8bc7c0d5f61702450fa6b 6539735820dd2603ae355d5 */
 0x0.e54864fe33e8575cabf5bd0e5cp0L,
 0x0.f1b1a8bc7c0d5f61702450fa6bp-104L,
/* sin(x) = 0.71dd9fb1ff4677853acb970a9f 6729c6e3aac247b1c57cea66c7 7413f1f98e8b9e98e49d851 */
 0x0.71dd9fb1ff4677853acb970a9fp0L,
 0x0.6729c6e3aac247b1c57cea66c7p-104L,

/* x = 4.68750000000000000000000000000000000e-01 3ffde000000000000000000000000000 */
/* cos(x) = 0.e462dfc670d421ab3d1a159012 28f146a0547011202bf5ab01f9 14431859aef577966bc4fa4 */
 0x0.e462dfc670d421ab3d1a159012p0L,
 0x0.28f146a0547011202bf5ab01f9p-104L,
/* sin(x) = 0.73a74b8f52947b681baf6928eb 3fb021769bf4779bad0e3aa9b1 cdb75ec60aad9fc63ff19d5 */
 0x0.73a74b8f52947b681baf6928ebp0L,
 0x0.3fb021769bf4779bad0e3aa9b1p-104L,

/* x = 4.76562500000000000000000000000000000e-01 3ffde800000000000000000000000000 */
/* cos(x) = 0.e379c9045f29d517c4808aa497 c2057b2b3d109e76c0dc302d4d 0698b36e3f0bdbf33d8e952 */
 0x0.e379c9045f29d517c4808aa497p0L,
 0x0.c2057b2b3d109e76c0dc302d4dp-104L,
/* sin(x) = 0.756f28d011d98528a44a75fc29 c779bd734ecdfb582fdb74b68a 4c4c4be54cfd0b2d3ad292f */
 0x0.756f28d011d98528a44a75fc29p0L,
 0x0.c779bd734ecdfb582fdb74b68ap-104L,

/* x = 4.84375000000000000000000000000000000e-01 3ffdf000000000000000000000000000 */
/* cos(x) = 0.e28d245c58baef72225e232abc 003c4366acd9eb4fc2808c2ab7 fe7676cf512ac7f945ae5fb */
 0x0.e28d245c58baef72225e232abcp0L,
 0x0.003c4366acd9eb4fc2808c2ab7p-104L,
/* sin(x) = 0.77353054ca72690d4c6e171fd9 9e6b39fa8e1ede5f052fd29645 34c75340970a3a9cd3c5c32 */
 0x0.77353054ca72690d4c6e171fd9p0L,
 0x0.9e6b39fa8e1ede5f052fd29645p-104L,

/* x = 4.92187500000000000000000000000000000e-01 3ffdf800000000000000000000000000 */
/* cos(x) = 0.e19cf580eeec046aa1422fa748 07ecefb2a1911c94e7b5f20a00 f70022d940193691e5bd790 */
 0x0.e19cf580eeec046aa1422fa748p0L,
 0x0.07ecefb2a1911c94e7b5f20a00p-104L,
/* sin(x) = 0.78f95b0560a9a3bd6df7bd981d c38c61224d08bc20631ea932e6 05e53b579e9e0767dfcbbcb */
 0x0.78f95b0560a9a3bd6df7bd981dp0L,
 0x0.c38c61224d08bc20631ea932e6p-104L,

/* x = 5.00000000000000000000000000000000000e-01 3ffe0000000000000000000000000000 */
/* cos(x) = 0.e0a94032dbea7cedbddd9da2fa fad98556566b3a89f43eabd723 50af3e8b19e801204d8fe2e */
 0x0.e0a94032dbea7cedbddd9da2fap0L,
 0x0.fad98556566b3a89f43eabd723p-104L,
/* sin(x) = 0.7abba1d12c17bfa1d92f0d93f6 0ded9992f45b4fcaf13cd58b30 3693d2a0db47db35ae8a3a9 */
 0x0.7abba1d12c17bfa1d92f0d93f6p0L,
 0x0.0ded9992f45b4fcaf13cd58b30p-104L,

/* x = 5.07812500000000000000000000000000000e-01 3ffe0400000000000000000000000000 */
/* cos(x) = 0.dfb20840f3a9b36f7ae2c51534 2890b5ec583b8366cc2b55029e 95094d31112383f2553498b */
 0x0.dfb20840f3a9b36f7ae2c51534p0L,
 0x0.2890b5ec583b8366cc2b55029ep-104L,
/* sin(x) = 0.7c7bfdaf13e5ed17212f8a7525 bfb113aba6c0741b5362bb8d59 282a850b63716bca0c910f0 */
 0x0.7c7bfdaf13e5ed17212f8a7525p0L,
 0x0.bfb113aba6c0741b5362bb8d59p-104L,

/* x = 5.15625000000000000000000000000000000e-01 3ffe0800000000000000000000000000 */
/* cos(x) = 0.deb7518814a7a931bbcc88c109 cd41c50bf8bb48f20ae8c36628 d1d3d57574f7dc58f27d91c */
 0x0.deb7518814a7a931bbcc88c109p0L,
 0x0.cd41c50bf8bb48f20ae8c36628p-104L,
/* sin(x) = 0.7e3a679daaf25c676542bcb402 8d0964172961c921823a4ef0c3 a9070d886dbd073f6283699 */
 0x0.7e3a679daaf25c676542bcb402p0L,
 0x0.8d0964172961c921823a4ef0c3p-104L,

/* x = 5.23437500000000000000000000000000000e-01 3ffe0c00000000000000000000000000 */
/* cos(x) = 0.ddb91ff318799172bd2452d0a3 889f5169c64a0094bcf0b8aa7d cf0d7640a2eba68955a80be */
 0x0.ddb91ff318799172bd2452d0a3p0L,
 0x0.889f5169c64a0094bcf0b8aa7dp-104L,
/* sin(x) = 0.7ff6d8a34bd5e8fa54c97482db 5159df1f24e8038419c0b448b9 eea8939b5d4dfcf40900257 */
 0x0.7ff6d8a34bd5e8fa54c97482dbp0L,
 0x0.5159df1f24e8038419c0b448b9p-104L,

/* x = 5.31250000000000000000000000000000000e-01 3ffe1000000000000000000000000000 */
/* cos(x) = 0.dcb7777ac420705168f31e3eb7 80ce9c939ecada62843b54522f 5407eb7f21e556059fcd734 */
 0x0.dcb7777ac420705168f31e3eb7p0L,
 0x0.80ce9c939ecada62843b54522fp-104L,
/* sin(x) = 0.81b149ce34caa5a4e650f8d09f d4d6aa74206c32ca951a93074c 83b2d294d25dbb0f7fdfad2 */
 0x0.81b149ce34caa5a4e650f8d09fp0L,
 0x0.d4d6aa74206c32ca951a93074cp-104L,

/* x = 5.39062500000000000000000000000000000e-01 3ffe1400000000000000000000000000 */
/* cos(x) = 0.dbb25c25b8260c14f6e7bc98ec 991b70c65335198b0ab628bad2 0cc7b229d4dd62183cfa055 */
 0x0.dbb25c25b8260c14f6e7bc98ecp0L,
 0x0.991b70c65335198b0ab628bad2p-104L,
/* sin(x) = 0.8369b434a372da7eb5c8a71fe3 6ce1e0b2b493f6f5cb2e38bcae c2a556b3678c401940d1c3c */
 0x0.8369b434a372da7eb5c8a71fe3p0L,
 0x0.6ce1e0b2b493f6f5cb2e38bcaep-104L,

/* x = 5.46875000000000000000000000000000000e-01 3ffe1800000000000000000000000000 */
/* cos(x) = 0.daa9d20860827063fde51c09e8 55e9932e1b17143e7244fd267a 899d41ae1f3bc6a0ec42e27 */
 0x0.daa9d20860827063fde51c09e8p0L,
 0x0.55e9932e1b17143e7244fd267ap-104L,
/* sin(x) = 0.852010f4f0800521378bd8dd61 4753d080c2e9e0775ffc609947 b9132f5357404f464f06a58 */
 0x0.852010f4f0800521378bd8dd61p0L,
 0x0.4753d080c2e9e0775ffc609947p-104L,

/* x = 5.54687500000000000000000000000000000e-01 3ffe1c00000000000000000000000000 */
/* cos(x) = 0.d99ddd44e44a43d4d4a3a3ed95 204106fd54d78e8c7684545c0d a0b7c2c72be7a89b7c182ad */
 0x0.d99ddd44e44a43d4d4a3a3ed95p0L,
 0x0.204106fd54d78e8c7684545c0dp-104L,
/* sin(x) = 0.86d45935ab396cb4e421e822de e54f3562dfcefeaa782184c234 01d231f5ad981a1cc195b18 */
 0x0.86d45935ab396cb4e421e822dep0L,
 0x0.e54f3562dfcefeaa782184c234p-104L,

/* x = 5.62500000000000000000000000000000000e-01 3ffe2000000000000000000000000000 */
/* cos(x) = 0.d88e820b1526311dd561efbc0c 1a9a5375eb26f65d246c5744b1 3ca26a7e0fd42556da843c8 */
 0x0.d88e820b1526311dd561efbc0cp0L,
 0x0.1a9a5375eb26f65d246c5744b1p-104L,
/* sin(x) = 0.88868625b4e1dbb23133101330 22527200c143a5cb16637cb7da f8ade82459ff2e98511f40f */
 0x0.88868625b4e1dbb23133101330p0L,
 0x0.22527200c143a5cb16637cb7dap-104L,

/* x = 5.70312500000000000000000000000000000e-01 3ffe2400000000000000000000000000 */
/* cos(x) = 0.d77bc4985e93a607c9d868b906 bbc6bbe3a04258814acb035846 8b826fc91bd4d814827f65e */
 0x0.d77bc4985e93a607c9d868b906p0L,
 0x0.bbc6bbe3a04258814acb035846p-104L,
/* sin(x) = 0.8a3690fc5bfc11bf9535e2739a 8512f448a41251514bbed7fc18 d530f9b4650fcbb2861b0aa */
 0x0.8a3690fc5bfc11bf9535e2739ap0L,
 0x0.8512f448a41251514bbed7fc18p-104L,

/* x = 5.78125000000000000000000000000000000e-01 3ffe2800000000000000000000000000 */
/* cos(x) = 0.d665a937b4ef2b1f6d51bad6d9 88a4419c1d7051faf31a9efa15 1d7631117efac03713f950a */
 0x0.d665a937b4ef2b1f6d51bad6d9p0L,
 0x0.88a4419c1d7051faf31a9efa15p-104L,
/* sin(x) = 0.8be472f9776d809af2b8817124 3d63d66dfceeeb739cc894e023 fbc165a0e3f26ff729c5d57 */
 0x0.8be472f9776d809af2b8817124p0L,
 0x0.3d63d66dfceeeb739cc894e023p-104L,

/* x = 5.85937500000000000000000000000000000e-01 3ffe2c00000000000000000000000000 */
/* cos(x) = 0.d54c3441844897fc8f853f0655 f1ba695eba9fbfd7439dbb1171 d862d9d9146ca5136f825ac */
 0x0.d54c3441844897fc8f853f0655p0L,
 0x0.f1ba695eba9fbfd7439dbb1171p-104L,
/* sin(x) = 0.8d902565817ee7839bce3cd128 060119492cd36d42d82ada30d7 f8bde91324808377ddbf5d4 */
 0x0.8d902565817ee7839bce3cd128p0L,
 0x0.060119492cd36d42d82ada30d7p-104L,

/* x = 5.93750000000000000000000000000000000e-01 3ffe3000000000000000000000000000 */
/* cos(x) = 0.d42f6a1b9f0168cdf031c2f63c 8d9304d86f8d34cb1d5fccb68c a0f2241427fc18d1fd5bbdf */
 0x0.d42f6a1b9f0168cdf031c2f63cp0L,
 0x0.8d9304d86f8d34cb1d5fccb68cp-104L,
/* sin(x) = 0.8f39a191b2ba6122a3fa4f41d5 a3ffd421417d46f19a22230a14 f7fcc8fce5c75b4b28b29d1 */
 0x0.8f39a191b2ba6122a3fa4f41d5p0L,
 0x0.a3ffd421417d46f19a22230a14p-104L,

/* x = 6.01562500000000000000000000000000000e-01 3ffe3400000000000000000000000000 */
/* cos(x) = 0.d30f4f392c357ab0661c5fa8a7 d9b26627846fef214b1d19a223 79ff9eddba087cf410eb097 */
 0x0.d30f4f392c357ab0661c5fa8a7p0L,
 0x0.d9b26627846fef214b1d19a223p-104L,
/* sin(x) = 0.90e0e0d81ca678796cc92c8ea8 c2815bc72ca78abe571bfa8576 aacc571e096a33237e0e830 */
 0x0.90e0e0d81ca678796cc92c8ea8p0L,
 0x0.c2815bc72ca78abe571bfa8576p-104L,

/* x = 6.09375000000000000000000000000000000e-01 3ffe3800000000000000000000000000 */
/* cos(x) = 0.d1ebe81a95ee752e48a26bcd32 d6e922d7eb44b8ad2232f69307 95e84b56317269b9dd1dfa6 */
 0x0.d1ebe81a95ee752e48a26bcd32p0L,
 0x0.d6e922d7eb44b8ad2232f69307p-104L,
/* sin(x) = 0.9285dc9bc45dd9ea3d02457bcc e59c4175aab6ff7929a8d28719 5525fdace200dba032874fb */
 0x0.9285dc9bc45dd9ea3d02457bccp0L,
 0x0.e59c4175aab6ff7929a8d28719p-104L,

/* x = 6.17187500000000000000000000000000000e-01 3ffe3c00000000000000000000000000 */
/* cos(x) = 0.d0c5394d772228195e25736c03 574707de0af1ca344b13bd3914 bfe27518e9e426f5deff1e1 */
 0x0.d0c5394d772228195e25736c03p0L,
 0x0.574707de0af1ca344b13bd3914p-104L,
/* sin(x) = 0.94288e48bd0335fc41c4cbd292 0497a8f5d1d8185c99fa0081f9 0c27e2a53ffdd208a0dbe69 */
 0x0.94288e48bd0335fc41c4cbd292p0L,
 0x0.0497a8f5d1d8185c99fa0081f9p-104L,

/* x = 6.25000000000000000000000000000000000e-01 3ffe4000000000000000000000000000 */
/* cos(x) = 0.cf9b476c897c25c5bfe750dd3f 308eaf7bcc1ed00179a256870f 4200445043dcdb1974b5878 */
 0x0.cf9b476c897c25c5bfe750dd3fp0L,
 0x0.308eaf7bcc1ed00179a256870fp-104L,
/* sin(x) = 0.95c8ef544210ec0b91c49bd2aa 09e8515fa61a156ebb10f5f8c2 32a6445b61ebf3c2ec268f9 */
 0x0.95c8ef544210ec0b91c49bd2aap0L,
 0x0.09e8515fa61a156ebb10f5f8c2p-104L,

/* x = 6.32812500000000000000000000000000000e-01 3ffe4400000000000000000000000000 */
/* cos(x) = 0.ce6e171f92f2e27f32225327ec 440ddaefae248413efc0e58cee e1ae369aabe73f88c87ed1a */
 0x0.ce6e171f92f2e27f32225327ecp0L,
 0x0.440ddaefae248413efc0e58ceep-104L,
/* sin(x) = 0.9766f93cd18413a6aafc1cfc6f c28abb6817bf94ce349901ae3f 48c3215d3eb60acc5f78903 */
 0x0.9766f93cd18413a6aafc1cfc6fp0L,
 0x0.c28abb6817bf94ce349901ae3fp-104L,

/* x = 6.40625000000000000000000000000000000e-01 3ffe4800000000000000000000000000 */
/* cos(x) = 0.cd3dad1b5328a2e459f993f4f5 108819faccbc4eeba9604e81c7 adad51cc8a2561631a06826 */
 0x0.cd3dad1b5328a2e459f993f4f5p0L,
 0x0.108819faccbc4eeba9604e81c7p-104L,
/* sin(x) = 0.9902a58a45e27bed68412b426b 675ed503f54d14c8172e0d373f 42cadf04daf67319a7f94be */
 0x0.9902a58a45e27bed68412b426bp0L,
 0x0.675ed503f54d14c8172e0d373fp-104L,

/* x = 6.48437500000000000000000000000000000e-01 3ffe4c00000000000000000000000000 */
/* cos(x) = 0.cc0a0e21709883a3ff00911e11 a07ee3bd7ea2b04e081be99be0 264791170761ae64b8b744a */
 0x0.cc0a0e21709883a3ff00911e11p0L,
 0x0.a07ee3bd7ea2b04e081be99be0p-104L,
/* sin(x) = 0.9a9bedcdf01b38d993f3d78207 81de292033ead73b89e28f3931 3dbe3a6e463f845b5fa8490 */
 0x0.9a9bedcdf01b38d993f3d78207p0L,
 0x0.81de292033ead73b89e28f3931p-104L,

/* x = 6.56250000000000000000000000000000000e-01 3ffe5000000000000000000000000000 */
/* cos(x) = 0.cad33f00658fe5e8204bbc0f3a 66a0e6a773f87987a780b243d7 be83b3db1448ca0e0e62787 */
 0x0.cad33f00658fe5e8204bbc0f3ap0L,
 0x0.66a0e6a773f87987a780b243d7p-104L,
/* sin(x) = 0.9c32cba2b14156ef05256c4f85 7991ca6a547cd7ceb1ac8a8e62 a282bd7b9183648a462bd04 */
 0x0.9c32cba2b14156ef05256c4f85p0L,
 0x0.7991ca6a547cd7ceb1ac8a8e62p-104L,

/* x = 6.64062500000000000000000000000000000e-01 3ffe5400000000000000000000000000 */
/* cos(x) = 0.c99944936cf48c8911ff93fe64 b3ddb7981e414bdaf6aae12035 77de44878c62bc3bc9cf7b9 */
 0x0.c99944936cf48c8911ff93fe64p0L,
 0x0.b3ddb7981e414bdaf6aae12035p-104L,
/* sin(x) = 0.9dc738ad14204e689ac582d0f8 5826590feece34886cfefe2e08 cf2bb8488d55424dc9d3525 */
 0x0.9dc738ad14204e689ac582d0f8p0L,
 0x0.5826590feece34886cfefe2e08p-104L,

/* x = 6.71875000000000000000000000000000000e-01 3ffe5800000000000000000000000000 */
/* cos(x) = 0.c85c23c26ed7b6f014ef546c47 929682122876bfbf157de0aff3 c4247d820c746e32cd4174f */
 0x0.c85c23c26ed7b6f014ef546c47p0L,
 0x0.929682122876bfbf157de0aff3p-104L,
/* sin(x) = 0.9f592e9b66a9cf906a3c7aa3c1 0199849040c45ec3f0a7475973 11038101780c5f266059dbf */
 0x0.9f592e9b66a9cf906a3c7aa3c1p0L,
 0x0.0199849040c45ec3f0a7475973p-104L,

/* x = 6.79687500000000000000000000000000000e-01 3ffe5c00000000000000000000000000 */
/* cos(x) = 0.c71be181ecd6875ce2da5615a0 3cca207d9adcb9dfb0a1d6c40a 4f0056437f1a59ccddd06ee */
 0x0.c71be181ecd6875ce2da5615a0p0L,
 0x0.3cca207d9adcb9dfb0a1d6c40ap-104L,
/* sin(x) = 0.a0e8a725d33c828c11fa50fd9e 9a15ffecfad43f3e534358076b 9b0f6865694842b1e8c67dc */
 0x0.a0e8a725d33c828c11fa50fd9ep0L,
 0x0.9a15ffecfad43f3e534358076bp-104L,

/* x = 6.87500000000000000000000000000000000e-01 3ffe6000000000000000000000000000 */
/* cos(x) = 0.c5d882d2ee48030c7c07d28e98 1e34804f82ed4cf93655d23653 89b716de6ad44676a1cc5da */
 0x0.c5d882d2ee48030c7c07d28e98p0L,
 0x0.1e34804f82ed4cf93655d23653p-104L,
/* sin(x) = 0.a2759c0e79c35582527c32b55f 5405c182c66160cb1d9eb7bb0b 7cdf4ad66f317bda4332914 */
 0x0.a2759c0e79c35582527c32b55fp0L,
 0x0.5405c182c66160cb1d9eb7bb0bp-104L,

/* x = 6.95312500000000000000000000000000000e-01 3ffe6400000000000000000000000000 */
/* cos(x) = 0.c4920cc2ec38fb891b38827db0 8884fc66371ac4c2052ca8885b 981bbcfd3bb7b093ee31515 */
 0x0.c4920cc2ec38fb891b38827db0p0L,
 0x0.8884fc66371ac4c2052ca8885bp-104L,
/* sin(x) = 0.a400072188acf49cd6b173825e 038346f105e1301afe642bcc36 4cea455e21e506e3e927ed8 */
 0x0.a400072188acf49cd6b173825ep0L,
 0x0.038346f105e1301afe642bcc36p-104L,

/* x = 7.03125000000000000000000000000000000e-01 3ffe6800000000000000000000000000 */
/* cos(x) = 0.c348846bbd3631338ffe2bfe9d d1381a35b4e9c0c51b4c13fe37 6bad1bf5caacc4542be0aa9 */
 0x0.c348846bbd3631338ffe2bfe9dp0L,
 0x0.d1381a35b4e9c0c51b4c13fe37p-104L,
/* sin(x) = 0.a587e23555bb08086d02b9c662 cdd29316c3e9bd08d93793634a 21b1810cce73bdb97a99b9e */
 0x0.a587e23555bb08086d02b9c662p0L,
 0x0.cdd29316c3e9bd08d93793634ap-104L,

/* x = 7.10937500000000000000000000000000000e-01 3ffe6c00000000000000000000000000 */
/* cos(x) = 0.c1fbeef380e4ffdd5a613ec872 2f643ffe814ec2343e53adb549 627224fdc9f2a7b77d3d69f */
 0x0.c1fbeef380e4ffdd5a613ec872p0L,
 0x0.2f643ffe814ec2343e53adb549p-104L,
/* sin(x) = 0.a70d272a76a8d4b6da0ec90712 bb748b96dabf88c3079246f3db 7eea6e58ead4ed0e2843303 */
 0x0.a70d272a76a8d4b6da0ec90712p0L,
 0x0.bb748b96dabf88c3079246f3dbp-104L,

/* x = 7.18750000000000000000000000000000000e-01 3ffe7000000000000000000000000000 */
/* cos(x) = 0.c0ac518c8b6ae710ba37a3eeb9 0cb15aebcb8bed4356fb507a48 a6e97de9aa6d9660116b436 */
 0x0.c0ac518c8b6ae710ba37a3eeb9p0L,
 0x0.0cb15aebcb8bed4356fb507a48p-104L,
/* sin(x) = 0.a88fcfebd9a8dd47e2f3c76ef9 e2439920f7e7fbe735f8bcc985 491ec6f12a2d4214f8cfa99 */
 0x0.a88fcfebd9a8dd47e2f3c76ef9p0L,
 0x0.e2439920f7e7fbe735f8bcc985p-104L,

/* x = 7.26562500000000000000000000000000000e-01 3ffe7400000000000000000000000000 */
/* cos(x) = 0.bf59b17550a440687596929656 7cf3e3b4e483061877c02811c6 cae85fad5a6c3da58f49292 */
 0x0.bf59b17550a440687596929656p0L,
 0x0.7cf3e3b4e483061877c02811c6p-104L,
/* sin(x) = 0.aa0fd66eddb921232c28520d39 11b8a03193b47f187f1471ac21 6fbcd5bb81029294d3a73f1 */
 0x0.aa0fd66eddb921232c28520d39p0L,
 0x0.11b8a03193b47f187f1471ac21p-104L,

/* x = 7.34375000000000000000000000000000000e-01 3ffe7800000000000000000000000000 */
/* cos(x) = 0.be0413f84f2a771c614946a88c bf4da1d75a5560243de8f2283f efa0ea4a48468a52d51d8b3 */
 0x0.be0413f84f2a771c614946a88cp0L,
 0x0.bf4da1d75a5560243de8f2283fp-104L,
/* sin(x) = 0.ab8d34b36acd987210ed343ec6 5d7e3adc2e7109fce43d55c8d5 7dfdf55b9e01d2cc1f1b9ec */
 0x0.ab8d34b36acd987210ed343ec6p0L,
 0x0.5d7e3adc2e7109fce43d55c8d5p-104L,

/* x = 7.42187500000000000000000000000000000e-01 3ffe7c00000000000000000000000000 */
/* cos(x) = 0.bcab7e6bfb2a14a9b122c574a3 76bec98ab14808c64a4e731b34 047e217611013ac99c0f25d */
 0x0.bcab7e6bfb2a14a9b122c574a3p0L,
 0x0.76bec98ab14808c64a4e731b34p-104L,
/* sin(x) = 0.ad07e4c409d08c4fa3a9057bb0 ac24b8636e74e76f51e09bd6b2 319707cbd9f5e254643897a */
 0x0.ad07e4c409d08c4fa3a9057bb0p0L,
 0x0.ac24b8636e74e76f51e09bd6b2p-104L,

/* x = 7.50000000000000000000000000000000000e-01 3ffe8000000000000000000000000000 */
/* cos(x) = 0.bb4ff632a908f73ec151839cb9 d993b4e0bfb8f20e7e44e6e4ae e845e35575c3106dbe6fd06 */
 0x0.bb4ff632a908f73ec151839cb9p0L,
 0x0.d993b4e0bfb8f20e7e44e6e4aep-104L,
/* sin(x) = 0.ae7fe0b5fc786b2d966e1d6af1 40a488476747c2646425fc7533 f532cd044cb10a971a49a6a */
 0x0.ae7fe0b5fc786b2d966e1d6af1p0L,
 0x0.40a488476747c2646425fc7533p-104L,

/* x = 7.57812500000000000000000000000000000e-01 3ffe8400000000000000000000000000 */
/* cos(x) = 0.b9f180ba77dd0751628e135a95 08299012230f14becacdd14c3f 8862d122de5b56d55b53360 */
 0x0.b9f180ba77dd0751628e135a95p0L,
 0x0.08299012230f14becacdd14c3fp-104L,
/* sin(x) = 0.aff522a954f2ba16d9defdc416 e33f5e9a5dfd5a6c228e0abc4d 521327ff6e2517a7b3851dd */
 0x0.aff522a954f2ba16d9defdc416p0L,
 0x0.e33f5e9a5dfd5a6c228e0abc4dp-104L,

/* x = 7.65625000000000000000000000000000000e-01 3ffe8800000000000000000000000000 */
/* cos(x) = 0.b890237d3bb3c284b614a05390 16bfa1053730bbdf940fa895e1 85f8e58884d3dda15e63371 */
 0x0.b890237d3bb3c284b614a05390p0L,
 0x0.16bfa1053730bbdf940fa895e1p-104L,
/* sin(x) = 0.b167a4c90d63c4244cf5493b7c c23bd3c3c1225e078baa0c53d6 d400b926281f537a1a260e6 */
 0x0.b167a4c90d63c4244cf5493b7cp0L,
 0x0.c23bd3c3c1225e078baa0c53d6p-104L,

/* x = 7.73437500000000000000000000000000000e-01 3ffe8c00000000000000000000000000 */
/* cos(x) = 0.b72be40067aaf2c050dbdb7a14 c3d7d4f203f6b3f0224a4afe55 d6ec8e92b508fd5c5984b3b */
 0x0.b72be40067aaf2c050dbdb7a14p0L,
 0x0.c3d7d4f203f6b3f0224a4afe55p-104L,
/* sin(x) = 0.b2d7614b1f3aaa24df2d6e20a7 7e1ca3e6d838c03e29c1bcb026 e6733324815fadc9eb89674 */
 0x0.b2d7614b1f3aaa24df2d6e20a7p0L,
 0x0.7e1ca3e6d838c03e29c1bcb026p-104L,

/* x = 7.81250000000000000000000000000000000e-01 3ffe9000000000000000000000000000 */
/* cos(x) = 0.b5c4c7d4f7dae915ac786ccf4b 1a498d3e73b6e5e74fe7519d9c 53ee6d6b90e881bddfc33e1 */
 0x0.b5c4c7d4f7dae915ac786ccf4bp0L,
 0x0.1a498d3e73b6e5e74fe7519d9cp-104L,
/* sin(x) = 0.b44452709a5975290591376543 4a59d111f0433eb2b133f7d103 207e2aeb4aae111ddc385b3 */
 0x0.b44452709a5975290591376543p0L,
 0x0.4a59d111f0433eb2b133f7d103p-104L,

/* x = 7.89062500000000000000000000000000000e-01 3ffe9400000000000000000000000000 */
/* cos(x) = 0.b45ad4975b1294cadca4cf40ec 8f22a68cd14b175835239a37e6 3acb85e8e9505215df18140 */
 0x0.b45ad4975b1294cadca4cf40ecp0L,
 0x0.8f22a68cd14b175835239a37e6p-104L,
/* sin(x) = 0.b5ae7285bc10cf515753847e8f 8b7a30e0a580d929d770103509 880680f7b8b0e8ad23b65d8 */
 0x0.b5ae7285bc10cf515753847e8fp0L,
 0x0.8b7a30e0a580d929d770103509p-104L
};

/* k_rem_pio */
static const int k_rem_init_jk[] = {2,3,4,6};

static const int32_t k_rem_ipio2[] = {
0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62, 
0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A, 
0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129, 
0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41, 
0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8, 
0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF, 
0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5, 
0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08, 
0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3, 
0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880, 
0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B, 

0x47C419, 0xC367CD, 0xDCE809, 0x2A8359, 0xC4768B, 0x961CA6,
0xDDAF44, 0xD15719, 0x053EA5, 0xFF0705, 0x3F7E33, 0xE832C2,
0xDE4F98, 0x327DBB, 0xC33D26, 0xEF6B1E, 0x5EF89F, 0x3A1F35,
0xCAF27F, 0x1D87F1, 0x21907C, 0x7C246A, 0xFA6ED5, 0x772D30,
0x433B15, 0xC614B5, 0x9D19C3, 0xC2C4AD, 0x414D2C, 0x5D000C,
0x467D86, 0x2D71E3, 0x9AC69B, 0x006233, 0x7CD2B4, 0x97A7B4,
0xD55537, 0xF63ED7, 0x1810A3, 0xFC764D, 0x2A9D64, 0xABD770,
0xF87C63, 0x57B07A, 0xE71517, 0x5649C0, 0xD9D63B, 0x3884A7,
0xCB2324, 0x778AD6, 0x23545A, 0xB91F00, 0x1B0AF1, 0xDFCE19,
0xFF319F, 0x6A1E66, 0x615799, 0x47FBAC, 0xD87F7E, 0xB76522,
0x89E832, 0x60BFE6, 0xCDC4EF, 0x09366C, 0xD43F5D, 0xD7DE16,
0xDE3B58, 0x929BDE, 0x2822D2, 0xE88628, 0x4D58E2, 0x32CAC6,
0x16E308, 0xCB7DE0, 0x50C017, 0xA71DF3, 0x5BE018, 0x34132E,
0x621283, 0x014883, 0x5B8EF5, 0x7FB0AD, 0xF2E91E, 0x434A48,
0xD36710, 0xD8DDAA, 0x425FAE, 0xCE616A, 0xA4280A, 0xB499D3,
0xF2A606, 0x7F775C, 0x83C2A3, 0x883C61, 0x78738A, 0x5A8CAF,
0xBDD76F, 0x63A62D, 0xCBBFF4, 0xEF818D, 0x67C126, 0x45CA55,
0x36D9CA, 0xD2A828, 0x8D61C2, 0x77C912, 0x142604, 0x9B4612,
0xC459C4, 0x44C5C8, 0x91B24D, 0xF31700, 0xAD43D4, 0xE54929,
0x10D5FD, 0xFCBE00, 0xCC941E, 0xEECE70, 0xF53E13, 0x80F1EC,
0xC3E7B3, 0x28F8C7, 0x940593, 0x3E71C1, 0xB3092E, 0xF3450B,
0x9C1288, 0x7B20AB, 0x9FB52E, 0xC29247, 0x2F327B, 0x6D550C,
0x90A772, 0x1FE76B, 0x96CB31, 0x4A1679, 0xE27941, 0x89DFF4,
0x9794E8, 0x84E6E2, 0x973199, 0x6BED88, 0x365F5F, 0x0EFDBB,
0xB49A48, 0x6CA467, 0x427271, 0x325D8D, 0xB8159F, 0x09E5BC,
0x25318D, 0x3974F7, 0x1C0530, 0x010C0D, 0x68084B, 0x58EE2C,
0x90AA47, 0x02E774, 0x24D6BD, 0xA67DF7, 0x72486E, 0xEF169F,
0xA6948E, 0xF691B4, 0x5153D1, 0xF20ACF, 0x339820, 0x7E4BF5,
0x6863B2, 0x5F3EDD, 0x035D40, 0x7F8985, 0x295255, 0xC06437,
0x10D86D, 0x324832, 0x754C5B, 0xD4714E, 0x6E5445, 0xC1090B,
0x69F52A, 0xD56614, 0x9D0727, 0x50045D, 0xDB3BB4, 0xC576EA,
0x17F987, 0x7D6B49, 0xBA271D, 0x296996, 0xACCCC6, 0x5414AD,
0x6AE290, 0x89D988, 0x50722C, 0xBEA404, 0x940777, 0x7030F3,
0x27FC00, 0xA871EA, 0x49C266, 0x3DE064, 0x83DD97, 0x973FA3,
0xFD9443, 0x8C860D, 0xDE4131, 0x9D3992, 0x8C70DD, 0xE7B717,
0x3BDF08, 0x2B3715, 0xA0805C, 0x93805A, 0x921110, 0xD8E80F,
0xAF806C, 0x4BFFDB, 0x0F9038, 0x761859, 0x15A562, 0xBBCB61,
0xB989C7, 0xBD4010, 0x04F2D2, 0x277549, 0xF6B6EB, 0xBB22DB,
0xAA140A, 0x2F2689, 0x768364, 0x333B09, 0x1A940E, 0xAA3A51,
0xC2A31D, 0xAEEDAF, 0x12265C, 0x4DC26D, 0x9C7A2D, 0x9756C0,
0x833F03, 0xF6F009, 0x8C402B, 0x99316D, 0x07B439, 0x15200C,
0x5BC3D8, 0xC492F5, 0x4BADC6, 0xA5CA4E, 0xCD37A7, 0x36A9E6,
0x9492AB, 0x6842DD, 0xDE6319, 0xEF8C76, 0x528B68, 0x37DBFC,
0xABA1AE, 0x3115DF, 0xA1AE00, 0xDAFB0C, 0x664D64, 0xB705ED,
0x306529, 0xBF5657, 0x3AFF47, 0xB9F96A, 0xF3BE75, 0xDF9328,
0x3080AB, 0xF68C66, 0x15CB04, 0x0622FA, 0x1DE4D9, 0xA4B33D,
0x8F1B57, 0x09CD36, 0xE9424E, 0xA4BE13, 0xB52333, 0x1AAAF0,
0xA8654F, 0xA5C1D2, 0x0F3F0B, 0xCD785B, 0x76F923, 0x048B7B,
0x721789, 0x53A6C6, 0xE26E6F, 0x00EBEF, 0x584A9B, 0xB7DAC4,
0xBA66AA, 0xCFCF76, 0x1D02D1, 0x2DF1B1, 0xC1998C, 0x77ADC3,
0xDA4886, 0xA05DF7, 0xF480C6, 0x2FF0AC, 0x9AECDD, 0xBC5C3F,
0x6DDED0, 0x1FC790, 0xB6DB2A, 0x3A25A3, 0x9AAF00, 0x9353AD,
0x0457B6, 0xB42D29, 0x7E804B, 0xA707DA, 0x0EAA76, 0xA1597B,
0x2A1216, 0x2DB7DC, 0xFDE5FA, 0xFEDB89, 0xFDBE89, 0x6C76E4,
0xFCA906, 0x70803E, 0x156E85, 0xFF87FD, 0x073E28, 0x336761,
0x86182A, 0xEABD4D, 0xAFE7B3, 0x6E6D8F, 0x396795, 0x5BBF31,
0x48D784, 0x16DF30, 0x432DC7, 0x356125, 0xCE70C9, 0xB8CB30,
0xFD6CBF, 0xA200A4, 0xE46C05, 0xA0DD5A, 0x476F21, 0xD21262,
0x845CB9, 0x496170, 0xE0566B, 0x015299, 0x375550, 0xB7D51E,
0xC4F133, 0x5F6E13, 0xE4305D, 0xA92E85, 0xC3B21D, 0x3632A1,
0xA4B708, 0xD4B1EA, 0x21F716, 0xE4698F, 0x77FF27, 0x80030C,
0x2D408D, 0xA0CD4F, 0x99A520, 0xD3A2B3, 0x0A5D2F, 0x42F9B4,
0xCBDA11, 0xD0BE7D, 0xC1DB9B, 0xBD17AB, 0x81A2CA, 0x5C6A08,
0x17552E, 0x550027, 0xF0147F, 0x8607E1, 0x640B14, 0x8D4196,
0xDEBE87, 0x2AFDDA, 0xB6256B, 0x34897B, 0xFEF305, 0x9EBFB9,
0x4F6A68, 0xA82A4A, 0x5AC44F, 0xBCF82D, 0x985AD7, 0x95C7F4,
0x8D4D0D, 0xA63A20, 0x5F57A4, 0xB13F14, 0x953880, 0x0120CC,
0x86DD71, 0xB6DEC9, 0xF560BF, 0x11654D, 0x6B0701, 0xACB08C,
0xD0C0B2, 0x485551, 0x0EFB1E, 0xC37295, 0x3B06A3, 0x3540C0,
0x7BDC06, 0xCC45E0, 0xFA294E, 0xC8CAD6, 0x41F3E8, 0xDE647C,
0xD8649B, 0x31BED9, 0xC397A4, 0xD45877, 0xC5E369, 0x13DAF0,
0x3C3ABA, 0x461846, 0x5F7555, 0xF5BDD2, 0xC6926E, 0x5D2EAC,
0xED440E, 0x423E1C, 0x87C461, 0xE9FD29, 0xF3D6E7, 0xCA7C22,
0x35916F, 0xC5E008, 0x8DD7FF, 0xE26A6E, 0xC6FDB0, 0xC10893,
0x745D7C, 0xB2AD6B, 0x9D6ECD, 0x7B723E, 0x6A11C6, 0xA9CFF7,
0xDF7329, 0xBAC9B5, 0x5100B7, 0x0DB2E2, 0x24BA74, 0x607DE5,
0x8AD874, 0x2C150D, 0x0C1881, 0x94667E, 0x162901, 0x767A9F,
0xBEFDFD, 0xEF4556, 0x367ED9, 0x13D9EC, 0xB9BA8B, 0xFC97C4,
0x27A831, 0xC36EF1, 0x36C594, 0x56A8D8, 0xB5A8B4, 0x0ECCCF,
0x2D8912, 0x34576F, 0x89562C, 0xE3CE99, 0xB920D6, 0xAA5E6B,
0x9C2A3E, 0xCC5F11, 0x4A0BFD, 0xFBF4E1, 0x6D3B8E, 0x2C86E2,
0x84D4E9, 0xA9B4FC, 0xD1EEEF, 0xC9352E, 0x61392F, 0x442138,
0xC8D91B, 0x0AFC81, 0x6A4AFB, 0xD81C2F, 0x84B453, 0x8C994E,
0xCC2254, 0xDC552A, 0xD6C6C0, 0x96190B, 0xB8701A, 0x649569,
0x605A26, 0xEE523F, 0x0F117F, 0x11B5F4, 0xF5CBFC, 0x2DBC34,
0xEEBC34, 0xCC5DE8, 0x605EDD, 0x9B8E67, 0xEF3392, 0xB817C9,
0x9B5861, 0xBC57E1, 0xC68351, 0x103ED8, 0x4871DD, 0xDD1C2D,
0xA118AF, 0x462C21, 0xD7F359, 0x987AD9, 0xC0549E, 0xFA864F,
0xFC0656, 0xAE79E5, 0x362289, 0x22AD38, 0xDC9367, 0xAAE855,
0x382682, 0x9BE7CA, 0xA40D51, 0xB13399, 0x0ED7A9, 0x480569,
0xF0B265, 0xA7887F, 0x974C88, 0x36D1F9, 0xB39221, 0x4A827B,
0x21CF98, 0xDC9F40, 0x5547DC, 0x3A74E1, 0x42EB67, 0xDF9DFE,
0x5FD45E, 0xA4677B, 0x7AACBA, 0xA2F655, 0x23882B, 0x55BA41,
0x086E59, 0x862A21, 0x834739, 0xE6E389, 0xD49EE5, 0x40FB49,
0xE956FF, 0xCA0F1C, 0x8A59C5, 0x2BFA94, 0xC5C1D3, 0xCFC50F,
0xAE5ADB, 0x86C547, 0x624385, 0x3B8621, 0x94792C, 0x876110,
0x7B4C2A, 0x1A2C80, 0x12BF43, 0x902688, 0x893C78, 0xE4C4A8,
0x7BDBE5, 0xC23AC4, 0xEAF426, 0x8A67F7, 0xBF920D, 0x2BA365,
0xB1933D, 0x0B7CBD, 0xDC51A4, 0x63DD27, 0xDDE169, 0x19949A,
0x9529A8, 0x28CE68, 0xB4ED09, 0x209F44, 0xCA984E, 0x638270,
0x237C7E, 0x32B90F, 0x8EF5A7, 0xE75614, 0x08F121, 0x2A9DB5,
0x4D7E6F, 0x5119A5, 0xABF9B5, 0xD6DF82, 0x61DD96, 0x023616,
0x9F3AC4, 0xA1A283, 0x6DED72, 0x7A8D39, 0xA9B882, 0x5C326B,

};

static const double k_rem_PIo2[] = {
  1.57079625129699707031e+00, /* 0x3FF921FB, 0x40000000 */
  7.54978941586159635335e-08, /* 0x3E74442D, 0x00000000 */
  5.39030252995776476554e-15, /* 0x3CF84698, 0x80000000 */
  3.28200341580791294123e-22, /* 0x3B78CC51, 0x60000000 */
  1.27065575308067607349e-29, /* 0x39F01B83, 0x80000000 */
  1.22933308981111328932e-36, /* 0x387A2520, 0x40000000 */
  2.73370053816464559624e-44, /* 0x36E38222, 0x80000000 */
  2.16741683877804819444e-51, /* 0x3569F31D, 0x00000000 */
};

template <class Abi>
ldoublev<Abi> llvm__kernel_sinl(ldoublev<Abi> x, ldoublev<Abi> y, intv<Abi> iy)
{
  ldoublev<Abi> h, l, z, sin_l, cos_l_m1, res;
  longv<Abi> ix;
  uintv<Abi> tix, hix, index;
  doublev<Abi> xhi;

  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  ix = pf_xhi.i;
  tix = static_simd_cast<uintv<Abi>>((static_simd_cast<ulongv<Abi>>(ix)) >> 32);
  tix = tix & (~0x80000000U);   

  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(tix < 0x3fc30000);
  auto jd2 = change_simd_mask_type<uint32_t, long double, Abi>(tix < 0x3c600000);
  where((jd1 & jd2 & change_simd_mask_type<int, long double, Abi>(static_simd_cast<intv<Abi>>(x) == 0)), res) = x;
  where((jd1 & (!jd2)), z) = x * x;
  where((jd1 & (!jd2)), res) = x + (x * (z * (SIN1 + z * (SIN2 + z * (SIN3 + z * (SIN4 + z * (SIN5 + z * (SIN6 + z * (SIN7 + z * SIN8)))))))));

  intv<Abi> six;
  six = static_simd_cast<intv<Abi>>(tix);
  tix = static_simd_cast<uintv<Abi>>(((six - 0x3ff00000) >> 4) + 0x3fff0000);
  index = 0x3ffeU - (tix >> 16);
  hix = (tix + (0x200U << index)) & (0xfffffc00U << index);
  x = abs(x);


  auto jdex1 = index == 0;
  auto jdex2 = index == 1;
  where(jdex1, index) = ((45 << 10) + hix - 0x3ffe0000) >> 8;
  where(jdex2, index) = ((13 << 11) + hix - 0x3ffd0000) >> 9;
  where(!jdex1 & !jdex2, index) = (hix - 0x3ffc3000) >> 10;


  hix = (hix << 4) & 0x3fffffff;
  Abi_64suf<Abi> pf_hhi;
  pf_hhi.u = (static_simd_cast<ulongv<Abi>>(hix)) << 32;
  h = static_simd_cast<ldoublev<Abi>>(pf_hhi.f);

  auto jd3 = change_simd_mask_type<int32_t, long double, Abi>(iy != 0);
  auto jd4 = change_simd_mask_type<int64_t, long double, Abi>(ix < 0);
  where(jd3 & jd4, l) = (-y) - (h - x);
  where(jd3 & !jd4, l) = y - (h - x);
  where(!jd3, l) = x - h;
  z = l * l;
  sin_l = l * (ONE + z * (SSIN1 + z * (SSIN2 + z * (SSIN3 + z * (SSIN4 + z * SSIN5)))));
  cos_l_m1 = z * (SCOS1 + z * (SCOS2 + z * (SCOS3 + z * (SCOS4 + z * SCOS5))));

  for(size_t i = 0; i < index.size(); i++)
  {
    if((!jd1[i]) && (index[i] < 332))
    {
      z[i] = __sincosl_table[index[i] + SINCOSL_SIN_HI]
        + (__sincosl_table[index[i] + SINCOSL_SIN_LO]
        + (__sincosl_table[index[i] + SINCOSL_SIN_HI]
        * cos_l_m1[i]) + (__sincosl_table[index[i] + SINCOSL_COS_HI] * sin_l[i]));
    }
  }
  // assert(0);

  where((!jd1) & jd4, res) = -z;
  where((!jd1) & !jd4, res) = z;
  return res;
}

template <class Abi>
ldoublev<Abi> llvm__kernel_cosl(ldoublev<Abi> x, ldoublev<Abi> y)
{
  ldoublev<Abi> h, l, z, sin_l, cos_l_m1, res;
  longv<Abi> ix;
  uintv<Abi> tix, hix, index;
  doublev<Abi> xhi;

  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  ix = pf_xhi.i;
  tix = static_simd_cast<uintv<Abi>>((static_simd_cast<ulongv<Abi>>(ix)) >> 32);
  tix = tix & (~0x80000000U);   

  
  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(tix < 0x3fc30000);
  auto jd2 = change_simd_mask_type<uint32_t, long double, Abi>(tix < 0x3c600000);
  ldoublev<Abi> one1 = ONE;
  where((jd1 & jd2 & change_simd_mask_type<int, long double, Abi>(static_simd_cast<intv<Abi>>(x) == 0)), res) = one1;
  where((jd1 & (!jd2)), z) = x * x;
  where((jd1 & (!jd2)), res) = ONE + (z * (COS1 + z * (COS2 + z * (COS3 + z * (COS4 + z * (COS5 + z * (COS6 + z * (COS7 + z * COS8))))))));

  intv<Abi> six;
  six = static_simd_cast<intv<Abi>>(tix);
  tix = static_simd_cast<uintv<Abi>>(((six - 0x3ff00000) >> 4) + 0x3fff0000);
  index = 0x3ffeU - (tix >> 16);
  hix = (tix + (0x200U << index)) & (0xfffffc00U << index);
  x = abs(x);

  auto jdex1 = index == 0;
  auto jdex2 = index == 1;
  where(jdex1, index) = ((45 << 10) + hix - 0x3ffe0000) >> 8;
  where(jdex2, index) = ((13 << 11) + hix - 0x3ffd0000) >> 9;
  where(!jdex1 & !jdex2, index) = (hix - 0x3ffc3000) >> 10;


  where(!jd1, hix) = (hix << 4) & 0x3fffffff;
  Abi_64suf<Abi> pf_hhi;
  pf_hhi.u = (static_simd_cast<ulongv<Abi>>(hix)) << 32;
  h = static_simd_cast<ldoublev<Abi>>(pf_hhi.f);
  l = y - (h - x);
  z = l * l;
  sin_l = l * (ONE + z * (SSIN1 + z * (SSIN2 + z * (SSIN3 + z * (SSIN4 + z * SSIN5)))));
  cos_l_m1 = z * (SCOS1 + z * (SCOS2 + z * (SCOS3 + z * (SCOS4 + z * SCOS5))));

  for(size_t i = 0; i < index.size(); i++)
  {
    if((!jd1[i]) && (index[i] < 332))
    {
    z[i] =__sincosl_table[index[i] + SINCOSL_COS_HI]
      + (__sincosl_table[index[i] + SINCOSL_COS_LO]
      - (__sincosl_table[index[i] + SINCOSL_SIN_HI]
        * sin_l[i] - __sincosl_table[index[i] + SINCOSL_COS_HI] * cos_l_m1[i]));
    }
  }
  where((!jd1), res) = z;

  return res;

}

template <class Abi>
ldoublev<Abi> llvm__kernel_tanl(ldoublev<Abi> x, ldoublev<Abi> y, intv<Abi> iy)
{
    static const ldoublev<Abi>
        one = 1.0L,
        pio4hi = 7.8539816339744830961566084581987569936977E-1L,
        pio4lo = 2.1679525325309452561992610065108379921906E-35L,

        /* tan x = x + x^3 / 3 + x^5 T(x^2)/U(x^2)
            0 <= x <= 0.6743316650390625
            Peak relative error 8.0e-36  */
        TH = 3.333333333333333333333333333333333333333E-1L,
        T0 = -1.813014711743583437742363284336855889393E7L,
        T1 = 1.320767960008972224312740075083259247618E6L,
        T2 = -2.626775478255838182468651821863299023956E4L,
        T3 = 1.764573356488504935415411383687150199315E2L,
        T4 = -3.333267763822178690794678978979803526092E-1L,

        U0 = -1.359761033807687578306772463253710042010E8L,
        U1 = 6.494370630656893175666729313065113194784E7L,
        U2 = -4.180787672237927475505536849168729386782E6L,
        U3 = 8.031643765106170040139966622980914621521E4L,
        U4 = -5.323131271912475695157127875560667378597E2L;
    /* 1.000000000000000000000000000000000000000E0 */

  ldoublev<Abi> z, r, v = 0, w, s, res;
  intv<Abi> ix, sign = 0, hx, lx;
  doublev<Abi> xhi;

  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  hx = static_simd_cast<intv<Abi>>(pf_xhi.u >> 32);
  lx = static_simd_cast<intv<Abi>>(pf_xhi.u & 0x00000000ffffffffULL);
  ix = hx & 0x7fffffff;

  auto jd1 = change_simd_mask_type<int, long double, Abi>(ix < 0x3c600000);
  auto jd2 = change_simd_mask_type<int, long double, Abi>(static_simd_cast<intv<Abi>>(x) == 0);
  auto jd3 = change_simd_mask_type<int, long double, Abi>((ix | lx | (iy + 1)) == 0);
  auto jd4 = change_simd_mask_type<int, long double, Abi>((iy == 1));
  where((jd1 & jd2 & jd3), res) = one / abs(x);
  where((jd1 & jd2 & !jd3 & jd4), res) = x;
  where((jd1 & jd2 & !jd3 & !jd4), res) = -one / x;

  jd2 = change_simd_mask_type<int, long double, Abi>(ix >= 0x3fe59420);
  jd3 = change_simd_mask_type<uint32_t, long double, Abi>((static_simd_cast<uintv<Abi>>(hx) & 0x80000000) != 0);
  where((jd2 & jd3), x) = -x;
  where((jd2 & jd3), y) = -y;
  where((jd2 & jd3), sign) = -1;
  where((jd2 & !jd3), sign) = 1;
  where((jd2), z) = pio4hi - x;
  where((jd2), w) = pio4lo - y;
  where((jd2), x) = z + w;
  where((jd2), y) = 0.0;

  z = x * x;
  r = T0 + z * (T1 + z * (T2 + z * (T3 + z * T4)));
  v = U0 + z * (U1 + z * (U2 + z * (U3 + z * (U4 + z))));
  r = r / v;
  s = z * x;
  r = y + z * (s * r + y);
  r += TH * s;
  w = x + r;

  jd3 = change_simd_mask_type<int, long double, Abi>(ix >= 0x3fe59420);
  jd4 = change_simd_mask_type<int, long double, Abi>(sign < 0);
  where((jd3), v) = static_simd_cast<ldoublev<Abi>>(iy);
  where((jd3), w) = (v - 2.0 * (x - (w * w / (w + v) - r)));
  where((jd3 & jd4), w) = -w;
  where((!jd1 & jd3), res) = w;

  jd4 = change_simd_mask_type<int, long double, Abi>(iy == 1);
  where((!jd1 & !jd3 & jd4), res) = w;

  ldoublev<Abi> u1, z1;
  where((!jd4), u1) = static_simd_cast<ldoublev<Abi>>(static_simd_cast<doublev<Abi>>(w));
  where((!jd4), v) = r - (u1 - x); /* u1+v = r+x */
  where((!jd4), z) = -1.0 / w;
  where((!jd4), z1) = static_simd_cast<ldoublev<Abi>>(static_simd_cast<doublev<Abi>>(z));
  where((!jd4), s) = 1.0 + z1 * u1;
  // return z1 + z * (s + z1 * v);
  where((!jd1 & !jd3 & !jd4), res) = z1 + z * (s + z1 * v);
  return res;
}


int llvm__kernel_rem_pio2(double *x, double *y, int e0, int nx, int prec, const int32_t *ipio2)
{
    static const int init_jk[] = {2,3,4,6}; /* initial value for jk */

    static const double PIo2[] = {
    1.57079625129699707031e+00, /* 0x3FF921FB, 0x40000000 */
    7.54978941586159635335e-08, /* 0x3E74442D, 0x00000000 */
    5.39030252995776476554e-15, /* 0x3CF84698, 0x80000000 */
    3.28200341580791294123e-22, /* 0x3B78CC51, 0x60000000 */
    1.27065575308067607349e-29, /* 0x39F01B83, 0x80000000 */
    1.22933308981111328932e-36, /* 0x387A2520, 0x40000000 */
    2.73370053816464559624e-44, /* 0x36E38222, 0x80000000 */
    2.16741683877804819444e-51, /* 0x3569F31D, 0x00000000 */
    };
    static const double
        zero   = 0.0,
        one    = 1.0,
        two24  = 1.67772160000000000000e+07, /* 0x41700000, 0x00000000 */
        twon24 = 5.96046447753906250000e-08; /* 0x3E700000, 0x00000000 */
    int32_t jz, jx, jv, jp, jk, carry, n, iq[20], i, j, k, m, q0, ih;
    double z, fw, f[20], fq[20], q[20];

    /* initialize jk*/
    jk = init_jk[prec];
    jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
    jx = nx - 1;
    jv = (e0 - 3) / 24;
    if (jv < 0)
        jv = 0;
    q0 = e0 - 24 * (jv + 1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv - jx;
    m = jx + jk;
    for (i = 0; i <= m; i++, j++)
        f[i] = (j < 0) ? zero : (double)ipio2[j];

    /* compute q[0],q[1],...q[jk] */
    for (i = 0; i <= jk; i++)
    {
        for (j = 0, fw = 0.0; j <= jx; j++)
            fw += x[j] * f[jx + i - j];
        q[i] = fw;
    }

    jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
    for (i = 0, j = jz, z = q[jz]; j > 0; i++, j--)
    {
        fw = (double)((int32_t)(twon24 * z));
        iq[i] = (int32_t)(z - two24 * fw);
        z = q[j - 1] + fw;
    }

    /* compute n */
    z = llvm_scalbn(z, q0);         /* actual value of z */
    z -= 8.0 * llvm_floor(z * 0.125); /* trim off integer >= 8 */
    n = (int32_t)z;
    z -= (double)n;
    ih = 0;
    if (q0 > 0) /* need iq[jz-1] to determine n */
    {
        i = (iq[jz - 1] >> (24 - q0));
        n += i;
        iq[jz - 1] -= i << (24 - q0);
        ih = iq[jz - 1] >> (23 - q0);
    }
    else if (q0 == 0)
        ih = iq[jz - 1] >> 23;
    else if (z >= 0.5)
        ih = 2;

    if (ih > 0) /* q > 0.5 */
    {
        n += 1;
        carry = 0;
        for (i = 0; i < jz; i++) /* compute 1-q */
        {
            j = iq[i];
            if (carry == 0)
            {
                if (j != 0)
                {
                    carry = 1;
                    iq[i] = 0x1000000 - j;
                }
            }
            else
                iq[i] = 0xffffff - j;
        }
        if (q0 > 0) /* rare case: chance is 1 in 12 */
        {
            switch (q0)
            {
            case 1:
                iq[jz - 1] &= 0x7fffff;
                break;
            case 2:
                iq[jz - 1] &= 0x3fffff;
                break;
            }
        }
        if (ih == 2)
        {
            z = one - z;
            if (carry != 0)
                z -= llvm_scalbn(one, q0);
        }
    }

    /* check if recomputation is needed */
    if (z == zero)
    {
        j = 0;
        for (i = jz - 1; i >= jk; i--)
            j |= iq[i];
        if (j == 0) /* need recomputation */
        {
            for (k = 1; iq[jk - k] == 0; k++); /* k = no. of terms needed */

            for (i = jz + 1; i <= jz + k; i++) /* add q[jz+1] to q[jz+k] */
            {
                f[jx + i] = (double)ipio2[jv + i];
                for (j = 0, fw = 0.0; j <= jx; j++)
                    fw += x[j] * f[jx + i - j];
                q[i] = fw;
            }
            jz += k;
            goto recompute;
        }
    }

    /* chop off zero terms */
    if (z == 0.0)
    {
        jz -= 1;
        q0 -= 24;
        while (iq[jz] == 0)
        {
            jz--;
            q0 -= 24;
        }
    }
    else /* break z into 24-bit if necessary */
    {
        z = llvm_scalbn(z, -q0);
        if (z >= two24)
        {
            fw = (double)((int32_t)(twon24 * z));
            iq[jz] = (int32_t)(z - two24 * fw);
            jz += 1;
            q0 += 24;
            iq[jz] = (int32_t)fw;
        }
        else
            iq[jz] = (int32_t)z;
    }

    /* convert integer "bit" chunk to floating-point value */
    fw = llvm_scalbn(one, q0);
    for (i = jz; i >= 0; i--)
    {
        q[i] = fw * (double)iq[i];
        fw *= twon24;
    }

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
    for (i = jz; i >= 0; i--)
    {
        for (fw = 0.0, k = 0; k <= jp && k <= jz - i; k++)
            fw += PIo2[k] * q[i + k];
        fq[jz - i] = fw;
    }

    double fv = 0.0;
    /* compress fq[] into y[] */
    switch (prec)
    {
    case 0:
        fw = 0.0;
        for (i = jz; i >= 0; i--)
            fw += fq[i];
        y[0] = (ih == 0) ? fw : -fw;
        break;
    case 1:
    case 2:;
        for (i = jz; i >= 0; i--)
            fv = (fv + fq[i]);
        y[0] = (ih == 0) ? fv : -fv;
        fv = (fq[0] - fv);
        for (i = 1; i <= jz; i++)
            fv = (fv + fq[i]);
        y[1] = (ih == 0) ? fv : -fv;
        break;
    case 3: /* painful */
        for (i = jz; i > 0; i--)
        {
            fv = (fq[i - 1] + fq[i]);
            fq[i] += fq[i - 1] - fv;
            fq[i - 1] = fv;
        }
        for (i = jz; i > 1; i--)
        {
            fv = (fq[i - 1] + fq[i]);
            fq[i] += fq[i - 1] - fv;
            fq[i - 1] = fv;
        }
        for (fw = 0.0, i = jz; i >= 2; i--)
            fw += fq[i];
        if (ih == 0)
        {
            y[0] = fq[0];
            y[1] = fq[1];
            y[2] = fw;
        }
        else
        {
            y[0] = -fq[0];
            y[1] = -fq[1];
            y[2] = -fw;
        }
    }
    return n & 7;
}

template<typename Abi>
intv<Abi> llvm__ieee754_rem_pio2l(ldoublev<Abi> x, ldoublev<Abi> *y, simd_mask<long double, Abi> mask)
{

  static const int32_t two_over_pi[] = {
0xa2f983, 0x6e4e44, 0x1529fc, 0x2757d1, 0xf534dd, 0xc0db62,
0x95993c, 0x439041, 0xfe5163, 0xabdebb, 0xc561b7, 0x246e3a,
0x424dd2, 0xe00649, 0x2eea09, 0xd1921c, 0xfe1deb, 0x1cb129,
0xa73ee8, 0x8235f5, 0x2ebb44, 0x84e99c, 0x7026b4, 0x5f7e41,
0x3991d6, 0x398353, 0x39f49c, 0x845f8b, 0xbdf928, 0x3b1ff8,
0x97ffde, 0x05980f, 0xef2f11, 0x8b5a0a, 0x6d1f6d, 0x367ecf,
0x27cb09, 0xb74f46, 0x3f669e, 0x5fea2d, 0x7527ba, 0xc7ebe5,
0xf17b3d, 0x0739f7, 0x8a5292, 0xea6bfb, 0x5fb11f, 0x8d5d08,
0x560330, 0x46fc7b, 0x6babf0, 0xcfbc20, 0x9af436, 0x1da9e3,
0x91615e, 0xe61b08, 0x659985, 0x5f14a0, 0x68408d, 0xffd880,
0x4d7327, 0x310606, 0x1556ca, 0x73a8c9, 0x60e27b, 0xc08c6b,
0x47c419, 0xc367cd, 0xdce809, 0x2a8359, 0xc4768b, 0x961ca6,
0xddaf44, 0xd15719, 0x053ea5, 0xff0705, 0x3f7e33, 0xe832c2,
0xde4f98, 0x327dbb, 0xc33d26, 0xef6b1e, 0x5ef89f, 0x3a1f35,
0xcaf27f, 0x1d87f1, 0x21907c, 0x7c246a, 0xfa6ed5, 0x772d30,
0x433b15, 0xc614b5, 0x9d19c3, 0xc2c4ad, 0x414d2c, 0x5d000c,
0x467d86, 0x2d71e3, 0x9ac69b, 0x006233, 0x7cd2b4, 0x97a7b4,
0xd55537, 0xf63ed7, 0x1810a3, 0xfc764d, 0x2a9d64, 0xabd770,
0xf87c63, 0x57b07a, 0xe71517, 0x5649c0, 0xd9d63b, 0x3884a7,
0xcb2324, 0x778ad6, 0x23545a, 0xb91f00, 0x1b0af1, 0xdfce19,
0xff319f, 0x6a1e66, 0x615799, 0x47fbac, 0xd87f7e, 0xb76522,
0x89e832, 0x60bfe6, 0xcdc4ef, 0x09366c, 0xd43f5d, 0xd7de16,
0xde3b58, 0x929bde, 0x2822d2, 0xe88628, 0x4d58e2, 0x32cac6,
0x16e308, 0xcb7de0, 0x50c017, 0xa71df3, 0x5be018, 0x34132e,
0x621283, 0x014883, 0x5b8ef5, 0x7fb0ad, 0xf2e91e, 0x434a48,
0xd36710, 0xd8ddaa, 0x425fae, 0xce616a, 0xa4280a, 0xb499d3,
0xf2a606, 0x7f775c, 0x83c2a3, 0x883c61, 0x78738a, 0x5a8caf,
0xbdd76f, 0x63a62d, 0xcbbff4, 0xef818d, 0x67c126, 0x45ca55,
0x36d9ca, 0xd2a828, 0x8d61c2, 0x77c912, 0x142604, 0x9b4612,
0xc459c4, 0x44c5c8, 0x91b24d, 0xf31700, 0xad43d4, 0xe54929,
0x10d5fd, 0xfcbe00, 0xcc941e, 0xeece70, 0xf53e13, 0x80f1ec,
0xc3e7b3, 0x28f8c7, 0x940593, 0x3e71c1, 0xb3092e, 0xf3450b,
0x9c1288, 0x7b20ab, 0x9fb52e, 0xc29247, 0x2f327b, 0x6d550c,
0x90a772, 0x1fe76b, 0x96cb31, 0x4a1679, 0xe27941, 0x89dff4,
0x9794e8, 0x84e6e2, 0x973199, 0x6bed88, 0x365f5f, 0x0efdbb,
0xb49a48, 0x6ca467, 0x427271, 0x325d8d, 0xb8159f, 0x09e5bc,
0x25318d, 0x3974f7, 0x1c0530, 0x010c0d, 0x68084b, 0x58ee2c,
0x90aa47, 0x02e774, 0x24d6bd, 0xa67df7, 0x72486e, 0xef169f,
0xa6948e, 0xf691b4, 0x5153d1, 0xf20acf, 0x339820, 0x7e4bf5,
0x6863b2, 0x5f3edd, 0x035d40, 0x7f8985, 0x295255, 0xc06437,
0x10d86d, 0x324832, 0x754c5b, 0xd4714e, 0x6e5445, 0xc1090b,
0x69f52a, 0xd56614, 0x9d0727, 0x50045d, 0xdb3bb4, 0xc576ea,
0x17f987, 0x7d6b49, 0xba271d, 0x296996, 0xacccc6, 0x5414ad,
0x6ae290, 0x89d988, 0x50722c, 0xbea404, 0x940777, 0x7030f3,
0x27fc00, 0xa871ea, 0x49c266, 0x3de064, 0x83dd97, 0x973fa3,
0xfd9443, 0x8c860d, 0xde4131, 0x9d3992, 0x8c70dd, 0xe7b717,
0x3bdf08, 0x2b3715, 0xa0805c, 0x93805a, 0x921110, 0xd8e80f,
0xaf806c, 0x4bffdb, 0x0f9038, 0x761859, 0x15a562, 0xbbcb61,
0xb989c7, 0xbd4010, 0x04f2d2, 0x277549, 0xf6b6eb, 0xbb22db,
0xaa140a, 0x2f2689, 0x768364, 0x333b09, 0x1a940e, 0xaa3a51,
0xc2a31d, 0xaeedaf, 0x12265c, 0x4dc26d, 0x9c7a2d, 0x9756c0,
0x833f03, 0xf6f009, 0x8c402b, 0x99316d, 0x07b439, 0x15200c,
0x5bc3d8, 0xc492f5, 0x4badc6, 0xa5ca4e, 0xcd37a7, 0x36a9e6,
0x9492ab, 0x6842dd, 0xde6319, 0xef8c76, 0x528b68, 0x37dbfc,
0xaba1ae, 0x3115df, 0xa1ae00, 0xdafb0c, 0x664d64, 0xb705ed,
0x306529, 0xbf5657, 0x3aff47, 0xb9f96a, 0xf3be75, 0xdf9328,
0x3080ab, 0xf68c66, 0x15cb04, 0x0622fa, 0x1de4d9, 0xa4b33d,
0x8f1b57, 0x09cd36, 0xe9424e, 0xa4be13, 0xb52333, 0x1aaaf0,
0xa8654f, 0xa5c1d2, 0x0f3f0b, 0xcd785b, 0x76f923, 0x048b7b,
0x721789, 0x53a6c6, 0xe26e6f, 0x00ebef, 0x584a9b, 0xb7dac4,
0xba66aa, 0xcfcf76, 0x1d02d1, 0x2df1b1, 0xc1998c, 0x77adc3,
0xda4886, 0xa05df7, 0xf480c6, 0x2ff0ac, 0x9aecdd, 0xbc5c3f,
0x6dded0, 0x1fc790, 0xb6db2a, 0x3a25a3, 0x9aaf00, 0x9353ad,
0x0457b6, 0xb42d29, 0x7e804b, 0xa707da, 0x0eaa76, 0xa1597b,
0x2a1216, 0x2db7dc, 0xfde5fa, 0xfedb89, 0xfdbe89, 0x6c76e4,
0xfca906, 0x70803e, 0x156e85, 0xff87fd, 0x073e28, 0x336761,
0x86182a, 0xeabd4d, 0xafe7b3, 0x6e6d8f, 0x396795, 0x5bbf31,
0x48d784, 0x16df30, 0x432dc7, 0x356125, 0xce70c9, 0xb8cb30,
0xfd6cbf, 0xa200a4, 0xe46c05, 0xa0dd5a, 0x476f21, 0xd21262,
0x845cb9, 0x496170, 0xe0566b, 0x015299, 0x375550, 0xb7d51e,
0xc4f133, 0x5f6e13, 0xe4305d, 0xa92e85, 0xc3b21d, 0x3632a1,
0xa4b708, 0xd4b1ea, 0x21f716, 0xe4698f, 0x77ff27, 0x80030c,
0x2d408d, 0xa0cd4f, 0x99a520, 0xd3a2b3, 0x0a5d2f, 0x42f9b4,
0xcbda11, 0xd0be7d, 0xc1db9b, 0xbd17ab, 0x81a2ca, 0x5c6a08,
0x17552e, 0x550027, 0xf0147f, 0x8607e1, 0x640b14, 0x8d4196,
0xdebe87, 0x2afdda, 0xb6256b, 0x34897b, 0xfef305, 0x9ebfb9,
0x4f6a68, 0xa82a4a, 0x5ac44f, 0xbcf82d, 0x985ad7, 0x95c7f4,
0x8d4d0d, 0xa63a20, 0x5f57a4, 0xb13f14, 0x953880, 0x0120cc,
0x86dd71, 0xb6dec9, 0xf560bf, 0x11654d, 0x6b0701, 0xacb08c,
0xd0c0b2, 0x485551, 0x0efb1e, 0xc37295, 0x3b06a3, 0x3540c0,
0x7bdc06, 0xcc45e0, 0xfa294e, 0xc8cad6, 0x41f3e8, 0xde647c,
0xd8649b, 0x31bed9, 0xc397a4, 0xd45877, 0xc5e369, 0x13daf0,
0x3c3aba, 0x461846, 0x5f7555, 0xf5bdd2, 0xc6926e, 0x5d2eac,
0xed440e, 0x423e1c, 0x87c461, 0xe9fd29, 0xf3d6e7, 0xca7c22,
0x35916f, 0xc5e008, 0x8dd7ff, 0xe26a6e, 0xc6fdb0, 0xc10893,
0x745d7c, 0xb2ad6b, 0x9d6ecd, 0x7b723e, 0x6a11c6, 0xa9cff7,
0xdf7329, 0xbac9b5, 0x5100b7, 0x0db2e2, 0x24ba74, 0x607de5,
0x8ad874, 0x2c150d, 0x0c1881, 0x94667e, 0x162901, 0x767a9f,
0xbefdfd, 0xef4556, 0x367ed9, 0x13d9ec, 0xb9ba8b, 0xfc97c4,
0x27a831, 0xc36ef1, 0x36c594, 0x56a8d8, 0xb5a8b4, 0x0ecccf,
0x2d8912, 0x34576f, 0x89562c, 0xe3ce99, 0xb920d6, 0xaa5e6b,
0x9c2a3e, 0xcc5f11, 0x4a0bfd, 0xfbf4e1, 0x6d3b8e, 0x2c86e2,
0x84d4e9, 0xa9b4fc, 0xd1eeef, 0xc9352e, 0x61392f, 0x442138,
0xc8d91b, 0x0afc81, 0x6a4afb, 0xd81c2f, 0x84b453, 0x8c994e,
0xcc2254, 0xdc552a, 0xd6c6c0, 0x96190b, 0xb8701a, 0x649569,
0x605a26, 0xee523f, 0x0f117f, 0x11b5f4, 0xf5cbfc, 0x2dbc34,
0xeebc34, 0xcc5de8, 0x605edd, 0x9b8e67, 0xef3392, 0xb817c9,
0x9b5861, 0xbc57e1, 0xc68351, 0x103ed8, 0x4871dd, 0xdd1c2d,
0xa118af, 0x462c21, 0xd7f359, 0x987ad9, 0xc0549e, 0xfa864f,
0xfc0656, 0xae79e5, 0x362289, 0x22ad38, 0xdc9367, 0xaae855,
0x382682, 0x9be7ca, 0xa40d51, 0xb13399, 0x0ed7a9, 0x480569,
0xf0b265, 0xa7887f, 0x974c88, 0x36d1f9, 0xb39221, 0x4a827b,
0x21cf98, 0xdc9f40, 0x5547dc, 0x3a74e1, 0x42eb67, 0xdf9dfe,
0x5fd45e, 0xa4677b, 0x7aacba, 0xa2f655, 0x23882b, 0x55ba41,
0x086e59, 0x862a21, 0x834739, 0xe6e389, 0xd49ee5, 0x40fb49,
0xe956ff, 0xca0f1c, 0x8a59c5, 0x2bfa94, 0xc5c1d3, 0xcfc50f,
0xae5adb, 0x86c547, 0x624385, 0x3b8621, 0x94792c, 0x876110,
0x7b4c2a, 0x1a2c80, 0x12bf43, 0x902688, 0x893c78, 0xe4c4a8,
0x7bdbe5, 0xc23ac4, 0xeaf426, 0x8a67f7, 0xbf920d, 0x2ba365,
0xb1933d, 0x0b7cbd, 0xdc51a4, 0x63dd27, 0xdde169, 0x19949a,
0x9529a8, 0x28ce68, 0xb4ed09, 0x209f44, 0xca984e, 0x638270,
0x237c7e, 0x32b90f, 0x8ef5a7, 0xe75614, 0x08f121, 0x2a9db5,
0x4d7e6f, 0x5119a5, 0xabf9b5, 0xd6df82, 0x61dd96, 0x023616,
0x9f3ac4, 0xa1a283, 0x6ded72, 0x7a8d39, 0xa9b882, 0x5c326b,
0x5b2746, 0xed3400, 0x7700d2, 0x55f4fc, 0x4d5901, 0x8071e0,
0xe13f89, 0xb295f3, 0x64a8f1, 0xaea74b, 0x38fc4c, 0xeab2bb,
0x47270b, 0xabc3a7, 0x34ba60, 0x52dd34, 0xf8563a, 0xeb7e8a,
0x31bb36, 0x5895b7, 0x47f7a9, 0x94c3aa, 0xd39225, 0x1e7f3e,
0xd8974e, 0xbba94f, 0xd8ae01, 0xe661b4, 0x393d8e, 0xa523aa,
0x33068e, 0x1633b5, 0x3bb188, 0x1d3a9d, 0x4013d0, 0xcc1be5,
0xf862e7, 0x3bf28f, 0x39b5bf, 0x0bc235, 0x22747e, 0xa247c0,
0xd52d1f, 0x19add3, 0x9094df, 0x9311d0, 0xb42b25, 0x496db2,
0xe264b2, 0x5ef135, 0x3bc6a4, 0x1a4ad0, 0xaac92e, 0x64e886,
0x573091, 0x982cfb, 0x311b1a, 0x08728b, 0xbdcee1, 0x60e142,
0xeb641d, 0xd0bba3, 0xe559d4, 0x597b8c, 0x2a4483, 0xf332ba,
0xf84867, 0x2c8d1b, 0x2fa9b0, 0x50f3dd, 0xf9f573, 0xdb61b4,
0xfe233e, 0x6c41a6, 0xeea318, 0x775a26, 0xbc5e5c, 0xcea708,
0x94dc57, 0xe20196, 0xf1e839, 0xbe4851, 0x5d2d2f, 0x4e9555,
0xd96ec2, 0xe7d755, 0x6304e0, 0xc02e0e, 0xfc40a0, 0xbbf9b3,
0x7125a7, 0x222dfb, 0xf619d8, 0x838c1c, 0x6619e6, 0xb20d55,
0xbb5137, 0x79e809, 0xaf9149, 0x0d73de, 0x0b0da5, 0xce7f58,
0xac1934, 0x724667, 0x7a1a13, 0x9e26bc, 0x4555e7, 0x585cb5,
0x711d14, 0x486991, 0x480d60, 0x56adab, 0xd62f64, 0x96ee0c,
0x212ff3, 0x5d6d88, 0xa67684, 0x95651e, 0xab9e0a, 0x4ddefe,
0x571010, 0x836a39, 0xf8ea31, 0x9e381d, 0xeac8b1, 0xcac96b,
0x37f21e, 0xd505e9, 0x984743, 0x9fc56c, 0x0331b7, 0x3b8bf8,
0x86e56a, 0x8dc343, 0x6230e7, 0x93cfd5, 0x6a8f2d, 0x733005,
0x1af021, 0xa09fcb, 0x7415a1, 0xd56b23, 0x6ff725, 0x2f4bc7,
0xb8a591, 0x7fac59, 0x5c55de, 0x212c38, 0xb13296, 0x5cff50,
0x366262, 0xfa7b16, 0xf4d9a6, 0x2acfe7, 0xf07403, 0xd4d604,
0x6fd916, 0x31b1bf, 0xcbb450, 0x5bd7c8, 0x0ce194, 0x6bd643,
0x4fd91c, 0xdf4543, 0x5f3453, 0xe2b5aa, 0xc9aec8, 0x131485,
0xf9d2bf, 0xbadb9e, 0x76f5b9, 0xaf15cf, 0xca3182, 0x14b56d,
0xe9fe4d, 0x50fc35, 0xf5aed5, 0xa2d0c1, 0xc96057, 0x192eb6,
0xe91d92, 0x07d144, 0xaea3c6, 0x343566, 0x26d5b4, 0x3161e2,
0x37f1a2, 0x209eff, 0x958e23, 0x493798, 0x35f4a6, 0x4bdc02,
0xc2be13, 0xbe80a0, 0x0b72a3, 0x115c5f, 0x1e1bd1, 0x0db4d3,
0x869e85, 0x96976b, 0x2ac91f, 0x8a26c2, 0x3070f0, 0x041412,
0xfc9fa5, 0xf72a38, 0x9c6878, 0xe2aa76, 0x50cfe1, 0x559274,
0x934e38, 0x0a92f7, 0x5533f0, 0xa63db4, 0x399971, 0xe2b755,
0xa98a7c, 0x008f19, 0xac54d2, 0x2ea0b4, 0xf5f3e0, 0x60c849,
0xffd269, 0xae52ce, 0x7a5fdd, 0xe9ce06, 0xfb0ae8, 0xa50cce,
0xea9d3e, 0x3766dd, 0xb834f5, 0x0da090, 0x846f88, 0x4ae3d5,
0x099a03, 0x2eae2d, 0xfcb40a, 0xfb9b33, 0xe281dd, 0x1b16ba,
0xd8c0af, 0xd96b97, 0xb52dc9, 0x9c277f, 0x5951d5, 0x21ccd6,
0xb6496b, 0x584562, 0xb3baf2, 0xa1a5c4, 0x7ca2cf, 0xa9b93d,
0x7b7b89, 0x483d38,
};

  ldoublev<Abi> PI_2_1 = 0x1.921fb54442d18469898cc517018p+0L;
  ldoublev<Abi> PI_2_1t = 0x3.839a252049c1114cf98e804178p-108L;
  ldoublev<Abi> z, w, t;
  doublev<Abi> tx[8];
  longv<Abi> exp, n, ix, hx;
  ulongv<Abi> lx;
  intv<Abi> res = 0;

  Abi_128suf<Abi> pf_xhi;
  pf_xhi.f = x;
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(pf_xhi.u));
  lx = GET_LONGDOUBLE_LO(pf_xhi.u);
  ix = (hx) & 0x7fffffffffffffffLL;

  auto jd1 = change_simd_mask_type<long, long double, Abi>(ix <= 0x3ffe921fb54442d1LL);
  where(jd1, y[0]) = x;
  where(jd1, y[1]) = 0;
  where(jd1, res) = 0;


  auto jd2 = change_simd_mask_type<long, long double, Abi>(ix < 0x40002d97c7f3321dLL);
  auto jd3 = change_simd_mask_type<long, long double, Abi>(hx > 0);
  where(jd2 & jd3, z) = x - PI_2_1;
  where(jd2 & jd3 & (!jd1), y[0]) = z - PI_2_1t;
  where(jd2 & jd3 & (!jd1), y[1]) = (z - y[0]) - PI_2_1t;
  where(jd2 & jd3 & (!jd1), res) = 1;

  where(jd2 & !jd3, z) = x + PI_2_1;
  where(jd2 & !jd3 & (!jd1), y[0]) = z + PI_2_1t;
  where(jd2 & !jd3 & (!jd1), y[1]) = (z - y[0]) + PI_2_1t;
  where(jd2 & !jd3 & (!jd1), res) = -1;

  jd3 = change_simd_mask_type<long, long double, Abi>(ix >= 0x7fff000000000000LL);
  where(!jd2 & !jd1 & (jd3), y[0]) = x - x;
  where(!jd2 & !jd1 & (jd3), y[1]) = y[0];

  exp = (ix >> 48) - 16383 - 23;
  ulongv<Abi> tmpix = static_simd_cast<ulongv<Abi>>(ix);
  tx[0] = static_simd_cast<doublev<Abi>>(((tmpix >> 25) & 0x7fffff) | 0x800000);
  tx[1] = static_simd_cast<doublev<Abi>>((tmpix >> 1) & 0xffffff);
  tx[2] = static_simd_cast<doublev<Abi>>(((tmpix << 23) | (lx >> 41)) & 0xffffff);
  tx[3] = static_simd_cast<doublev<Abi>>((lx >> 17) & 0xffffff);
  tx[4] = static_simd_cast<doublev<Abi>>((lx << 7) & 0xffffff);

  for(size_t i = 0; i < exp.size(); i++)
  {
    double txtmp[8];
    for(size_t j = 0; j < 5; j++) 
      txtmp[j] = tx[j][i];
    if(mask[i])
      n[i] = llvm__kernel_rem_pio2(txtmp, txtmp + 5, exp[i], ((lx[i] << 7) & 0xffffff) ? 5 : 4, 3, two_over_pi);
    for(size_t j = 0; j < 3; j++) 
      tx[j+5][i] = txtmp[j+5];
  }
  /* The result is now stored in 3 double values, we need to convert it into
      two long double values.  */
  t = static_simd_cast<ldoublev<Abi>>(tx[6]) + static_simd_cast<ldoublev<Abi>>(tx[7]);
  w = static_simd_cast<ldoublev<Abi>>(tx[5]);

  auto jd4 = change_simd_mask_type<long, long double, Abi>(hx >= 0);
  where(!jd2 & !jd1 & (!jd3) & jd4, y[0]) = w + t;
  where(!jd2 & !jd1 & (!jd3) & jd4, y[1]) = t - (y[0] - w);
  where(!jd2 & !jd1 & (!jd3) & jd4, res) =  static_simd_cast<intv<Abi>>(n);

  where(!jd2 & !jd1 & (!jd3) & !jd4, y[0]) = -(w + t);
  where(!jd2 & !jd1 & (!jd3) & !jd4, y[1]) = -t - (y[0] + w);
  where(!jd2 & !jd1 & (!jd3) & !jd4, res) =  static_simd_cast<intv<Abi>>(-n);
  return res;
}




#ifdef LDOUBLE_BINARY128
template<typename Abi>
ldoublev<Abi> sin(ldoublev<Abi> x)
{
  ldoublev<Abi> y[2];
  ldoublev<Abi> z = 0.0L;
  ldoublev<Abi> res;
  longv<Abi> n;
  longv<Abi> ix;
  // doublev<Abi> xhi;
  Abi_128suf<Abi> ux;

  /* High word of x. */
  // xhi = static_simd_cast<doublev<Abi>>(x);
  // Abi_64suf<Abi> pf_xhi;
  // pf_xhi.f = xhi;
  // ix = pf_xhi.i;
  ux.f = x;
  ix = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));

  /* |x| ~< pi/4 */
  ix &= 0x7fffffffffffffffLL;
  auto jd1 = change_simd_mask_type<long int, long double, Abi>(ix <= 0x3fe921fb54442d10LL);
  auto jd2 = change_simd_mask_type<long int, long double, Abi>(ix >= 0x7fff000000000000LL);

  intv<Abi> zero0 = 0;
  where(jd1, res) = llvm__kernel_sinl(x, z, zero0);
  where((!jd1) & jd2, res) = x - x;

  auto jd3 = ((!jd1) & (!jd2));
  n = static_simd_cast<longv<Abi>>(llvm__ieee754_rem_pio2l<Abi>(x, y, jd3));
  n = n & 3;
  auto jdn0 = change_simd_mask_type<long int, long double, Abi>(n == 0);
  auto jdn1 = change_simd_mask_type<long int, long double, Abi>(n == 1);
  auto jdn2 = change_simd_mask_type<long int, long double, Abi>(n == 2);
  intv<Abi> one1 = 1;
  where((jdn0 & jd3), res) = llvm__kernel_sinl(y[0], y[1], one1);
  where((jdn1 & jd3), res) = llvm__kernel_cosl(y[0], y[1]);
  where((jdn2 & jd3), res) = -llvm__kernel_sinl(y[0], y[1], one1);
  where((!jdn0 & (!jdn1) & (!jdn2) & jd3), res) = -llvm__kernel_cosl(y[0], y[1]);
  return res;
}
#else
template<typename Abi> ldoublev<Abi> sin(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = sin(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi>
floatv<Abi> sinh(floatv<Abi> x) {
  Abi_32suf<Abi> x1, x2, m_x, r, r2, n, y, Half;
  uintv<Abi> sign;
  floatv<Abi> temp, y1, y2, p1, p2;

  m_x.f = x;
  sign = m_x.u & MASKf_sign;
  r.u = m_x.u ^ sign;
  n.f = ExpShift23 + r.f * a1_f32;
  temp = n.f - ExpShift23;
  n.u = n.u << 0x17;  

  r.f = r.f - a2_h_f32 * temp;
  r.f = r.f - a2_l_f32 * temp;
  Half.f = 0.5f;
  x1.u = Half.u + n.u;
  x2.u = Half.u - n.u;   
  y1 = x1.f + x2.f;
  y2 = x1.f - x2.f;      
  r2.f = r.f * r.f; 

  p1 = b4_f32 + b2_f32 * r2.f; 
  p1 = r2.f * p1;    
  p1 = r.f + r.f * p1;    
  p2 = b5_f32 + b3_f32 * r2.f;     
  p2 = b1_f32 + r2.f * p2;
  p2 = r2.f * p2;  
  p2 = p2 * y2;

  p1 = p2 + p1 * y1;
  p1 = y2 + p1;     
  y.f = p1;
  y.u = y.u | sign;
  return y.f;
}

template <class Abi> doublev<Abi> sinh(doublev<Abi> x) 
{
  doublev<Abi> one = 1.0;
  doublev<Abi> shuge = 1.0e307;
  doublev<Abi> t, w, h, result;
  intv<Abi> ix, jx;
  uintv<Abi> lx;
  Abi_64suf<Abi> ux;

  ux.f = x;
  jx = static_simd_cast<intv<Abi>>(ux.u >> 32);
  ix = jx & 0x7fffffff;

  auto spc1 = simd_mask<double, Abi>(ix >= 0x7ff00000);
  doublev<Abi> spc1_result = x + x;
  
  h = 0.5;
  auto spc2 = simd_mask<double, Abi>(jx < 0);
  where(spc2, h) = -h;
  auto spc3 = simd_mask<double, Abi>(ix < 0x40360000);
  auto spc3_1 = simd_mask<double, Abi>(ix < 0x3e300000);
  auto spc3_1_1 = (shuge + x > one);
  auto spc3_1_1_mask = (spc3 & spc3_1 & spc3_1_1);
  t = expm1(abs(x));
  auto spc3_2 = simd_mask<double, Abi>(ix < 0x3ff00000);
  auto spc3_2_mask = spc3 & spc3_2;
  doublev<Abi> spc3_2_result = h * (2.0 * t - t * t / (t + one));
  doublev<Abi> spc3_result = h * (t + t / (t + one));

  auto spc4 = simd_mask<double, Abi>(ix < 0x40862e42);
  doublev<Abi> spc4_result = h * exp(abs(x));

  lx = static_simd_cast<uintv<Abi>>(ux.u & 0xffffffff);
  auto spc5 = simd_mask<double, Abi>(ix < 0x408633ce || ((ix == 0x408633ce) && simd_mask<int, Abi>(lx <= 0x8fb9f87d)));
  w = exp(0.5 * abs(x));
  t = h * w;
  doublev<Abi> spc5_result = t * w;

  result = x * shuge;
  where(spc5, result) = spc5_result;
  where(spc4, result) = spc4_result;
  where(spc3, result) = spc3_result;
  where(spc3_2_mask, result) = spc3_2_result;
  where(spc3_1_1_mask, result) = x;
  where(spc1, result) = spc1_result;

  return result;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> sinh(ldoublev<Abi> x)
{
  long double shuge = 1.0e4931L,
              one = 1.0L,
              ovf_thresh = 1.1357216553474703894801348310092223067821E4L;
  ldoublev<Abi> t, w, h, res;
  uintv<Abi> jx, ix;
  Abi_128suf<Abi> u;

  /* Words of |x|. */
  u.f = x;
  jx = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(u.u) >> 32);
  ix = jx & 0x7fffffffU;


  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(ix >= 0x7fff0000);
  where(jd1, res) = x + x;

  h = 0.5L;
  auto jd2 = change_simd_mask_type<uint32_t, long double, Abi>((jx & 0x80000000) != 0);
  where(jd2, h) = -h;

  /* Absolute value of x.  */
  u.u = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(ix) << 96);

  jd2 = change_simd_mask_type<uint32_t, long double, Abi>(ix <= 0x40044000);
  where(jd2, t) = expm1(u.f);
  where(!jd1 & jd2, res) = h * (t + t / (t + one));
  where(!jd1 & jd2 & change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x3fc60000) & (shuge + x > one), res) = x;
  where(!jd1 & jd2 & change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x3fff0000), res) = h * (2.0 * t - t * t / (t + one));


  auto jd3 = change_simd_mask_type<uint32_t, long double, Abi>(ix <= 0x400c62e3);
  where(jd3 & !jd1 & !jd2, res) = h * exp(u.f);

  auto jd4 = (u.f <= ovf_thresh);
  where(jd4, w) = h * exp(0.5 * u.f);

  where(jd4, t) = h * w;
  where(!jd1 & !jd2 & !jd3 & jd4, res) = t * w;
  where(!jd1 & !jd2 & !jd3 & !jd4, res) = x * shuge;
  return res;

}
#else
template<class Abi> ldoublev<Abi> sinh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = sinh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif


template <class Abi>
floatv<Abi> cos(floatv<Abi> x) {
  Abi_32suf<Abi> n, r, r2, y, m_x;
  uintv<Abi> odd, cmp = 0;

  m_x.f = x;
  r.u = m_x.u & AbsMaskf;
  r2.f = 0x1p20f;
  where(r.u >= r2.u, cmp) = s2v<int, unsigned int>(-1);
  n.f = (float)InvPi_f32 * (r.f + (float)HalfPi_f32) + ExpShift23;
  odd = n.u << 31;
  n.f -= ExpShift23;
  n.f -= 0.5f;
  r.f = -SC_Pi1_f32 * n.f + r.f;
  r.f = -SC_Pi2_f32 * n.f + r.f;
  r.f = -SC_Pi3_f32 * n.f + r.f;

  r2.f = r.f * r.f;
  y.f = SC_A9_f32 * r2.f + SC_A7_f32;
  y.f = y.f * r2.f + SC_A5_f32;
  y.f = y.f * r2.f + SC_A3_f32;
  y.f = y.f * r2.f * r.f + r.f;
  y.u =  (y.u ^ odd);

  if(reduce(cmp) != 0) [[unlikely]]
  {
    for(size_t i = 0; i < x.size(); i++)
    {
      if(cmp[i] != 0)
        y.f[i] = scalarSpecialHandelf(largeprocess_cosf, x[i]);
    }
  }
  return y.f;
}

template <class Abi>
doublev<Abi> cos(doublev<Abi> x) {
  Abi_64suf<Abi> n, r, r2, y, m_x;
  ulongv<Abi> odd, cmp = 0;

  m_x.f = x;
  r.u = m_x.u & (unsigned long)AbsMask;
  r2.f = 0x1p23;
  where(r.u >= r2.u, cmp) = s2v<int, unsigned long>(-1);
  n.f = InvPi_f64 * (r.f + HalfPi_f64) + ExpShift52;
  odd = n.u << 63;
  n.f -= ExpShift52;
  n.f -= 0.5;

  r.f = -SC_Pi1_f64 * n.f + r.f;
  r.f = -SC_Pi2_f64 * n.f + r.f;
  r.f = -SC_Pi3_f64 * n.f + r.f;

  r2.f = r.f * r.f;
  y.f = SC_C7_f64 * r2.f + SC_C6_f64;
  y.f = y.f * r2.f + SC_C5_f64;
  y.f = y.f * r2.f + SC_C4_f64;
  y.f = y.f * r2.f + SC_C3_f64;
  y.f = y.f * r2.f + SC_C2_f64;
  y.f = y.f * r2.f + SC_C1_f64;
  y.f = y.f * r2.f * r.f + r.f;
  y.u =  (y.u ^ odd);

  if(reduce(cmp) != 0) [[unlikely]]
  {
    for(size_t i = 0; i < x.size(); i++)
    {
      if(cmp[i] != 0)
        y.f[i] = scalarSpecialHandel(largeprocess_cos, x[i]);
    }
  }
  return y.f;
}

#ifdef LDOUBLE_BINARY128
template<typename Abi>
ldoublev<Abi> cos(ldoublev<Abi> x)
{
  ldoublev<Abi> y[2];
  ldoublev<Abi> z = 0.0L, res;
  longv<Abi> n;
  longv<Abi> ix;
  doublev<Abi> xhi;

  /* High word of x. */
  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  ix = pf_xhi.i;

  /* |x| ~< pi/4 */
  ix &= 0x7fffffffffffffffLL;
  auto jd1 = change_simd_mask_type<long int, long double, Abi>(ix <= 0x3fe921fb54442d18LL);
  auto jd2 = change_simd_mask_type<long int, long double, Abi>(ix >= 0x7ff0000000000000LL);
  where(jd1, res) = llvm__kernel_cosl(x, z);
  where((!jd1) & jd2, res) = x - x;

  auto jd3 = ((!jd1) & (!jd2));
  n = static_simd_cast<longv<Abi>>(llvm__ieee754_rem_pio2l<Abi>(x, y, jd3));
  n = n & 3;
  auto jdn0 = change_simd_mask_type<long int, long double, Abi>(n == 0);
  auto jdn1 = change_simd_mask_type<long int, long double, Abi>(n == 1);
  auto jdn2 = change_simd_mask_type<long int, long double, Abi>(n == 2);
  intv<Abi> one1 = 1;
  where((jdn0 & jd3), res) = llvm__kernel_cosl(y[0], y[1]);
  where((jdn1 & jd3), res) = -llvm__kernel_sinl(y[0], y[1], one1);
  where((jdn2 & jd3), res) = -llvm__kernel_cosl(y[0], y[1]);
  where((!jdn0 & (!jdn1) & (!jdn2) & jd3), res) = llvm__kernel_sinl(y[0], y[1], one1);

  return res;
}
#else
template<typename Abi> ldoublev<Abi> cos(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = cos(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi>
floatv<Abi> cosh(floatv<Abi> x) {
  Abi_32suf<Abi> x1, x2, m_x, r, r2, n, y, Half;
  floatv<Abi> temp, y1, y2, p1, p2;
  

  m_x.f = x;
  r.u = m_x.u & (~MASKf_sign);
  n.f = ExpShift23 + r.f * a1_f32;
  temp = n.f - ExpShift23;
  n.u = n.u << 0x17;  

  r.f = r.f - a2_h_f32 * temp;
  r.f = r.f - a2_l_f32 * temp;
  Half.f = 0.5f;
  x1.u = Half.u + n.u;
  x2.u = Half.u - n.u;   
  y1 = x1.f + x2.f;
  y2 = x1.f - x2.f;      

  r2.f = r.f * r.f; 
  p1 = b4_f32 + b2_f32 * r2.f; 
  p1 = r2.f * p1;    
  p1 = r.f + r.f * p1;    
  p2 = b5_f32 + b3_f32 * r2.f;     
  p2 = b1_f32 + r2.f * p2;
  p2 = r2.f * p2;  
  p2 = p2 * y1;
  p1 = p2 + p1 * y2;
  p1 = y1 + p1;     
  y.f = p1;

  
  return y.f;
}

template <class Abi> doublev<Abi> cosh(doublev<Abi> x) 
{
  doublev<Abi> one = 1.0;
  doublev<Abi> half = 0.5;
  doublev<Abi> huge = 1.0e300;
  doublev<Abi> t, w, result, abs_x;
  intv<Abi> ix;
  longv<Abi> fix;
  Abi_64suf<Abi> ux;

  ux.f = x;
  ix = static_simd_cast<intv<Abi>>(ux.u >> 32);
  ix = ix & 0x7fffffff;
  abs_x = abs(x);

  auto spc1 = simd_mask<double, Abi>(ix < 0x40360000);
  auto spc1_1 = simd_mask<double, Abi>(ix < 0x3fd62e43);
  auto spc1_1_1 = simd_mask<double, Abi>(ix < 0x3c800000);
  auto spc1_1_mask = spc1 & spc1_1;
  auto spc1_1_1_mask = spc1_1_mask & spc1_1_1;
  t = expm1(abs_x);
  w = one + t;
  doublev<Abi> spc1_1_result = one + (t * t) / (w + w);
  t = exp(abs_x);
  doublev<Abi> spc1_result = half * t + half / t;

  auto spc2 = simd_mask<double, Abi>(ix < 0x40862e42);
  doublev<Abi> spc2_result = half * exp(abs_x);
  
  fix = ux.i;
  fix = fix & 0x7fffffffffffffff;
  auto spc3 = simd_mask<double, Abi>(fix <= 0x408633ce8fb9f87d);
  w = exp(half * abs_x);
  t = half * w;
  doublev<Abi> spc3_result = t * w;

  auto spc4 = simd_mask<double, Abi>(ix >= 0x7ff00000);
  doublev<Abi> spc4_result = x * x;

  result = huge * huge;
  where(spc4, result) = spc4_result;
  where(spc3, result) = spc3_result;
  where(spc2, result) = spc2_result;
  where(spc1, result) = spc1_result;
  where(spc1_1_mask, result) = spc1_1_result;
  where(spc1_1_1_mask, result) = 1.0;

  return result;
}

#define LLVM_ILOGB0 -2147483647
#define LLVM_ILOGBNAN 2147483647
#define LLVM_ILOGBINF 2147483647

template <class Abi>
samesize<int, floatv<Abi>> ilogb(floatv<Abi> x){
  Abi_32suf<Abi> ux;
  samesize<int, floatv<Abi>> result;
  ux.f = x;
  result = static_simd_cast<samesize<int, floatv<Abi>>>(((ux.u >> 23) & ExponetBitsf) - ExponetBasef) ;

  ux.u = ux.u & 0x7fffffff;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x0), result) = LLVM_ILOGB0;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7f800000), result) = LLVM_ILOGBINF;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u > 0x7f800000), result) = LLVM_ILOGBNAN;
  return result;
}

template <class Abi>
samesize<int, doublev<Abi>> ilogb(doublev<Abi> x){
  Abi_64suf<Abi> ux;
  samesize<int, doublev<Abi>> result;
  ux.f = x;
  result = static_simd_cast<samesize<int, doublev<Abi>>>(((ux.u >> 52) & ExponetBits) - ExponetBase);

  ux.u = ux.u & 0x7fffffffffffffffUL;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x0UL), result) = LLVM_ILOGB0;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7ff0000000000000UL), result) = LLVM_ILOGBINF;
  where(change_simd_mask_type<unsigned long int, double, Abi>(ux.u > 0x7ff0000000000000UL), result) = LLVM_ILOGBNAN;

  return result;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> 
samesize<int, ldoublev<Abi>> ilogb(ldoublev<Abi> x){
  Abi_128suf<Abi> ux;
  samesize<int, ldoublev<Abi>> retv;
  longv<Abi> x_hi, x_lo, ix, retvt;

  ux.f = x;
  x_hi = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));
  x_lo = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_LO(ux.u));
  x_hi &= 0x7fffffffffffffffL;

  auto jd = x_hi < 0x0001000000000000L;

  auto jdt = (x_hi | x_lo) == 0;

  where(jd & jdt, retvt) = FP_ILOGB0;

  auto jdtt = jd && !jdt && (x_hi == 0);
  where(jdtt, ix) = -16431;
  while(any_of(jdtt && x_lo > 0)){
    where(jdtt && (x_lo > 0), ix) = ix - 1;
    where(jdtt && (x_lo > 0), x_lo) = x_lo << 1;
  }

  jdtt = jd && !jdt && (x_hi != 0);
  where(jdtt, ix) = -16382;
  where(jdtt, x_hi) = x_hi << 15;

  while(any_of(jdtt && x_hi > 0)){
    where(jdtt && (x_hi > 0), ix) = ix - 1;
    where(jdtt && (x_hi > 0), x_hi) = x_hi << 1;
  }

  where(jd && !jdt, retvt) = ix;

  jd = (x_hi < 0x7fff000000000000L) && (x_hi >= 0x0001000000000000L);
  jdt = jd;
  where(jd, retvt) = (x_hi >> 48) - 16383;

  jd = (x_lo != 0 && !jdt) || (x_hi > 0x7fff000000000000L);
  where(jd, retvt) = FP_ILOGBNAN;

  jd = (x_hi == 0x7fff000000000000L) || (x_lo == 0 && !jdt);
  where(jd, retvt) = INT_MAX;

  retv = static_simd_cast<samesize<int, ldoublev<Abi>>>(retvt);

  return retv;
}
#else
template <class Abi> ldoublev<Abi> ilogb(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = ilogb(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi>
floatv<Abi> fmax(floatv<Abi> x, floatv<Abi> y){
  where(y > x, x) = y;
  return x;
}

template <class Abi>
doublev<Abi> fmax(doublev<Abi> x, doublev<Abi> y){
  where(y > x, x) = y;
  return x;
}

template <class Abi>
ldoublev<Abi> fmax(ldoublev<Abi> x, ldoublev<Abi> y){
  where(y > x, x) = y;
  return x;
}

template <class Abi>
floatv<Abi> fmin(floatv<Abi> x, floatv<Abi> y){
  where(x > y, x) = y;
  return x;
}

template <class Abi>
doublev<Abi> fmin(doublev<Abi> x, doublev<Abi> y){
  where(x > y, x) = y;
  return x;
}

template <class Abi>
ldoublev<Abi> fmin(ldoublev<Abi> x, ldoublev<Abi> y){
  where(x > y, x) = y;
  return x;
}


template <class Abi>
floatv<Abi> fmod(floatv<Abi> x, floatv<Abi> y){
  Abi_32suf<Abi> ux, uy;
  floatv<Abi> res, spce_case;
	intv<Abi> ex;
	intv<Abi> ey;
	uintv<Abi> sx;
	uintv<Abi> i;
  ux.f = x;
  uy.f = y;

  ex = static_simd_cast<intv<Abi>>(ux.u>>23 & 0xffU);
  ey = static_simd_cast<intv<Abi>>(uy.u>>23 & 0xffU);
  sx = (ux.u & 0x80000000);
  spce_case = 1.0f;

	/* in the followings uxi should be ux.i, but then gcc wrongly adds */
	/* float load/store to inner loops ruining performance and code size */
	uintv<Abi> uxi = ux.u;
	uintv<Abi> uyi = uy.u;
  uintv<Abi> uxi_be = ux.u;
	uintv<Abi> uyi_be = uy.u;


  i = uxi<<9;
  auto jd1 = simd_mask<unsigned int, Abi>(ex == 0) && ((i&0xffffffff) != 0);
LOOP0:
  auto mask = jd1 & (i>>31 == 0);
  where(mask, ex) = ex-1;
  i <<= 1;
  if(any_of(mask)) goto LOOP0;
  uxi &= -1U >> 9;
	uxi |= 1U << 23;
  where(jd1, uxi) = ux.u << static_simd_cast<uintv<Abi>>(-ex + 1);
  
  i = uyi<<9;
  jd1 = simd_mask<unsigned int, Abi>(ey == 0) && ((i&0xffffffff) != 0);
LOOP1:
  mask = jd1 & (i>>31 == 0);
  where(mask, ey) = ey-1;
  i <<= 1;
  if(any_of(mask)) goto LOOP1;
  uyi &= -1U >> 9;
	uyi |= 1U << 23;
  where(jd1, uyi) = uy.u << static_simd_cast<uintv<Abi>>(-ey + 1);


LOOP2:
  auto jd2 = simd_mask<unsigned int, Abi>(ex > ey);
  where(jd2, i) = uxi - uyi;
  auto jd3 = (i >> 31 == 0);
  where(jd2 & jd3 & (i == 0), spce_case) = 0*x;
  where(jd2 & jd3, uxi) = i;
  where(jd2, uxi) = uxi << 1;
  where(jd2, ex) = ex - 1;
  if(any_of(jd2)) goto LOOP2;

  i = uxi - uyi;
  auto spjd = (i >> 31 == 0) & (i == 0);
  where(spjd, spce_case) = 0*x;
  where((i >> 31 == 0), uxi) = i;

LOOP3:
  jd3 = (uxi>>23 == 0) && ((uxi&0xffffffff) != 0); 
  where(jd3, ex) = ex - 1;
  where(jd3, uxi) = uxi << 1;
  if(any_of(jd3)) goto LOOP3;

  auto jd4 = simd_mask<unsigned int, Abi>(ex > 0);
  where(!jd4, uxi) = uxi >> static_simd_cast<uintv<Abi>>(-ex + 1);
  where(jd4, uxi) = (uxi - (1U << 23)) | static_simd_cast<uintv<Abi>>(ex) << 23;
	uxi |= static_simd_cast<uintv<Abi>>(sx);
	ux.u = uxi;
	res = ux.f;

  where((spce_case != 1.0f), res) = spce_case;
  where((uxi_be<<1 <= uyi_be<<1), res) = x;
  where((uxi_be<<1 == uyi_be<<1), res) = 0*x;
  where(change_simd_mask_type<unsigned int, float, Abi>((uyi_be<<1 == 0  | (uxi_be>>23 & 0xffU) == 0xffU)) | isnan(y), res) = (x*y)/(x*y);

  return res;
}


template <class Abi>
doublev<Abi> fmod(doublev<Abi> x, doublev<Abi> y){
  Abi_64suf<Abi> ux, uy;
  doublev<Abi> res, spce_case;
	intv<Abi> ex;
	intv<Abi> ey;
	intv<Abi> sx;
	ulongv<Abi> i;
  ux.f = x;
  uy.f = y;

  ex = static_simd_cast<intv<Abi>>(ux.u>>52 & 0x7ffUL);
  ey = static_simd_cast<intv<Abi>>(uy.u>>52 & 0x7ffUL);
  sx = static_simd_cast<intv<Abi>>(ux.u>>63);
  spce_case = 1.0;

	/* in the followings uxi should be ux.i, but then gcc wrongly adds */
	/* float load/store to inner loops ruining performance and code size */
	ulongv<Abi> uxi = ux.u;
	ulongv<Abi> uyi = uy.u;
  ulongv<Abi> uxi_be = ux.u;
	ulongv<Abi> uyi_be = uy.u;


  auto jd1 = simd_mask<unsigned long, Abi>(ex == 0) && ((i&0xffffffffffffffff) != 0);
  i = uxi<<12;
LOOP0:
  auto mask = jd1 & (i>>63 == 0);
  where(mask, ex) = ex-1;
  i <<= 1;
  if(any_of(mask)) goto LOOP0;
  uxi &= -1ULL >> 12;
	uxi |= 1ULL << 52;
  where(jd1, uxi) = ux.u << static_simd_cast<ulongv<Abi>>(-ex + 1);
  

  jd1 = simd_mask<unsigned long, Abi>(ey == 0) && ((i&0xffffffffffffffff) != 0);
  i = uyi<<12;
LOOP1:
  mask = jd1 & (i>>63 == 0);
  where(mask, ey) = ey-1;
  i <<= 1;
  if(any_of(mask)) goto LOOP1;
  uyi &= -1ULL >> 12;
	uyi |= 1ULL << 52;
  where(jd1, uyi) = uy.u << static_simd_cast<ulongv<Abi>>(-ey + 1);

LOOP2:
  auto jd2 = simd_mask<unsigned long, Abi>(ex > ey);
  where(jd2, i) = uxi - uyi;
  auto jd3 = (i >> 63 == 0);
  where(jd2 & jd3 & (i == 0), spce_case) = 0*x;
  where(jd2 & jd3, uxi) = i;
  where(jd2, uxi) = uxi << 1;
  where(jd2, ex) = ex - 1;
  if(any_of(jd2)) goto LOOP2;

  i = uxi - uyi;
  auto spjd = (i >> 63 == 0) & (i == 0);
  where(spjd, spce_case) = 0*x;
  where((i >> 63 == 0), uxi) = i;

LOOP3:
  jd3 = (uxi>>52 == 0) && ((uxi&0xffffffffffffffff) != 0);
  where(jd3, ex) = ex - 1;
  where(jd3, uxi) = uxi << 1;
  if(any_of(jd3)) goto LOOP3;

  auto jd4 = simd_mask<unsigned long, Abi>(ex > 0);
  where(!jd4, uxi) = uxi >> static_simd_cast<ulongv<Abi>>(-ex + 1);
  where(jd4, uxi) = (uxi - (1ULL << 52)) | static_simd_cast<ulongv<Abi>>(ex) << 52;
	uxi |= static_simd_cast<ulongv<Abi>>(sx) << 63;
	ux.u = uxi;
	res = ux.f;

  where((spce_case != 1.0), res) = spce_case;
  where((uxi_be<<1 <= uyi_be<<1), res) = x;
  where((uxi_be<<1 == uyi_be<<1), res) = 0*x;
  where(change_simd_mask_type<unsigned long, double, Abi>((uyi_be<<1 == 0  | (uxi_be>>52 & 0x7ff) == 0x7ff)) | isnan(y), res) = (x*y)/(x*y);

  return res;
}

template <class Abi>
ldoublev<Abi> fmod(ldoublev<Abi> x, ldoublev<Abi> y){
  ldoublev<Abi> n = vld1q_f<ldoublev<Abi>, intv<Abi>>(x / y);
  x -= n * y;
  return x;
}

template <class Abi>
floatv<Abi> remainder(floatv<Abi> x, floatv<Abi> y){
  intv<Abi> hx, hy, qs;
  uintv<Abi> sx;
  Abi_32suf<Abi> ux, uy;

  ux.f = x;
  uy.f = y;
  hx = ux.i;
  hy = uy.i;
  sx = static_simd_cast<uintv<Abi>>(hx) & 0x80000000;
  qs = static_simd_cast<intv<Abi>>(sx ^ (static_simd_cast<uintv<Abi>>(hy) & 0x80000000));
  hy &= 0x7fffffff;
  hx &= 0x7fffffff;

  auto spc_mask1 = simd_mask<float, Abi>(static_simd_cast<uintv<Abi>>(hy) == 0);
  auto spc_mask2 = simd_mask<float, Abi>((hx >= 0x7f800000) || (hy > 0x7f800000));
  floatv<Abi> spc_result1 = (x * y) / (x * y);

  auto spc1_f = simd_mask<float, Abi>(hy <= 0x7dffffff);
  where(spc1_f, x) = fmod(x, 8 * y);
  auto spc2 = ((hx - hy) == 0);
  auto spc_mask3 = simd_mask<float, Abi>(spc2);
  // auto spc2_1 = (qs == 0);

  x = abs(x);
  y = abs(y);

  auto spc3_f = (simd_mask<float, Abi>(hy <= 0x7e7fffff) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;

  auto spc4_f = (simd_mask<float, Abi>(hy <= 0x7effffff) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;


  auto spc5_f = simd_mask<float, Abi>(hy < 0x01000000);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;

  floatv<Abi> y_half = 0.5f * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;

  floatv<Abi> result;
  ux.f = x;
  ux.u ^= sx;
  result = ux.f;
  where(spc_mask3, result) = 0 * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;
  return result;
}

template <class Abi>
doublev<Abi> remainder(doublev<Abi> x, doublev<Abi> y){
  longv<Abi> hx, hy, qs;
  ulongv<Abi> lx, ly, sx;
  Abi_64suf<Abi> ux, uy, tmp;

  ux.f = x;
  uy.f = y;
  hx = static_simd_cast<longv<Abi>>((ux.u & 0xffffffff00000000UL));
  lx = static_simd_cast<ulongv<Abi>>((ux.u & 0xffffffffUL));
  hy = static_simd_cast<longv<Abi>>((uy.u & 0xffffffff00000000UL));
  ly = static_simd_cast<ulongv<Abi>>((uy.u & 0xffffffffUL));

  sx = static_simd_cast<ulongv<Abi>>(hx) & 0x8000000000000000UL;
  qs = static_simd_cast<longv<Abi>>(sx ^ (static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000UL));
  hy = static_simd_cast<longv<Abi>>(static_simd_cast<ulongv<Abi>>(hy) & 0x7fffffff00000000UL);
  hx = static_simd_cast<longv<Abi>>(static_simd_cast<ulongv<Abi>>(hx) & 0x7fffffff00000000UL);

  auto spc_mask1 = simd_mask<double, Abi>((static_simd_cast<ulongv<Abi>>(hy) | ly) == 0);
  auto spc_mask2 = simd_mask<double, Abi>((hx >= 0x7ff0000000000000LL) || ((hy >= 0x7ff0000000000000LL) && (((hy - 0x7ff0000000000000LL) | static_simd_cast<longv<Abi>>(ly)) != 0)));
  doublev<Abi> spc_result1 = (x * y) / (x * y);
  
  auto spc1_f = simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <=0x7fbfffff00000000UL);
  where(spc1_f, x) = fmod(x, (8 * y));


  auto spc2 = ((static_simd_cast<ulongv<Abi>>(hx - hy)) | (lx - ly)) == 0;
  auto spc_mask3 = simd_mask<double, Abi>(spc2);
  auto spc2_1 = change_simd_mask_type<long, unsigned long, Abi>(qs == 0);

  x = abs(x);
  y = abs(y);

  auto spc3_f = (simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <= 0x7fcfffff00000000UL) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;

  auto spc4_f = (simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <= 0x7fdfffff00000000UL) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;

  auto spc5_f = simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) < 0x0020000000000000UL);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;
  
  doublev<Abi> y_half = 0.5 * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;

  auto spc7 = simd_mask<double, Abi>(sx != 0);
  doublev<Abi> result = x;
  where(spc7, result) = -x;
  where(spc_mask3, result) = 0.0 * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;

  return result;
}

template <class Abi>
ldoublev<Abi> remainder(ldoublev<Abi> x, ldoublev<Abi> y){
  longv<Abi> hx, hy;
  ulongv<Abi> sx, lx, ly, qs;
  Abi_128suf<Abi> ux, uy;

  ux.f = x;
  uy.f = y;
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));
  lx = GET_LONGDOUBLE_LO(ux.u);
  hy = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(uy.u));
  ly = GET_LONGDOUBLE_LO(uy.u);

  sx = static_simd_cast<ulongv<Abi>>(hx) & 0x8000000000000000ULL;
  qs = sx ^ (static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000ULL);
  hy = hy & 0x7fffffffffffffffLL;
  hx = hx & 0x7fffffffffffffffLL;

  auto spc_mask1 = simd_mask<long double, Abi>((static_simd_cast<ulongv<Abi>>(hy) | lx) == 0);
  auto spc_mask2 = simd_mask<long double, Abi>((hx >= 0x7fff000000000000LL) || ((hy >= 0x7fff000000000000LL) && (((hy - 0x7fff000000000000LL) | static_simd_cast<longv<Abi>>(ly)) != 0)));
  ldoublev<Abi> spc_result1 = (x * y) / (x * y);
  
  auto spc1_f = simd_mask<long double, Abi>(hy <=0x7ffbffffffffffffLL);
  where(spc1_f, x) = fmod(x, 8 * y);

  auto spc2 = (static_simd_cast<ulongv<Abi>>(hx - hy) | (lx - ly)) == 0;
  auto spc_mask3 = simd_mask<long double, Abi>(spc2);
  auto spc2_1 = (qs == 0);

  x = abs(x);
  y = abs(y);

  auto spc3_f = (simd_mask<long double, Abi>(hy <= 0x7ffcffffffffffffLL) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;

  auto spc4_f = (simd_mask<long double, Abi>(hy <= 0x7ffdffffffffffffLL) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;

  auto spc5_f = simd_mask<long double, Abi>(hy < 0x0002000000000000LL);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;
  
  ldoublev<Abi> y_half = 0.5L * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;

  auto spc7 = simd_mask<long double, Abi>(sx != 0);
  ldoublev<Abi> result = x;
  where(spc7, result) = -x;
  where(spc_mask3, result) = 0.0L * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;

  return result;
}


template <class Abi> 
floatv<Abi> log10(floatv<Abi> x){
	floatv<Abi> p, q, exponent, r, r2, y;
  Abi_32suf<Abi> ux;
  ux.f = x;
  ux.u -= TwoThirdf;
  exponent = static_simd_cast<floatv<Abi>>(ux.i >> 23);
  ux.u &= MASKf_mant;
  ux.u += TwoThirdf;
  r = ux.f - 1.f;
  r2 = r * r;

  float c1=-0.4999991655349731445312500,c2=0.3333644270896911621093750,c3=-0.2500934004783630371093750,
  c4=0.1982789635658264160156250,c5=-0.1638664305210113525390625,c6=0.1692402511835098266601562,
  c7=-0.1554937064647674560546875;
  
  p = c6 * r + c5;
  q = c4 * r + c3;
  y = c2 * r + c1;
  p = c7 * r2 + p;
  q = p * r2 + q;
  y = q * r2 + y;
  p = (float)LN_2 * exponent + r;
  y = y * r2 + p;
  y = y * (float)InvLn10;

  simd_mask<float, Abi> jd = change_simd_mask_type<unsigned  int, float, Abi>(ux.u - 0x00800000U >= 0x7f800000U - 0x00800000U);
  simd_mask<float, Abi> jd1 = change_simd_mask_type<unsigned  int, float, Abi>(ux.u * 2 == 0);
  simd_mask<float, Abi> jd2 = change_simd_mask_type<unsigned  int, float, Abi>(ux.u == 0x7f800000U);
  simd_mask<float, Abi> jd3 = change_simd_mask_type<unsigned  int, float, Abi>(((ux.u & 0x80000000U) == 0x80000000U) || (ux.u * 2 >= 0xff000000U));
  where(jd && jd3, y) = LLVM_NAN_32F;
  where(jd && jd2, y) = x;
  where(jd && jd1, y) = -LLVM_INF_32F;
  where(x<0, y) = LLVM_NAN_32F;
  return y;
}

template <class Abi> doublev<Abi> log10(doublev<Abi> x){
  Abi_64suf<Abi> ux, x6, x9, utmp;
  Abi_32suf<Abi> xf0;
  doublev<Abi> n, y, q, p, r, r2, xd0, xd1, tmp;
  ulongv<Abi> idx, xu16, xu0, m;
  intv<Abi> ni;

  const double ln2hi=0.6931471805601177;
  const double ln2lo=-1.7239444212694711e-13;
  doublev<Abi> one(1.0);

  ux.f = x;
  xu0 = ux.u & 0x000fffffffffffffUL;
  ni = static_simd_cast<intv<Abi>>((ux.u >> 52) - 0x000003ffUL);
  n = static_simd_cast<doublev<Abi>>(ni);
  xu0 = xu0 ^ 0x07f0000000000000UL;
  xf0.u = static_simd_cast<uintv<Abi>>(xu0 >> 29);
  xf0.f = 1/xf0.f;
  m = static_simd_cast<ulongv<Abi>>(xf0.u + 0x00008000);
  x6.u = (m >> 16) << 45;
  m = x6.u >> 44;

  idx = m & 0x1fe;
  x9.u = 0x7000000000000000UL ^ xu0;

  // r = x9.f * x6.f - one;
  for (unsigned i = 0; i < idx.size(); ++i){
    r[i] = x9.f[i] * x6.f[i] - 1.0;
  }

  utmp.f = r;

  for (unsigned i = 0; i < idx.size(); ++i){
    unsigned long int __idx = idx[i];
    double __n = n[i];
    xd1[i] = __log1p_tbl[__idx+1] + ln2lo * __n;
    xd0[i] = __log1p_tbl[__idx] + ln2hi * __n;
  }

  r2 = r * r;
  p = LogB1 + LogB0 * r;
  tmp = LogB3 + LogB2 * r;
  q = r + xd0;
  p = tmp + r2 * p;

  tmp = LogB5 + r * LogB4;
  xd0 = q - xd0;
  p = tmp + r2 * p;
  tmp = r - xd0 + xd1;
  p = tmp + r2 * p;
  y = (q + p) * InvLn10;

  xu16 = ux.u >> 48;
  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>(xu16 - 0x0010UL >= 0x7ff0UL - 0x0010UL);
  simd_mask<double, Abi> jd1 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u * 2 == 0);
  simd_mask<double, Abi> jd2 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7ff0000000000000UL);
  simd_mask<double, Abi> jd3 = change_simd_mask_type<unsigned long int, double, Abi>(((xu16 & 0x8000) == 0x8000) || ((xu16 & 0x7ff0) == 0x7ff0));
  where(jd && jd3, y) = LLVM_NAN_64F;
  where(jd && jd2, y) = x;
  where(jd && jd1, y) = -LLVM_INF_64F;
  where(x<0, y) = LLVM_NAN_64F;
  return y;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> log10(ldoublev<Abi> x)
{
    const long double log10_R[6] =
    {
      1.418134209872192732479751274970992665513E5L,
    -8.977257995689735303686582344659576526998E4L,
      2.048819892795278657810231591630928516206E4L,
    -2.024301798136027039250415126250455056397E3L,
      8.057002716646055371965756206836056074715E1L,
    -8.828896441624934385266096344596648080902E-1L
    };
    const long double log10_S[6] =
    {
      1.701761051846631278975701529965589676574E6L,
    -1.332535117259762928288745111081235577029E6L,
      4.001557694070773974936904547424676279307E5L,
    -5.748542087379434595104154610899551484314E4L,
      3.998526750980007367835804959888064681098E3L,
    -1.186359407982897997337150403816839480438E2L
    /* 1.000000000000000000000000000000000000000E0L, */
    };

    const long double log10_P[13] =
    {
    1.313572404063446165910279910527789794488E4L,
    7.771154681358524243729929227226708890930E4L,
    2.014652742082537582487669938141683759923E5L,
    3.007007295140399532324943111654767187848E5L,
    2.854829159639697837788887080758954924001E5L,
    1.797628303815655343403735250238293741397E5L,
    7.594356839258970405033155585486712125861E4L,
    2.128857716871515081352991964243375186031E4L,
    3.824952356185897735160588078446136783779E3L,
    4.114517881637811823002128927449878962058E2L,
    2.321125933898420063925789532045674660756E1L,
    4.998469661968096229986658302195402690910E-1L,
    1.538612243596254322971797716843006400388E-6L
    };
    const long double log10_Q[12] =
    {
    3.940717212190338497730839731583397586124E4L,
    2.626900195321832660448791748036714883242E5L,
    7.777690340007566932935753241556479363645E5L,
    1.347518538384329112529391120390701166528E6L,
    1.514882452993549494932585972882995548426E6L,
    1.158019977462989115839826904108208787040E6L,
    6.132189329546557743179177159925690841200E5L,
    2.248234257620569139969141618556349415120E5L,
    5.605842085972455027590989944010492125825E4L,
    9.147150349299596453976674231612674085381E3L,
    9.104928120962988414618126155557301584078E2L,
    4.839208193348159620282142911143429644326E1L
    /* 1.000000000000000000000000000000000000000E0L, */
    };

   const long double
        /* log10(2) */
        L102A = 0.3125L,
        L102B = -1.14700043360188047862611052755069732318101185E-2L,
        /* log10(e) */
        L10EA = 0.5L,
        L10EB = -6.570551809674817234887108108339491770560299E-2L,
        /* sqrt(2)/2 */
        SQRTH = 7.071067811865475244008443621048490392848359E-1L;

    ldoublev<Abi> z, y;
    ldoublev<Abi> res;
    intv<Abi> e;
    longv<Abi> hx, lx;
    Abi_128suf<Abi> u;

    /* Test for domain */
    u.f = x;
    hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(u.u));
    lx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_LO(u.u));

    auto jd1 = change_simd_mask_type<unsigned long, long double, Abi>(((hx & 0x7fffffffffffffffLL) | lx) == 0);
    auto jd2 = change_simd_mask_type<unsigned long, long double, Abi>(hx < 0);
    auto jd3 = change_simd_mask_type<unsigned long, long double, Abi>(hx >= 0x7fff000000000000LL);
    where(jd1, res) = (-1.0L / (x - x));
    where(!jd1 & jd2, res) = (x - x) / (x - x);
    where(!jd1 & !jd2 & jd3, res) = (x + x);
    jd1 = !jd1 & !jd2 & !jd3;

    /* separate mantissa from exponent */
    samesize<int, ldoublev<Abi>> tmpe;
    x = frexp(x, &tmpe);
    e = tmpe;

    jd2 = change_simd_mask_type<int, long double, Abi>((e > 2) || (e < -2));
    jd3 = (x < SQRTH);

    where(jd2 & !jd3, z) = x - 0.5L;
    where(jd2 & !jd3, z) -= 0.5L;
    where(jd2 & !jd3, y) = 0.5L * x + 0.5L;
    where(change_simd_mask_type<long double, int, Abi>(jd2 & jd3), e) = e - 1;
    where(jd2 & jd3, z) = x - 0.5L;
    where(jd2 & jd3, y) = 0.5L * z + 0.5L;
    where(jd2, x) = z / y;
    where(jd2, z) = x * x;
    where(jd2, y) = x * (z * neval(z, log10_R, 5) / deval(z, log10_S, 5));

    where(!jd2 & !jd3, x) = x - 1.0L;
    where(change_simd_mask_type<long double, int, Abi>(!jd2 & jd3), e) = e - 1;
    where(!jd2 & jd3, x) = 2.0 * x - 1.0L; 
    where(!jd2, z) = x * x;

    where(!jd2, y) = x * (z * neval(x, log10_P, 12) / deval(x, log10_Q, 11));
    where(!jd2, y) = y - 0.5 * z;

    z = y * L10EB;
    z += x * L10EB;
    z += static_simd_cast<ldoublev<Abi>>(e) * L102B;
    z += y * L10EA;
    z += x * L10EA;
    z += static_simd_cast<ldoublev<Abi>>(e) * L102A;
    where(jd1, res) = z;
    return res;
}
#else
template<class Abi> ldoublev<Abi> log10(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = log10(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif


#include <float.h>
#include <math.h>
#define fabs_tg(x) __MATH_TG ((x), (__typeof (x)) __builtin_fabs, (x))

/* These must be function-like macros because some __MATH_TG
   implementations macro-expand the function-name argument before
   concatenating a suffix to it.  */
#define min_of_type_f() FLT_MIN
#define min_of_type_() DBL_MIN
#define min_of_type_l() LDBL_MIN
#define min_of_type_f128() FLT128_MIN

#define min_of_type(x) __MATH_TG ((x), (__typeof (x)) min_of_type_, ())

#define math_force_eval(x)						\
  ({ __typeof (x) __x = (x); __asm __volatile__ ("" : : "m" (__x)); })

/* If X (which is not a NaN) is subnormal, force an underflow
   exception.  */
#define math_check_force_underflow(x)				\
  do								\
    {								\
      __typeof (x) force_underflow_tmp = (x);			\
      if (fabs_tg (force_underflow_tmp)				\
	  < min_of_type (force_underflow_tmp))			\
	{							\
	  __typeof (force_underflow_tmp) force_underflow_tmp2	\
	    = force_underflow_tmp * force_underflow_tmp;	\
	  math_force_eval (force_underflow_tmp2);		\
	}							\
    }								\
  while (0)

float llvm__kernel_tanf(float x, float y, int iy)
{

  static const float
one   =  1.0000000000e+00, /* 0x3f800000 */
pio4  =  7.8539812565e-01, /* 0x3f490fda */
pio4lo=  3.7748947079e-08, /* 0x33222168 */
T[] =  {
  3.3333334327e-01, /* 0x3eaaaaab */
  1.3333334029e-01, /* 0x3e088889 */
  5.3968254477e-02, /* 0x3d5d0dd1 */
  2.1869488060e-02, /* 0x3cb327a4 */
  8.8632395491e-03, /* 0x3c11371f */
  3.5920790397e-03, /* 0x3b6b6916 */
  1.4562094584e-03, /* 0x3abede48 */
  5.8804126456e-04, /* 0x3a1a26c8 */
  2.4646313977e-04, /* 0x398137b9 */
  7.8179444245e-05, /* 0x38a3f445 */
  7.1407252108e-05, /* 0x3895c07a */
 -1.8558637748e-05, /* 0xb79bae5f */
  2.5907305826e-05, /* 0x37d95384 */
};
	float z,r,v,w,s;
	int32_t ix,hx;
	GET_FLOAT_WORDff(hx,x);
	ix = hx&0x7fffffff;	/* high word of |x| */
	if(ix<0x39000000)			/* x < 2**-13 */
	    {if((int)x==0) {			/* generate inexact */
		if((ix|(iy+1))==0) return one/fabsf(x);
		else if (iy == 1)
		  {
		    math_check_force_underflow (x);
		    return x;
		  }
		else
		  return -one / x;
	    }
	    }
	if(ix>=0x3f2ca140) { 			/* |x|>=0.6744 */
	    if(hx<0) {x = -x; y = -y;}
	    z = pio4-x;
	    w = pio4lo-y;
	    x = z+w; y = 0.0;
	    if (fabsf (x) < 0x1p-13f)
		return (1 - ((hx >> 30) & 2)) * iy * (1.0f - 2 * iy * x);
	}
	z	=  x*x;
	w 	=  z*z;
    /* Break x^5*(T[1]+x^2*T[2]+...) into
     *	  x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
     *	  x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
     */
	r = T[1]+w*(T[3]+w*(T[5]+w*(T[7]+w*(T[9]+w*T[11]))));
	v = z*(T[2]+w*(T[4]+w*(T[6]+w*(T[8]+w*(T[10]+w*T[12])))));
	s = z*x;
	r = y + z*(s*(r+v)+y);
	r += T[0]*s;
	w = x+r;
	if(ix>=0x3f2ca140) {
	    v = (float)iy;
	    return (float)(1-((hx>>30)&2))*(v-(float)2.0*(x-(w*w/(w+v)-r)));
	}
	if(iy==1) return w;
	else {		/* if allow error up to 2 ulp,
			   simply return -1.0/(x+r) here */
     /*  compute -1.0/(x+r) accurately */
	    float a,t;
	    int32_t i;
	    z  = w;
	    GET_FLOAT_WORDff(i,z);
	    SET_FLOAT_WORDff(z,i&0xfffff000);
	    v  = r-(z - x); 	/* z+v = r+x */
	    t = a  = -(float)1.0/w;	/* a = -1.0/w */
	    GET_FLOAT_WORDff(i,t);
	    SET_FLOAT_WORDff(t,i&0xfffff000);
	    s  = (float)1.0+t*z;
	    return t+a*(s+t*v);
	}
}


static inline uint32_t
abstop12 (float x)
{
  union {float a; uint32_t b;} f;
  f.a = x;
  return (f.b >> 20) & 0x7ff;
}

static inline double
reduce_fast (double x, const sincos_t *p, int *np)
{
  double r;
  /* Use scaled float to int conversion with explicit rounding.
     hpi_inv is prescaled by 2^24 so the quadrant ends up in bits 24..31.
     This avoids inaccuracies introduced by truncating negative values.  */
  r = x * p->hpi_inv;
  int n = ((int32_t)r + 0x800000) >> 24;
  *np = n;
  return x - n * p->hpi;
}

static inline int32_t
rem_pio2f (float x, float *y)
{
  double dx = x;
  int n;
  const sincos_t *p = &__sincosf_table[0];

  if ( (abstop12 (x) < abstop12 (120.0f)))
    dx = reduce_fast (dx, p, &n);
  else
    {
      llvm_32suf tmp;
      tmp.f = x; 
      uint32_t xi = tmp.u;
      int sign = xi >> 31;

      dx = reduce_large (xi, &n);
      dx = sign ? -dx : dx;
    }

  y[0] = dx;
  y[1] = dx - y[0];
  return n;
}

float llvm_tanf(float x)
{
	float y[2],z=0.0;
	int32_t n, ix;

	GET_FLOAT_WORDff(ix,x);

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fda) return llvm__kernel_tanf(x,z,1);

    /* tan(Inf or NaN) is NaN */
	else if (ix>=0x7f800000) {
	  // if (ix==0x7f800000)
	  //   __set_errno (EDOM);
	  return x-x;		/* NaN */
	}

    /* argument reduction needed */
	else {
	    n = rem_pio2f(x,y);
	    return llvm__kernel_tanf(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even
							      -1 -- n odd */
	}
}

template <class Abi>
floatv<Abi> tan(floatv<Abi> x)
{
    Abi_32suf<Abi> x1, sum, xu;
    floatv<Abi> z, z2, res;
    uintv<Abi> odd, cmp = 0;
    uint32_t AbsMask_f32_la = AbsMaskf, SignMask_f32_la = MASKf_sign;
    float 
    DP1_f32_la = 1.5703125,
    DP2_f32_la = 4.837512969970703125E-4, 
    DP3_f32_la = 7.54978995489188216E-8, 
    P1_f32_la = 9.38540185543E-3, 
    P2_f32_la = 3.11992232697E-3, 
    P3_f32_la = 2.44301354525E-2, 
    P4_f32_la = 5.34112807005E-2, 
    P5_f32_la = 1.33387994085E-1, 
    P6_f32_la = 3.33331568548E-1,
    InvPiO2_f32_la = 0.636619772367581;

    x1.f = x;
    uintv<Abi> sign = x1.u & s2v<uint32_t, uintv<Abi>>(SignMask_f32_la);
    x1.u = x1.u & AbsMask_f32_la;
    

    sum.f = InvPiO2_f32_la * x1.f + ExpShift23;
    odd = static_simd_cast<uintv<Abi>>(static_simd_cast<floatv<Abi>>((sum.u) << 31));
    sum.f -= ExpShift23;

    z = ((x1.f - sum.f * DP1_f32_la) - sum.f * DP2_f32_la) - sum.f * DP3_f32_la;
    z2 = z * z;
    xu.f = z;
    where((xu.u & AbsMask_f32_la) > 0x3f490fda, cmp) = 1;

    sum.f = (((((P1_f32_la * z2 + P2_f32_la) * z2 + P3_f32_la) * z2
     + P4_f32_la) * z2 + P5_f32_la) * z2 + P6_f32_la) * z2 * z + z;

    where(odd > 0, sum.f) = (1.0f) / sum.f;
    sum.u = (sum.u ^ sign ^ (odd));  
    res = sum.f;
    where(x1.u >= 0x7f800000, res) = x - x;
    if(reduce(cmp) != 0) [[unlikely]]
    {
      for(size_t i = 0; i < x.size(); i++)
      {
        if(cmp[i] != 0)
            res[i] = llvm_tanf(x[i]);
      }
    }
    return res;
}

template<class Abi>
doublev<Abi> tan(doublev<Abi> x)
{  
    Abi_64suf<Abi> x1, sum, xu;
    doublev<Abi> z, z2, res;
    ulongv<Abi> odd, cmp = 0;
    unsigned long AbsMask_f64_la = AbsMask, SignMask_f64_la = MASK_sign;
    double InvPiO2_f64_la = 0.636619772367581343075535053490,
    P1_f64_la = -1.30936939181383777646E4,
    P2_f64_la = 1.15351664838587416140E6,
    P3_f64_la = -1.79565251976484877988E7,
    DP1_f64_la = 1.57079631090164184570312,
    DP2_f64_la  =1.589325471229585673428E-8,
    DP3_f64_la = 6.12323399573676588614E-17,
    Q1_f64_la = 1.36812963470692954678E4,
    Q2_f64_la = -1.32089234440210967447E6,
    Q3_f64_la = 2.50083801823357915839E7,
    Q4_f64_la = -5.38695755929454629881E7;

    x1.f = x;
    ulongv<Abi> sign = x1.u & SignMask_f64_la;
    x1.u = x1.u & AbsMask_f64_la;
    sum.f = InvPiO2_f64_la * x1.f + ExpShift52;
    odd = static_simd_cast<ulongv<Abi>>(static_simd_cast<longv<Abi>>(sum.u << 63));
    sum.f -= ExpShift52;

    z = ((x1.f - sum.f * DP1_f64_la) - sum.f * DP2_f64_la) - sum.f * DP3_f64_la;
    z2 = z * z;
    xu.f = z;
    where((xu.u & AbsMask_f64_la) > 0x3FE921FB54442D18UL, cmp) = 1;
    doublev<Abi> p = (P1_f64_la * z2 + P2_f64_la) * z2 + P3_f64_la;
    doublev<Abi> q = (((z2 + Q1_f64_la) * z2 + Q2_f64_la) * z2 + Q3_f64_la) * z2 + Q4_f64_la;
    sum.f = z  +  z * z2 * p/q;

    where(odd > 0, sum.f) = (1.0f) / sum.f;
    sum.u = sum.u ^ sign ^ odd;
    res = sum.f;
    if(reduce(cmp) != 0) [[unlikely]]
    {
      for(size_t i = 0; i < x.size(); i++)
      {
        if(cmp[i] != 0)
            res[i] = std::tan(x[i]);
      }
    }
    return res;
}

#ifdef LDOUBLE_BINARY128
template<typename Abi>
ldoublev<Abi> tan(ldoublev<Abi> x)
{
  ldoublev<Abi> y[2];
  ldoublev<Abi> z = 0.0L, res;
  longv<Abi> n;
  longv<Abi> ix;
  doublev<Abi> xhi;

  /* High word of x. */
  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  ix = pf_xhi.i;

  /* |x| ~< pi/4 */
  ix &= 0x7fffffffffffffffLL;
  auto jd1 = change_simd_mask_type<long int, long double, Abi>(ix <= 0x3fe921fb54442d10LL);
  auto jd2 = change_simd_mask_type<long int, long double, Abi>(ix >= 0x7ff0000000000000LL);
  intv<Abi> one1 = 1;
  where(jd1, res) = llvm__kernel_tanl(x, z, one1);
  where((!jd1) & jd2, res) = x - x;

  auto jd3 =((!jd1) & (!jd2));
  n = static_simd_cast<longv<Abi>>(llvm__ieee754_rem_pio2l<Abi>(x, y, jd3));
  where((jd3), res) = llvm__kernel_tanl(y[0], y[1], static_simd_cast<intv<Abi>>(1 - ((n & 1) << 1)));
  return res;
}
#else
template<typename Abi> ldoublev<Abi> tan(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = tan(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template<class Abi>
floatv<Abi> tanh(floatv<Abi> x)
{
    Abi_32suf<Abi> src,x1_f32,sum;
    Abi_64suf<Abi> p1, p2, p3, p4;
    uintv<Abi> sign, odd;
    doublev<Abi> sum_f64, x1_f64;

    src.f = x;
    x1_f32.u = src.u&(unsigned int)0x7ff80000;
    x1_f32.i = x1_f32.i-(int)1022885888;
    where(x1_f32.i <= 0, odd) = s2v<unsigned int, uintv<Abi>>(0x00000000);
    where(x1_f32.i > 0, odd) = x1_f32.u;
    where(x1_f32.i > 69730304, odd) = s2v<unsigned int, uintv<Abi>>(0x04280000);
    odd = odd >> (unsigned int)0x11;

    sign = src.u&(unsigned int)MASKf_sign;
    x1_f32.u = src.u&(unsigned int)AbsMaskf;
    x1_f64 = static_simd_cast<doublev<Abi>>(x1_f32.f);

    for(unsigned int i = 0; i < odd.size(); ++i) {
      p1.u[i] = (__tanh_table_f32[odd[i]]);
      p2.u[i] = (__tanh_table_f32[odd[i]+1]);
      p3.u[i] = (__tanh_table_f32[odd[i]+2]);
      p4.u[i] = (__tanh_table_f32[odd[i]+3]);
    }

    sum_f64 = ((p4.f*x1_f64 + p3.f)*x1_f64+p2.f)*x1_f64+p1.f;
    sum.f = static_simd_cast<floatv<Abi>>(sum_f64);
    sum.u = sum.u^(sign);
    return sum.f;
}

template<class Abi>
doublev<Abi> tanh(doublev<Abi> x)
{
    Abi_64suf<Abi> src,x1,sum;
    Abi_32suf<Abi> src_h32;
    Abi_64suf<Abi> p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12;
    ulongv<Abi> sign;
    uintv<Abi> odd;

    src.f = x;
    x1.u = src.u&(unsigned long)AbsMask;
    sign = src.u&(unsigned long)MASK_sign;
    src_h32.u = static_simd_cast<uintv<Abi>>(src.u>>32);
    src_h32.u = src_h32.u&(unsigned int)0x7ffe0000;
    src_h32.u = src_h32.u-(unsigned int)0x3fbe0000;

    where(src_h32.i <= 0, odd) = s2v<unsigned int, uintv<Abi>>(0x00000000);
    where(src_h32.i > 0, odd) = src_h32.u;
    where(src_h32.i > (int)0x00760000, odd) = s2v<unsigned int, uintv<Abi>>(0x00760000);//x>69

    odd = odd>>0xd;
    odd += 1;

    for(unsigned int i = 0; i < odd.size(); ++i) {
      p1.u[i] = tanh_table_f64[odd[i]];
      p2.u[i] = tanh_table_f64[odd[i]+1];
      p3.u[i] = tanh_table_f64[odd[i]+2];
      p4.u[i] = tanh_table_f64[odd[i]+3];
      p5.u[i] = tanh_table_f64[odd[i]+4];
      p6.u[i] = tanh_table_f64[odd[i]+5];
      p7.u[i] = tanh_table_f64[odd[i]+6];
      p8.u[i] = tanh_table_f64[odd[i]+7];
      p9.u[i] = tanh_table_f64[odd[i]+8];
      p10.u[i] = tanh_table_f64[odd[i]+9];
      p11.u[i] = tanh_table_f64[odd[i]+10];
      p12.u[i] = tanh_table_f64[odd[i]+11];
    }

    x1.f = p12.f + x1.f;

    sum.f = ((((((((((p11.f*x1.f+p10.f)*x1.f+p9.f)
        *x1.f+p8.f)*x1.f+p7.f)*x1.f+p6.f)*x1.f+p5.f)
        *x1.f+p4.f)*x1.f+p3.f)*x1.f+p2.f)*x1.f+p1.f);

    sum.u = sum.u^sign;
    return sum.f;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> tanh(ldoublev<Abi> x)
{
  long double two = 2.0L,
              one = 1.0L,
              tiny = 1.0e-4900L;
  ldoublev<Abi> t, z, res;
  uintv<Abi> jx, ix;
  Abi_128suf<Abi> u;

  u.f = x;
  jx = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(u.u) >> 32);
  ix = jx & 0x7fffffff;

  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(ix >= 0x7fff0000);
  auto jd2 = change_simd_mask_type<uint32_t, long double, Abi>((jx & 0x80000000) != 0);
  where(jd1 & jd2, res) = one / x - one;
  where(jd1 & !jd2, res) = one / x + one;

  jd2 = change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x40044000);
  auto jd3 = change_simd_mask_type<uint32_t, long double, Abi>(ix >= 0x3fff0000);
  auto jd4 = (u.f == 0);
  auto jd5 = (change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x3fc60000));
  where(!jd1 & jd2 & jd4, res) = x;
  where(!jd1 & jd2 & !jd4 & jd5, res) = x * (one + tiny);
  where(!jd1 & jd2, u.u) = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(ix) << 96);

  where(!jd1 & jd2 & jd3, t) = expm1(two * u.f);
  where(!jd1 & jd2 & !jd3, t) = expm1(-two * u.f);
  where(!jd1 & jd2 & jd3, z) = one - two / (t + two);
  where(!jd1 & jd2 & !jd3, z) = -t / (t + two);
  where(!jd1 & !jd2, z) = one - tiny;
  jd1 = !jd1 & !(jd2 & (jd5 | jd4));
  
  jd3 = change_simd_mask_type<uint32_t, long double, Abi>((jx & 0x80000000) != 0);
  where(jd1 & jd3, res) = -z;
  where(jd1 & !jd3, res) = z;
  return res;
}
#else
template<class Abi> ldoublev<Abi> tanh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = tanh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template<class Abi>
floatv<Abi> atan(floatv<Abi> x) 
{    
    Abi_32suf<Abi> x1, sum;
    floatv<Abi> res; 

    unsigned int AbsMask_f32_la = AbsMaskf, SignMask_f32_la = MASKf_sign;
    float TAN3PI_8_f32_la = 2.414213562373095048801688724209,
    TANPI_8_f32_la = 0.414213562373095048801688724209,
    PI_2_f32_la = 1.5707963267948966192313216,
    PI_4_f32_la = 0.78539816339744830961566084581,
    P1_f32_la = 0.0849974826,
    P2_f32_la = -0.1399471462,
    P3_f32_la = 0.1998681277,
    P4_f32_la = -0.3333314657,
    Pid2_la = 0x1.921fb6p+0f;

    sum.f=0.0f; 
    x1.f = x; 
    uintv<Abi> sign = x1.u & SignMask_f32_la; 
    x1.u &= AbsMask_f32_la; 

    auto jd1 = change_simd_mask_type<uint32_t, float, Abi>(x1.u > 0x4e800000);
    auto jd2 = change_simd_mask_type<uint32_t, float, Abi>(x1.u > 0x7f800000);
    auto jd3 = change_simd_mask_type<uint32_t, float, Abi>(sign != 0);
    
    where(jd1 & jd3, res) = -s2v<float, floatv<Abi>>(Pid2_la);
    where(jd1 & !jd3, res) = s2v<float, floatv<Abi>>(Pid2_la);
    where(jd1 & jd2, res) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);

    where(x1.f > TANPI_8_f32_la, sum.f) = s2v<float, floatv<Abi>>(PI_4_f32_la); 
    where(x1.f > TANPI_8_f32_la, x1.f) = (x1.f-1)/(x1.f+1); 
    where(x1.f > TAN3PI_8_f32_la, sum.f) = s2v<float, floatv<Abi>>(PI_2_f32_la);  
    where(x1.f > TAN3PI_8_f32_la, x1.f) = -1/x1.f;

    floatv<Abi> x2 = x1.f * x1.f; 
    sum.f += x1.f + (((P1_f32_la *  x2 
         + P2_f32_la) * x2 
         + P3_f32_la) * x2 
         + P4_f32_la) * x2 * x1.f; 
    sum.u ^= sign; 
    where(!jd1, res) = sum.f;
    return res; 
} 

template<class Abi>
doublev<Abi> atan(doublev<Abi> x)
{   
    Abi_64suf<Abi> x1, sum;
    doublev<Abi> res;
    unsigned long AbsMask_f64_la = AbsMask, SignMask_f64_la = MASK_sign;
    double 
    TAN3PI_8_f64_la = 2.414213562373095048801688724209,
    TANPI_8_f64_la = 0.414213562373095048801688724209,
    PI_2_f64_la = 1.5707963267948966192313216,
    PI_4_f64_la = 0.78539816339744830961566084581,
    P1_f64_la = -0.8750608600031904122785,
    P2_f64_la = -16.15753718733365076637,
    P3_f64_la = -75.00855792314704667340,
    P4_f64_la = -122.8866684490136173410,
    P5_f64_la = -64.85021904942025371773,
    Q1_f64_la = 24.85846490142306297962,
    Q2_f64_la = 165.0270098316988542046,
    Q3_f64_la = 432.8810604912902668951,
    Q4_f64_la = 485.3903996359136964868,
    Q5_f64_la = 194.5506571482613964425,
    PiOver2 = 0x1.921fb54442d18p+0;

    sum.f = 0.0;
    x1.f = x;
    ulongv<Abi> sign = x1.u & SignMask_f64_la;
    x1.u &= AbsMask_f64_la;
    uintv<Abi> xu2;
    xu2 = static_simd_cast<uintv<Abi>>(x1.u >> 52);

    auto jd1 = change_simd_mask_type<uint32_t, double, Abi>(xu2 < 0x3e1);
    auto jd2 = change_simd_mask_type<uint32_t, double, Abi>(xu2 >= 0x434);
    auto jd3 = change_simd_mask_type<unsigned long int, double, Abi>(x1.u > 0x7ff0000000000000UL);
    auto jd4 = change_simd_mask_type<unsigned long int, double, Abi>(sign != 0);
    
    where((jd1|jd2) & jd4, res) = -s2v<double, doublev<Abi>>(PiOver2);
    where((jd1|jd2) & !jd4, res) = s2v<double, doublev<Abi>>(PiOver2);
    where((jd1|jd2) & !jd2 & jd3, res) = s2v<double, doublev<Abi>>(LLVM_NAN_64F);
    where((jd1|jd2) & jd1, res) = x;

    where(x1.f > TANPI_8_f64_la, sum.f) = s2v<double, doublev<Abi>>(PI_4_f64_la); 
    where(x1.f > TANPI_8_f64_la, x1.f) = (x1.f-1)/(x1.f+1); 
    where(x1.f > TAN3PI_8_f64_la, sum.f) = s2v<double, doublev<Abi>>(PI_2_f64_la);  
    where(x1.f > TAN3PI_8_f64_la, x1.f) = -1.0/x1.f;

    doublev<Abi> x2 = x1.f*x1.f;
    sum.f += x1.f;
    doublev<Abi> P = (((P1_f64_la*x2 + P2_f64_la)*x2 + P3_f64_la)*x2 + P4_f64_la)*x2 + P5_f64_la;
    doublev<Abi> Q = ((((x2 + Q1_f64_la)*x2 + Q2_f64_la)*x2 + Q3_f64_la)*x2 + Q4_f64_la)*x2 + Q5_f64_la;
    sum.f += x1.f * x2 * P / Q;
    sum.u ^= sign;
    where(!(jd1 | jd2), res) = sum.f;
    return res;
}

#ifdef LDOUBLE_BINARY128
long double atantbl[84] = {
        0.0000000000000000000000000000000000000000E0L,
        1.2435499454676143503135484916387102557317E-1L, /* arctan(0.125)  */
        2.4497866312686415417208248121127581091414E-1L,
        3.5877067027057222039592006392646049977698E-1L,
        4.6364760900080611621425623146121440202854E-1L,
        5.5859931534356243597150821640166127034645E-1L,
        6.4350110879328438680280922871732263804151E-1L,
        7.1882999962162450541701415152590465395142E-1L,
        7.8539816339744830961566084581987572104929E-1L,
        8.4415398611317100251784414827164750652594E-1L,
        8.9605538457134395617480071802993782702458E-1L,
        9.4200004037946366473793717053459358607166E-1L,
        9.8279372324732906798571061101466601449688E-1L,
        1.0191413442663497346383429170230636487744E0L,
        1.0516502125483736674598673120862998296302E0L,
        1.0808390005411683108871567292171998202703E0L,
        1.1071487177940905030170654601785370400700E0L,
        1.1309537439791604464709335155363278047493E0L,
        1.1525719972156675180401498626127513797495E0L,
        1.1722738811284763866005949441337046149712E0L,
        1.1902899496825317329277337748293183376012E0L,
        1.2068173702852525303955115800565576303133E0L,
        1.2220253232109896370417417439225704908830E0L,
        1.2360594894780819419094519711090786987027E0L,
        1.2490457723982544258299170772810901230778E0L,
        1.2610933822524404193139408812473357720101E0L,
        1.2722973952087173412961937498224804940684E0L,
        1.2827408797442707473628852511364955306249E0L,
        1.2924966677897852679030914214070816845853E0L,
        1.3016288340091961438047858503666855921414E0L,
        1.3101939350475556342564376891719053122733E0L,
        1.3182420510168370498593302023271362531155E0L,
        1.3258176636680324650592392104284756311844E0L,
        1.3329603993374458675538498697331558093700E0L,
        1.3397056595989995393283037525895557411039E0L,
        1.3460851583802539310489409282517796256512E0L,
        1.3521273809209546571891479413898128509842E0L,
        1.3578579772154994751124898859640585287459E0L,
        1.3633001003596939542892985278250991189943E0L,
        1.3684746984165928776366381936948529556191E0L,
        1.3734007669450158608612719264449611486510E0L,
        1.3780955681325110444536609641291551522494E0L,
        1.3825748214901258580599674177685685125566E0L,
        1.3868528702577214543289381097042486034883E0L,
        1.3909428270024183486427686943836432060856E0L,
        1.3948567013423687823948122092044222644895E0L,
        1.3986055122719575950126700816114282335732E0L,
        1.4021993871854670105330304794336492676944E0L,
        1.4056476493802697809521934019958079881002E0L,
        1.4089588955564736949699075250792569287156E0L,
        1.4121410646084952153676136718584891599630E0L,
        1.4152014988178669079462550975833894394929E0L,
        1.4181469983996314594038603039700989523716E0L,
        1.4209838702219992566633046424614466661176E0L,
        1.4237179714064941189018190466107297503086E0L,
        1.4263547484202526397918060597281265695725E0L,
        1.4288992721907326964184700745371983590908E0L,
        1.4313562697035588982240194668401779312122E0L,
        1.4337301524847089866404719096698873648610E0L,
        1.4360250423171655234964275337155008780675E0L,
        1.4382447944982225979614042479354815855386E0L,
        1.4403930189057632173997301031392126865694E0L,
        1.4424730991091018200252920599377292525125E0L,
        1.4444882097316563655148453598508037025938E0L,
        1.4464413322481351841999668424758804165254E0L,
        1.4483352693775551917970437843145232637695E0L,
        1.4501726582147939000905940595923466567576E0L,
        1.4519559822271314199339700039142990228105E0L,
        1.4536875822280323362423034480994649820285E0L,
        1.4553696664279718992423082296859928222270E0L,
        1.4570043196511885530074841089245667532358E0L,
        1.4585935117976422128825857356750737658039E0L,
        1.4601391056210009726721818194296893361233E0L,
        1.4616428638860188872060496086383008594310E0L,
        1.4631064559620759326975975316301202111560E0L,
        1.4645314639038178118428450961503371619177E0L,
        1.4659193880646627234129855241049975398470E0L,
        1.4672716522843522691530527207287398276197E0L,
        1.4685896086876430842559640450619880951144E0L,
        1.4698745421276027686510391411132998919794E0L,
        1.4711276743037345918528755717617308518553E0L,
        1.4723501675822635384916444186631899205983E0L,
        1.4735431285433308455179928682541563973416E0L, /* arctan(10.25) */
        1.5707963267948966192313216916397514420986E0L  /* pi/2 */
    };
template <class Abi>
ldoublev<Abi> atan(ldoublev<Abi> x)
{
  static const ldoublev<Abi>
      p0 = -4.283708356338736809269381409828726405572E1L,
      p1 = -8.636132499244548540964557273544599863825E1L,
      p2 = -5.713554848244551350855604111031839613216E1L,
      p3 = -1.371405711877433266573835355036413750118E1L,
      p4 = -8.638214309119210906997318946650189640184E-1L,
      q0 = 1.285112506901621042780814422948906537959E2L,
      q1 = 3.361907253914337187957855834229672347089E2L,
      q2 = 3.180448303864130128268191635189365331680E2L,
      q3 = 1.307244136980865800160844625025280344686E2L,
      q4 = 2.173623741810414221251136181221172551416E1L,
      table83 = atantbl[83];
  intv<Abi> k, sign, lx;
  ldoublev<Abi> t, u, p, q, res;
  doublev<Abi> xhi;

  xhi = static_simd_cast<doublev<Abi>>(x);
  Abi_64suf<Abi> pf_xhi;
  pf_xhi.f = xhi;
  k = static_simd_cast<intv<Abi>>(pf_xhi.u >> 32);
  lx = static_simd_cast<intv<Abi>>(pf_xhi.u & 0x0ffffffff);
  sign = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(k) & 0x80000000);

  /* Check for IEEE special cases.  */
  k &= 0x7fffffff;
  auto jd1 = change_simd_mask_type<int, long double, Abi>(k >= 0x7ff00000);
  auto jd2 = change_simd_mask_type<int, long double, Abi>(((k - 0x7ff00000) | lx) != 0);
  auto jd3 = change_simd_mask_type<int, long double, Abi>(sign != 0);
  where(jd1 & jd2, res) = (x + x);
  where(jd1 & jd3, res) = -table83;
  where(jd1 & !jd3, res) = table83;

  jd2 = change_simd_mask_type<int, long double, Abi>(k <= 0x3c800000);
  where(!jd1 & jd2 & (1e300L + x > 0.0), res) = x;

  auto jd4 = change_simd_mask_type<int, long double, Abi>(k >= 0x46c00000);
  where(!jd1 & !jd2 & jd4 & jd3, res) = -table83;
  where(!jd1 & !jd2 & jd4 & !jd3, res) = table83;

  where(jd3, x) = -x;
  auto jd5 = change_simd_mask_type<int, long double, Abi>(k >= 0x40248000); 
  where(jd5, k) = 83;
  where(!jd5, k) = static_simd_cast<intv<Abi>>(8.0 * x + 0.25);
  where(!jd5, u) = (0.125 * static_simd_cast<ldoublev<Abi>>(k));
  where(jd5, t) = -1.0 / x;
  where(!jd5, t) = (x - u) / (1.0 + x * u);

  /* Arctan of small argument t.  */
  u = t * t;
  p = ((((p4 * u) + p3) * u + p2) * u + p1) * u + p0;
  q = ((((u + q4) * u + q3) * u + q2) * u + q1) * u + q0;
  u = t * u * p / q + t;

  /* arctan x = arctan u  +  arctan t */
  for(size_t i = 0; i < k.size(); i++)
  {
    u[i] = atantbl[k[i]] + u[i];
  }
  
  where(!jd1 & !jd2 & !jd4 & jd3, res) = -u;
  where(!jd1 & !jd2 & !jd4 & !jd3, res) = u;
  return res;
}
#else
template <class Abi> ldoublev<Abi> atan(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = atan(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template<class Abi>
floatv<Abi> atanh(floatv<Abi> x)
{
    Abi_32suf<Abi> x1, x2, x3, x0, n, x4, src, sum, sign, temp, ux;
    floatv<Abi> ec, temp1, temp2, res;
    uintv<Abi> xsign;

    ux.f = x;
    xsign = ux.u & (~0x7fffffffU);
    ux.u = ux.u & 0x7fffffffU;
    auto jd1 = change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0x0);
    auto jd2 = change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0x3f800000U);
    auto jd3 = change_simd_mask_type<unsigned int, float, Abi>(ux.u > 0x3f800000U);
    auto jd4 = change_simd_mask_type<unsigned int, float, Abi>(xsign != 0);
    where(jd1, res) = x;
    where(!jd1 & jd2 & jd4, res) = -LLVM_INF_32F;
    where(!jd1 & jd2 & !jd4, res) = LLVM_INF_32F;
    where(!jd1 & !jd2 & jd3, res) = LLVM_NAN_32F;
    jd1 = !jd1 & !jd2 & !jd3;

    src.f = x;
    sign.u = src.u&(unsigned int)MASKf_sign;
    sign.u = sign.u^(unsigned int)HalfOnef_N;
    x1.u = src.u&(unsigned int)AbsMaskf;
    x2.f = (float)1.0 - x1.f;
    x3.f = (float)1.0 - x2.f;
    x0.f = x1.f + x1.f;
    x3.f=x3.f-x1.f;
    x1.f = 1/x2.f;

    x1.u = x1.u&(unsigned int)0xfffff000;
    x2.f = (float)1.0-x1.f*x2.f;
    x2.f = x2.f-x1.f*x3.f;
    x4.u = (unsigned int)0xfffff000&x0.u;
    x0.f = x0.f-x4.f;
    x4.f = x1.f*x4.f;
    x2.f = x2.f*x2.f+x2.f;

    x1.f = x1.f*x0.f;
    x1.f = x1.f + x1.f*x2.f;
    x1.f = x1.f + x4.f*x2.f;

    x3.f = x1.f+x4.f;
    x2.f = x4.f - x3.f;
    x4.f = x1.f + x2.f;

    where(x3.f>(float)1.0, temp1) = x3.f;
    where(x3.f<=(float)1.0, temp1) = (float)1.0;
    where(x3.f<(float)1.0, temp2) = x3.f;
    where(x3.f>=(float)1.0, temp2) = (float)1.0;                                                                         
    
    x1.f = temp1 + temp2;
    
    ec = temp1 - x1.f;
    ec = temp2 + ec;
    ec = x4.f + ec;

    x1.u = x1.u - (unsigned int)TwoThirdf;
    
    temp.u = x1.u >> (unsigned int)0x17;
    n.f = static_simd_cast<floatv<Abi>>(temp.u);
    temp.u = temp.u << (unsigned int)0x17;
    
    x1.u = x1.u&(unsigned int)MASKf_mant;
    x1.u = x1.u + (unsigned int)TwoThirdf;

    x2.u = (unsigned int)0x3f800000 - temp.u;
    temp.f = x1.f - (float)1.0;
    x1.f = x2.f*ec+temp.f;

    sum.f = (((((((x1.f*(float)0.138202384 
    - (float)0.151221797)*x1.f
    + (float)0.14042308)*x1.f 
    - (float)0.1647232622)*x1.f 
    + (float)0.200079203)*x1.f
    - (float)0.2500423789)*x1.f
    + (float)0.3333326578)*x1.f 
    - (float)0.5)*x1.f*x1.f + x1.f;

    sum.f = n.f*(float)0.693147182+sum.f;
    sum.f = sum.f*sign.f;
    where(jd1, res) = sum.f;
    return res;
}

template<class Abi>
doublev<Abi> atanh(doublev<Abi> x)
{
    Abi_64suf<Abi> ec, sign, src, _2x, _1div1_x, round_2x, c, ux,
    x1, n, _c, temp, odd, lnc, sum;
    doublev<Abi> _2r_c, r_c, _1_x, x1_1_1, x1_1_2, res;
    doublev<Abi> ec1, ec2, ec3;
    floatv<Abi> temp_f32;
    ulongv<Abi> xsign;

    ux.f = x;
    xsign = ux.u & (~0x7fffffffffffffffUL);
    ux.u = ux.u & 0x7fffffffffffffffUL;
    auto jd1 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x0);
    auto jd2 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x3ff0000000000000UL);
    auto jd3 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u > 0x3ff0000000000000UL);
    auto jd4 = change_simd_mask_type<unsigned long int, double, Abi>(xsign != 0);
    where(jd1, res) = x;
    where(!jd1 & jd2 & jd4, res) = -LLVM_INF_64F;
    where(!jd1 & jd2 & !jd4, res) = LLVM_INF_64F;
    where(!jd1 & !jd2 & jd3, res) = LLVM_NAN_64F;
    jd1 = !jd1 & !jd2 & !jd3;

    src.f = x;
    sign.u = (src.u&(unsigned long)MASK_sign)^(unsigned long)HalfOne_N;
    x1.u = src.u&(unsigned long)AbsMask;
    _2x.f = x1.f + x1.f;
    _1_x = 1.0 - x1.f;
    temp_f32 = static_simd_cast<floatv<Abi>>(_1_x);
    temp_f32 = (float)1.0/temp_f32;
    _1div1_x.f = static_simd_cast<doublev<Abi>>(temp_f32);

    ec1 = 1.0 - _1_x;
    ec1 = ec1 - x1.f;
    x1.u = _1div1_x.u&(unsigned long)0xfffffe0000000000;

    ec2 = 1.0 - _1_x*x1.f;
    ec2 = ec2 - x1.f*ec1;
    ec1 = ec2*ec2 + 1.0;
    ec3 = ec2*ec2 + ec2;
    ec3 = 1.0 + ec3*ec1;
    round_2x.u = _2x.u&(unsigned long)0xfffffffffffff000;

    ec1 = _2x.f - round_2x.f;
    ec.f = ec2*ec3;
    ec1 = ec1*x1.f;
    x1.f = round_2x.f*x1.f;
    ec1 = ec1 + ec1*ec.f;
    ec1 = ec1 + ec.f*x1.f;
    ec.u = (unsigned long)Top54Maskf|ec.u;
    x1.f = ec1 + x1.f;

    where(1.0>x1.f, x1_1_1) = 1.0;
    where(1.0<=x1.f, x1_1_1) = x1.f;
    where(1.0<x1.f, x1_1_2) = 1.0;
    where(1.0>=x1.f, x1_1_2) = x1.f;

    x1.f = 1.0 + x1.f;
    x1.u = x1.u&ec.u;
    c.u = (x1.u&(unsigned long)0x000fffffffffffff)|(unsigned long)0x3f50000000000000;
    
    temp_f32 = static_simd_cast<floatv<Abi>>(c.f);
    temp_f32 = (float)1.0/temp_f32;
    _c.f = static_simd_cast<doublev<Abi>>(temp_f32);
    _c.f = round(_c.f);
    odd.u = _c.u >> (unsigned long)0x28;
    for(unsigned int i = 0; i < odd.u.size(); i++)
      lnc.u[i] = atanh_table_f64_la[(odd.u[i]-(unsigned long)0x405fc0)>>3];
    n.u = x1.u >> 0x14;
    n.u = n.u>>32;
    n.f = static_simd_cast<doublev<Abi>>(n.u);

    where(_c.f > 724.0, temp.u) = (unsigned long)0x408ff80000000000;
    where(_c.f <= 724.0, temp.u) = (unsigned long)0x408ff00000000000;
    n.f = n.f - temp.f;
    temp.u = x1.u&MASK_exp;
    temp.u = (unsigned long)0x7f40000000000000 - temp.u;
    _c.f = _c.f * temp.f;
    r_c = x1.f*_c.f - 1.0;

    temp.f = x1_1_1 - x1.f;
    x1_1_2 = x1_1_2 + temp.f;
    r_c = r_c + x1_1_2*_c.f;
    _2r_c = r_c*r_c;

    sum.f = _2r_c*((r_c*ASCTH_P1 - ASCTH_P2)
    *_2r_c + ASCTH_P3*r_c - ASCTH_P4) + r_c;
    sum.f = lnc.f + sum.f;
    sum.f = n.f*ASCTH_P5 + sum.f;
    sum.f = sum.f*sign.f;
    where(jd1, res) = sum.f;
    return res;
}

#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> atanh(ldoublev<Abi> x)
{
  ldoublev<Abi> huge = 1e4900L, one_1 = 1.0L;
  ldoublev<Abi> zero = 0.0L;
  ldoublev<Abi> t, res;
  uintv<Abi> jx, ix;
  Abi_128suf<Abi> u;

  u.f = x;
  jx = static_simd_cast<uintv<Abi>>(u.u >> 96);
  ix = jx & 0x7fffffffU;
  u.u = ((u.u << 32) >> 32) | (static_simd_cast<uint128v<Abi>>(ix) << 96);

  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(ix >= 0x3fff0000);
  auto jd2 = (u.f == one_1);
  where(jd1 & jd2, res) = x / zero;
  where(jd1 & !jd2, res) = (x - x) / (x - x);

  jd2 = change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x3fc60000) && ((huge + x) > zero);
  where(!jd1 & jd2, res) = x;

  auto jd3 = change_simd_mask_type<uint32_t, long double, Abi>(ix < 0x3ffe0000);
  where(jd3, t) = u.f + u.f;
  where(jd3, t) = 0.5 * log1p(t + t * u.f / (one_1 - u.f));
  where(!jd3, t) = 0.5 * log1p((u.f +u.f) / (one_1 - u.f));
  jd3 = change_simd_mask_type<uint32_t, long double, Abi>((jx & 0x80000000) != 0);

  where(!jd1 & !jd2 & jd3, res) = -t;
  where(!jd1 & !jd2 & !jd3, res) = t;
  return res;
}
#else
template <class Abi> ldoublev<Abi> atanh(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = atanh(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template<class Abi>
floatv<Abi> log2(floatv<Abi> x){
  Abi_32suf<Abi> ux, uz;
  doublev<Abi> r, r2, p, y, y0, invc, logc;
  floatv<Abi> ans;
  uintv<Abi> u2ek;
  intv<Abi> k, i;

  int table_bits = 4;
  unsigned int OFFf = 0x3f330000;

  ux.f = x;
  u2ek = ux.u - OFFf;
  i = static_simd_cast<intv<Abi>>((u2ek >> (23 - table_bits)) & (unsigned int)0xf);
  uz.u = ux.u - (u2ek & (unsigned int)Top9Maskf);
  k = static_simd_cast<intv<Abi>>(u2ek) >> 23;

  for(unsigned int j = 0; j < i.size(); ++j)
  {
    invc[j] = __log2f_tab[i[j]][0];
    logc[j] = __log2f_tab[i[j]][1];
  }
  r = static_simd_cast<doublev<Abi>>(uz.f) * invc - 1.0;
  y0 = logc + static_simd_cast<doublev<Abi>>(k);

  r2 = r * r;
  y = __log2f_poly[1] * r + __log2f_poly[2];
  y = __log2f_poly[0] * r2 + y;
  p = __log2f_poly[3] * r + y0;

  ans = static_simd_cast<floatv<Abi>>(y * r2 + p);
  where(x <= 0, ans) = s2v<float, floatv<Abi>>(LLVM_NAN_32F);
  return ans;
}

template<class Abi>
doublev<Abi> log2(doublev<Abi> x){
   Abi_64suf<Abi> ux, uz;
  doublev<Abi> invc, logc, hi, lo, t1, t2, t3, t4, ans;
  doublev<Abi> r, r2, r4, p;
  ulongv<Abi> u2ek, xu16;
  longv<Abi> k, i;

  unsigned long OFFs = 0x3fe6000000000000;
  int LOG2_TABLE_BITS = 6;
  double InvLn2hi = 0x1.7154765200000p+0, InvLn2lo = 0x1.705fc2eefa200p-33;

  ux.f = x;

  Abi_64suf<Abi> utmp, uhi, ulo;
  doublev<Abi> rhi, rlo, y;
  ulo.f = 1.0 - 0x1.5b51p-5;
  uhi.f = 1.0 + 0x1.6ab2p-5;
  auto jd = simd_mask<double, Abi>(ux.u - ulo.u < uhi.u - ulo.u);

  if(any_of(jd)){
    r = x - 1.0;
    utmp.f = r;
    utmp.u = (utmp.u & -1ULL << 32);
    rhi = utmp.f;
    rlo = r - rhi;
    hi = rhi * InvLn2hi;
    lo = rlo * InvLn2hi + r * InvLn2lo;
    r2 = r * r;
    r4 = r2 * r2;
    p = r2 * (log2_special_poly[0] + r * log2_special_poly[1]);
    y = hi + p;
    lo += hi - y + p;
    lo += r4 * (log2_special_poly[2] + r * log2_special_poly[3] + r2 * (log2_special_poly[4] + r * log2_special_poly[5])
        + r4 * (log2_special_poly[6] + r * log2_special_poly[7] + r2 * (log2_special_poly[8] + r * log2_special_poly[9])));
    y += lo;
    where(jd, ans) = y;
  }

  if(any_of(!jd)){
    u2ek = ux.u - OFFs;
    i = static_simd_cast<longv<Abi>>(((u2ek) >> (52 - LOG2_TABLE_BITS)) & 0x3f);
    k = static_simd_cast<longv<Abi>>(u2ek) >> 52;
    uz.u = ux.u - (u2ek & 0xfffUL << 52);

    for(unsigned int j = 0; j < i.size(); j++)
    {
      invc[j] = __log2_tab[i[j]][0];
      logc[j] = __log2_tab[i[j]][1];
    }


    // r = uz.f * invc - 1.0;
    for (unsigned j = 0; j < invc.size(); ++j){
      r[j] = uz.f[j] * invc[j] - 1.0;
    }

    t1 = r * InvLn2hi;
    t2 = r * InvLn2hi - t1;
    t3 = r * InvLn2lo + t2;
    t4 = static_simd_cast<doublev<Abi>>(k) + logc;
    hi = t4 + t1;
    lo = t4 - hi + t1 + t3;

    r2 = r * r;
    r4 = r2 * r2;
    t1 = __log2_poly[0] + r * __log2_poly[1];
    t2 = __log2_poly[2] + r * __log2_poly[3];
    t3 = __log2_poly[4] + r * __log2_poly[5];

    p = t1 + r2 * (t2) + r4 * (t3);
    where(!jd, ans) = lo + r2 * p + hi;
  }

  xu16 = ux.u >> 48;
  jd = change_simd_mask_type<unsigned long int, double, Abi>(xu16 - 0x0010UL >= 0x7ff0UL - 0x0010UL);
  simd_mask<double, Abi> jd1 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u * 2 == 0);
  simd_mask<double, Abi> jd2 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x7ff0000000000000UL);
  simd_mask<double, Abi> jd3 = change_simd_mask_type<unsigned long int, double, Abi>(((xu16 & 0x8000) == 0x8000) || ((xu16 & 0x7ff0) == 0x7ff0));
  where(jd && jd1, ans) = LLVM_INF_64F;
  where(jd && jd2, ans) = x;
  where(jd && jd3, ans) = LLVM_NAN_64F;

  return ans;
}

#ifdef LDOUBLE_BINARY128
template<class Abi>
ldoublev<Abi> log2(ldoublev<Abi> x)
{
  const long double log2_R[6] =
  {
    1.418134209872192732479751274970992665513E5L,
  -8.977257995689735303686582344659576526998E4L,
    2.048819892795278657810231591630928516206E4L,
  -2.024301798136027039250415126250455056397E3L,
    8.057002716646055371965756206836056074715E1L,
  -8.828896441624934385266096344596648080902E-1L
  };
  const long double log2_S[6] =
  {
    1.701761051846631278975701529965589676574E6L,
  -1.332535117259762928288745111081235577029E6L,
    4.001557694070773974936904547424676279307E5L,
  -5.748542087379434595104154610899551484314E4L,
    3.998526750980007367835804959888064681098E3L,
  -1.186359407982897997337150403816839480438E2L
  /* 1.000000000000000000000000000000000000000E0L, */
  };

  /* log2 special value */
  const long double log2_P[13] =
  {
  1.313572404063446165910279910527789794488E4L,
  7.771154681358524243729929227226708890930E4L,
  2.014652742082537582487669938141683759923E5L,
  3.007007295140399532324943111654767187848E5L,
  2.854829159639697837788887080758954924001E5L,
  1.797628303815655343403735250238293741397E5L,
  7.594356839258970405033155585486712125861E4L,
  2.128857716871515081352991964243375186031E4L,
  3.824952356185897735160588078446136783779E3L,
  4.114517881637811823002128927449878962058E2L,
  2.321125933898420063925789532045674660756E1L,
  4.998469661968096229986658302195402690910E-1L,
  1.538612243596254322971797716843006400388E-6L
  };
  const long double log2_Q[12] =
  {
  3.940717212190338497730839731583397586124E4L,
  2.626900195321832660448791748036714883242E5L,
  7.777690340007566932935753241556479363645E5L,
  1.347518538384329112529391120390701166528E6L,
  1.514882452993549494932585972882995548426E6L,
  1.158019977462989115839826904108208787040E6L,
  6.132189329546557743179177159925690841200E5L,
  2.248234257620569139969141618556349415120E5L,
  5.605842085972455027590989944010492125825E4L,
  9.147150349299596453976674231612674085381E3L,
  9.104928120962988414618126155557301584078E2L,
  4.839208193348159620282142911143429644326E1L
  /* 1.000000000000000000000000000000000000000E0L, */
  };

const long double
      /* log2(e) - 1 */
      LOG2EA = 4.4269504088896340735992468100189213742664595E-1L,
      /* sqrt(2)/2 */
      SQRTH = 7.071067811865475244008443621048490392848359E-1L;

  ldoublev<Abi> z, y;
  ldoublev<Abi> res;
  intv<Abi> e;
  longv<Abi> hx, lx;
  Abi_128suf<Abi> u;

  /* Test for domain */
  u.f = x;
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(u.u));
  lx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_LO(u.u));

  auto jd1 = change_simd_mask_type<unsigned long, long double, Abi>(((hx & 0x7fffffffffffffffLL) | lx) == 0);
  auto jd2 = change_simd_mask_type<unsigned long, long double, Abi>(hx < 0);
  auto jd3 = change_simd_mask_type<unsigned long, long double, Abi>(hx >= 0x7fff000000000000LL);
  where(jd1, res) = (-1.0L / (x - x));
  where(!jd1 & jd2, res) = (x - x) / (x - x);
  where(!jd1 & !jd2 & jd3, res) = (x + x);
  jd1 = !jd1 & !jd2 & !jd3;

  /* separate mantissa from exponent */
  samesize<int, ldoublev<Abi>> tmpe;
  x = frexp(x, &tmpe);
  e = tmpe;

  jd2 = change_simd_mask_type<int, long double, Abi>((e > 2) || (e < -2));
  jd3 = (x < SQRTH);

  where(jd2 & !jd3, z) = x - 0.5L;
  where(jd2 & !jd3, z) -= 0.5L;
  where(jd2 & !jd3, y) = 0.5L * x + 0.5L;
  where(change_simd_mask_type<long double, int, Abi>(jd2 & jd3), e) = e - 1;
  where(jd2 & jd3, z) = x - 0.5L;
  where(jd2 & jd3, y) = 0.5L * z + 0.5L;
  where(jd2, x) = z / y;
  where(jd2, z) = x * x;
  where(jd2, y) = x * (z * neval(z, log2_R, 5) / deval(z, log2_S, 5));

  where(!jd2 & !jd3, x) = x - 1.0L;
  where(change_simd_mask_type<long double, int, Abi>(!jd2 & jd3), e) = e - 1;
  where(!jd2 & jd3, x) = 2.0 * x - 1.0L; 
  where(!jd2, z) = x * x;

  where(!jd2, y) = x * (z * neval(x, log2_P, 12) / deval(x, log2_Q, 11));
  where(!jd2, y) = y - 0.5 * z;

  z = y * LOG2EA;
  z += x * LOG2EA;
  z += y;
  z += x;
  z += static_simd_cast<ldoublev<Abi>>(e);
  where(jd1, res) = z;
  return res;
}
#else
template<typename Abi> ldoublev<Abi> log2(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = log2(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi>
floatv<Abi> exp2(floatv<Abi> x){
  floatv<Abi> res;
  Abi_32suf<Abi> ux32;
  Abi_64suf<Abi> ux, us;
  doublev<Abi> xd, nr0, p, q, y, r, r2;
  ulongv<Abi> idx;
  xd = static_simd_cast<doublev<Abi>>(x);
  ux.f = xd + ExpShift47;
  idx = ux.u & 0x1f;
  for (unsigned i = 0; i < ux.u.size(); ++i){
    us.u[i] = __exp2f_tab[idx[i]];
  }
  us.u += (ux.u << 47);

  nr0 = ux.f - ExpShift47;
  r = xd - nr0;
  r2 = r * r;

  double c1=0x1.c6af84b912394p-5,c2=0x1.ebfce50fac4f3p-3,c3=0x1.62e42ff0c52d6p-1;
  p = c1 * r + c2;
  q = c3 * r + 1.;
  y = p * r2 + q;
  y = y * us.f;
  res = static_simd_cast<floatv<Abi>>(y);
  ux32.f = x;
  uintv<Abi> axu12 = (ux32.u >> 20) & 0x7ffU;


  where(x>=128.f, res) = s2v<float, floatv<Abi>>(LLVM_INF_32F);
  where(x<=-150.f, res) = s2v<float, floatv<Abi>>(LLVM_FLT_MIN);
  where((axu12 >= 0x7ffU), res) =  x;
  where((ux32.u == 0xff800000U), res) = s2v<float, floatv<Abi>>(0.0f);
  return res;
}

template <class Abi>
doublev<Abi> exp2(doublev<Abi> x){
  Abi_64suf<Abi> ux, ut, us, utemp, utiny;
  ulongv<Abi> ridx, axu12;
  doublev<Abi> nr0, r, r2, r4, p, p1, p2, p3, y;

  ux.f = x + ExpShift45;
  ridx = 2 * (ux.u & ExponetBasef);
  for (unsigned i = 0; i < ux.u.size(); ++i){
    ut.u[i] = __exp2_tab[ridx[i]];
    us.u[i] = __exp2_tab[ridx[i] + 1];
  }

  us.u +=  ux.u << 45;
  nr0 = ux.f - ExpShift45;
  r = x - nr0;
  r2 = r * r;
  r4 = r2 * r2;

  double c1=Ln2, c2=0x1.ebfbdff82c424p-3, c3=0x1.c6b08d70cf4b5p-5,
    c4=0x1.3b2abd24650ccp-7, c5=0x1.5d7e09b4e3a84p-10;
  p1 = ut.f + r * c1;
  p2 = c2 + r * c3;
  p3 = c4 + r * c5;
  p = p1 + r2 * p2;
  p = p + r4 * p3;
  y = us.f + us.f * p;

  ux.f = x;
  axu12 = (ux.u >> 52) & 0x7ffUL;
  utemp.f = 512.0;
  utiny.f = 0x1p-54;
  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>((axu12-(utiny.u >> 52)) >= ((utemp.u>>52)-(utiny.u >> 52)));
  simd_mask<double, Abi> jd1 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 - (utiny.u >> 52) == 0x80000000UL);
  utemp.f = 1024.0;
  simd_mask<double, Abi> jd2 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 >= (utemp.u>>52));
  simd_mask<double, Abi> jd21 = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0xfff0000000000000);
  simd_mask<double, Abi> jd22 = change_simd_mask_type<unsigned long int, double, Abi>(axu12 >= 0x7ff);
  simd_mask<double, Abi> jd23 = x < 0.0;

  where(jd && jd1, y) = 1.0 + x;
  where(jd && (!jd1) && jd2 && jd21, y) = 0.0;
  where(jd && (!jd1) && jd2 && !jd21 && jd22, y) = x;
  where(jd && (!jd1) && jd2 && !(jd21 || jd22) && jd23, y) = LLVM_DBL_MIN;
  where(jd && (!jd1) && jd2 && !(jd21 || jd22 || jd23), y) = LLVM_INF_64F;

  return y;
}


static const long double exp2_tbl[] = {
	0x1.6a09e667f3bcc908b2fb1366dfeap-1L,
	0x1.6c012750bdabeed76a99800f4edep-1L,
	0x1.6dfb23c651a2ef220e2cbe1bc0d4p-1L,
	0x1.6ff7df9519483cf87e1b4f3e1e98p-1L,
	0x1.71f75e8ec5f73dd2370f2ef0b148p-1L,
	0x1.73f9a48a58173bd5c9a4e68ab074p-1L,
	0x1.75feb564267c8bf6e9aa33a489a8p-1L,
	0x1.780694fde5d3f619ae02808592a4p-1L,
	0x1.7a11473eb0186d7d51023f6ccb1ap-1L,
	0x1.7c1ed0130c1327c49334459378dep-1L,
	0x1.7e2f336cf4e62105d02ba1579756p-1L,
	0x1.80427543e1a11b60de67649a3842p-1L,
	0x1.82589994cce128acf88afab34928p-1L,
	0x1.8471a4623c7acce52f6b97c6444cp-1L,
	0x1.868d99b4492ec80e41d90ac2556ap-1L,
	0x1.88ac7d98a669966530bcdf2d4cc0p-1L,
	0x1.8ace5422aa0db5ba7c55a192c648p-1L,
	0x1.8cf3216b5448bef2aa1cd161c57ap-1L,
	0x1.8f1ae991577362b982745c72eddap-1L,
	0x1.9145b0b91ffc588a61b469f6b6a0p-1L,
	0x1.93737b0cdc5e4f4501c3f2540ae8p-1L,
	0x1.95a44cbc8520ee9b483695a0e7fep-1L,
	0x1.97d829fde4e4f8b9e920f91e8eb6p-1L,
	0x1.9a0f170ca07b9ba3109b8c467844p-1L,
	0x1.9c49182a3f0901c7c46b071f28dep-1L,
	0x1.9e86319e323231824ca78e64c462p-1L,
	0x1.a0c667b5de564b29ada8b8cabbacp-1L,
	0x1.a309bec4a2d3358c171f770db1f4p-1L,
	0x1.a5503b23e255c8b424491caf88ccp-1L,
	0x1.a799e1330b3586f2dfb2b158f31ep-1L,
	0x1.a9e6b5579fdbf43eb243bdff53a2p-1L,
	0x1.ac36bbfd3f379c0db966a3126988p-1L,
	0x1.ae89f995ad3ad5e8734d17731c80p-1L,
	0x1.b0e07298db66590842acdfc6fb4ep-1L,
	0x1.b33a2b84f15faf6bfd0e7bd941b0p-1L,
	0x1.b59728de559398e3881111648738p-1L,
	0x1.b7f76f2fb5e46eaa7b081ab53ff6p-1L,
	0x1.ba5b030a10649840cb3c6af5b74cp-1L,
	0x1.bcc1e904bc1d2247ba0f45b3d06cp-1L,
	0x1.bf2c25bd71e088408d7025190cd0p-1L,
	0x1.c199bdd85529c2220cb12a0916bap-1L,
	0x1.c40ab5fffd07a6d14df820f17deap-1L,
	0x1.c67f12e57d14b4a2137fd20f2a26p-1L,
	0x1.c8f6d9406e7b511acbc48805c3f6p-1L,
	0x1.cb720dcef90691503cbd1e949d0ap-1L,
	0x1.cdf0b555dc3f9c44f8958fac4f12p-1L,
	0x1.d072d4a07897b8d0f22f21a13792p-1L,
	0x1.d2f87080d89f18ade123989ea50ep-1L,
	0x1.d5818dcfba48725da05aeb66dff8p-1L,
	0x1.d80e316c98397bb84f9d048807a0p-1L,
	0x1.da9e603db3285708c01a5b6d480cp-1L,
	0x1.dd321f301b4604b695de3c0630c0p-1L,
	0x1.dfc97337b9b5eb968cac39ed284cp-1L,
	0x1.e264614f5a128a12761fa17adc74p-1L,
	0x1.e502ee78b3ff6273d130153992d0p-1L,
	0x1.e7a51fbc74c834b548b2832378a4p-1L,
	0x1.ea4afa2a490d9858f73a18f5dab4p-1L,
	0x1.ecf482d8e67f08db0312fb949d50p-1L,
	0x1.efa1bee615a27771fd21a92dabb6p-1L,
	0x1.f252b376bba974e8696fc3638f24p-1L,
	0x1.f50765b6e4540674f84b762861a6p-1L,
	0x1.f7bfdad9cbe138913b4bfe72bd78p-1L,
	0x1.fa7c1819e90d82e90a7e74b26360p-1L,
	0x1.fd3c22b8f71f10975ba4b32bd006p-1L,
	0x1.0000000000000000000000000000p+0L,
	0x1.0163da9fb33356d84a66ae336e98p+0L,
	0x1.02c9a3e778060ee6f7caca4f7a18p+0L,
	0x1.04315e86e7f84bd738f9a20da442p+0L,
	0x1.059b0d31585743ae7c548eb68c6ap+0L,
	0x1.0706b29ddf6ddc6dc403a9d87b1ep+0L,
	0x1.0874518759bc808c35f25d942856p+0L,
	0x1.09e3ecac6f3834521e060c584d5cp+0L,
	0x1.0b5586cf9890f6298b92b7184200p+0L,
	0x1.0cc922b7247f7407b705b893dbdep+0L,
	0x1.0e3ec32d3d1a2020742e4f8af794p+0L,
	0x1.0fb66affed31af232091dd8a169ep+0L,
	0x1.11301d0125b50a4ebbf1aed9321cp+0L,
	0x1.12abdc06c31cbfb92bad324d6f84p+0L,
	0x1.1429aaea92ddfb34101943b2588ep+0L,
	0x1.15a98c8a58e512480d573dd562aep+0L,
	0x1.172b83c7d517adcdf7c8c50eb162p+0L,
	0x1.18af9388c8de9bbbf70b9a3c269cp+0L,
	0x1.1a35beb6fcb753cb698f692d2038p+0L,
	0x1.1bbe084045cd39ab1e72b442810ep+0L,
	0x1.1d4873168b9aa7805b8028990be8p+0L,
	0x1.1ed5022fcd91cb8819ff61121fbep+0L,
	0x1.2063b88628cd63b8eeb0295093f6p+0L,
	0x1.21f49917ddc962552fd29294bc20p+0L,
	0x1.2387a6e75623866c1fadb1c159c0p+0L,
	0x1.251ce4fb2a63f3582ab7de9e9562p+0L,
	0x1.26b4565e27cdd257a673281d3068p+0L,
	0x1.284dfe1f5638096cf15cf03c9fa0p+0L,
	0x1.29e9df51fdee12c25d15f5a25022p+0L,
	0x1.2b87fd0dad98ffddea46538fca24p+0L,
	0x1.2d285a6e4030b40091d536d0733ep+0L,
	0x1.2ecafa93e2f5611ca0f45d5239a4p+0L,
	0x1.306fe0a31b7152de8d5a463063bep+0L,
	0x1.32170fc4cd8313539cf1c3009330p+0L,
	0x1.33c08b26416ff4c9c8610d96680ep+0L,
	0x1.356c55f929ff0c94623476373be4p+0L,
	0x1.371a7373aa9caa7145502f45452ap+0L,
	0x1.38cae6d05d86585a9cb0d9bed530p+0L,
	0x1.3a7db34e59ff6ea1bc9299e0a1fep+0L,
	0x1.3c32dc313a8e484001f228b58cf0p+0L,
	0x1.3dea64c12342235b41223e13d7eep+0L,
	0x1.3fa4504ac801ba0bf701aa417b9cp+0L,
	0x1.4160a21f72e29f84325b8f3dbacap+0L,
	0x1.431f5d950a896dc704439410b628p+0L,
	0x1.44e086061892d03136f409df0724p+0L,
	0x1.46a41ed1d005772512f459229f0ap+0L,
	0x1.486a2b5c13cd013c1a3b69062f26p+0L,
	0x1.4a32af0d7d3de672d8bcf46f99b4p+0L,
	0x1.4bfdad5362a271d4397afec42e36p+0L,
	0x1.4dcb299fddd0d63b36ef1a9e19dep+0L,
	0x1.4f9b2769d2ca6ad33d8b69aa0b8cp+0L,
	0x1.516daa2cf6641c112f52c84d6066p+0L,
	0x1.5342b569d4f81df0a83c49d86bf4p+0L,
	0x1.551a4ca5d920ec52ec620243540cp+0L,
	0x1.56f4736b527da66ecb004764e61ep+0L,
	0x1.58d12d497c7fd252bc2b7343d554p+0L,
	0x1.5ab07dd48542958c93015191e9a8p+0L,
	0x1.5c9268a5946b701c4b1b81697ed4p+0L,
	0x1.5e76f15ad21486e9be4c20399d12p+0L,
	0x1.605e1b976dc08b076f592a487066p+0L,
	0x1.6247eb03a5584b1f0fa06fd2d9eap+0L,
	0x1.6434634ccc31fc76f8714c4ee122p+0L,
	0x1.66238825522249127d9e29b92ea2p+0L,
	0x1.68155d44ca973081c57227b9f69ep+0L,
};


static const long double exp2_eps[] = {
	-0x1.5c50p-101,
	-0x1.5d00p-106,
	 0x1.8e90p-102,
	-0x1.5340p-103,
	 0x1.1bd0p-102,
	-0x1.4600p-105,
	-0x1.7a40p-104,
	 0x1.d590p-102,
	-0x1.d590p-101,
	 0x1.b100p-103,
	-0x1.0d80p-105,
	 0x1.6b00p-103,
	-0x1.9f00p-105,
	 0x1.c400p-103,
	 0x1.e120p-103,
	-0x1.c100p-104,
	-0x1.9d20p-103,
	 0x1.a800p-108,
	 0x1.4c00p-106,
	-0x1.9500p-106,
	 0x1.6900p-105,
	-0x1.29d0p-100,
	 0x1.4c60p-103,
	 0x1.13a0p-102,
	-0x1.5b60p-103,
	-0x1.1c40p-103,
	 0x1.db80p-102,
	 0x1.91a0p-102,
	 0x1.dc00p-105,
	 0x1.44c0p-104,
	 0x1.9710p-102,
	 0x1.8760p-103,
	-0x1.a720p-103,
	 0x1.ed20p-103,
	-0x1.49c0p-102,
	-0x1.e000p-111,
	 0x1.86a0p-103,
	 0x1.2b40p-103,
	-0x1.b400p-108,
	 0x1.1280p-99,
	-0x1.02d8p-102,
	-0x1.e3d0p-103,
	-0x1.b080p-105,
	-0x1.f100p-107,
	-0x1.16c0p-105,
	-0x1.1190p-103,
	-0x1.a7d2p-100,
	 0x1.3450p-103,
	-0x1.67c0p-105,
	 0x1.4b80p-104,
	-0x1.c4e0p-103,
	 0x1.6000p-108,
	-0x1.3f60p-105,
	 0x1.93f0p-104,
	 0x1.5fe0p-105,
	 0x1.6f80p-107,
	-0x1.7600p-106,
	 0x1.21e0p-106,
	-0x1.3a40p-106,
	-0x1.40c0p-104,
	-0x1.9860p-105,
	-0x1.5d40p-108,
	-0x1.1d70p-106,
	 0x1.2760p-105,
	 0x0.0000p+0,
	 0x1.21e2p-104,
	-0x1.9520p-108,
	-0x1.5720p-106,
	-0x1.4810p-106,
	-0x1.be00p-109,
	 0x1.0080p-105,
	-0x1.5780p-108,
	-0x1.d460p-105,
	-0x1.6140p-105,
	 0x1.4630p-104,
	 0x1.ad50p-103,
	 0x1.82e0p-105,
	 0x1.1d3cp-101,
	 0x1.6100p-107,
	 0x1.ec30p-104,
	 0x1.f200p-108,
	 0x1.0b40p-103,
	 0x1.3660p-102,
	 0x1.d9d0p-103,
	-0x1.02d0p-102,
	 0x1.b070p-103,
	 0x1.b9c0p-104,
	-0x1.01c0p-103,
	-0x1.dfe0p-103,
	 0x1.1b60p-104,
	-0x1.ae94p-101,
	-0x1.3340p-104,
	 0x1.b3d8p-102,
	-0x1.6e40p-105,
	-0x1.3670p-103,
	 0x1.c140p-104,
	 0x1.1840p-101,
	 0x1.1ab0p-102,
	-0x1.a400p-104,
	 0x1.1f00p-104,
	-0x1.7180p-103,
	 0x1.4ce0p-102,
	 0x1.9200p-107,
	-0x1.54c0p-103,
	 0x1.1b80p-105,
	-0x1.1828p-101,
	 0x1.5720p-102,
	-0x1.a060p-100,
	 0x1.9160p-102,
	 0x1.a280p-104,
	 0x1.3400p-107,
	 0x1.2b20p-102,
	 0x1.7800p-108,
	 0x1.cfd0p-101,
	 0x1.2ef0p-102,
	-0x1.2760p-99,
	 0x1.b380p-104,
	 0x1.0048p-101,
	-0x1.60b0p-102,
	 0x1.a1ccp-100,
	-0x1.a640p-104,
	-0x1.08a0p-101,
	 0x1.7e60p-102,
	 0x1.22c0p-103,
	-0x1.7200p-106,
	 0x1.f0f0p-102,
	 0x1.eb4ep-99,
	 0x1.c6e0p-103,
};

#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> exp2(ldoublev<Abi> x){

  uint32_t	TBLBITS	= 7;
  uint32_t	TBLSIZE	= (1 << TBLBITS);
  uint32_t	BIAS = (LDBL_MAX_EXP - 1);
  uint32_t	EXPMASK	= (BIAS + LDBL_MAX_EXP);

  long double twom10000 = 0x1p-10000L,
              huge = 0x1p10000L,
              P1 = 0x1.62e42fefa39ef35793c7673007e6p-1L,
              P2 = 0x1.ebfbdff82c58ea86f16b06ec9736p-3L,
              P3 = 0x1.c6b08d704a0bf8b33a762bad3459p-5L,
              P4 = 0x1.3b2ab6fba4e7729ccbbe0b4f3fc2p-7L,
              P5 = 0x1.5d87fe78a67311071dee13fd11d9p-10L,
              P6 = 0x1.430912f86c7876f4b663b23c5fe5p-13L,
              P7 = 0x1.ffcbfc588b041p-17,
              P8 = 0x1.62c0223a5c7c7p-20,
              P9 = 0x1.b52541ff59713p-24,
              P10 = 0x1.e4cf56a391e22p-28,
              redux = 0x1.8p112 / TBLSIZE;

  Abi_128suf<Abi> u, v;
  ldoublev<Abi> r, t, twopk, twopkp10000, z, res;
  uintv<Abi> hx, ix, i0;
  intv<Abi> k;

  u.f = x;

  /* Filter out exceptional cases. */
  hx = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_SE(u.u));
  ix = hx & EXPMASK;

  auto jd1 = change_simd_mask_type<uint32_t, long double, Abi>(ix >= BIAS + 14);
  auto jd2 = change_simd_mask_type<uint32_t, long double, Abi>(ix == BIAS + LDBL_MAX_EXP);
  auto jd3 = (isnan(x) | (isinf(x) & x > 0));
  where(jd1 & jd2 & jd3, res) = x + x;
  where(jd1 & jd2 & !jd3, res) = (0.0);
  where(jd1 & (x >= 16384), res) = (huge * huge); 
  where(jd1 & (x <= -16495), res) = (twom10000 * twom10000);
  auto jdmask = (jd1 & jd2 & jd3) | (jd1 & jd2 & !jd3) | (jd1 & (x >= 16384)) | (jd1 & (x <= -16495));
  
  jd2 = change_simd_mask_type<uint32_t, long double, Abi>(ix <= BIAS - 115);
  where(!jdmask & jd2, res) = (1.0 + x);
  jdmask = !jdmask & !jd2;


  u.f = x + redux;
  i0 = static_simd_cast<uintv<Abi>>((GET_LONGDOUBLE_LO(u.u) & 0xffffffff) + TBLSIZE / 2);
  k = (static_simd_cast<intv<Abi>>(i0) >> TBLBITS);
  i0 = i0 & (TBLSIZE - 1);
  u.f -= redux;
  z = x - u.f;
  v.u = (v.u >> 112) << 112;

  jd3 = change_simd_mask_type<int32_t, long double, Abi>((k >= LDBL_MIN_EXP));
  where(jd3, v.u) = (static_simd_cast<uint128v<Abi>>(LDBL_MAX_EXP - 1 + k) & 0xffffULL) << 112;
  where(!jd3, v.u) = (static_simd_cast<uint128v<Abi>>(LDBL_MAX_EXP - 1 + k + 10000) & 0xffffULL) << 112;
  twopk = v.f;
  twopkp10000 = v.f;

  for(size_t i = 0; i < x.size(); i++)
  {
    t[i] = exp2_tbl[i0[i]];  /* exp2t[i0] */
    z[i] -= exp2_eps[i0[i]]; /* eps[i0]   */
  }
  r = t + t * z * (P1 + z * (P2 + z * (P3 + z * (P4 + z * (P5 + z * (P6 + z * (P7 + z * (P8 + z * (P9 + z * P10)))))))));


  auto jd4 = change_simd_mask_type<int32_t, long double, Abi>((k == LDBL_MAX_EXP));
  where(jdmask & jd3 & jd4, res) = (r * 2.0 * 0x1p16383L);
  where(jdmask & jd3 & !jd4, res) = (r * twopk);
  where(jdmask & !jd3, res) = (r * twopkp10000 * twom10000);
  return res;
}
#else
template <class Abi> ldoublev<Abi> exp2(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = exp2(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi>
scharv<Abi> abs(scharv<Abi> j){
  where(j<0, j) = ~j + 0x1;
  return j;
}
template <class Abi> shortv<Abi> abs(shortv<Abi> j){
  where(j<0, j) = ~j + 0x1;
  return j;
}
template <class Abi> intv<Abi> abs(intv<Abi> j){
  where(j<0, j) = ~j + 0x1;
  return j;
}
template <class Abi> longv<Abi> abs(longv<Abi> j){
  where(j<0, j) = ~j + 0x1;
  return j;
}
template <class Abi> llongv<Abi> abs(llongv<Abi> j){
  where(j<0, j) = ~j + 0x1;
  return j;
}
template <class Abi> floatv<Abi> abs(floatv<Abi> j){
  Abi_32suf<Abi> ux;
  ux.f = j;
  ux.u = ux.u & (unsigned int)(AbsMaskf);
  return ux.f;
}
template <class Abi> doublev<Abi> abs(doublev<Abi> j){
  Abi_64suf<Abi> ux;
  ux.f = j;
  ux.u = ux.u & (AbsMask);
  return ux.f;
}

template <class Abi> ldoublev<Abi> abs(ldoublev<Abi> j){
  Abi_128suf<Abi> ux;
  ux.f = j;
  __uint128_t sign_mask = 0x1;
  sign_mask = ~(sign_mask << 127);
  ux.u = ux.u & sign_mask;
  return ux.f;
}

template <class V> struct simd_div_t { V quot, rem; };

template <class Abi>
simd_div_t<scharv<Abi>> div(scharv<Abi> numer, scharv<Abi> denom){
  simd_div_t<scharv<Abi>> d;
  d.quot = static_simd_cast<scharv<Abi>>(numer/denom);
  d.rem = numer - d.quot * denom;
  return d;
}
template <class Abi>
simd_div_t<shortv<Abi>> div(shortv<Abi> numer, shortv<Abi> denom){
  simd_div_t<shortv<Abi>> d;
  d.quot = static_simd_cast<shortv<Abi>>(numer/denom);
  d.rem = numer - d.quot * denom;
  return d;
}

template <class Abi>
simd_div_t<intv<Abi>> div(intv<Abi> numer, intv<Abi> denom){
  simd_div_t<intv<Abi>> d;
  d.quot = static_simd_cast<intv<Abi>>(numer/denom);
  d.rem = numer - d.quot * denom;
  return d;
}

template <class Abi>
simd_div_t<longv<Abi>> div(longv<Abi> numer, longv<Abi> denom){
  simd_div_t<longv<Abi>> d;
  d.quot = static_simd_cast<longv<Abi>>(numer/denom);
  d.rem = numer - d.quot * denom;
  return d;
}

template <class Abi>
simd_div_t<llongv<Abi>> div(llongv<Abi> numer, llongv<Abi> denom){
  simd_div_t<llongv<Abi>> d;
  d.quot = static_simd_cast<llongv<Abi>>(numer/denom);
  d.rem = numer - d.quot * denom;
  return d;
}

template <class Abi>
simd_mask<float, Abi> isinf(floatv<Abi> x){
  Abi_32suf<Abi> ux, uk;
  ux.f = x;
  uk.u = MASKf_exp;
  return ((ux.u & AbsMaskf) == uk.u);
}

template <class Abi>
simd_mask<double, Abi> isinf(doublev<Abi> x){
  Abi_64suf<Abi> ux, uk;
  ux.f = x;
  uk.u = MASK_exp;
  return ((ux.u & AbsMask) == uk.u);
}

template <class Abi>
simd_mask<long double, Abi> isinf(ldoublev<Abi> x){
  Abi_128suf<Abi> ux, uk;
  ux.f = x;
  uint128v<Abi> k = Bottom15Mask;
  k <<= 112;
  uint128v<Abi> _absmask = 0x1;
  uk.u = ~(_absmask<<127);
  return ((ux.u & Bottom15Mask) == uk.u);
}

template <class Abi>
simd_mask<float, Abi> isnan(floatv<Abi> x){
  return (x != x);
}

template <class Abi>
simd_mask<double, Abi> isnan(doublev<Abi> x){
  return (x != x);
}

template <class Abi>
simd_mask<long double, Abi> isnan(ldoublev<Abi> x){
  return (x != x);
}

template <class Abi>
simd_mask<float, Abi> isfinite(floatv<Abi> x){
  Abi_32suf<Abi> ux;
  ux.f = x;
  uintv<Abi> k = MASKf_exp;
  return static_simd_cast<floatv<Abi>>(ux.u & k) != static_simd_cast<floatv<Abi>>(k); 
}
template <class Abi>
simd_mask<double, Abi> isfinite(doublev<Abi> x){
  Abi_64suf<Abi> ux;
  ux.f = x;
  ulongv<Abi> k = MASK_exp;
  return static_simd_cast<doublev<Abi>>(ux.u & k) != static_simd_cast<doublev<Abi>>(k); 
}
template <class Abi>
simd_mask<long double, Abi> isfinite(ldoublev<Abi> x){
  Abi_128suf<Abi> ux;
  ux.f = x;
  uint128v<Abi> k = Bottom15Mask;
  k <<= 112;
  return static_simd_cast<ldoublev<Abi>>(ux.u & k) != static_simd_cast<ldoublev<Abi>>(k); 
}

template <class Abi>
simd_mask<float, Abi> isnormal(floatv<Abi> x){
  return (x!=0.f) && (isfinite(x));
}

template <class Abi>
simd_mask<double, Abi> isnormal(doublev<Abi> x){
  return (x!=0.) && (isfinite(x));
}

template <class Abi>
simd_mask<long double, Abi> isnormal(ldoublev<Abi> x){
  return (x!=0.) && (isfinite(x));
}

template <class Abi>
simd_mask<float, Abi> signbit(floatv<Abi> x)
{
  Abi_32suf<Abi> ux;
  ux.f = x;
  return simd_mask<float, Abi>((ux.u & 0x80000000) == 0x80000000);
}

template <class Abi>
simd_mask<double, Abi> signbit(doublev<Abi> x)
{
  Abi_64suf<Abi> ux;
  ux.f = x;
  return simd_mask<double, Abi>((ux.u & 0x8000000000000000UL) == 0x8000000000000000UL);
}

template <class Abi>
simd_mask<long double, Abi> signbit(ldoublev<Abi> x)
{
  Abi_128suf<Abi> ux;
  ux.f = x;
  return simd_mask<long double, Abi>((GET_LONGDOUBLE_HI(ux.u) & 0x8000000000000000UL) == 0x8000000000000000UL);
}

template <class Abi>
simd_mask<float, Abi> isgreater(floatv<Abi> x, floatv<Abi> y){
  return x > y;
}

template <class Abi>
simd_mask<double, Abi> isgreater(doublev<Abi> x, doublev<Abi> y){
  return x > y;
}

template <class Abi>
simd_mask<long double, Abi> isgreater(ldoublev<Abi> x, ldoublev<Abi> y){
  return x > y;
}

template <class Abi>
simd_mask<float, Abi> isgreaterequal(floatv<Abi> x, floatv<Abi> y){
    return x >= y;
}

template <class Abi>
simd_mask<double, Abi> isgreaterequal(doublev<Abi> x, doublev<Abi> y){
    return x >= y;
}

template <class Abi>
simd_mask<long double, Abi> isgreaterequal(ldoublev<Abi> x, ldoublev<Abi> y){
    return x >= y;
}

template <class Abi>
simd_mask<float, Abi> isless(floatv<Abi> x, floatv<Abi> y){
  floatv<Abi> jd = 0;
  where((x < y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi> simd_mask<double, Abi> isless(doublev<Abi> x, doublev<Abi> y){
  doublev<Abi> jd = 0;
  where((x < y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi> simd_mask<long double, Abi> isless(ldoublev<Abi> x, ldoublev<Abi> y){
  ldoublev<Abi> jd = 0;
  where((x < y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi> simd_mask<float, Abi> islessequal(floatv<Abi> x, floatv<Abi> y){
  floatv<Abi> jd = 0;
  where((x <= y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi>
simd_mask<double, Abi> islessequal(doublev<Abi> x, doublev<Abi> y){
  doublev<Abi> jd = 0;
  where((x <= y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi>
simd_mask<long double, Abi> islessequal(ldoublev<Abi> x, ldoublev<Abi> y){
  ldoublev<Abi> jd = 0;
  where((x <= y) && (!(isnan(x) || isnan(y))), jd) = 1;
  return jd==1;
}

template <class Abi> simd_mask<float, Abi> islessgreater(floatv<Abi> x, floatv<Abi> y){
  floatv<Abi> jd = 0;
  where((x < y) || (x > y), jd) = 1;
  return jd==1;
}

template <class Abi> simd_mask<double, Abi> islessgreater(doublev<Abi> x, doublev<Abi> y){
  doublev<Abi> jd = 0;
  where((x < y) || (x > y), jd) = 1;
  return jd==1;
}

template <class Abi>
simd_mask<long double, Abi> islessgreater(ldoublev<Abi> x, ldoublev<Abi> y){
  ldoublev<Abi> jd = 0;
  where((x < y) || (x > y), jd) = 1;
  return jd==1;
}


template <class Abi> 
floatv<Abi> trunc(floatv<Abi> x){
  intv<Abi> j0, i0, sx;
  Abi_32suf<Abi> pf_x;
  pf_x.f = x;
  i0 = static_simd_cast<intv<Abi>>(pf_x.u);
  sx = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(i0) & 0x80000000);
  j0 = ((i0 >> 23) & 0xff) - 0x7f;
  auto jd1 = change_simd_mask_type<int, float, Abi>(j0 < 23);
  auto jd2 = change_simd_mask_type<int, float, Abi>(j0 < 0);
  where(jd1 & jd2, pf_x.u) = static_simd_cast<uintv<Abi>>(sx);
  where(jd1 & !jd2, pf_x.u) = static_simd_cast<uintv<Abi>>(sx | (i0 & ~(0x007fffff >> j0)));
  where(jd1, x) = pf_x.f;

  where(!jd1 & change_simd_mask_type<int, float, Abi>(j0 == 0x80), x) = x + x;

  return x;
}

template <class Abi> 
doublev<Abi> trunc(doublev<Abi> x){
  intv<Abi> j0, i0, sx;
  uintv<Abi> i1;

  Abi_64suf<Abi> pf_x;
  pf_x.f = x;
  i0 = static_simd_cast<intv<Abi>>(pf_x.u >> 32);
  i1 = static_simd_cast<uintv<Abi>>((pf_x.u << 32) >> 32);
  sx = static_simd_cast<intv<Abi>>(static_simd_cast<uintv<Abi>>(i0) & 0x80000000);
  j0 = ((i0 >> 20) & 0x7ff) - 0x3ff;

  auto jd1 = change_simd_mask_type<int, double, Abi>(j0 < 20);
  auto jd2 = change_simd_mask_type<int, double, Abi>(j0 < 0);
  where(jd1 & jd2, pf_x.u) = ((pf_x.u << 32) >> 32) | (static_simd_cast<ulongv<Abi>>(sx) << 32);
  where(jd1, pf_x.u) = ((pf_x.u >> 32) << 32);
  where(jd1 & !jd2, pf_x.u) = ((pf_x.u << 32) >> 32) | ((static_simd_cast<ulongv<Abi>>(sx | (i0 & ~(0x000fffff >> j0)))) << 32);
  where(jd1, x) = pf_x.f;

  jd2 = change_simd_mask_type<int, double, Abi>(j0 > 51);
  where(jd2 & change_simd_mask_type<int, double, Abi>(j0 == 0x4000), x) = x + x;

  where(!jd1 & !jd2,  pf_x.u) =  ((pf_x.u << 32) >> 32) | (static_simd_cast<ulongv<Abi>>(i0) << 32);
  where(!jd1 & !jd2,  pf_x.u) = ((pf_x.u << 32) >> 32) | static_simd_cast<ulongv<Abi>>(i1 & ~(0xffffffffu  >> static_simd_cast<uintv<Abi>>(j0 - 20)));
  where(!jd1 & !jd2,  x) = pf_x.f;

  return x;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> trunc(ldoublev<Abi> x){
  intv<Abi> j0;
  ulongv<Abi> i0, i1, sx;

  Abi_128suf<Abi> pf_x;
  pf_x.f = x;
  i0 = GET_LONGDOUBLE_HI(pf_x.u);
  i1 = GET_LONGDOUBLE_LO(pf_x.u);
  sx = i0 & 0x8000000000000000ULL;
  j0 = static_simd_cast<intv<Abi>>(((i0 >> 48) & 0x7fff) - 0x3fff);

  auto jd1 = change_simd_mask_type<unsigned long, long double, Abi>(j0 < 48);
  auto jd2 = change_simd_mask_type<unsigned long, long double, Abi>(j0 < 0);
  where(jd1 & jd2, pf_x.f) = SET_LONGDOUBLE_HI(pf_x.f, sx);
  where(jd1, pf_x.f) = SET_LONGDOUBLE_LO(pf_x.f, s2v<unsigned long, ulongv<Abi>>(0));
  where(jd1 & !jd2, pf_x.f) = SET_LONGDOUBLE_HI(pf_x.f, (i0 & static_simd_cast<ulongv<Abi>>(~(0x0000ffffffffffffLL >> static_simd_cast<longv<Abi>>(j0)))));
  where(jd1, x) = pf_x.f;

  jd2 = change_simd_mask_type<unsigned long, long double, Abi>(j0 > 111);
  where(jd2 & change_simd_mask_type<unsigned long, long double, Abi>(j0 == 0x4000), x) = x + x;

  where(!jd1 & !jd2,  pf_x.f) = SET_LONGDOUBLE_HI(pf_x.f, i0);
  where(!jd1 & !jd2,  pf_x.f) = SET_LONGDOUBLE_LO(pf_x.f, (i1 & ~(0xffffffffffffffffULL >> static_simd_cast<ulongv<Abi>>(j0 - 48))));
  where(!jd1 & !jd2,  x) = pf_x.f;

  return x;
}
#else
template <class Abi> ldoublev<Abi> trunc(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  res = trunc(src1);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif


template <class Abi> floatv<Abi> copysign(floatv<Abi> x, floatv<Abi> y){
  Abi_32suf<Abi> ux, uy;
  ux.f = x;
  uy.f = y;
  ux.u = (ux.u & AbsMaskf) | (uy.u & ~AbsMaskf);
  return ux.f;
}

template <class Abi> doublev<Abi> copysign(doublev<Abi> x, doublev<Abi> y){
  Abi_64suf<Abi> ux, uy;
  ux.f = x;
  uy.f = y;
  ux.u = (ux.u & AbsMask) | (uy.u & ~AbsMask);
  return ux.f;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> copysign(ldoublev<Abi> x, ldoublev<Abi> y)
{
  Abi_128suf<Abi> ux, uy;
  ulongv<Abi> ux_lo, ux_hi, uy_hi;
  ux.f = x;
  uy.f = y;
  ux_lo = GET_LONGDOUBLE_LO(ux.u);
  ux_hi = GET_LONGDOUBLE_HI(ux.u) & 0x7fffffffffffffffUL;
  uy_hi = GET_LONGDOUBLE_HI(uy.u) & 0x8000000000000000UL;
  ux.u = static_simd_cast<uint128v<Abi>>(ux_hi | uy_hi) << 64 | static_simd_cast<uint128v<Abi>>(ux_lo);
  return ux.f;
}
#else
template <class Abi> ldoublev<Abi> copysign(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = copysign(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

#define CBRT2 1.2599210498948731648		/* 2^(1/3) */
#define SQR_CBRT2 1.5874010519681994748		/* 2^(2/3) */

static const double cbrt_factor[5] =
{
  1.0 / SQR_CBRT2,
  1.0 / CBRT2,
  1.0,
  CBRT2,
  SQR_CBRT2
};

#define	LLVM_BIAS (LDBL_MAX_EXP - 1)

typedef struct
{
	struct
	{
		float erf, scale;
	} tab[513];
}erff_data;

typedef struct 
{
	struct
	{
		double erf, scale;
	} tab[769];
}erf_data;

const erff_data __erff_data = {
	.tab = {
		{0x0.000000p+0, 0x1.20dd76p+0},
		{0x1.20dbf4p-7, 0x1.20d8f2p+0},
		{0x1.20d770p-6, 0x1.20cb68p+0},
		{0x1.b137e0p-6, 0x1.20b4d8p+0},
		{0x1.20c564p-5, 0x1.209546p+0},
		{0x1.68e5d4p-5, 0x1.206cb4p+0},
		{0x1.b0fafep-5, 0x1.203b26p+0},
		{0x1.f902a8p-5, 0x1.2000a0p+0},
		{0x1.207d48p-4, 0x1.1fbd28p+0},
		{0x1.44703ep-4, 0x1.1f70c4p+0},
		{0x1.68591ap-4, 0x1.1f1b7ap+0},
		{0x1.8c36bep-4, 0x1.1ebd56p+0},
		{0x1.b00812p-4, 0x1.1e565cp+0},
		{0x1.d3cbf8p-4, 0x1.1de698p+0},
		{0x1.f7815ap-4, 0x1.1d6e14p+0},
		{0x1.0d9390p-3, 0x1.1cecdcp+0},
		{0x1.1f5e1ap-3, 0x1.1c62fap+0},
		{0x1.311fc2p-3, 0x1.1bd07cp+0},
		{0x1.42d7fcp-3, 0x1.1b3572p+0},
		{0x1.548642p-3, 0x1.1a91e6p+0},
		{0x1.662a0cp-3, 0x1.19e5eap+0},
		{0x1.77c2d2p-3, 0x1.19318cp+0},
		{0x1.895010p-3, 0x1.1874dep+0},
		{0x1.9ad142p-3, 0x1.17aff0p+0},
		{0x1.ac45e4p-3, 0x1.16e2d8p+0},
		{0x1.bdad72p-3, 0x1.160da4p+0},
		{0x1.cf076ep-3, 0x1.153068p+0},
		{0x1.e05354p-3, 0x1.144b3cp+0},
		{0x1.f190aap-3, 0x1.135e30p+0},
		{0x1.015f78p-2, 0x1.12695ep+0},
		{0x1.09eed6p-2, 0x1.116cd8p+0},
		{0x1.127632p-2, 0x1.1068bap+0},
		{0x1.1af54ep-2, 0x1.0f5d16p+0},
		{0x1.236bf0p-2, 0x1.0e4a08p+0},
		{0x1.2bd9dcp-2, 0x1.0d2fa6p+0},
		{0x1.343ed6p-2, 0x1.0c0e0ap+0},
		{0x1.3c9aa8p-2, 0x1.0ae550p+0},
		{0x1.44ed18p-2, 0x1.09b590p+0},
		{0x1.4d35f0p-2, 0x1.087ee4p+0},
		{0x1.5574f4p-2, 0x1.07416cp+0},
		{0x1.5da9f4p-2, 0x1.05fd3ep+0},
		{0x1.65d4b8p-2, 0x1.04b27cp+0},
		{0x1.6df50ap-2, 0x1.036140p+0},
		{0x1.760abap-2, 0x1.0209a6p+0},
		{0x1.7e1594p-2, 0x1.00abd0p+0},
		{0x1.861566p-2, 0x1.fe8fb0p-1},
		{0x1.8e0a02p-2, 0x1.fbbbbep-1},
		{0x1.95f336p-2, 0x1.f8dc0ap-1},
		{0x1.9dd0d2p-2, 0x1.f5f0cep-1},
		{0x1.a5a2acp-2, 0x1.f2fa4cp-1},
		{0x1.ad6896p-2, 0x1.eff8c4p-1},
		{0x1.b52264p-2, 0x1.ecec78p-1},
		{0x1.bccfecp-2, 0x1.e9d5a8p-1},
		{0x1.c47104p-2, 0x1.e6b498p-1},
		{0x1.cc0584p-2, 0x1.e38988p-1},
		{0x1.d38d44p-2, 0x1.e054bep-1},
		{0x1.db081cp-2, 0x1.dd167cp-1},
		{0x1.e275eap-2, 0x1.d9cf06p-1},
		{0x1.e9d68ap-2, 0x1.d67ea2p-1},
		{0x1.f129d4p-2, 0x1.d32592p-1},
		{0x1.f86faap-2, 0x1.cfc41ep-1},
		{0x1.ffa7eap-2, 0x1.cc5a8ap-1},
		{0x1.03693ap-1, 0x1.c8e91cp-1},
		{0x1.06f794p-1, 0x1.c5701ap-1},
		{0x1.0a7ef6p-1, 0x1.c1efcap-1},
		{0x1.0dff50p-1, 0x1.be6872p-1},
		{0x1.117894p-1, 0x1.bada5ap-1},
		{0x1.14eab4p-1, 0x1.b745c6p-1},
		{0x1.1855a6p-1, 0x1.b3aafcp-1},
		{0x1.1bb95cp-1, 0x1.b00a46p-1},
		{0x1.1f15ccp-1, 0x1.ac63e8p-1},
		{0x1.226ae8p-1, 0x1.a8b828p-1},
		{0x1.25b8a8p-1, 0x1.a5074ep-1},
		{0x1.28ff02p-1, 0x1.a1519ep-1},
		{0x1.2c3decp-1, 0x1.9d9762p-1},
		{0x1.2f755cp-1, 0x1.99d8dap-1},
		{0x1.32a54cp-1, 0x1.961650p-1},
		{0x1.35cdb4p-1, 0x1.925008p-1},
		{0x1.38ee8ap-1, 0x1.8e8646p-1},
		{0x1.3c07cap-1, 0x1.8ab950p-1},
		{0x1.3f196ep-1, 0x1.86e96ap-1},
		{0x1.42236ep-1, 0x1.8316d6p-1},
		{0x1.4525c8p-1, 0x1.7f41dcp-1},
		{0x1.482074p-1, 0x1.7b6abcp-1},
		{0x1.4b1372p-1, 0x1.7791b8p-1},
		{0x1.4dfebap-1, 0x1.73b714p-1},
		{0x1.50e24cp-1, 0x1.6fdb12p-1},
		{0x1.53be26p-1, 0x1.6bfdf0p-1},
		{0x1.569244p-1, 0x1.681ff2p-1},
		{0x1.595ea6p-1, 0x1.644156p-1},
		{0x1.5c2348p-1, 0x1.60625cp-1},
		{0x1.5ee02ep-1, 0x1.5c8342p-1},
		{0x1.619556p-1, 0x1.58a446p-1},
		{0x1.6442c0p-1, 0x1.54c5a6p-1},
		{0x1.66e86ep-1, 0x1.50e79ep-1},
		{0x1.69865ep-1, 0x1.4d0a68p-1},
		{0x1.6c1c98p-1, 0x1.492e42p-1},
		{0x1.6eab18p-1, 0x1.455366p-1},
		{0x1.7131e6p-1, 0x1.417a0cp-1},
		{0x1.73b102p-1, 0x1.3da26ep-1},
		{0x1.762870p-1, 0x1.39ccc2p-1},
		{0x1.789836p-1, 0x1.35f940p-1},
		{0x1.7b0058p-1, 0x1.32281ep-1},
		{0x1.7d60d8p-1, 0x1.2e5992p-1},
		{0x1.7fb9c0p-1, 0x1.2a8dcep-1},
		{0x1.820b12p-1, 0x1.26c508p-1},
		{0x1.8454d6p-1, 0x1.22ff72p-1},
		{0x1.869712p-1, 0x1.1f3d3cp-1},
		{0x1.88d1cep-1, 0x1.1b7e98p-1},
		{0x1.8b050ep-1, 0x1.17c3b6p-1},
		{0x1.8d30dep-1, 0x1.140cc4p-1},
		{0x1.8f5544p-1, 0x1.1059eep-1},
		{0x1.91724ap-1, 0x1.0cab62p-1},
		{0x1.9387f6p-1, 0x1.09014cp-1},
		{0x1.959652p-1, 0x1.055bd6p-1},
		{0x1.979d68p-1, 0x1.01bb2cp-1},
		{0x1.999d42p-1, 0x1.fc3ee6p-2},
		{0x1.9b95e8p-1, 0x1.f511aap-2},
		{0x1.9d8768p-1, 0x1.edeeeep-2},
		{0x1.9f71cap-1, 0x1.e6d700p-2},
		{0x1.a1551ap-1, 0x1.dfca26p-2},
		{0x1.a33162p-1, 0x1.d8c8aap-2},
		{0x1.a506b0p-1, 0x1.d1d2d0p-2},
		{0x1.a6d50cp-1, 0x1.cae8dap-2},
		{0x1.a89c86p-1, 0x1.c40b08p-2},
		{0x1.aa5d26p-1, 0x1.bd3998p-2},
		{0x1.ac16fcp-1, 0x1.b674c8p-2},
		{0x1.adca14p-1, 0x1.afbcd4p-2},
		{0x1.af767ap-1, 0x1.a911f0p-2},
		{0x1.b11c3cp-1, 0x1.a27456p-2},
		{0x1.b2bb68p-1, 0x1.9be438p-2},
		{0x1.b4540ap-1, 0x1.9561c8p-2},
		{0x1.b5e630p-1, 0x1.8eed36p-2},
		{0x1.b771e8p-1, 0x1.8886b2p-2},
		{0x1.b8f742p-1, 0x1.822e66p-2},
		{0x1.ba764ap-1, 0x1.7be47ap-2},
		{0x1.bbef10p-1, 0x1.75a91ap-2},
		{0x1.bd61a2p-1, 0x1.6f7c6ap-2},
		{0x1.bece0ep-1, 0x1.695e8cp-2},
		{0x1.c03464p-1, 0x1.634fa6p-2},
		{0x1.c194b2p-1, 0x1.5d4fd4p-2},
		{0x1.c2ef08p-1, 0x1.575f34p-2},
		{0x1.c44376p-1, 0x1.517de6p-2},
		{0x1.c5920ap-1, 0x1.4bac00p-2},
		{0x1.c6dad2p-1, 0x1.45e99cp-2},
		{0x1.c81de2p-1, 0x1.4036d0p-2},
		{0x1.c95b46p-1, 0x1.3a93b2p-2},
		{0x1.ca930ep-1, 0x1.350052p-2},
		{0x1.cbc54cp-1, 0x1.2f7cc4p-2},
		{0x1.ccf20cp-1, 0x1.2a0916p-2},
		{0x1.ce1962p-1, 0x1.24a554p-2},
		{0x1.cf3b5cp-1, 0x1.1f518ap-2},
		{0x1.d0580cp-1, 0x1.1a0dc6p-2},
		{0x1.d16f7ep-1, 0x1.14da0ap-2},
		{0x1.d281c4p-1, 0x1.0fb662p-2},
		{0x1.d38ef0p-1, 0x1.0aa2d0p-2},
		{0x1.d49710p-1, 0x1.059f5ap-2},
		{0x1.d59a34p-1, 0x1.00ac00p-2},
		{0x1.d6986cp-1, 0x1.f79184p-3},
		{0x1.d791cap-1, 0x1.edeb40p-3},
		{0x1.d8865ep-1, 0x1.e46530p-3},
		{0x1.d97636p-1, 0x1.daff4ap-3},
		{0x1.da6162p-1, 0x1.d1b982p-3},
		{0x1.db47f4p-1, 0x1.c893cep-3},
		{0x1.dc29fcp-1, 0x1.bf8e1cp-3},
		{0x1.dd0788p-1, 0x1.b6a856p-3},
		{0x1.dde0aap-1, 0x1.ade26cp-3},
		{0x1.deb570p-1, 0x1.a53c42p-3},
		{0x1.df85eap-1, 0x1.9cb5bep-3},
		{0x1.e0522ap-1, 0x1.944ec2p-3},
		{0x1.e11a3ep-1, 0x1.8c0732p-3},
		{0x1.e1de36p-1, 0x1.83deeap-3},
		{0x1.e29e22p-1, 0x1.7bd5c8p-3},
		{0x1.e35a12p-1, 0x1.73eba4p-3},
		{0x1.e41214p-1, 0x1.6c2056p-3},
		{0x1.e4c638p-1, 0x1.6473b6p-3},
		{0x1.e5768cp-1, 0x1.5ce596p-3},
		{0x1.e62322p-1, 0x1.5575c8p-3},
		{0x1.e6cc08p-1, 0x1.4e241ep-3},
		{0x1.e7714ap-1, 0x1.46f066p-3},
		{0x1.e812fcp-1, 0x1.3fda6cp-3},
		{0x1.e8b12ap-1, 0x1.38e1fap-3},
		{0x1.e94be4p-1, 0x1.3206dcp-3},
		{0x1.e9e336p-1, 0x1.2b48dap-3},
		{0x1.ea7730p-1, 0x1.24a7b8p-3},
		{0x1.eb07e2p-1, 0x1.1e233ep-3},
		{0x1.eb9558p-1, 0x1.17bb2cp-3},
		{0x1.ec1fa2p-1, 0x1.116f48p-3},
		{0x1.eca6ccp-1, 0x1.0b3f52p-3},
		{0x1.ed2ae6p-1, 0x1.052b0cp-3},
		{0x1.edabfcp-1, 0x1.fe6460p-4},
		{0x1.ee2a1ep-1, 0x1.f2a902p-4},
		{0x1.eea556p-1, 0x1.e72372p-4},
		{0x1.ef1db4p-1, 0x1.dbd32ap-4},
		{0x1.ef9344p-1, 0x1.d0b7a0p-4},
		{0x1.f00614p-1, 0x1.c5d04ap-4},
		{0x1.f07630p-1, 0x1.bb1c98p-4},
		{0x1.f0e3a6p-1, 0x1.b09bfcp-4},
		{0x1.f14e82p-1, 0x1.a64de6p-4},
		{0x1.f1b6d0p-1, 0x1.9c31c6p-4},
		{0x1.f21ca0p-1, 0x1.92470ap-4},
		{0x1.f27ff8p-1, 0x1.888d1ep-4},
		{0x1.f2e0eap-1, 0x1.7f036cp-4},
		{0x1.f33f7ep-1, 0x1.75a960p-4},
		{0x1.f39bc2p-1, 0x1.6c7e64p-4},
		{0x1.f3f5c2p-1, 0x1.6381e2p-4},
		{0x1.f44d88p-1, 0x1.5ab342p-4},
		{0x1.f4a31ep-1, 0x1.5211ecp-4},
		{0x1.f4f694p-1, 0x1.499d48p-4},
		{0x1.f547f2p-1, 0x1.4154bcp-4},
		{0x1.f59742p-1, 0x1.3937b2p-4},
		{0x1.f5e490p-1, 0x1.31458ep-4},
		{0x1.f62fe8p-1, 0x1.297dbap-4},
		{0x1.f67952p-1, 0x1.21df9ap-4},
		{0x1.f6c0dcp-1, 0x1.1a6a96p-4},
		{0x1.f7068cp-1, 0x1.131e14p-4},
		{0x1.f74a6ep-1, 0x1.0bf97ep-4},
		{0x1.f78c8cp-1, 0x1.04fc3ap-4},
		{0x1.f7cceep-1, 0x1.fc4b5ep-5},
		{0x1.f80ba2p-1, 0x1.eeea8cp-5},
		{0x1.f848acp-1, 0x1.e1d4d0p-5},
		{0x1.f8841ap-1, 0x1.d508fap-5},
		{0x1.f8bdf2p-1, 0x1.c885e0p-5},
		{0x1.f8f63ep-1, 0x1.bc4a54p-5},
		{0x1.f92d08p-1, 0x1.b05530p-5},
		{0x1.f96256p-1, 0x1.a4a54ap-5},
		{0x1.f99634p-1, 0x1.99397ap-5},
		{0x1.f9c8a8p-1, 0x1.8e109cp-5},
		{0x1.f9f9bap-1, 0x1.83298ep-5},
		{0x1.fa2974p-1, 0x1.78832cp-5},
		{0x1.fa57dep-1, 0x1.6e1c58p-5},
		{0x1.fa84fep-1, 0x1.63f3f6p-5},
		{0x1.fab0dep-1, 0x1.5a08e8p-5},
		{0x1.fadb84p-1, 0x1.505a18p-5},
		{0x1.fb04f6p-1, 0x1.46e66cp-5},
		{0x1.fb2d40p-1, 0x1.3dacd2p-5},
		{0x1.fb5464p-1, 0x1.34ac36p-5},
		{0x1.fb7a6cp-1, 0x1.2be38cp-5},
		{0x1.fb9f60p-1, 0x1.2351c2p-5},
		{0x1.fbc344p-1, 0x1.1af5d2p-5},
		{0x1.fbe61ep-1, 0x1.12ceb4p-5},
		{0x1.fc07fap-1, 0x1.0adb60p-5},
		{0x1.fc28d8p-1, 0x1.031ad6p-5},
		{0x1.fc48c2p-1, 0x1.f7182ap-6},
		{0x1.fc67bcp-1, 0x1.e85c44p-6},
		{0x1.fc85d0p-1, 0x1.da0006p-6},
		{0x1.fca2fep-1, 0x1.cc0180p-6},
		{0x1.fcbf52p-1, 0x1.be5ecep-6},
		{0x1.fcdaccp-1, 0x1.b1160ap-6},
		{0x1.fcf576p-1, 0x1.a4255ap-6},
		{0x1.fd0f54p-1, 0x1.978ae8p-6},
		{0x1.fd286ap-1, 0x1.8b44e6p-6},
		{0x1.fd40bep-1, 0x1.7f5188p-6},
		{0x1.fd5856p-1, 0x1.73af0cp-6},
		{0x1.fd6f34p-1, 0x1.685bb6p-6},
		{0x1.fd8562p-1, 0x1.5d55ccp-6},
		{0x1.fd9ae2p-1, 0x1.529b9ep-6},
		{0x1.fdafb8p-1, 0x1.482b84p-6},
		{0x1.fdc3e8p-1, 0x1.3e03d8p-6},
		{0x1.fdd77ap-1, 0x1.3422fep-6},
		{0x1.fdea6ep-1, 0x1.2a875cp-6},
		{0x1.fdfcccp-1, 0x1.212f62p-6},
		{0x1.fe0e96p-1, 0x1.181984p-6},
		{0x1.fe1fd0p-1, 0x1.0f443ep-6},
		{0x1.fe3080p-1, 0x1.06ae14p-6},
		{0x1.fe40a6p-1, 0x1.fcab14p-7},
		{0x1.fe504cp-1, 0x1.ec7262p-7},
		{0x1.fe5f70p-1, 0x1.dcaf36p-7},
		{0x1.fe6e18p-1, 0x1.cd5ecap-7},
		{0x1.fe7c46p-1, 0x1.be7e5ap-7},
		{0x1.fe8a00p-1, 0x1.b00b38p-7},
		{0x1.fe9748p-1, 0x1.a202bep-7},
		{0x1.fea422p-1, 0x1.94624ep-7},
		{0x1.feb090p-1, 0x1.87275ep-7},
		{0x1.febc96p-1, 0x1.7a4f6ap-7},
		{0x1.fec836p-1, 0x1.6dd7fep-7},
		{0x1.fed374p-1, 0x1.61beaep-7},
		{0x1.fede52p-1, 0x1.56011cp-7},
		{0x1.fee8d4p-1, 0x1.4a9cf6p-7},
		{0x1.fef2fep-1, 0x1.3f8ff6p-7},
		{0x1.fefccep-1, 0x1.34d7dcp-7},
		{0x1.ff064cp-1, 0x1.2a727ap-7},
		{0x1.ff0f76p-1, 0x1.205dacp-7},
		{0x1.ff1852p-1, 0x1.169756p-7},
		{0x1.ff20e0p-1, 0x1.0d1d6ap-7},
		{0x1.ff2924p-1, 0x1.03ede2p-7},
		{0x1.ff3120p-1, 0x1.f60d8ap-8},
		{0x1.ff38d6p-1, 0x1.e4cc4ap-8},
		{0x1.ff4048p-1, 0x1.d4143ap-8},
		{0x1.ff4778p-1, 0x1.c3e1a6p-8},
		{0x1.ff4e68p-1, 0x1.b430ecp-8},
		{0x1.ff551ap-1, 0x1.a4fe84p-8},
		{0x1.ff5b90p-1, 0x1.9646f4p-8},
		{0x1.ff61ccp-1, 0x1.8806d8p-8},
		{0x1.ff67d0p-1, 0x1.7a3adep-8},
		{0x1.ff6d9ep-1, 0x1.6cdfccp-8},
		{0x1.ff7338p-1, 0x1.5ff276p-8},
		{0x1.ff789ep-1, 0x1.536fc2p-8},
		{0x1.ff7dd4p-1, 0x1.4754acp-8},
		{0x1.ff82dap-1, 0x1.3b9e40p-8},
		{0x1.ff87b2p-1, 0x1.30499cp-8},
		{0x1.ff8c5cp-1, 0x1.2553eep-8},
		{0x1.ff90dcp-1, 0x1.1aba78p-8},
		{0x1.ff9532p-1, 0x1.107a8cp-8},
		{0x1.ff9960p-1, 0x1.06918cp-8},
		{0x1.ff9d68p-1, 0x1.f9f9d0p-9},
		{0x1.ffa14ap-1, 0x1.e77448p-9},
		{0x1.ffa506p-1, 0x1.d58da6p-9},
		{0x1.ffa8a0p-1, 0x1.c4412cp-9},
		{0x1.ffac18p-1, 0x1.b38a3ap-9},
		{0x1.ffaf6ep-1, 0x1.a36454p-9},
		{0x1.ffb2a6p-1, 0x1.93cb12p-9},
		{0x1.ffb5bep-1, 0x1.84ba30p-9},
		{0x1.ffb8b8p-1, 0x1.762d84p-9},
		{0x1.ffbb98p-1, 0x1.682100p-9},
		{0x1.ffbe5ap-1, 0x1.5a90b0p-9},
		{0x1.ffc102p-1, 0x1.4d78bcp-9},
		{0x1.ffc390p-1, 0x1.40d564p-9},
		{0x1.ffc606p-1, 0x1.34a306p-9},
		{0x1.ffc862p-1, 0x1.28de12p-9},
		{0x1.ffcaa8p-1, 0x1.1d8318p-9},
		{0x1.ffccd8p-1, 0x1.128ebap-9},
		{0x1.ffcef4p-1, 0x1.07fdb4p-9},
		{0x1.ffd0fap-1, 0x1.fb99b8p-10},
		{0x1.ffd2eap-1, 0x1.e7f232p-10},
		{0x1.ffd4cap-1, 0x1.d4fed8p-10},
		{0x1.ffd696p-1, 0x1.c2b9d0p-10},
		{0x1.ffd84ep-1, 0x1.b11d70p-10},
		{0x1.ffd9f8p-1, 0x1.a02436p-10},
		{0x1.ffdb90p-1, 0x1.8fc8c8p-10},
		{0x1.ffdd18p-1, 0x1.8005f0p-10},
		{0x1.ffde90p-1, 0x1.70d6a4p-10},
		{0x1.ffdffap-1, 0x1.6235fcp-10},
		{0x1.ffe154p-1, 0x1.541f34p-10},
		{0x1.ffe2a2p-1, 0x1.468daep-10},
		{0x1.ffe3e2p-1, 0x1.397ceep-10},
		{0x1.ffe514p-1, 0x1.2ce898p-10},
		{0x1.ffe63cp-1, 0x1.20cc76p-10},
		{0x1.ffe756p-1, 0x1.15246ep-10},
		{0x1.ffe866p-1, 0x1.09ec86p-10},
		{0x1.ffe96ap-1, 0x1.fe41cep-11},
		{0x1.ffea64p-1, 0x1.e97ba4p-11},
		{0x1.ffeb54p-1, 0x1.d57f52p-11},
		{0x1.ffec3ap-1, 0x1.c245d4p-11},
		{0x1.ffed16p-1, 0x1.afc85ep-11},
		{0x1.ffedeap-1, 0x1.9e0058p-11},
		{0x1.ffeeb4p-1, 0x1.8ce75ep-11},
		{0x1.ffef76p-1, 0x1.7c7744p-11},
		{0x1.fff032p-1, 0x1.6caa0ep-11},
		{0x1.fff0e4p-1, 0x1.5d79ecp-11},
		{0x1.fff18ep-1, 0x1.4ee142p-11},
		{0x1.fff232p-1, 0x1.40daa4p-11},
		{0x1.fff2d0p-1, 0x1.3360ccp-11},
		{0x1.fff366p-1, 0x1.266ea8p-11},
		{0x1.fff3f6p-1, 0x1.19ff46p-11},
		{0x1.fff480p-1, 0x1.0e0de8p-11},
		{0x1.fff504p-1, 0x1.0295f0p-11},
		{0x1.fff582p-1, 0x1.ef25d4p-12},
		{0x1.fff5fcp-1, 0x1.da0110p-12},
		{0x1.fff670p-1, 0x1.c5b542p-12},
		{0x1.fff6dep-1, 0x1.b23a5ap-12},
		{0x1.fff74ap-1, 0x1.9f8894p-12},
		{0x1.fff7aep-1, 0x1.8d986ap-12},
		{0x1.fff810p-1, 0x1.7c629ap-12},
		{0x1.fff86cp-1, 0x1.6be022p-12},
		{0x1.fff8c6p-1, 0x1.5c0a38p-12},
		{0x1.fff91cp-1, 0x1.4cda54p-12},
		{0x1.fff96cp-1, 0x1.3e4a24p-12},
		{0x1.fff9bap-1, 0x1.305390p-12},
		{0x1.fffa04p-1, 0x1.22f0b4p-12},
		{0x1.fffa4cp-1, 0x1.161be4p-12},
		{0x1.fffa90p-1, 0x1.09cfa4p-12},
		{0x1.fffad0p-1, 0x1.fc0d56p-13},
		{0x1.fffb0ep-1, 0x1.e577bcp-13},
		{0x1.fffb4ap-1, 0x1.cfd4a6p-13},
		{0x1.fffb82p-1, 0x1.bb1a96p-13},
		{0x1.fffbb8p-1, 0x1.a74068p-13},
		{0x1.fffbecp-1, 0x1.943d4ap-13},
		{0x1.fffc1ep-1, 0x1.8208bcp-13},
		{0x1.fffc4ep-1, 0x1.709a8ep-13},
		{0x1.fffc7ap-1, 0x1.5feadap-13},
		{0x1.fffca6p-1, 0x1.4ff208p-13},
		{0x1.fffccep-1, 0x1.40a8c2p-13},
		{0x1.fffcf6p-1, 0x1.3207fcp-13},
		{0x1.fffd1ap-1, 0x1.2408eap-13},
		{0x1.fffd3ep-1, 0x1.16a502p-13},
		{0x1.fffd60p-1, 0x1.09d5f8p-13},
		{0x1.fffd80p-1, 0x1.fb2b7ap-14},
		{0x1.fffda0p-1, 0x1.e3bcf4p-14},
		{0x1.fffdbep-1, 0x1.cd5528p-14},
		{0x1.fffddap-1, 0x1.b7e946p-14},
		{0x1.fffdf4p-1, 0x1.a36eecp-14},
		{0x1.fffe0ep-1, 0x1.8fdc1cp-14},
		{0x1.fffe26p-1, 0x1.7d2738p-14},
		{0x1.fffe3ep-1, 0x1.6b4702p-14},
		{0x1.fffe54p-1, 0x1.5a329cp-14},
		{0x1.fffe68p-1, 0x1.49e178p-14},
		{0x1.fffe7ep-1, 0x1.3a4b60p-14},
		{0x1.fffe90p-1, 0x1.2b6876p-14},
		{0x1.fffea2p-1, 0x1.1d3120p-14},
		{0x1.fffeb4p-1, 0x1.0f9e1cp-14},
		{0x1.fffec4p-1, 0x1.02a868p-14},
		{0x1.fffed4p-1, 0x1.ec929ap-15},
		{0x1.fffee4p-1, 0x1.d4f4b4p-15},
		{0x1.fffef2p-1, 0x1.be6abcp-15},
		{0x1.ffff00p-1, 0x1.a8e8ccp-15},
		{0x1.ffff0cp-1, 0x1.94637ep-15},
		{0x1.ffff18p-1, 0x1.80cfdcp-15},
		{0x1.ffff24p-1, 0x1.6e2368p-15},
		{0x1.ffff30p-1, 0x1.5c540cp-15},
		{0x1.ffff3ap-1, 0x1.4b581cp-15},
		{0x1.ffff44p-1, 0x1.3b2652p-15},
		{0x1.ffff4ep-1, 0x1.2bb5ccp-15},
		{0x1.ffff56p-1, 0x1.1cfe02p-15},
		{0x1.ffff60p-1, 0x1.0ef6c4p-15},
		{0x1.ffff68p-1, 0x1.019842p-15},
		{0x1.ffff70p-1, 0x1.e9b5e8p-16},
		{0x1.ffff78p-1, 0x1.d16f58p-16},
		{0x1.ffff7ep-1, 0x1.ba4f04p-16},
		{0x1.ffff84p-1, 0x1.a447b8p-16},
		{0x1.ffff8cp-1, 0x1.8f4cccp-16},
		{0x1.ffff92p-1, 0x1.7b5224p-16},
		{0x1.ffff98p-1, 0x1.684c22p-16},
		{0x1.ffff9cp-1, 0x1.562facp-16},
		{0x1.ffffa2p-1, 0x1.44f21ep-16},
		{0x1.ffffa6p-1, 0x1.34894ap-16},
		{0x1.ffffacp-1, 0x1.24eb72p-16},
		{0x1.ffffb0p-1, 0x1.160f44p-16},
		{0x1.ffffb4p-1, 0x1.07ebd2p-16},
		{0x1.ffffb8p-1, 0x1.f4f12ep-17},
		{0x1.ffffbcp-1, 0x1.db5ad0p-17},
		{0x1.ffffc0p-1, 0x1.c304f0p-17},
		{0x1.ffffc4p-1, 0x1.abe09ep-17},
		{0x1.ffffc6p-1, 0x1.95df98p-17},
		{0x1.ffffcap-1, 0x1.80f43ap-17},
		{0x1.ffffccp-1, 0x1.6d1178p-17},
		{0x1.ffffd0p-1, 0x1.5a2ae0p-17},
		{0x1.ffffd2p-1, 0x1.483488p-17},
		{0x1.ffffd4p-1, 0x1.372310p-17},
		{0x1.ffffd6p-1, 0x1.26eb9ep-17},
		{0x1.ffffd8p-1, 0x1.1783cep-17},
		{0x1.ffffdcp-1, 0x1.08e1bap-17},
		{0x1.ffffdep-1, 0x1.f5f7d8p-18},
		{0x1.ffffdep-1, 0x1.db92b6p-18},
		{0x1.ffffe0p-1, 0x1.c282cep-18},
		{0x1.ffffe2p-1, 0x1.aab7acp-18},
		{0x1.ffffe4p-1, 0x1.94219cp-18},
		{0x1.ffffe6p-1, 0x1.7eb1a2p-18},
		{0x1.ffffe8p-1, 0x1.6a5972p-18},
		{0x1.ffffe8p-1, 0x1.570b6ap-18},
		{0x1.ffffeap-1, 0x1.44ba86p-18},
		{0x1.ffffeap-1, 0x1.335a62p-18},
		{0x1.ffffecp-1, 0x1.22df2ap-18},
		{0x1.ffffeep-1, 0x1.133d96p-18},
		{0x1.ffffeep-1, 0x1.046aeap-18},
		{0x1.fffff0p-1, 0x1.ecb9d0p-19},
		{0x1.fffff0p-1, 0x1.d21398p-19},
		{0x1.fffff2p-1, 0x1.b8d094p-19},
		{0x1.fffff2p-1, 0x1.a0df10p-19},
		{0x1.fffff2p-1, 0x1.8a2e26p-19},
		{0x1.fffff4p-1, 0x1.74adc8p-19},
		{0x1.fffff4p-1, 0x1.604ea8p-19},
		{0x1.fffff4p-1, 0x1.4d0232p-19},
		{0x1.fffff6p-1, 0x1.3aba86p-19},
		{0x1.fffff6p-1, 0x1.296a70p-19},
		{0x1.fffff6p-1, 0x1.190562p-19},
		{0x1.fffff8p-1, 0x1.097f62p-19},
		{0x1.fffff8p-1, 0x1.f59a20p-20},
		{0x1.fffff8p-1, 0x1.d9c736p-20},
		{0x1.fffff8p-1, 0x1.bf716cp-20},
		{0x1.fffffap-1, 0x1.a6852cp-20},
		{0x1.fffffap-1, 0x1.8eefd8p-20},
		{0x1.fffffap-1, 0x1.789fb8p-20},
		{0x1.fffffap-1, 0x1.6383f8p-20},
		{0x1.fffffap-1, 0x1.4f8c96p-20},
		{0x1.fffffap-1, 0x1.3caa62p-20},
		{0x1.fffffcp-1, 0x1.2acee2p-20},
		{0x1.fffffcp-1, 0x1.19ec60p-20},
		{0x1.fffffcp-1, 0x1.09f5d0p-20},
		{0x1.fffffcp-1, 0x1.f5bd96p-21},
		{0x1.fffffcp-1, 0x1.d9371ep-21},
		{0x1.fffffcp-1, 0x1.be41dep-21},
		{0x1.fffffcp-1, 0x1.a4c89ep-21},
		{0x1.fffffcp-1, 0x1.8cb738p-21},
		{0x1.fffffep-1, 0x1.75fa8ep-21},
		{0x1.fffffep-1, 0x1.608078p-21},
		{0x1.fffffep-1, 0x1.4c37c0p-21},
		{0x1.fffffep-1, 0x1.39100ep-21},
		{0x1.fffffep-1, 0x1.26f9e0p-21},
		{0x1.fffffep-1, 0x1.15e682p-21},
		{0x1.fffffep-1, 0x1.05c804p-21},
		{0x1.fffffep-1, 0x1.ed2254p-22},
		{0x1.fffffep-1, 0x1.d06ad6p-22},
		{0x1.fffffep-1, 0x1.b551c8p-22},
		{0x1.fffffep-1, 0x1.9bc0a0p-22},
		{0x1.fffffep-1, 0x1.83a200p-22},
		{0x1.fffffep-1, 0x1.6ce1aap-22},
		{0x1.fffffep-1, 0x1.576c72p-22},
		{0x1.fffffep-1, 0x1.43302cp-22},
		{0x1.fffffep-1, 0x1.301ba2p-22},
		{0x1.fffffep-1, 0x1.1e1e86p-22},
		{0x1.fffffep-1, 0x1.0d2966p-22},
		{0x1.000000p+0, 0x1.fa5b50p-23},
		{0x1.000000p+0, 0x1.dc3ae4p-23},
		{0x1.000000p+0, 0x1.bfd756p-23},
		{0x1.000000p+0, 0x1.a517dap-23},
		{0x1.000000p+0, 0x1.8be4f8p-23},
		{0x1.000000p+0, 0x1.74287ep-23},
		{0x1.000000p+0, 0x1.5dcd66p-23},
		{0x1.000000p+0, 0x1.48bfd4p-23},
		{0x1.000000p+0, 0x1.34ecf8p-23},
		{0x1.000000p+0, 0x1.224310p-23},
		{0x1.000000p+0, 0x1.10b148p-23},
	},
};

const erf_data __erf_data = {
	.tab = {
		{0x0.0000000000000p+0, 0x1.20dd750429b6dp+0},
		{0x1.20dbf3deb1340p-7, 0x1.20d8f1975c85dp+0},
		{0x1.20d77083f17a0p-6, 0x1.20cb67bd452c7p+0},
		{0x1.b137e0cf584dcp-6, 0x1.20b4d8bac36c1p+0},
		{0x1.20c5645dd2538p-5, 0x1.209546ad13ccfp+0},
		{0x1.68e5d3bbc9526p-5, 0x1.206cb4897b148p+0},
		{0x1.b0fafef135745p-5, 0x1.203b261cd0052p+0},
		{0x1.f902a77bd3821p-5, 0x1.2000a00ae3804p+0},
		{0x1.207d480e90658p-4, 0x1.1fbd27cdc72d3p+0},
		{0x1.44703e87e8593p-4, 0x1.1f70c3b4f2cc7p+0},
		{0x1.68591a1e83b5dp-4, 0x1.1f1b7ae44867fp+0},
		{0x1.8c36beb8a8d23p-4, 0x1.1ebd5552f795bp+0},
		{0x1.b0081148a873ap-4, 0x1.1e565bca400d4p+0},
		{0x1.d3cbf7e70a4b3p-4, 0x1.1de697e413d28p+0},
		{0x1.f78159ec8bb50p-4, 0x1.1d6e14099944ap+0},
		{0x1.0d939005f65e5p-3, 0x1.1cecdb718d61cp+0},
		{0x1.1f5e1a35c3b89p-3, 0x1.1c62fa1e869b6p+0},
		{0x1.311fc15f56d14p-3, 0x1.1bd07cdd189acp+0},
		{0x1.42d7fc2f64959p-3, 0x1.1b357141d95d5p+0},
		{0x1.548642321d7c6p-3, 0x1.1a91e5a748165p+0},
		{0x1.662a0bdf7a89fp-3, 0x1.19e5e92b964abp+0},
		{0x1.77c2d2a765f9ep-3, 0x1.19318bae53a04p+0},
		{0x1.895010fdbdbfdp-3, 0x1.1874ddcdfce24p+0},
		{0x1.9ad142662e14dp-3, 0x1.17aff0e56ec10p+0},
		{0x1.ac45e37fe2526p-3, 0x1.16e2d7093cd8cp+0},
		{0x1.bdad72110a648p-3, 0x1.160da304ed92fp+0},
		{0x1.cf076d1233237p-3, 0x1.153068581b781p+0},
		{0x1.e05354b96ff36p-3, 0x1.144b3b337c90cp+0},
		{0x1.f190aa85540e2p-3, 0x1.135e3075d076bp+0},
		{0x1.015f78a3dcf3dp-2, 0x1.12695da8b5bdep+0},
		{0x1.09eed6982b948p-2, 0x1.116cd8fd67618p+0},
		{0x1.127631eb8de32p-2, 0x1.1068b94962e5ep+0},
		{0x1.1af54e232d609p-2, 0x1.0f5d1602f7e41p+0},
		{0x1.236bef825d9a2p-2, 0x1.0e4a073dc1b91p+0},
		{0x1.2bd9db0f7827fp-2, 0x1.0d2fa5a70c168p+0},
		{0x1.343ed6989b7d9p-2, 0x1.0c0e0a8223359p+0},
		{0x1.3c9aa8b84bedap-2, 0x1.0ae54fa490722p+0},
		{0x1.44ed18d9f6462p-2, 0x1.09b58f724416bp+0},
		{0x1.4d35ef3e5372ep-2, 0x1.087ee4d9ad247p+0},
		{0x1.5574f4ffac98ep-2, 0x1.07416b4fbfe7cp+0},
		{0x1.5da9f415ff23fp-2, 0x1.05fd3ecbec297p+0},
		{0x1.65d4b75b00471p-2, 0x1.04b27bc403d30p+0},
		{0x1.6df50a8dff772p-2, 0x1.03613f2812dafp+0},
		{0x1.760aba57a76bfp-2, 0x1.0209a65e29545p+0},
		{0x1.7e15944d9d3e4p-2, 0x1.00abcf3e187a9p+0},
		{0x1.861566f5fd3c0p-2, 0x1.fe8fb01a47307p-1},
		{0x1.8e0a01cab516bp-2, 0x1.fbbbbef34b4b2p-1},
		{0x1.95f3353cbb146p-2, 0x1.f8dc092d58ff8p-1},
		{0x1.9dd0d2b721f39p-2, 0x1.f5f0cdaf15313p-1},
		{0x1.a5a2aca209394p-2, 0x1.f2fa4c16c0019p-1},
		{0x1.ad68966569a87p-2, 0x1.eff8c4b1375dbp-1},
		{0x1.b522646bbda68p-2, 0x1.ecec7870ebca7p-1},
		{0x1.bccfec24855b8p-2, 0x1.e9d5a8e4c934ep-1},
		{0x1.c4710406a65fcp-2, 0x1.e6b4982f158b9p-1},
		{0x1.cc058392a6d2dp-2, 0x1.e38988fc46e72p-1},
		{0x1.d38d4354c3bd0p-2, 0x1.e054be79d3042p-1},
		{0x1.db081ce6e2a48p-2, 0x1.dd167c4cf9d2ap-1},
		{0x1.e275eaf25e458p-2, 0x1.d9cf06898cdafp-1},
		{0x1.e9d68931ae650p-2, 0x1.d67ea1a8b5368p-1},
		{0x1.f129d471eabb1p-2, 0x1.d325927fb9d89p-1},
		{0x1.f86faa9428f9dp-2, 0x1.cfc41e36c7df9p-1},
		{0x1.ffa7ea8eb5fd0p-2, 0x1.cc5a8a3fbea40p-1},
		{0x1.03693a371519cp-1, 0x1.c8e91c4d01368p-1},
		{0x1.06f794ab2cae7p-1, 0x1.c5701a484ef9dp-1},
		{0x1.0a7ef5c18edd2p-1, 0x1.c1efca49a5011p-1},
		{0x1.0dff4f247f6c6p-1, 0x1.be68728e29d5dp-1},
		{0x1.1178930ada115p-1, 0x1.bada596f25436p-1},
		{0x1.14eab43841b55p-1, 0x1.b745c55905bf8p-1},
		{0x1.1855a5fd3dd50p-1, 0x1.b3aafcc27502ep-1},
		{0x1.1bb95c3746199p-1, 0x1.b00a46237d5bep-1},
		{0x1.1f15cb50bc4dep-1, 0x1.ac63e7ecc1411p-1},
		{0x1.226ae840d4d70p-1, 0x1.a8b8287ec6a09p-1},
		{0x1.25b8a88b6dd7fp-1, 0x1.a5074e2157620p-1},
		{0x1.28ff0240d52cdp-1, 0x1.a1519efaf889ep-1},
		{0x1.2c3debfd7d6c1p-1, 0x1.9d97610879642p-1},
		{0x1.2f755ce9a21f4p-1, 0x1.99d8da149c13fp-1},
		{0x1.32a54cb8db67bp-1, 0x1.96164fafd8de3p-1},
		{0x1.35cdb3a9a144dp-1, 0x1.925007283d7aap-1},
		{0x1.38ee8a84beb71p-1, 0x1.8e86458169af8p-1},
		{0x1.3c07ca9cb4f9ep-1, 0x1.8ab94f6caa71dp-1},
		{0x1.3f196dcd0f135p-1, 0x1.86e9694134b9ep-1},
		{0x1.42236e79a5fa6p-1, 0x1.8316d6f48133dp-1},
		{0x1.4525c78dd5966p-1, 0x1.7f41dc12c9e89p-1},
		{0x1.4820747ba2dc2p-1, 0x1.7b6abbb7aaf19p-1},
		{0x1.4b13713ad3513p-1, 0x1.7791b886e7403p-1},
		{0x1.4dfeba47f63ccp-1, 0x1.73b714a552763p-1},
		{0x1.50e24ca35fd2cp-1, 0x1.6fdb11b1e0c34p-1},
		{0x1.53be25d016a4fp-1, 0x1.6bfdf0beddaf5p-1},
		{0x1.569243d2b3a9bp-1, 0x1.681ff24b4ab04p-1},
		{0x1.595ea53035283p-1, 0x1.6441563c665d4p-1},
		{0x1.5c2348ecc4dc3p-1, 0x1.60625bd75d07bp-1},
		{0x1.5ee02e8a71a53p-1, 0x1.5c8341bb23767p-1},
		{0x1.61955607dd15dp-1, 0x1.58a445da7c74cp-1},
		{0x1.6442bfdedd397p-1, 0x1.54c5a57629db0p-1},
		{0x1.66e86d0312e82p-1, 0x1.50e79d1749ac9p-1},
		{0x1.69865ee075011p-1, 0x1.4d0a6889dfd9fp-1},
		{0x1.6c1c9759d0e5fp-1, 0x1.492e42d78d2c5p-1},
		{0x1.6eab18c74091bp-1, 0x1.4553664273d24p-1},
		{0x1.7131e5f496a5ap-1, 0x1.417a0c4049fd0p-1},
		{0x1.73b1021fc0cb8p-1, 0x1.3da26d759aef5p-1},
		{0x1.762870f720c6fp-1, 0x1.39ccc1b136d5ap-1},
		{0x1.78983697dc96fp-1, 0x1.35f93fe7d1b3dp-1},
		{0x1.7b00578c26037p-1, 0x1.32281e2fd1a92p-1},
		{0x1.7d60d8c979f7bp-1, 0x1.2e5991bd4cbfcp-1},
		{0x1.7fb9bfaed8078p-1, 0x1.2a8dcede3673bp-1},
		{0x1.820b1202f27fbp-1, 0x1.26c508f6bd0ffp-1},
		{0x1.8454d5f25760dp-1, 0x1.22ff727dd6f7bp-1},
		{0x1.8697120d92a4ap-1, 0x1.1f3d3cf9ffe5ap-1},
		{0x1.88d1cd474a2e0p-1, 0x1.1b7e98fe26217p-1},
		{0x1.8b050ef253c37p-1, 0x1.17c3b626c7a11p-1},
		{0x1.8d30debfc572ep-1, 0x1.140cc3173f007p-1},
		{0x1.8f5544bd00c04p-1, 0x1.1059ed7740313p-1},
		{0x1.91724951b8fc6p-1, 0x1.0cab61f084b93p-1},
		{0x1.9387f53df5238p-1, 0x1.09014c2ca74dap-1},
		{0x1.959651980da31p-1, 0x1.055bd6d32e8d7p-1},
		{0x1.979d67caa6631p-1, 0x1.01bb2b87c6968p-1},
		{0x1.999d4192a5715p-1, 0x1.fc3ee5d1524b0p-2},
		{0x1.9b95e8fd26abap-1, 0x1.f511a91a67d2ap-2},
		{0x1.9d8768656cc42p-1, 0x1.edeeee0959518p-2},
		{0x1.9f71ca72cffb6p-1, 0x1.e6d6ffaa65a25p-2},
		{0x1.a1551a16aaeafp-1, 0x1.dfca26f5bbf88p-2},
		{0x1.a331628a45b92p-1, 0x1.d8c8aace11e63p-2},
		{0x1.a506af4cc00f4p-1, 0x1.d1d2cfff91594p-2},
		{0x1.a6d50c20fa293p-1, 0x1.cae8d93f1d7b6p-2},
		{0x1.a89c850b7d54dp-1, 0x1.c40b0729ed547p-2},
		{0x1.aa5d265064366p-1, 0x1.bd3998457afdap-2},
		{0x1.ac16fc7143263p-1, 0x1.b674c8ffc6283p-2},
		{0x1.adca142b10f98p-1, 0x1.afbcd3afe8ab6p-2},
		{0x1.af767a741088bp-1, 0x1.a911f096fbc26p-2},
		{0x1.b11c3c79bb424p-1, 0x1.a27455e14c93cp-2},
		{0x1.b2bb679ead19cp-1, 0x1.9be437a7de946p-2},
		{0x1.b4540978921eep-1, 0x1.9561c7f23a47bp-2},
		{0x1.b5e62fce16095p-1, 0x1.8eed36b886d93p-2},
		{0x1.b771e894d602ep-1, 0x1.8886b1e5ecfd1p-2},
		{0x1.b8f741ef54f83p-1, 0x1.822e655b417e6p-2},
		{0x1.ba764a2af2b78p-1, 0x1.7be47af1f5d89p-2},
		{0x1.bbef0fbde6221p-1, 0x1.75a91a7f4d2edp-2},
		{0x1.bd61a1453ab44p-1, 0x1.6f7c69d7d3ef8p-2},
		{0x1.bece0d82d1a5cp-1, 0x1.695e8cd31867ep-2},
		{0x1.c034635b66e23p-1, 0x1.634fa54fa285fp-2},
		{0x1.c194b1d49a184p-1, 0x1.5d4fd33729015p-2},
		{0x1.c2ef0812fc1bdp-1, 0x1.575f3483021c3p-2},
		{0x1.c443755820d64p-1, 0x1.517de540ce2a3p-2},
		{0x1.c5920900b5fd1p-1, 0x1.4babff975a04cp-2},
		{0x1.c6dad2829ec62p-1, 0x1.45e99bcbb7915p-2},
		{0x1.c81de16b14cefp-1, 0x1.4036d0468a7a2p-2},
		{0x1.c95b455cce69dp-1, 0x1.3a93b1998736cp-2},
		{0x1.ca930e0e2a825p-1, 0x1.35005285227f1p-2},
		{0x1.cbc54b476248dp-1, 0x1.2f7cc3fe6f423p-2},
		{0x1.ccf20ce0c0d27p-1, 0x1.2a09153529381p-2},
		{0x1.ce1962c0e0d8bp-1, 0x1.24a55399ea239p-2},
		{0x1.cf3b5cdaf0c39p-1, 0x1.1f518ae487dc8p-2},
		{0x1.d0580b2cfd249p-1, 0x1.1a0dc51a9934dp-2},
		{0x1.d16f7dbe41ca0p-1, 0x1.14da0a961fd14p-2},
		{0x1.d281c49d818d0p-1, 0x1.0fb6620c550afp-2},
		{0x1.d38eefdf64fddp-1, 0x1.0aa2d09497f2bp-2},
		{0x1.d4970f9ce00d9p-1, 0x1.059f59af7a906p-2},
		{0x1.d59a33f19ed42p-1, 0x1.00abff4dec7a3p-2},
		{0x1.d6986cfa798e7p-1, 0x1.f79183b101c5bp-3},
		{0x1.d791cad3eff01p-1, 0x1.edeb406d9c824p-3},
		{0x1.d8865d98abe01p-1, 0x1.e4652fadcb6b2p-3},
		{0x1.d97635600bb89p-1, 0x1.daff4969c0b04p-3},
		{0x1.da61623cb41e0p-1, 0x1.d1b982c501370p-3},
		{0x1.db47f43b2980dp-1, 0x1.c893ce1dcbef7p-3},
		{0x1.dc29fb60715afp-1, 0x1.bf8e1b1ca2279p-3},
		{0x1.dd0787a8bb39dp-1, 0x1.b6a856c3ed54fp-3},
		{0x1.dde0a90611a0dp-1, 0x1.ade26b7fbed95p-3},
		{0x1.deb56f5f12d28p-1, 0x1.a53c4135a6526p-3},
		{0x1.df85ea8db188ep-1, 0x1.9cb5bd549b111p-3},
		{0x1.e0522a5dfda73p-1, 0x1.944ec2e4f5630p-3},
		{0x1.e11a3e8cf4eb8p-1, 0x1.8c07329874652p-3},
		{0x1.e1de36c75ba58p-1, 0x1.83deeada4d25ap-3},
		{0x1.e29e22a89d766p-1, 0x1.7bd5c7df3fe9cp-3},
		{0x1.e35a11b9b61cep-1, 0x1.73eba3b5b07b7p-3},
		{0x1.e4121370224ccp-1, 0x1.6c205655be71fp-3},
		{0x1.e4c6372cd8927p-1, 0x1.6473b5b15a7a1p-3},
		{0x1.e5768c3b4a3fcp-1, 0x1.5ce595c455b0ap-3},
		{0x1.e62321d06c5e0p-1, 0x1.5575c8a468361p-3},
		{0x1.e6cc0709c8a0dp-1, 0x1.4e241e912c305p-3},
		{0x1.e7714aec96534p-1, 0x1.46f066040a832p-3},
		{0x1.e812fc64db369p-1, 0x1.3fda6bc016994p-3},
		{0x1.e8b12a44944a8p-1, 0x1.38e1fae1d6a9dp-3},
		{0x1.e94be342e6743p-1, 0x1.3206dceef5f87p-3},
		{0x1.e9e335fb56f87p-1, 0x1.2b48d9e5dea1cp-3},
		{0x1.ea7730ed0bbb9p-1, 0x1.24a7b84d38971p-3},
		{0x1.eb07e27a133aap-1, 0x1.1e233d434b813p-3},
		{0x1.eb9558e6b42cep-1, 0x1.17bb2c8d41535p-3},
		{0x1.ec1fa258c4beap-1, 0x1.116f48a6476ccp-3},
		{0x1.eca6ccd709544p-1, 0x1.0b3f52ce8c383p-3},
		{0x1.ed2ae6489ac1ep-1, 0x1.052b0b1a174eap-3},
		{0x1.edabfc7453e63p-1, 0x1.fe6460fef4680p-4},
		{0x1.ee2a1d004692cp-1, 0x1.f2a901ccafb37p-4},
		{0x1.eea5557137ae0p-1, 0x1.e723726b824a9p-4},
		{0x1.ef1db32a2277cp-1, 0x1.dbd32ac4c99b0p-4},
		{0x1.ef93436bc2daap-1, 0x1.d0b7a0f921e7cp-4},
		{0x1.f006135426b26p-1, 0x1.c5d0497c09e74p-4},
		{0x1.f0762fde45ee6p-1, 0x1.bb1c972f23e50p-4},
		{0x1.f0e3a5e1a1788p-1, 0x1.b09bfb7d11a83p-4},
		{0x1.f14e8211e8c55p-1, 0x1.a64de673e8837p-4},
		{0x1.f1b6d0fea5f4dp-1, 0x1.9c31c6df3b1b8p-4},
		{0x1.f21c9f12f0677p-1, 0x1.92470a61b6965p-4},
		{0x1.f27ff89525acfp-1, 0x1.888d1d8e510a3p-4},
		{0x1.f2e0e9a6a8b09p-1, 0x1.7f036c0107294p-4},
		{0x1.f33f7e43a706bp-1, 0x1.75a96077274bap-4},
		{0x1.f39bc242e43e6p-1, 0x1.6c7e64e7281cbp-4},
		{0x1.f3f5c1558b19ep-1, 0x1.6381e2980956bp-4},
		{0x1.f44d870704911p-1, 0x1.5ab342383d177p-4},
		{0x1.f4a31ebcd47dfp-1, 0x1.5211ebf41880bp-4},
		{0x1.f4f693b67bd77p-1, 0x1.499d478bca735p-4},
		{0x1.f547f10d60597p-1, 0x1.4154bc68d75c3p-4},
		{0x1.f59741b4b97cfp-1, 0x1.3937b1b319259p-4},
		{0x1.f5e4907982a07p-1, 0x1.31458e6542847p-4},
		{0x1.f62fe80272419p-1, 0x1.297db960e4f63p-4},
		{0x1.f67952cff6282p-1, 0x1.21df9981f8e53p-4},
		{0x1.f6c0db3c34641p-1, 0x1.1a6a95b1e786fp-4},
		{0x1.f7068b7b10fd9p-1, 0x1.131e14fa1625dp-4},
		{0x1.f74a6d9a38383p-1, 0x1.0bf97e95f2a64p-4},
		{0x1.f78c8b812d498p-1, 0x1.04fc3a0481321p-4},
		{0x1.f7cceef15d631p-1, 0x1.fc4b5e32d6259p-5},
		{0x1.f80ba18636f07p-1, 0x1.eeea8c1b1db93p-5},
		{0x1.f848acb544e95p-1, 0x1.e1d4cf1e2450ap-5},
		{0x1.f88419ce4e184p-1, 0x1.d508f9a1ea64ep-5},
		{0x1.f8bdf1fb78370p-1, 0x1.c885df3451a07p-5},
		{0x1.f8f63e416ebffp-1, 0x1.bc4a54a84e834p-5},
		{0x1.f92d077f8d56dp-1, 0x1.b055303221015p-5},
		{0x1.f96256700da8ep-1, 0x1.a4a549829587ep-5},
		{0x1.f99633a838a57p-1, 0x1.993979e14fffdp-5},
		{0x1.f9c8a7989af0dp-1, 0x1.8e109c4622913p-5},
		{0x1.f9f9ba8d3c733p-1, 0x1.83298d717210ep-5},
		{0x1.fa2974addae45p-1, 0x1.78832c03aa2b1p-5},
		{0x1.fa57ddfe27376p-1, 0x1.6e1c5893c380bp-5},
		{0x1.fa84fe5e05c8dp-1, 0x1.63f3f5c4de13bp-5},
		{0x1.fab0dd89d1309p-1, 0x1.5a08e85af27e0p-5},
		{0x1.fadb831a9f9c3p-1, 0x1.505a174e9c929p-5},
		{0x1.fb04f6868a944p-1, 0x1.46e66be002240p-5},
		{0x1.fb2d3f20f9101p-1, 0x1.3dacd1a8d8ccdp-5},
		{0x1.fb54641aebbc9p-1, 0x1.34ac36ad8dafep-5},
		{0x1.fb7a6c834b5a2p-1, 0x1.2be38b6d92415p-5},
		{0x1.fb9f5f4739170p-1, 0x1.2351c2f2d1449p-5},
		{0x1.fbc3433260ca5p-1, 0x1.1af5d2e04f3f6p-5},
		{0x1.fbe61eef4cf6ap-1, 0x1.12ceb37ff9bc3p-5},
		{0x1.fc07f907bc794p-1, 0x1.0adb5fcfa8c75p-5},
		{0x1.fc28d7e4f9cd0p-1, 0x1.031ad58d56279p-5},
		{0x1.fc48c1d033c7ap-1, 0x1.f7182a851bca2p-6},
		{0x1.fc67bcf2d7b8fp-1, 0x1.e85c449e377f2p-6},
		{0x1.fc85cf56ecd38p-1, 0x1.da0005e5f28dfp-6},
		{0x1.fca2fee770c79p-1, 0x1.cc0180af00a8bp-6},
		{0x1.fcbf5170b578bp-1, 0x1.be5ecd2fcb5f9p-6},
		{0x1.fcdacca0bfb73p-1, 0x1.b1160991ff737p-6},
		{0x1.fcf57607a6e7cp-1, 0x1.a4255a00b9f03p-6},
		{0x1.fd0f5317f582fp-1, 0x1.978ae8b55ce1bp-6},
		{0x1.fd2869270a56fp-1, 0x1.8b44e6031383ep-6},
		{0x1.fd40bd6d7a785p-1, 0x1.7f5188610ddc8p-6},
		{0x1.fd58550773cb5p-1, 0x1.73af0c737bb45p-6},
		{0x1.fd6f34f52013ap-1, 0x1.685bb5134ef13p-6},
		{0x1.fd85621b0876dp-1, 0x1.5d55cb54cd53ap-6},
		{0x1.fd9ae142795e3p-1, 0x1.529b9e8cf9a1ep-6},
		{0x1.fdafb719e6a69p-1, 0x1.482b8455dc491p-6},
		{0x1.fdc3e835500b3p-1, 0x1.3e03d891b37dep-6},
		{0x1.fdd7790ea5bc0p-1, 0x1.3422fd6d12e2bp-6},
		{0x1.fdea6e062d0c9p-1, 0x1.2a875b5ffab56p-6},
		{0x1.fdfccb62e52d3p-1, 0x1.212f612dee7fbp-6},
		{0x1.fe0e9552ebdd6p-1, 0x1.181983e5133ddp-6},
		{0x1.fe1fcfebe2083p-1, 0x1.0f443edc5ce49p-6},
		{0x1.fe307f2b503d0p-1, 0x1.06ae13b0d3255p-6},
		{0x1.fe40a6f70af4bp-1, 0x1.fcab1483ea7fcp-7},
		{0x1.fe504b1d9696cp-1, 0x1.ec72615a894c4p-7},
		{0x1.fe5f6f568b301p-1, 0x1.dcaf3691fc448p-7},
		{0x1.fe6e1742f7cf6p-1, 0x1.cd5ec93c12431p-7},
		{0x1.fe7c466dc57a1p-1, 0x1.be7e5ac24963bp-7},
		{0x1.fe8a004c19ae6p-1, 0x1.b00b38d6b3575p-7},
		{0x1.fe97483db8670p-1, 0x1.a202bd6372dcep-7},
		{0x1.fea4218d6594ap-1, 0x1.94624e78e0fafp-7},
		{0x1.feb08f7146046p-1, 0x1.87275e3a6869dp-7},
		{0x1.febc950b3fa75p-1, 0x1.7a4f6aca256cbp-7},
		{0x1.fec835695932ep-1, 0x1.6dd7fe3358230p-7},
		{0x1.fed37386190fbp-1, 0x1.61beae53b72b7p-7},
		{0x1.fede5248e38f4p-1, 0x1.56011cc3b036dp-7},
		{0x1.fee8d486585eep-1, 0x1.4a9cf6bda3f4cp-7},
		{0x1.fef2fd00af31ap-1, 0x1.3f8ff5042a88ep-7},
		{0x1.fefcce6813974p-1, 0x1.34d7dbc76d7e5p-7},
		{0x1.ff064b5afffbep-1, 0x1.2a727a89a3f14p-7},
		{0x1.ff0f766697c76p-1, 0x1.205dac02bd6b9p-7},
		{0x1.ff18520700971p-1, 0x1.1697560347b25p-7},
		{0x1.ff20e0a7ba8c2p-1, 0x1.0d1d69569b82dp-7},
		{0x1.ff2924a3f7a83p-1, 0x1.03ede1a45bfeep-7},
		{0x1.ff312046f2339p-1, 0x1.f60d8aa2a88f2p-8},
		{0x1.ff38d5cc4227fp-1, 0x1.e4cc4abf7d065p-8},
		{0x1.ff404760319b4p-1, 0x1.d4143a9dfe965p-8},
		{0x1.ff47772010262p-1, 0x1.c3e1a5f5c077cp-8},
		{0x1.ff4e671a85425p-1, 0x1.b430ecf4a83a8p-8},
		{0x1.ff55194fe19dfp-1, 0x1.a4fe83fb9db25p-8},
		{0x1.ff5b8fb26f5f6p-1, 0x1.9646f35a76623p-8},
		{0x1.ff61cc26c1578p-1, 0x1.8806d70b2fc36p-8},
		{0x1.ff67d08401202p-1, 0x1.7a3ade6c8b3e4p-8},
		{0x1.ff6d9e943c231p-1, 0x1.6cdfcbfc1e263p-8},
		{0x1.ff733814af88cp-1, 0x1.5ff2750fe7820p-8},
		{0x1.ff789eb6130c9p-1, 0x1.536fc18f7ce5cp-8},
		{0x1.ff7dd41ce2b4dp-1, 0x1.4754abacdf1dcp-8},
		{0x1.ff82d9e1a76d8p-1, 0x1.3b9e3f9d06e3fp-8},
		{0x1.ff87b1913e853p-1, 0x1.30499b503957fp-8},
		{0x1.ff8c5cad200a5p-1, 0x1.2553ee2a336bfp-8},
		{0x1.ff90dcaba4096p-1, 0x1.1aba78ba3af89p-8},
		{0x1.ff9532f846ab0p-1, 0x1.107a8c7323a6ep-8},
		{0x1.ff9960f3eb327p-1, 0x1.06918b6355624p-8},
		{0x1.ff9d67f51ddbap-1, 0x1.f9f9cfd9c3035p-9},
		{0x1.ffa14948549a7p-1, 0x1.e77448fb66bb9p-9},
		{0x1.ffa506302ebaep-1, 0x1.d58da68fd1170p-9},
		{0x1.ffa89fe5b3625p-1, 0x1.c4412bf4b8f0bp-9},
		{0x1.ffac17988ef4bp-1, 0x1.b38a3af2e55b4p-9},
		{0x1.ffaf6e6f4f5c0p-1, 0x1.a3645330550ffp-9},
		{0x1.ffb2a5879f35ep-1, 0x1.93cb11a30d765p-9},
		{0x1.ffb5bdf67fe6fp-1, 0x1.84ba3004a50d0p-9},
		{0x1.ffb8b8c88295fp-1, 0x1.762d84469c18fp-9},
		{0x1.ffbb970200110p-1, 0x1.6821000795a03p-9},
		{0x1.ffbe599f4f9d9p-1, 0x1.5a90b00981d93p-9},
		{0x1.ffc10194fcb64p-1, 0x1.4d78bba8ca5fdp-9},
		{0x1.ffc38fcffbb7cp-1, 0x1.40d564548fad7p-9},
		{0x1.ffc60535dd7f5p-1, 0x1.34a305080681fp-9},
		{0x1.ffc862a501fd7p-1, 0x1.28de11c5031ebp-9},
		{0x1.ffcaa8f4c9beap-1, 0x1.1d83170fbf6fbp-9},
		{0x1.ffccd8f5c66d1p-1, 0x1.128eb96be8798p-9},
		{0x1.ffcef371ea4d7p-1, 0x1.07fdb4dafea5fp-9},
		{0x1.ffd0f92cb6ba7p-1, 0x1.fb99b8b8279e1p-10},
		{0x1.ffd2eae369a07p-1, 0x1.e7f232d9e2630p-10},
		{0x1.ffd4c94d29fdbp-1, 0x1.d4fed7195d7e8p-10},
		{0x1.ffd6951b33686p-1, 0x1.c2b9cf7f893bfp-10},
		{0x1.ffd84ef9009eep-1, 0x1.b11d702b3deb1p-10},
		{0x1.ffd9f78c7524ap-1, 0x1.a024365f771bdp-10},
		{0x1.ffdb8f7605ee7p-1, 0x1.8fc8c794b03b5p-10},
		{0x1.ffdd1750e1220p-1, 0x1.8005f08d6f1efp-10},
		{0x1.ffde8fb314ebfp-1, 0x1.70d6a46e07ddap-10},
		{0x1.ffdff92db56e5p-1, 0x1.6235fbd7a4345p-10},
		{0x1.ffe1544d01ccbp-1, 0x1.541f340697987p-10},
		{0x1.ffe2a1988857cp-1, 0x1.468dadf4080abp-10},
		{0x1.ffe3e19349dc7p-1, 0x1.397ced7af2b15p-10},
		{0x1.ffe514bbdc197p-1, 0x1.2ce898809244ep-10},
		{0x1.ffe63b8c8b5f7p-1, 0x1.20cc76202c5fap-10},
		{0x1.ffe7567b7b5e1p-1, 0x1.15246dda49d47p-10},
		{0x1.ffe865fac722bp-1, 0x1.09ec86c75d497p-10},
		{0x1.ffe96a78a04a9p-1, 0x1.fe41cd9bb4eeep-11},
		{0x1.ffea645f6d6dap-1, 0x1.e97ba3b77f306p-11},
		{0x1.ffeb5415e7c44p-1, 0x1.d57f524723822p-11},
		{0x1.ffec39ff380b9p-1, 0x1.c245d4b998479p-11},
		{0x1.ffed167b12ac2p-1, 0x1.afc85e0f82e12p-11},
		{0x1.ffede9e5d3262p-1, 0x1.9e005769dbc1dp-11},
		{0x1.ffeeb49896c6dp-1, 0x1.8ce75e9f6f8a0p-11},
		{0x1.ffef76e956a9fp-1, 0x1.7c7744d9378f7p-11},
		{0x1.fff0312b010b5p-1, 0x1.6caa0d3582fe9p-11},
		{0x1.fff0e3ad91ec2p-1, 0x1.5d79eb71e893bp-11},
		{0x1.fff18ebe2b0e1p-1, 0x1.4ee1429bf7cc0p-11},
		{0x1.fff232a72b48ep-1, 0x1.40daa3c89f5b6p-11},
		{0x1.fff2cfb0453d9p-1, 0x1.3360ccd23db3ap-11},
		{0x1.fff3661e9569dp-1, 0x1.266ea71d4f71ap-11},
		{0x1.fff3f634b79f9p-1, 0x1.19ff4663ae9dfp-11},
		{0x1.fff48032dbe40p-1, 0x1.0e0de78654d1ep-11},
		{0x1.fff50456dab8cp-1, 0x1.0295ef6591848p-11},
		{0x1.fff582dc48d30p-1, 0x1.ef25d37f49fe1p-12},
		{0x1.fff5fbfc8a439p-1, 0x1.da01102b5f851p-12},
		{0x1.fff66feee5129p-1, 0x1.c5b5412dcafadp-12},
		{0x1.fff6dee89352ep-1, 0x1.b23a5a23e4210p-12},
		{0x1.fff7491cd4af6p-1, 0x1.9f8893d8fd1c1p-12},
		{0x1.fff7aebcff755p-1, 0x1.8d986a4187285p-12},
		{0x1.fff80ff8911fdp-1, 0x1.7c629a822bc9ep-12},
		{0x1.fff86cfd3e657p-1, 0x1.6be02102b3520p-12},
		{0x1.fff8c5f702ccfp-1, 0x1.5c0a378c90bcap-12},
		{0x1.fff91b102fca8p-1, 0x1.4cda5374ea275p-12},
		{0x1.fff96c717b695p-1, 0x1.3e4a23d1f4702p-12},
		{0x1.fff9ba420e834p-1, 0x1.30538fbb77ecdp-12},
		{0x1.fffa04a7928b1p-1, 0x1.22f0b496539bdp-12},
		{0x1.fffa4bc63ee9ap-1, 0x1.161be46ad3b50p-12},
		{0x1.fffa8fc0e5f33p-1, 0x1.09cfa445b00ffp-12},
		{0x1.fffad0b901755p-1, 0x1.fc0d55470cf51p-13},
		{0x1.fffb0ecebee1bp-1, 0x1.e577bbcd49935p-13},
		{0x1.fffb4a210b172p-1, 0x1.cfd4a5adec5bfp-13},
		{0x1.fffb82cd9dcbfp-1, 0x1.bb1a9657ce465p-13},
		{0x1.fffbb8f1049c6p-1, 0x1.a740684026555p-13},
		{0x1.fffbeca6adbe9p-1, 0x1.943d4a1d1ed39p-13},
		{0x1.fffc1e08f25f5p-1, 0x1.8208bc334a6a5p-13},
		{0x1.fffc4d3120aa1p-1, 0x1.709a8db59f25cp-13},
		{0x1.fffc7a37857d2p-1, 0x1.5feada379d8b7p-13},
		{0x1.fffca53375ce3p-1, 0x1.4ff207314a102p-13},
		{0x1.fffcce3b57bffp-1, 0x1.40a8c1949f75ep-13},
		{0x1.fffcf564ab6b7p-1, 0x1.3207fb7420eb9p-13},
		{0x1.fffd1ac4135f9p-1, 0x1.2408e9ba3327fp-13},
		{0x1.fffd3e6d5cd87p-1, 0x1.16a501f0e42cap-13},
		{0x1.fffd607387b07p-1, 0x1.09d5f819c9e29p-13},
		{0x1.fffd80e8ce0dap-1, 0x1.fb2b792b40a22p-14},
		{0x1.fffd9fdeabccep-1, 0x1.e3bcf436a1a95p-14},
		{0x1.fffdbd65e5ad0p-1, 0x1.cd55277c18d05p-14},
		{0x1.fffdd98e903b2p-1, 0x1.b7e94604479dcp-14},
		{0x1.fffdf46816833p-1, 0x1.a36eec00926ddp-14},
		{0x1.fffe0e0140857p-1, 0x1.8fdc1b2dcf7b9p-14},
		{0x1.fffe26683972ap-1, 0x1.7d2737527c3f9p-14},
		{0x1.fffe3daa95b18p-1, 0x1.6b4702d7d5849p-14},
		{0x1.fffe53d558ae9p-1, 0x1.5a329b7d30748p-14},
		{0x1.fffe68f4fa777p-1, 0x1.49e17724f4d41p-14},
		{0x1.fffe7d156d244p-1, 0x1.3a4b60ba9aa4dp-14},
		{0x1.fffe904222101p-1, 0x1.2b6875310f785p-14},
		{0x1.fffea2860ee1ep-1, 0x1.1d312098e9dbap-14},
		{0x1.fffeb3ebb267bp-1, 0x1.0f9e1b4dd36dfp-14},
		{0x1.fffec47d19457p-1, 0x1.02a8673a94691p-14},
		{0x1.fffed443e2787p-1, 0x1.ec929a665b449p-15},
		{0x1.fffee34943b15p-1, 0x1.d4f4b4c8e09edp-15},
		{0x1.fffef1960d85dp-1, 0x1.be6abbb10a5aap-15},
		{0x1.fffeff32af7afp-1, 0x1.a8e8cc1fadef6p-15},
		{0x1.ffff0c273bea2p-1, 0x1.94637d5bacfdbp-15},
		{0x1.ffff187b6bc0ep-1, 0x1.80cfdc72220cfp-15},
		{0x1.ffff2436a21dcp-1, 0x1.6e2367dc27f95p-15},
		{0x1.ffff2f5fefcaap-1, 0x1.5c540b4936fd2p-15},
		{0x1.ffff39fe16963p-1, 0x1.4b581b8d170fcp-15},
		{0x1.ffff44178c8d2p-1, 0x1.3b2652b06c2b2p-15},
		{0x1.ffff4db27f146p-1, 0x1.2bb5cc22e5db6p-15},
		{0x1.ffff56d4d5e5ep-1, 0x1.1cfe010e2052dp-15},
		{0x1.ffff5f8435efcp-1, 0x1.0ef6c4c84a0fep-15},
		{0x1.ffff67c604180p-1, 0x1.01984165a5f36p-15},
		{0x1.ffff6f9f67e55p-1, 0x1.e9b5e8d00ce76p-16},
		{0x1.ffff77154e0d6p-1, 0x1.d16f5716c6c1ap-16},
		{0x1.ffff7e2c6aea2p-1, 0x1.ba4f035d60e02p-16},
		{0x1.ffff84e93cd75p-1, 0x1.a447b7b03f045p-16},
		{0x1.ffff8b500e77cp-1, 0x1.8f4ccca7fc90dp-16},
		{0x1.ffff9164f8e46p-1, 0x1.7b5223dac7336p-16},
		{0x1.ffff972be5c59p-1, 0x1.684c227fcacefp-16},
		{0x1.ffff9ca891572p-1, 0x1.562fac4329b48p-16},
		{0x1.ffffa1de8c582p-1, 0x1.44f21e49054f2p-16},
		{0x1.ffffa6d13de73p-1, 0x1.34894a5e24657p-16},
		{0x1.ffffab83e54b8p-1, 0x1.24eb7254ccf83p-16},
		{0x1.ffffaff99bac4p-1, 0x1.160f438c70913p-16},
		{0x1.ffffb43555b5fp-1, 0x1.07ebd2a2d2844p-16},
		{0x1.ffffb839e52f3p-1, 0x1.f4f12e9ab070ap-17},
		{0x1.ffffbc09fa7cdp-1, 0x1.db5ad0b27805cp-17},
		{0x1.ffffbfa82616bp-1, 0x1.c304efa2c6f4ep-17},
		{0x1.ffffc316d9ed0p-1, 0x1.abe09e9144b5ep-17},
		{0x1.ffffc6586abf6p-1, 0x1.95df988e76644p-17},
		{0x1.ffffc96f1165ep-1, 0x1.80f439b4ee04bp-17},
		{0x1.ffffcc5cec0c1p-1, 0x1.6d11788a69c64p-17},
		{0x1.ffffcf23ff5fcp-1, 0x1.5a2adfa0b4bc4p-17},
		{0x1.ffffd1c637b2bp-1, 0x1.4834877429b8fp-17},
		{0x1.ffffd4456a10dp-1, 0x1.37231085c7d9ap-17},
		{0x1.ffffd6a3554a1p-1, 0x1.26eb9daed6f7ep-17},
		{0x1.ffffd8e1a2f22p-1, 0x1.1783ceac28910p-17},
		{0x1.ffffdb01e8546p-1, 0x1.08e1badf0fcedp-17},
		{0x1.ffffdd05a75eap-1, 0x1.f5f7d88472604p-18},
		{0x1.ffffdeee4f810p-1, 0x1.db92b5212fb8dp-18},
		{0x1.ffffe0bd3e852p-1, 0x1.c282cd3957edap-18},
		{0x1.ffffe273c15b7p-1, 0x1.aab7abace48dcp-18},
		{0x1.ffffe41314e06p-1, 0x1.94219bfcb4928p-18},
		{0x1.ffffe59c6698bp-1, 0x1.7eb1a2075864dp-18},
		{0x1.ffffe710d565ep-1, 0x1.6a597219a93d9p-18},
		{0x1.ffffe8717232dp-1, 0x1.570b69502f313p-18},
		{0x1.ffffe9bf4098cp-1, 0x1.44ba864670882p-18},
		{0x1.ffffeafb377d5p-1, 0x1.335a62115bce2p-18},
		{0x1.ffffec2641a9ep-1, 0x1.22df298214423p-18},
		{0x1.ffffed413e5b7p-1, 0x1.133d96ae7e0ddp-18},
		{0x1.ffffee4d01cd6p-1, 0x1.046aeabcfcdecp-18},
		{0x1.ffffef4a55bd4p-1, 0x1.ecb9cfe1d8642p-19},
		{0x1.fffff039f9e8fp-1, 0x1.d21397ead99cbp-19},
		{0x1.fffff11ca4876p-1, 0x1.b8d094c86d374p-19},
		{0x1.fffff1f302bc1p-1, 0x1.a0df0f0c626dcp-19},
		{0x1.fffff2bdb904dp-1, 0x1.8a2e269750a39p-19},
		{0x1.fffff37d63a36p-1, 0x1.74adc8f4064d3p-19},
		{0x1.fffff43297019p-1, 0x1.604ea819f007cp-19},
		{0x1.fffff4dde0118p-1, 0x1.4d0231928c6f9p-19},
		{0x1.fffff57fc4a95p-1, 0x1.3aba85fe22e1fp-19},
		{0x1.fffff618c3da6p-1, 0x1.296a70f414053p-19},
		{0x1.fffff6a956450p-1, 0x1.1905613b3abf2p-19},
		{0x1.fffff731ee681p-1, 0x1.097f6156f32c5p-19},
		{0x1.fffff7b2f8ed6p-1, 0x1.f59a20caf6695p-20},
		{0x1.fffff82cdcf1bp-1, 0x1.d9c73698fb1dcp-20},
		{0x1.fffff89ffc4aap-1, 0x1.bf716c6168baep-20},
		{0x1.fffff90cb3c81p-1, 0x1.a6852c6b58392p-20},
		{0x1.fffff9735b73bp-1, 0x1.8eefd70594a88p-20},
		{0x1.fffff9d446cccp-1, 0x1.789fb715aae95p-20},
		{0x1.fffffa2fc5015p-1, 0x1.6383f726a8e04p-20},
		{0x1.fffffa8621251p-1, 0x1.4f8c96f26a26ap-20},
		{0x1.fffffad7a2652p-1, 0x1.3caa61607f920p-20},
		{0x1.fffffb248c39dp-1, 0x1.2acee2f5ecdb8p-20},
		{0x1.fffffb6d1e95dp-1, 0x1.19ec60b1242edp-20},
		{0x1.fffffbb196132p-1, 0x1.09f5cf4dd2877p-20},
		{0x1.fffffbf22c1e2p-1, 0x1.f5bd95d8730d8p-21},
		{0x1.fffffc2f171e3p-1, 0x1.d9371e2ff7c35p-21},
		{0x1.fffffc688a9cfp-1, 0x1.be41de54d155ap-21},
		{0x1.fffffc9eb76acp-1, 0x1.a4c89e08ef4f3p-21},
		{0x1.fffffcd1cbc28p-1, 0x1.8cb738399b12cp-21},
		{0x1.fffffd01f36afp-1, 0x1.75fa8dbc84becp-21},
		{0x1.fffffd2f57d68p-1, 0x1.608078a70dcbcp-21},
		{0x1.fffffd5a2041fp-1, 0x1.4c37c0394d094p-21},
		{0x1.fffffd8271d12p-1, 0x1.39100d5687bfep-21},
		{0x1.fffffda86faa9p-1, 0x1.26f9df8519bd6p-21},
		{0x1.fffffdcc3b117p-1, 0x1.15e6827001f18p-21},
		{0x1.fffffdedf37edp-1, 0x1.05c803e4831c1p-21},
		{0x1.fffffe0db6b91p-1, 0x1.ed22548cffd35p-22},
		{0x1.fffffe2ba0ea5p-1, 0x1.d06ad6ecdf971p-22},
		{0x1.fffffe47ccb60p-1, 0x1.b551c847fbc96p-22},
		{0x1.fffffe62534d4p-1, 0x1.9bc09f112b494p-22},
		{0x1.fffffe7b4c81ep-1, 0x1.83a1ff0aa239dp-22},
		{0x1.fffffe92ced93p-1, 0x1.6ce1aa3fd7bddp-22},
		{0x1.fffffea8ef9cfp-1, 0x1.576c72b514859p-22},
		{0x1.fffffebdc2ec6p-1, 0x1.43302cc4a0da8p-22},
		{0x1.fffffed15bcbap-1, 0x1.301ba221dc9bbp-22},
		{0x1.fffffee3cc32cp-1, 0x1.1e1e857adc568p-22},
		{0x1.fffffef5251c2p-1, 0x1.0d2966b1746f7p-22},
		{0x1.ffffff0576917p-1, 0x1.fa5b4f49cc6b2p-23},
		{0x1.ffffff14cfb92p-1, 0x1.dc3ae30b55c16p-23},
		{0x1.ffffff233ee1dp-1, 0x1.bfd7555a3bd68p-23},
		{0x1.ffffff30d18e8p-1, 0x1.a517d9e61628ap-23},
		{0x1.ffffff3d9480fp-1, 0x1.8be4f8f6c951fp-23},
		{0x1.ffffff4993c46p-1, 0x1.74287ded49339p-23},
		{0x1.ffffff54dab72p-1, 0x1.5dcd669f2cd34p-23},
		{0x1.ffffff5f74141p-1, 0x1.48bfd38302870p-23},
		{0x1.ffffff6969fb8p-1, 0x1.34ecf8a3c124ap-23},
		{0x1.ffffff72c5fb6p-1, 0x1.22430f521cbcfp-23},
		{0x1.ffffff7b91176p-1, 0x1.10b1488aeb235p-23},
		{0x1.ffffff83d3d07p-1, 0x1.0027c00a263a6p-23},
		{0x1.ffffff8b962bep-1, 0x1.e12ee004efc37p-24},
		{0x1.ffffff92dfba2p-1, 0x1.c3e44ae32b16bp-24},
		{0x1.ffffff99b79d2p-1, 0x1.a854ea14102a8p-24},
		{0x1.ffffffa0248e8p-1, 0x1.8e6761569f45dp-24},
		{0x1.ffffffa62ce54p-1, 0x1.7603bac345f65p-24},
		{0x1.ffffffabd69b4p-1, 0x1.5f1353cdad001p-24},
		{0x1.ffffffb127525p-1, 0x1.4980cb3c80949p-24},
		{0x1.ffffffb624592p-1, 0x1.3537f00b6ad4dp-24},
		{0x1.ffffffbad2affp-1, 0x1.2225b12bffc68p-24},
		{0x1.ffffffbf370cdp-1, 0x1.10380e1adb7e9p-24},
		{0x1.ffffffc355dfdp-1, 0x1.febc107d5efaap-25},
		{0x1.ffffffc733572p-1, 0x1.df0f2a0ee6946p-25},
		{0x1.ffffffcad3626p-1, 0x1.c14b2188bcee4p-25},
		{0x1.ffffffce39b67p-1, 0x1.a553644f7f07dp-25},
		{0x1.ffffffd169d0cp-1, 0x1.8b0cfce0579dfp-25},
		{0x1.ffffffd466fa5p-1, 0x1.725e7c5dd20f7p-25},
		{0x1.ffffffd7344aap-1, 0x1.5b2fe547a1340p-25},
		{0x1.ffffffd9d4aabp-1, 0x1.456a974e92e93p-25},
		{0x1.ffffffdc4ad7ap-1, 0x1.30f93c3699078p-25},
		{0x1.ffffffde9964ep-1, 0x1.1dc7b5b978cf8p-25},
		{0x1.ffffffe0c2bf0p-1, 0x1.0bc30c5d52f15p-25},
		{0x1.ffffffe2c92dbp-1, 0x1.f5b2be65a0c7fp-26},
		{0x1.ffffffe4aed5ep-1, 0x1.d5f3a8dea7357p-26},
		{0x1.ffffffe675bbdp-1, 0x1.b82915b03515bp-26},
		{0x1.ffffffe81fc4ep-1, 0x1.9c3517e789488p-26},
		{0x1.ffffffe9aeb97p-1, 0x1.81fb7df06136ep-26},
		{0x1.ffffffeb24467p-1, 0x1.6961b8d641d06p-26},
		{0x1.ffffffec81ff2p-1, 0x1.524ec4d916caep-26},
		{0x1.ffffffedc95e7p-1, 0x1.3cab1343d18d1p-26},
		{0x1.ffffffeefbc85p-1, 0x1.2860757487a01p-26},
		{0x1.fffffff01a8b6p-1, 0x1.155a09065d4f7p-26},
		{0x1.fffffff126e1ep-1, 0x1.0384250e4c9fcp-26},
		{0x1.fffffff221f30p-1, 0x1.e59890b926c78p-27},
		{0x1.fffffff30cd3fp-1, 0x1.c642116a8a9e3p-27},
		{0x1.fffffff3e8892p-1, 0x1.a8e405e651ab6p-27},
		{0x1.fffffff4b606fp-1, 0x1.8d5f98114f872p-27},
		{0x1.fffffff57632dp-1, 0x1.7397c5a66e307p-27},
		{0x1.fffffff629e44p-1, 0x1.5b71456c5a4c4p-27},
		{0x1.fffffff6d1e56p-1, 0x1.44d26de513197p-27},
		{0x1.fffffff76ef3fp-1, 0x1.2fa31d6371537p-27},
		{0x1.fffffff801c1fp-1, 0x1.1bcca373b7b43p-27},
		{0x1.fffffff88af67p-1, 0x1.0939ab853339fp-27},
		{0x1.fffffff90b2e3p-1, 0x1.efac5187b2863p-28},
		{0x1.fffffff982fc1p-1, 0x1.cf1e86235d0e6p-28},
		{0x1.fffffff9f2e9fp-1, 0x1.b0a68a2128babp-28},
		{0x1.fffffffa5b790p-1, 0x1.9423165bc4444p-28},
		{0x1.fffffffabd229p-1, 0x1.7974e743dea3cp-28},
		{0x1.fffffffb18582p-1, 0x1.607e9eacd1050p-28},
		{0x1.fffffffb6d844p-1, 0x1.4924a74dec728p-28},
		{0x1.fffffffbbd0aap-1, 0x1.334d19e0c2160p-28},
		{0x1.fffffffc0748fp-1, 0x1.1edfa3c5f5ccap-28},
		{0x1.fffffffc4c96cp-1, 0x1.0bc56f1b54701p-28},
		{0x1.fffffffc8d462p-1, 0x1.f3d2185e047d9p-29},
		{0x1.fffffffcc9a41p-1, 0x1.d26cb87945e87p-29},
		{0x1.fffffffd01f89p-1, 0x1.b334fac4b9f99p-29},
		{0x1.fffffffd36871p-1, 0x1.96076f7918d1cp-29},
		{0x1.fffffffd678edp-1, 0x1.7ac2d72fc2c63p-29},
		{0x1.fffffffd954aep-1, 0x1.614801550319ep-29},
		{0x1.fffffffdbff2ap-1, 0x1.4979ac8b28926p-29},
		{0x1.fffffffde7ba0p-1, 0x1.333c68e2d0548p-29},
		{0x1.fffffffe0cd16p-1, 0x1.1e767bce37dd7p-29},
		{0x1.fffffffe2f664p-1, 0x1.0b0fc5b6d05a0p-29},
		{0x1.fffffffe4fa30p-1, 0x1.f1e3523b41d7dp-30},
		{0x1.fffffffe6daf7p-1, 0x1.d00de6608effep-30},
		{0x1.fffffffe89b0cp-1, 0x1.b0778b7b3301ap-30},
		{0x1.fffffffea3c9ap-1, 0x1.92fb04ec0f6cfp-30},
		{0x1.fffffffebc1a9p-1, 0x1.77756ec9f78fap-30},
		{0x1.fffffffed2c21p-1, 0x1.5dc61922d5a06p-30},
		{0x1.fffffffee7dc8p-1, 0x1.45ce65699ff6dp-30},
		{0x1.fffffffefb847p-1, 0x1.2f71a5f159970p-30},
		{0x1.ffffffff0dd2bp-1, 0x1.1a94ff571654fp-30},
		{0x1.ffffffff1ede9p-1, 0x1.071f4bbea09ecp-30},
		{0x1.ffffffff2ebdap-1, 0x1.e9f1ff8ddd774p-31},
		{0x1.ffffffff3d843p-1, 0x1.c818223a202c7p-31},
		{0x1.ffffffff4b453p-1, 0x1.a887bd2b4404dp-31},
		{0x1.ffffffff58126p-1, 0x1.8b1a336c5eb6bp-31},
		{0x1.ffffffff63fc3p-1, 0x1.6fab63324088ap-31},
		{0x1.ffffffff6f121p-1, 0x1.56197e30205bap-31},
		{0x1.ffffffff79626p-1, 0x1.3e44e45301b92p-31},
		{0x1.ffffffff82fabp-1, 0x1.281000bfe4c3fp-31},
		{0x1.ffffffff8be77p-1, 0x1.135f28f2d50b4p-31},
		{0x1.ffffffff94346p-1, 0x1.00187dded5975p-31},
		{0x1.ffffffff9bec8p-1, 0x1.dc479de0ef001p-32},
		{0x1.ffffffffa319fp-1, 0x1.bad4fdad3caa1p-32},
		{0x1.ffffffffa9c63p-1, 0x1.9baed3ed27ab8p-32},
		{0x1.ffffffffaffa4p-1, 0x1.7ead9ce4285bbp-32},
		{0x1.ffffffffb5be5p-1, 0x1.63ac6b4edc88ep-32},
		{0x1.ffffffffbb1a2p-1, 0x1.4a88be2a6390cp-32},
		{0x1.ffffffffc014ep-1, 0x1.332259185f1a0p-32},
		{0x1.ffffffffc4b56p-1, 0x1.1d5b1f3793044p-32},
		{0x1.ffffffffc901cp-1, 0x1.0916f04b6e18bp-32},
		{0x1.ffffffffccfffp-1, 0x1.ec77101de6926p-33},
		{0x1.ffffffffd0b56p-1, 0x1.c960bf23153e0p-33},
		{0x1.ffffffffd4271p-1, 0x1.a8bd20fc65ef7p-33},
		{0x1.ffffffffd759dp-1, 0x1.8a61745ec7d1dp-33},
		{0x1.ffffffffda520p-1, 0x1.6e25d0e756261p-33},
		{0x1.ffffffffdd13cp-1, 0x1.53e4f7d1666cbp-33},
		{0x1.ffffffffdfa2dp-1, 0x1.3b7c27a7ddb0ep-33},
		{0x1.ffffffffe202dp-1, 0x1.24caf2c32af14p-33},
		{0x1.ffffffffe4371p-1, 0x1.0fb3186804d0fp-33},
		{0x1.ffffffffe642ap-1, 0x1.f830c0bb41fd7p-34},
		{0x1.ffffffffe8286p-1, 0x1.d3c0f1a91c846p-34},
		{0x1.ffffffffe9eb0p-1, 0x1.b1e5acf351d87p-34},
		{0x1.ffffffffeb8d0p-1, 0x1.92712d259ce66p-34},
		{0x1.ffffffffed10ap-1, 0x1.7538c60a04476p-34},
		{0x1.ffffffffee782p-1, 0x1.5a14b04b47879p-34},
		{0x1.ffffffffefc57p-1, 0x1.40dfd87456f4cp-34},
		{0x1.fffffffff0fa7p-1, 0x1.2977b1172b9d5p-34},
		{0x1.fffffffff218fp-1, 0x1.13bc07e891491p-34},
		{0x1.fffffffff3227p-1, 0x1.ff1dbb4300811p-35},
		{0x1.fffffffff4188p-1, 0x1.d9a880f306bd8p-35},
		{0x1.fffffffff4fc9p-1, 0x1.b6e45220b55e0p-35},
		{0x1.fffffffff5cfdp-1, 0x1.96a0b33f2c4dap-35},
		{0x1.fffffffff6939p-1, 0x1.78b07e9e924acp-35},
		{0x1.fffffffff748ep-1, 0x1.5ce9ab1670dd2p-35},
		{0x1.fffffffff7f0dp-1, 0x1.4325167006bb0p-35},
		{0x1.fffffffff88c5p-1, 0x1.2b3e53538ff3fp-35},
		{0x1.fffffffff91c6p-1, 0x1.15137a7f44864p-35},
		{0x1.fffffffff9a1bp-1, 0x1.0084ff125639dp-35},
		{0x1.fffffffffa1d2p-1, 0x1.daeb0b7311ec7p-36},
		{0x1.fffffffffa8f6p-1, 0x1.b7937d1c40c52p-36},
		{0x1.fffffffffaf92p-1, 0x1.96d082f59ab06p-36},
		{0x1.fffffffffb5b0p-1, 0x1.7872d9fa10aadp-36},
		{0x1.fffffffffbb58p-1, 0x1.5c4e8e37bc7d0p-36},
		{0x1.fffffffffc095p-1, 0x1.423ac0df49a40p-36},
		{0x1.fffffffffc56dp-1, 0x1.2a117230ad284p-36},
		{0x1.fffffffffc9e8p-1, 0x1.13af4f04f9998p-36},
		{0x1.fffffffffce0dp-1, 0x1.fde703724e560p-37},
		{0x1.fffffffffd1e1p-1, 0x1.d77f0c82e7641p-37},
		{0x1.fffffffffd56cp-1, 0x1.b3ee02611d7ddp-37},
		{0x1.fffffffffd8b3p-1, 0x1.92ff33023d5bdp-37},
		{0x1.fffffffffdbbap-1, 0x1.7481a9e69f53fp-37},
		{0x1.fffffffffde86p-1, 0x1.5847eda620959p-37},
		{0x1.fffffffffe11dp-1, 0x1.3e27c1fcc74bdp-37},
		{0x1.fffffffffe380p-1, 0x1.25f9ee0b923dcp-37},
		{0x1.fffffffffe5b6p-1, 0x1.0f9a0686531ffp-37},
		{0x1.fffffffffe7c0p-1, 0x1.f5cc7718082afp-38},
		{0x1.fffffffffe9a2p-1, 0x1.cf7e53d6a2ca5p-38},
		{0x1.fffffffffeb60p-1, 0x1.ac0f5f3229372p-38},
		{0x1.fffffffffecfbp-1, 0x1.8b498644847eap-38},
		{0x1.fffffffffee77p-1, 0x1.6cfa9bcca59dcp-38},
		{0x1.fffffffffefd6p-1, 0x1.50f411d4fd2cdp-38},
		{0x1.ffffffffff11ap-1, 0x1.370ab8327af5ep-38},
		{0x1.ffffffffff245p-1, 0x1.1f167f88c6b6ep-38},
		{0x1.ffffffffff359p-1, 0x1.08f24085d4597p-38},
		{0x1.ffffffffff457p-1, 0x1.e8f70e181d619p-39},
		{0x1.ffffffffff542p-1, 0x1.c324c20e337dcp-39},
		{0x1.ffffffffff61bp-1, 0x1.a03261574b54ep-39},
		{0x1.ffffffffff6e3p-1, 0x1.7fe903cdf5855p-39},
		{0x1.ffffffffff79bp-1, 0x1.6215c58da3450p-39},
		{0x1.ffffffffff845p-1, 0x1.46897d4b69fc6p-39},
		{0x1.ffffffffff8e2p-1, 0x1.2d1877d731b7bp-39},
		{0x1.ffffffffff973p-1, 0x1.159a386b11517p-39},
		{0x1.ffffffffff9f8p-1, 0x1.ffd27ae9393cep-40},
		{0x1.ffffffffffa73p-1, 0x1.d7c593130dd0bp-40},
		{0x1.ffffffffffae4p-1, 0x1.b2cd607c79bcfp-40},
		{0x1.ffffffffffb4cp-1, 0x1.90ae4d3405651p-40},
		{0x1.ffffffffffbadp-1, 0x1.71312dd1759e2p-40},
		{0x1.ffffffffffc05p-1, 0x1.5422ef5d8949dp-40},
		{0x1.ffffffffffc57p-1, 0x1.39544b0ecc957p-40},
		{0x1.ffffffffffca2p-1, 0x1.20997f73e73ddp-40},
		{0x1.ffffffffffce7p-1, 0x1.09ca0eaacd277p-40},
		{0x1.ffffffffffd27p-1, 0x1.e9810295890ecp-41},
		{0x1.ffffffffffd62p-1, 0x1.c2b45b5aa4a1dp-41},
		{0x1.ffffffffffd98p-1, 0x1.9eee068fa7596p-41},
		{0x1.ffffffffffdcap-1, 0x1.7df2b399c10a8p-41},
		{0x1.ffffffffffdf8p-1, 0x1.5f8b87a31bd85p-41},
		{0x1.ffffffffffe22p-1, 0x1.4385c96e9a2d9p-41},
		{0x1.ffffffffffe49p-1, 0x1.29b2933ef4cbcp-41},
		{0x1.ffffffffffe6cp-1, 0x1.11e68a6378f8ap-41},
		{0x1.ffffffffffe8dp-1, 0x1.f7f338086a86bp-42},
		{0x1.ffffffffffeabp-1, 0x1.cf8d7d9ce040ap-42},
		{0x1.ffffffffffec7p-1, 0x1.aa577251ae484p-42},
		{0x1.ffffffffffee1p-1, 0x1.8811d739efb5ep-42},
		{0x1.ffffffffffef8p-1, 0x1.68823e52970bep-42},
		{0x1.fffffffffff0ep-1, 0x1.4b72ae68e8b4cp-42},
		{0x1.fffffffffff22p-1, 0x1.30b14dbe876bcp-42},
		{0x1.fffffffffff34p-1, 0x1.181012ef86610p-42},
		{0x1.fffffffffff45p-1, 0x1.01647ba798744p-42},
		{0x1.fffffffffff54p-1, 0x1.d90e917701675p-43},
		{0x1.fffffffffff62p-1, 0x1.b2a87e86d0c8ap-43},
		{0x1.fffffffffff6fp-1, 0x1.8f53dcb377293p-43},
		{0x1.fffffffffff7bp-1, 0x1.6ed2f2515e933p-43},
		{0x1.fffffffffff86p-1, 0x1.50ecc9ed47f19p-43},
		{0x1.fffffffffff90p-1, 0x1.356cd5ce7799ep-43},
		{0x1.fffffffffff9ap-1, 0x1.1c229a587ab78p-43},
		{0x1.fffffffffffa2p-1, 0x1.04e15ecc7f3f6p-43},
		{0x1.fffffffffffaap-1, 0x1.deffc7e6a6017p-44},
		{0x1.fffffffffffb1p-1, 0x1.b7b040832f310p-44},
		{0x1.fffffffffffb8p-1, 0x1.938e021f36d76p-44},
		{0x1.fffffffffffbep-1, 0x1.7258610b3b233p-44},
		{0x1.fffffffffffc3p-1, 0x1.53d3bfc82a909p-44},
		{0x1.fffffffffffc8p-1, 0x1.37c92babdc2fdp-44},
		{0x1.fffffffffffcdp-1, 0x1.1e06010120f6ap-44},
		{0x1.fffffffffffd1p-1, 0x1.065b9616170d4p-44},
		{0x1.fffffffffffd5p-1, 0x1.e13dd96b3753ap-45},
		{0x1.fffffffffffd9p-1, 0x1.b950d32467392p-45},
		{0x1.fffffffffffdcp-1, 0x1.94a72263259a5p-45},
		{0x1.fffffffffffdfp-1, 0x1.72fd93e036cdcp-45},
		{0x1.fffffffffffe2p-1, 0x1.54164576929abp-45},
		{0x1.fffffffffffe4p-1, 0x1.37b83c521fe96p-45},
		{0x1.fffffffffffe7p-1, 0x1.1daf033182e96p-45},
		{0x1.fffffffffffe9p-1, 0x1.05ca50205d26ap-45},
		{0x1.fffffffffffebp-1, 0x1.dfbb6235639fap-46},
		{0x1.fffffffffffedp-1, 0x1.b7807e294781fp-46},
		{0x1.fffffffffffeep-1, 0x1.9298add70a734p-46},
		{0x1.ffffffffffff0p-1, 0x1.70beaf9c7ffb6p-46},
		{0x1.ffffffffffff1p-1, 0x1.51b2cd6709222p-46},
		{0x1.ffffffffffff3p-1, 0x1.353a6cf7f7fffp-46},
		{0x1.ffffffffffff4p-1, 0x1.1b1fa8cbe84a7p-46},
		{0x1.ffffffffffff5p-1, 0x1.0330f0fd69921p-46},
		{0x1.ffffffffffff6p-1, 0x1.da81670f96f9bp-47},
		{0x1.ffffffffffff7p-1, 0x1.b24a16b4d09aap-47},
		{0x1.ffffffffffff7p-1, 0x1.8d6eeb6efdbd6p-47},
		{0x1.ffffffffffff8p-1, 0x1.6ba91ac734785p-47},
		{0x1.ffffffffffff9p-1, 0x1.4cb7966770ab5p-47},
		{0x1.ffffffffffff9p-1, 0x1.305e9721d0981p-47},
		{0x1.ffffffffffffap-1, 0x1.1667311fff70ap-47},
		{0x1.ffffffffffffbp-1, 0x1.fd3de10d62855p-48},
		{0x1.ffffffffffffbp-1, 0x1.d1aefbcd48d0cp-48},
		{0x1.ffffffffffffbp-1, 0x1.a9cc93c25aca9p-48},
		{0x1.ffffffffffffcp-1, 0x1.85487ee3ea735p-48},
		{0x1.ffffffffffffcp-1, 0x1.63daf8b4b1e0cp-48},
		{0x1.ffffffffffffdp-1, 0x1.45421e69a6ca1p-48},
		{0x1.ffffffffffffdp-1, 0x1.294175802d99ap-48},
		{0x1.ffffffffffffdp-1, 0x1.0fa17bf41068fp-48},
		{0x1.ffffffffffffdp-1, 0x1.f05e82aae2bb9p-49},
		{0x1.ffffffffffffep-1, 0x1.c578101b29058p-49},
		{0x1.ffffffffffffep-1, 0x1.9e39dc5dd2f7cp-49},
		{0x1.ffffffffffffep-1, 0x1.7a553a728bbf2p-49},
		{0x1.ffffffffffffep-1, 0x1.5982008db1304p-49},
		{0x1.ffffffffffffep-1, 0x1.3b7e00422e51bp-49},
		{0x1.ffffffffffffep-1, 0x1.200c898d9ee3ep-49},
		{0x1.fffffffffffffp-1, 0x1.06f5f7eb65a56p-49},
		{0x1.fffffffffffffp-1, 0x1.e00e9148a1d25p-50},
		{0x1.fffffffffffffp-1, 0x1.b623734024e92p-50},
		{0x1.fffffffffffffp-1, 0x1.8fd4e01891bf8p-50},
		{0x1.fffffffffffffp-1, 0x1.6cd44c7470d89p-50},
		{0x1.fffffffffffffp-1, 0x1.4cd9c04158cd7p-50},
		{0x1.fffffffffffffp-1, 0x1.2fa34bf5c8344p-50},
		{0x1.fffffffffffffp-1, 0x1.14f4890ff2461p-50},
		{0x1.fffffffffffffp-1, 0x1.f92c49dfa4df5p-51},
		{0x1.fffffffffffffp-1, 0x1.ccaaea71ab0dfp-51},
		{0x1.fffffffffffffp-1, 0x1.a40829f001197p-51},
		{0x1.0000000000000p+0, 0x1.7eef13b59e96cp-51},
		{0x1.0000000000000p+0, 0x1.5d11e1a252bf5p-51},
		{0x1.0000000000000p+0, 0x1.3e296303b2297p-51},
		{0x1.0000000000000p+0, 0x1.21f47009f43cep-51},
		{0x1.0000000000000p+0, 0x1.083768c5e4541p-51},
		{0x1.0000000000000p+0, 0x1.e1777d831265ep-52},
		{0x1.0000000000000p+0, 0x1.b69f10b0191b5p-52},
		{0x1.0000000000000p+0, 0x1.8f8a3a05b5b52p-52},
		{0x1.0000000000000p+0, 0x1.6be573c40c8e7p-52},
		{0x1.0000000000000p+0, 0x1.4b645ba991fdbp-52},
		{0x1.0000000000000p+0, 0x1.2dc119095729fp-52},
	},
};

typedef struct 
{
	struct
	{
		float erfc, scale;
	} tab[645];
}erfcf_data;

const erfcf_data __erfcf_data = {
	.tab = {
		{0x1p47, 0x1.20dd76p47},
		{0x1.f6f944p46, 0x1.20cb68p47},
		{0x1.edf3aap46, 0x1.209546p47},
		{0x1.e4f05p46, 0x1.203b26p47},
		{0x1.dbf056p46, 0x1.1fbd28p47},
		{0x1.d2f4dcp46, 0x1.1f1b7ap47},
		{0x1.c9fefep46, 0x1.1e565cp47},
		{0x1.c10fd4p46, 0x1.1d6e14p47},
		{0x1.b8287ap46, 0x1.1c62fap47},
		{0x1.af4ap46, 0x1.1b3572p47},
		{0x1.a6757ep46, 0x1.19e5eap47},
		{0x1.9dabfcp46, 0x1.1874dep47},
		{0x1.94ee88p46, 0x1.16e2d8p47},
		{0x1.8c3e24p46, 0x1.153068p47},
		{0x1.839bd6p46, 0x1.135e3p47},
		{0x1.7b0894p46, 0x1.116cd8p47},
		{0x1.728558p46, 0x1.0f5d16p47},
		{0x1.6a1312p46, 0x1.0d2fa6p47},
		{0x1.61b2acp46, 0x1.0ae55p47},
		{0x1.596508p46, 0x1.087ee4p47},
		{0x1.512b06p46, 0x1.05fd3ep47},
		{0x1.49057ap46, 0x1.03614p47},
		{0x1.40f536p46, 0x1.00abdp47},
		{0x1.38fbp46, 0x1.fbbbbep46},
		{0x1.311796p46, 0x1.f5f0cep46},
		{0x1.294bb4p46, 0x1.eff8c4p46},
		{0x1.21980ap46, 0x1.e9d5a8p46},
		{0x1.19fd3ep46, 0x1.e38988p46},
		{0x1.127bf2p46, 0x1.dd167cp46},
		{0x1.0b14bcp46, 0x1.d67ea2p46},
		{0x1.03c82ap46, 0x1.cfc41ep46},
		{0x1.f92d8cp45, 0x1.c8e91cp46},
		{0x1.eb0214p45, 0x1.c1efcap46},
		{0x1.dd0edap45, 0x1.bada5ap46},
		{0x1.cf54b4p45, 0x1.b3aafcp46},
		{0x1.c1d46ap45, 0x1.ac63e8p46},
		{0x1.b48eaep45, 0x1.a5074ep46},
		{0x1.a78428p45, 0x1.9d9762p46},
		{0x1.9ab566p45, 0x1.96165p46},
		{0x1.8e22eap45, 0x1.8e8646p46},
		{0x1.81cd24p45, 0x1.86e96ap46},
		{0x1.75b47p45, 0x1.7f41dcp46},
		{0x1.69d91ep45, 0x1.7791b8p46},
		{0x1.5e3b66p45, 0x1.6fdb12p46},
		{0x1.52db78p45, 0x1.681ff2p46},
		{0x1.47b96ep45, 0x1.60625cp46},
		{0x1.3cd554p45, 0x1.58a446p46},
		{0x1.322f26p45, 0x1.50e79ep46},
		{0x1.27c6d2p45, 0x1.492e42p46},
		{0x1.1d9c34p45, 0x1.417a0cp46},
		{0x1.13af1ep45, 0x1.39ccc2p46},
		{0x1.09ff5p45, 0x1.32281ep46},
		{0x1.008c8p45, 0x1.2a8dcep46},
		{0x1.eeaca8p44, 0x1.22ff72p46},
		{0x1.dcb8cap44, 0x1.1b7e98p46},
		{0x1.cb3c86p44, 0x1.140cc4p46},
		{0x1.ba36dap44, 0x1.0cab62p46},
		{0x1.a9a6bap44, 0x1.055bd6p46},
		{0x1.998afap44, 0x1.fc3ee6p45},
		{0x1.89e25ep44, 0x1.edeeeep45},
		{0x1.7aab98p44, 0x1.dfca26p45},
		{0x1.6be542p44, 0x1.d1d2dp45},
		{0x1.5d8decp44, 0x1.c40b08p45},
		{0x1.4fa40ep44, 0x1.b674c8p45},
		{0x1.422616p44, 0x1.a911fp45},
		{0x1.351262p44, 0x1.9be438p45},
		{0x1.28674p44, 0x1.8eed36p45},
		{0x1.1c22f8p44, 0x1.822e66p45},
		{0x1.1043c2p44, 0x1.75a91ap45},
		{0x1.04c7cap44, 0x1.695e8cp45},
		{0x1.f35a72p43, 0x1.5d4fd4p45},
		{0x1.dde456p43, 0x1.517de6p45},
		{0x1.c9296cp43, 0x1.45e99cp45},
		{0x1.b525d6p43, 0x1.3a93b2p45},
		{0x1.a1d5a6p43, 0x1.2f7cc4p45},
		{0x1.8f34eap43, 0x1.24a554p45},
		{0x1.7d3fa6p43, 0x1.1a0dc6p45},
		{0x1.6bf1dcp43, 0x1.0fb662p45},
		{0x1.5b4784p43, 0x1.059f5ap45},
		{0x1.4b3c98p43, 0x1.f79184p44},
		{0x1.3bcd14p43, 0x1.e4653p44},
		{0x1.2cf4eep43, 0x1.d1b982p44},
		{0x1.1eb024p43, 0x1.bf8e1cp44},
		{0x1.10fab8p43, 0x1.ade26cp44},
		{0x1.03d0acp43, 0x1.9cb5bep44},
		{0x1.ee5c18p42, 0x1.8c0732p44},
		{0x1.d61dd6p42, 0x1.7bd5c8p44},
		{0x1.bedec8p42, 0x1.6c2056p44},
		{0x1.a8973cp42, 0x1.5ce596p44},
		{0x1.933f9p42, 0x1.4e241ep44},
		{0x1.7ed03ap42, 0x1.3fda6cp44},
		{0x1.6b41ccp42, 0x1.3206dcp44},
		{0x1.588cf2p42, 0x1.24a7b8p44},
		{0x1.46aa72p42, 0x1.17bb2cp44},
		{0x1.359332p42, 0x1.0b3f52p44},
		{0x1.254038p42, 0x1.fe646p43},
		{0x1.15aaa8p42, 0x1.e72372p43},
		{0x1.06cbcap42, 0x1.d0b7ap43},
		{0x1.f13a04p41, 0x1.bb1c98p43},
		{0x1.d62fbep41, 0x1.a64de6p43},
		{0x1.bc6c1ep41, 0x1.92470ap43},
		{0x1.a3e2ccp41, 0x1.7f036cp43},
		{0x1.8c87b8p41, 0x1.6c7e64p43},
		{0x1.764f2p41, 0x1.5ab342p43},
		{0x1.612d8ap41, 0x1.499d48p43},
		{0x1.4d17cap41, 0x1.3937b2p43},
		{0x1.3a03p41, 0x1.297dbap43},
		{0x1.27e498p41, 0x1.1a6a96p43},
		{0x1.16b24cp41, 0x1.0bf97ep43},
		{0x1.066222p41, 0x1.fc4b5ep42},
		{0x1.edd4d2p40, 0x1.e1d4dp42},
		{0x1.d08382p40, 0x1.c885ep42},
		{0x1.b4be2p40, 0x1.b0553p42},
		{0x1.9a7316p40, 0x1.99397ap42},
		{0x1.81915cp40, 0x1.83298ep42},
		{0x1.6a088p40, 0x1.6e1c58p42},
		{0x1.53c89ep40, 0x1.5a08e8p42},
		{0x1.3ec25ep40, 0x1.46e66cp42},
		{0x1.2ae6fap40, 0x1.34ac36p42},
		{0x1.18282ep40, 0x1.2351c2p42},
		{0x1.067844p40, 0x1.12ceb4p42},
		{0x1.eb940ep39, 0x1.031ad6p42},
		{0x1.cc2186p39, 0x1.e85c44p41},
		{0x1.ae808cp39, 0x1.cc018p41},
		{0x1.9299bp39, 0x1.b1160ap41},
		{0x1.785674p39, 0x1.978ae8p41},
		{0x1.5fa14ap39, 0x1.7f5188p41},
		{0x1.486586p39, 0x1.685bb6p41},
		{0x1.328f5ep39, 0x1.529b9ep41},
		{0x1.1e0be6p39, 0x1.3e03d8p41},
		{0x1.0ac8fcp39, 0x1.2a875cp41},
		{0x1.f16aaep38, 0x1.181984p41},
		{0x1.cf80d4p38, 0x1.06ae14p41},
		{0x1.afb4e2p38, 0x1.ec7262p40},
		{0x1.91e8bep38, 0x1.cd5ecap40},
		{0x1.75ffb4p38, 0x1.b00b38p40},
		{0x1.5bde72p38, 0x1.94624ep40},
		{0x1.436af4p38, 0x1.7a4f6ap40},
		{0x1.2c8c7ap38, 0x1.61beaep40},
		{0x1.172b7ap38, 0x1.4a9cf6p40},
		{0x1.033198p38, 0x1.34d7dcp40},
		{0x1.e11332p37, 0x1.205dacp40},
		{0x1.be3ebp37, 0x1.0d1d6ap40},
		{0x1.9dbf72p37, 0x1.f60d8ap39},
		{0x1.7f714p37, 0x1.d4143ap39},
		{0x1.6331cap37, 0x1.b430ecp39},
		{0x1.48e09cp37, 0x1.9646f4p39},
		{0x1.305ef8p37, 0x1.7a3adep39},
		{0x1.198fd6p37, 0x1.5ff276p39},
		{0x1.0457c6p37, 0x1.4754acp39},
		{0x1.e139bcp36, 0x1.30499cp39},
		{0x1.bc8d52p36, 0x1.1aba78p39},
		{0x1.9a7c3p36, 0x1.06918cp39},
		{0x1.7adadep36, 0x1.e77448p38},
		{0x1.5d806ap36, 0x1.c4412cp38},
		{0x1.424642p36, 0x1.a36454p38},
		{0x1.290826p36, 0x1.84ba3p38},
		{0x1.11a3f8p36, 0x1.6821p38},
		{0x1.f7f358p35, 0x1.4d78bcp38},
		{0x1.cfd652p35, 0x1.34a306p38},
		{0x1.aab85ap35, 0x1.1d8318p38},
		{0x1.88647p35, 0x1.07fdb4p38},
		{0x1.68a8e4p35, 0x1.e7f232p37},
		{0x1.4b5726p35, 0x1.c2b9dp37},
		{0x1.30439cp35, 0x1.a02436p37},
		{0x1.174578p35, 0x1.8005fp37},
		{0x1.003692p35, 0x1.6235fcp37},
		{0x1.d5e678p34, 0x1.468daep37},
		{0x1.aeb442p34, 0x1.2ce898p37},
		{0x1.8a9848p34, 0x1.15246ep37},
		{0x1.695876p34, 0x1.fe41cep36},
		{0x1.4abea2p34, 0x1.d57f52p36},
		{0x1.2e984ep34, 0x1.afc85ep36},
		{0x1.14b676p34, 0x1.8ce75ep36},
		{0x1.f9daap33, 0x1.6caa0ep36},
		{0x1.ce283ap33, 0x1.4ee142p36},
		{0x1.a609f8p33, 0x1.3360ccp36},
		{0x1.81396ap33, 0x1.19ff46p36},
		{0x1.5f7524p33, 0x1.0295fp36},
		{0x1.40806ep33, 0x1.da011p35},
		{0x1.2422eep33, 0x1.b23a5ap35},
		{0x1.0a286p33, 0x1.8d986ap35},
		{0x1.e4c0bp32, 0x1.6be022p35},
		{0x1.b93bf4p32, 0x1.4cda54p35},
		{0x1.916f7cp32, 0x1.30539p35},
		{0x1.6d0e7p32, 0x1.161be4p35},
		{0x1.4bd1cp32, 0x1.fc0d56p34},
		{0x1.2d77bep32, 0x1.cfd4a6p34},
		{0x1.11c3bep32, 0x1.a74068p34},
		{0x1.f0fb86p31, 0x1.8208bcp34},
		{0x1.c2e43ep31, 0x1.5feadap34},
		{0x1.98e254p31, 0x1.40a8c2p34},
		{0x1.729df6p31, 0x1.2408eap34},
		{0x1.4fc63cp31, 0x1.09d5f8p34},
		{0x1.3010aap31, 0x1.e3bcf4p33},
		{0x1.1338b8p31, 0x1.b7e946p33},
		{0x1.f1fecp30, 0x1.8fdc1cp33},
		{0x1.c2556ap30, 0x1.6b4702p33},
		{0x1.970b06p30, 0x1.49e178p33},
		{0x1.6fbddep30, 0x1.2b6876p33},
		{0x1.4c144ep30, 0x1.0f9e1cp33},
		{0x1.2bbc1ep30, 0x1.ec929ap32},
		{0x1.0e69f2p30, 0x1.be6abcp32},
		{0x1.e7b188p29, 0x1.94637ep32},
		{0x1.b792bcp29, 0x1.6e2368p32},
		{0x1.8c03d2p29, 0x1.4b581cp32},
		{0x1.649b02p29, 0x1.2bb5ccp32},
		{0x1.40f794p29, 0x1.0ef6c4p32},
		{0x1.20c13p29, 0x1.e9b5e8p31},
		{0x1.03a72ap29, 0x1.ba4f04p31},
		{0x1.d2bfc6p28, 0x1.8f4cccp31},
		{0x1.a35068p28, 0x1.684c22p31},
		{0x1.7885cep28, 0x1.44f21ep31},
		{0x1.51f06ap28, 0x1.24eb72p31},
		{0x1.2f2aaap28, 0x1.07ebd2p31},
		{0x1.0fd816p28, 0x1.db5adp30},
		{0x1.e7493p27, 0x1.abe09ep30},
		{0x1.b48774p27, 0x1.80f43ap30},
		{0x1.86e006p27, 0x1.5a2aep30},
		{0x1.5dd4bp27, 0x1.37231p30},
		{0x1.38f2e8p27, 0x1.1783cep30},
		{0x1.17d2c6p27, 0x1.f5f7d8p29},
		{0x1.f42c18p26, 0x1.c282cep29},
		{0x1.beceb2p26, 0x1.94219cp29},
		{0x1.8ef2aap26, 0x1.6a5972p29},
		{0x1.640bf6p26, 0x1.44ba86p29},
		{0x1.3d9be6p26, 0x1.22df2ap29},
		{0x1.1b2fe4p26, 0x1.046aeap29},
		{0x1.f8c0c2p25, 0x1.d21398p28},
		{0x1.c19fa8p25, 0x1.a0df1p28},
		{0x1.90538cp25, 0x1.74adc8p28},
		{0x1.6443fep25, 0x1.4d0232p28},
		{0x1.3ce784p25, 0x1.296a7p28},
		{0x1.19c232p25, 0x1.097f62p28},
		{0x1.f4c8c4p24, 0x1.d9c736p27},
		{0x1.bcd30ep24, 0x1.a6852cp27},
		{0x1.8aee4cp24, 0x1.789fb8p27},
		{0x1.5e77b6p24, 0x1.4f8c96p27},
		{0x1.36dcf2p24, 0x1.2acee2p27},
		{0x1.139a7cp24, 0x1.09f5dp27},
		{0x1.e8747p23, 0x1.d9371ep26},
		{0x1.b0a44ap23, 0x1.a4c89ep26},
		{0x1.7f064ap23, 0x1.75fa8ep26},
		{0x1.52efep23, 0x1.4c37cp26},
		{0x1.2bc82ap23, 0x1.26f9ep26},
		{0x1.09064p23, 0x1.05c804p26},
		{0x1.d45f16p22, 0x1.d06ad6p25},
		{0x1.9dacb2p22, 0x1.9bc0ap25},
		{0x1.6d3126p22, 0x1.6ce1aap25},
		{0x1.423d14p22, 0x1.43302cp25},
		{0x1.1c33cep22, 0x1.1e1e86p25},
		{0x1.f512dep21, 0x1.fa5b5p24},
		{0x1.b9823cp21, 0x1.bfd756p24},
		{0x1.84d6fep21, 0x1.8be4f8p24},
		{0x1.564a92p21, 0x1.5dcd66p24},
		{0x1.2d2c0ap21, 0x1.34ecf8p24},
		{0x1.08ddd2p21, 0x1.10b148p24},
		{0x1.d1a75p20, 0x1.e12eep23},
		{0x1.99218cp20, 0x1.a854eap23},
		{0x1.674c6ap20, 0x1.7603bap23},
		{0x1.3b62b6p20, 0x1.4980ccp23},
		{0x1.14b54p20, 0x1.2225b2p23},
		{0x1.e55102p19, 0x1.febc1p22},
		{0x1.a964eep19, 0x1.c14b22p22},
		{0x1.74b17ap19, 0x1.8b0cfcp22},
		{0x1.465daap19, 0x1.5b2fe6p22},
		{0x1.1da944p19, 0x1.30f93cp22},
		{0x1.f3d41p18, 0x1.0bc30cp22},
		{0x1.b512a2p18, 0x1.d5f3a8p21},
		{0x1.7e03b2p18, 0x1.9c3518p21},
		{0x1.4dbb98p18, 0x1.6961b8p21},
		{0x1.236a1ap18, 0x1.3cab14p21},
		{0x1.fcae94p17, 0x1.155a0ap21},
		{0x1.bbc1ap17, 0x1.e5989p20},
		{0x1.82eedcp17, 0x1.a8e406p20},
		{0x1.5139a6p17, 0x1.7397c6p20},
		{0x1.25c354p17, 0x1.44d26ep20},
		{0x1.ff8f84p16, 0x1.1bcca4p20},
		{0x1.bd3474p16, 0x1.efac52p19},
		{0x1.834586p16, 0x1.b0a68ap19},
		{0x1.50b75cp16, 0x1.7974e8p19},
		{0x1.249ef2p16, 0x1.4924a8p19},
		{0x1.fc5b88p15, 0x1.1edfa4p19},
		{0x1.b95ceep15, 0x1.f3d218p18},
		{0x1.7f03bap15, 0x1.b334fap18},
		{0x1.4c389cp15, 0x1.7ac2d8p18},
		{0x1.2006aep15, 0x1.4979acp18},
		{0x1.f32eap14, 0x1.1e767cp18},
		{0x1.b05cfep14, 0x1.f1e352p17},
		{0x1.764f46p14, 0x1.b0778cp17},
		{0x1.43e56cp14, 0x1.77756ep17},
		{0x1.18238p14, 0x1.45ce66p17},
		{0x1.e45a98p13, 0x1.1a95p17},
		{0x1.a284ccp13, 0x1.e9f2p16},
		{0x1.697596p13, 0x1.a887bep16},
		{0x1.3807acp13, 0x1.6fab64p16},
		{0x1.0d3b36p13, 0x1.3e44e4p16},
		{0x1.d0624p12, 0x1.135f28p16},
		{0x1.904e0cp12, 0x1.dc479ep15},
		{0x1.58e72ap12, 0x1.9baed4p15},
		{0x1.2906ccp12, 0x1.63ac6cp15},
		{0x1.ff58dap11, 0x1.33225ap15},
		{0x1.b7f1f4p11, 0x1.0916fp15},
		{0x1.7a551p11, 0x1.c960cp14},
		{0x1.453142p11, 0x1.8a6174p14},
		{0x1.1761f8p11, 0x1.53e4f8p14},
		{0x1.dfd296p10, 0x1.24caf2p14},
		{0x1.9bd5fp10, 0x1.f830cp13},
		{0x1.61501p10, 0x1.b1e5acp13},
		{0x1.2ef6p10, 0x1.7538c6p13},
		{0x1.03a918p10, 0x1.40dfd8p13},
		{0x1.bce26ap9, 0x1.13bc08p13},
		{0x1.7cef42p9, 0x1.d9a88p12},
		{0x1.46056p9, 0x1.96a0b4p12},
		{0x1.16e3cap9, 0x1.5ce9acp12},
		{0x1.dcea68p8, 0x1.2b3e54p12},
		{0x1.97945ap8, 0x1.0085p12},
		{0x1.5c2828p8, 0x1.b7937ep11},
		{0x1.29415p8, 0x1.7872dap11},
		{0x1.fb58fap7, 0x1.423acp11},
		{0x1.b0c1a8p7, 0x1.13af5p11},
		{0x1.70f474p7, 0x1.d77f0cp10},
		{0x1.3a68a8p7, 0x1.92ff34p10},
		{0x1.0bcc6p7, 0x1.5847eep10},
		{0x1.c7fa0cp6, 0x1.25f9eep10},
		{0x1.8401b6p6, 0x1.f5cc78p9},
		{0x1.4a029ap6, 0x1.ac0f6p9},
		{0x1.188c46p6, 0x1.6cfa9cp9},
		{0x1.dcc4fap5, 0x1.370ab8p9},
		{0x1.94ec06p5, 0x1.08f24p9},
		{0x1.57bc96p5, 0x1.c324c2p8},
		{0x1.23a81ap5, 0x1.7fe904p8},
		{0x1.eeb278p4, 0x1.46897ep8},
		{0x1.a35794p4, 0x1.159a38p8},
		{0x1.634b8p4, 0x1.d7c594p7},
		{0x1.2ce2a4p4, 0x1.90ae4ep7},
		{0x1.fd5f08p3, 0x1.5422fp7},
		{0x1.aef3cep3, 0x1.20998p7},
		{0x1.6c6e62p3, 0x1.e98102p6},
		{0x1.3407b6p3, 0x1.9eee06p6},
		{0x1.043bap3, 0x1.5f8b88p6},
		{0x1.b77e5cp2, 0x1.29b294p6},
		{0x1.72f0c4p2, 0x1.f7f338p5},
		{0x1.38ee18p2, 0x1.aa5772p5},
		{0x1.07dd68p2, 0x1.68823ep5},
		{0x1.bcc58ep1, 0x1.30b14ep5},
		{0x1.76aca4p1, 0x1.01647cp5},
		{0x1.3b7912p1, 0x1.b2a87ep4},
		{0x1.097f82p1, 0x1.6ed2f2p4},
		{0x1.beaa3ep0, 0x1.356cd6p4},
		{0x1.778be2p0, 0x1.04e15ep4},
		{0x1.3b9984p0, 0x1.b7b04p3},
		{0x1.09182cp0, 0x1.725862p3},
		{0x1.bd20fcp-1, 0x1.37c92cp3},
		{0x1.75892p-1, 0x1.065b96p3},
		{0x1.394e7ap-1, 0x1.b950d4p2},
		{0x1.06a996p-1, 0x1.72fd94p2},
		{0x1.b8328ep-2, 0x1.37b83cp2},
		{0x1.70aff4p-2, 0x1.05ca5p2},
		{0x1.34a53cp-2, 0x1.b7807ep1},
		{0x1.0241dep-2, 0x1.70bebp1},
		{0x1.affb9p-3, 0x1.353a6cp1},
		{0x1.691c7cp-3, 0x1.0330fp1},
		{0x1.2db8cap-3, 0x1.b24a16p0},
		{0x1.f7f4f8p-4, 0x1.6ba91ap0},
		{0x1.a4ab64p-4, 0x1.305e98p0},
		{0x1.5efa4ep-4, 0x1.fd3de2p-1},
		{0x1.24b0d8p-4, 0x1.a9cc94p-1},
		{0x1.e7eeap-5, 0x1.63daf8p-1},
		{0x1.96826ep-5, 0x1.294176p-1},
		{0x1.5282d2p-5, 0x1.f05e82p-2},
		{0x1.19c05p-5, 0x1.9e39dcp-2},
		{0x1.d4ca9cp-6, 0x1.5982p-2},
		{0x1.85cfacp-6, 0x1.200c8ap-2},
		{0x1.43fb32p-6, 0x1.e00e92p-3},
		{0x1.0d2382p-6, 0x1.8fd4ep-3},
		{0x1.bef1b2p-7, 0x1.4cd9cp-3},
		{0x1.72ede4p-7, 0x1.14f48ap-3},
		{0x1.33b1cap-7, 0x1.ccaaeap-4},
		{0x1.fe3bdp-8, 0x1.7eef14p-4},
		{0x1.a6d7d2p-8, 0x1.3e2964p-4},
		{0x1.5e4062p-8, 0x1.083768p-4},
		{0x1.21fb7ap-8, 0x1.b69f1p-5},
		{0x1.dfefbep-9, 0x1.6be574p-5},
		{0x1.8cf816p-9, 0x1.2dc11ap-5},
		{0x1.482fa8p-9, 0x1.f4343cp-6},
		{0x1.0f30c4p-9, 0x1.9e614ep-6},
		{0x1.bff86ep-10, 0x1.571d34p-6},
		{0x1.71d0b6p-10, 0x1.1bf742p-6},
		{0x1.3125f6p-10, 0x1.d5cc6cp-7},
		{0x1.f755eap-11, 0x1.846e9ep-7},
		{0x1.9eebaap-11, 0x1.410048p-7},
		{0x1.55df18p-11, 0x1.09258p-7},
		{0x1.198c18p-11, 0x1.b5ceb6p-8},
		{0x1.cf82ep-12, 0x1.69468p-8},
		{0x1.7d5af6p-12, 0x1.29f9e8p-8},
		{0x1.399c28p-12, 0x1.eb4b9ep-9},
		{0x1.01c65ap-12, 0x1.94d1dep-9},
		{0x1.a78e82p-13, 0x1.4d6706p-9},
		{0x1.5bcf92p-13, 0x1.127346p-9},
		{0x1.1d791cp-13, 0x1.c39fap-10},
		{0x1.d463dcp-14, 0x1.73679cp-10},
		{0x1.8011fcp-14, 0x1.314916p-10},
		{0x1.3ac71cp-14, 0x1.f5a11ap-11},
		{0x1.01dcc2p-14, 0x1.9beca8p-11},
		{0x1.a6459cp-15, 0x1.52189ap-11},
		{0x1.59962ap-15, 0x1.155d48p-11},
		{0x1.1ab0e4p-15, 0x1.c6dc8ap-12},
		{0x1.ce42dep-16, 0x1.74ca88p-12},
		{0x1.79c43p-16, 0x1.31612ap-12},
		{0x1.349128p-16, 0x1.f4125ap-13},
		{0x1.f7d80ep-17, 0x1.993e82p-13},
		{0x1.9b270cp-17, 0x1.4ec006p-13},
		{0x1.4f59fap-17, 0x1.11aebp-13},
		{0x1.1164acp-17, 0x1.bf4ab2p-14},
		{0x1.bd8c96p-18, 0x1.6d561ep-14},
		{0x1.6ae172p-18, 0x1.2a406ep-14},
		{0x1.276874p-18, 0x1.e6bba6p-15},
		{0x1.e0bad2p-19, 0x1.8cf814p-15},
		{0x1.86f788p-19, 0x1.4399f8p-15},
		{0x1.3dcfaep-19, 0x1.07aa3p-15},
		{0x1.023828p-19, 0x1.ad7302p-16},
		{0x1.a3666ep-20, 0x1.5d90f4p-16},
		{0x1.546e38p-20, 0x1.1c674ep-16},
		{0x1.143264p-20, 0x1.ce8ccp-17},
		{0x1.bff316p-21, 0x1.77f562p-17},
		{0x1.6b13ecp-21, 0x1.316da8p-17},
		{0x1.2624f4p-21, 0x1.f0046p-18},
		{0x1.dc5de4p-22, 0x1.92920ap-18},
		{0x1.818d3ap-22, 0x1.4691b2p-18},
		{0x1.37e62p-22, 0x1.08c96ap-18},
		{0x1.f8637ep-23, 0x1.ad2d0ap-19},
		{0x1.97a3dcp-23, 0x1.5ba462p-19},
		{0x1.494a4p-23, 0x1.1975ep-19},
		{0x1.09dee4p-23, 0x1.c78892p-20},
		{0x1.ad1fap-24, 0x1.7073c4p-20},
		{0x1.5a245ep-24, 0x1.29df48p-20},
		{0x1.171278p-24, 0x1.e163bep-21},
		{0x1.c1c74cp-25, 0x1.84cbbp-21},
		{0x1.6a46f4p-25, 0x1.39dbcep-21},
		{0x1.23a858p-25, 0x1.fa7b92p-22},
		{0x1.d56196p-26, 0x1.9876ap-22},
		{0x1.7984b6p-26, 0x1.4940bcp-22},
		{0x1.2f7cc4p-26, 0x1.094608p-22},
		{0x1.e7b62cp-27, 0x1.ab3e8cp-23},
		{0x1.87b15ep-27, 0x1.57e33ep-23},
		{0x1.3a6dp-27, 0x1.14a8b6p-23},
		{0x1.f88ebap-28, 0x1.bcede6p-24},
		{0x1.94a282p-28, 0x1.659918p-24},
		{0x1.44580ap-28, 0x1.1f4498p-24},
		{0x1.03dbf8p-28, 0x1.cd5086p-25},
		{0x1.a03066p-29, 0x1.723974p-25},
		{0x1.4d1f2ep-29, 0x1.28f9cap-25},
		{0x1.0a814ap-29, 0x1.dc34b6p-26},
		{0x1.aa36cap-30, 0x1.7d9dbp-26},
		{0x1.54a6b6p-30, 0x1.31aa56p-26},
		{0x1.102232p-30, 0x1.e96c26p-27},
		{0x1.b2959ep-31, 0x1.87a218p-27},
		{0x1.5ad66cp-31, 0x1.393ad2p-27},
		{0x1.14ac7ep-31, 0x1.f4ccdap-28},
		{0x1.b931b8p-32, 0x1.9026a8p-28},
		{0x1.5f9a24p-32, 0x1.3f92eap-28},
		{0x1.181154p-32, 0x1.fe3208p-29},
		{0x1.bdf55ep-33, 0x1.970fbp-29},
		{0x1.62e226p-33, 0x1.449de6p-29},
		{0x1.1a4576p-33, 0x1.02be7p-29},
		{0x1.c0d0bep-34, 0x1.9c4672p-30},
		{0x1.64a386p-34, 0x1.484b1ep-30},
		{0x1.1b418cp-34, 0x1.054a9ap-30},
		{0x1.c1ba4ap-35, 0x1.9fb994p-31},
		{0x1.64d86p-35, 0x1.4a8e4ep-31},
		{0x1.1b0242p-35, 0x1.06b4fep-31},
		{0x1.c0aee6p-36, 0x1.a15d86p-32},
		{0x1.637ffap-36, 0x1.4b5fdep-32},
		{0x1.198862p-36, 0x1.06f8dap-32},
		{0x1.bdb204p-37, 0x1.a12cc8p-33},
		{0x1.609ec2p-37, 0x1.4abd0ap-33},
		{0x1.16d8d2p-37, 0x1.06154ap-33},
		{0x1.b8cd88p-38, 0x1.9f27fap-34},
		{0x1.5c3e42p-38, 0x1.48a7fcp-34},
		{0x1.12fc6cp-38, 0x1.040d4ap-34},
		{0x1.b2119p-39, 0x1.9b55e8p-35},
		{0x1.566cep-39, 0x1.4527acp-35},
		{0x1.0dffep-39, 0x1.00e7acp-35},
		{0x1.a99426p-40, 0x1.95c358p-36},
		{0x1.4f3d92p-40, 0x1.4047cep-36},
		{0x1.07f35ep-40, 0x1.f95dcep-37},
		{0x1.9f70cp-41, 0x1.8e82cep-37},
		{0x1.46c77ap-41, 0x1.3a1882p-37},
		{0x1.00ea48p-41, 0x1.eee1d4p-38},
		{0x1.93c7acp-42, 0x1.85ac18p-38},
		{0x1.3d256ap-42, 0x1.32ae04p-38},
		{0x1.f1f59p-43, 0x1.e27d88p-39},
		{0x1.86bd6ap-43, 0x1.7b5bdap-39},
		{0x1.327554p-43, 0x1.2a2036p-39},
		{0x1.e07ab4p-44, 0x1.d458ap-40},
		{0x1.7879ecp-44, 0x1.6fb2eap-40},
		{0x1.26d7bp-44, 0x1.208a2cp-40},
		{0x1.cd98a2p-45, 0x1.c49f8ap-41},
		{0x1.6927c2p-45, 0x1.62d5aap-41},
		{0x1.1a6ed6p-45, 0x1.16098ep-41},
		{0x1.b986acp-46, 0x1.b3828ep-42},
		{0x1.58f35ap-46, 0x1.54eb3ep-42},
		{0x1.0d5e6p-46, 0x1.0abe0ep-42},
		{0x1.a47db6p-47, 0x1.a134d4p-43},
		{0x1.480a18p-47, 0x1.461cdap-43},
		{0x1.ff94e4p-48, 0x1.fd9182p-44},
		{0x1.8eb738p-48, 0x1.8deb62p-44},
		{0x1.369994p-48, 0x1.3694e8p-44},
		{0x1.e3ae4ap-49, 0x1.e49706p-45},
		{0x1.786c3ep-49, 0x1.79dc28p-45},
		{0x1.24cec8p-49, 0x1.267e46p-45},
		{0x1.c74fc4p-50, 0x1.cad0bp-46},
		{0x1.61d46cp-50, 0x1.653d08p-46},
		{0x1.12d55cp-50, 0x1.16038cp-46},
		{0x1.aabdacp-51, 0x1.b081aap-47},
		{0x1.4b252ep-51, 0x1.5042e2p-47},
		{0x1.00d6f8p-51, 0x1.054e44p-47},
		{0x1.8e38ep-52, 0x1.95eb2cp-48},
		{0x1.3490e8p-52, 0x1.3b20c6p-48},
		{0x1.ddf56ap-53, 0x1.e90cb6p-49},
		{0x1.71fdep-53, 0x1.7b4b76p-49},
		{0x1.1e465ap-53, 0x1.26072ap-49},
		{0x1.bac92ep-54, 0x1.c7a2ecp-50},
		{0x1.56441cp-54, 0x1.60dcfp-50},
		{0x1.08700cp-54, 0x1.112346p-50},
		{0x1.986a66p-55, 0x1.a6a50ap-51},
		{0x1.3b3d56p-55, 0x1.46d572p-51},
		{0x1.e667dap-56, 0x1.f93d0ep-52},
		{0x1.7712b8p-56, 0x1.86529ep-52},
		{0x1.211544p-56, 0x1.2d65aep-52},
		{0x1.bd660ap-57, 0x1.d13c32p-53},
		{0x1.56f3eep-57, 0x1.66e45ap-53},
		{0x1.07f14ap-57, 0x1.14b8b6p-53},
		{0x1.96129cp-58, 0x1.aa854cp-54},
		{0x1.3837cp-58, 0x1.488b94p-54},
		{0x1.dfe0c2p-59, 0x1.f9e772p-55},
		{0x1.709b5ap-59, 0x1.85503p-55},
		{0x1.1affd2p-59, 0x1.2b7218p-55},
		{0x1.b2564p-60, 0x1.cc6bb6p-56},
		{0x1.4d23fap-60, 0x1.61cb1ap-56},
		{0x1.fecbdp-61, 0x1.0fba0ep-56},
		{0x1.8767d8p-61, 0x1.a13072p-57},
		{0x1.2bc67ep-61, 0x1.401abcp-57},
		{0x1.caf846p-62, 0x1.eafc2cp-58},
		{0x1.5f2e7ap-62, 0x1.785cp-58},
		{0x1.0c93acp-62, 0x1.205a7ep-58},
		{0x1.9a9b06p-63, 0x1.b9a31ap-59},
		{0x1.39b7fcp-63, 0x1.520968p-59},
		{0x1.df277ap-64, 0x1.029ce6p-59},
		{0x1.6dbcdp-64, 0x1.8b81d6p-60},
		{0x1.17080ap-64, 0x1.2e48f2p-60},
		{0x1.a98e26p-65, 0x1.cdd86cp-61},
		{0x1.445a6ap-65, 0x1.60a47ap-61},
		{0x1.ee324ep-66, 0x1.0d210cp-61},
		{0x1.784e3p-66, 0x1.9a961ep-62},
		{0x1.1e65fep-66, 0x1.390b74p-62},
		{0x1.b3bb86p-67, 0x1.dd1e52p-63},
		{0x1.4b4e36p-67, 0x1.6b6a7ap-63},
		{0x1.f790f6p-68, 0x1.14acc2p-63},
		{0x1.7e82cep-68, 0x1.a511aap-64},
		{0x1.226a7ap-68, 0x1.404114p-64},
		{0x1.b8c634p-69, 0x1.e6ea96p-65},
		{0x1.4e53acp-69, 0x1.71f97ap-65},
		{0x1.faed5cp-70, 0x1.18fb2ep-65},
		{0x1.80217ep-70, 0x1.aa947ep-66},
		{0x1.22f066p-70, 0x1.43a796p-66},
		{0x1.b87f86p-71, 0x1.eae2fp-67},
		{0x1.4d4ec8p-71, 0x1.7414e6p-67},
		{0x1.f8283ep-72, 0x1.19e474p-67},
		{0x1.7d1b22p-72, 0x1.aaeb7ep-68},
		{0x1.1ff2dp-72, 0x1.431f66p-68},
		{0x1.b2e9e8p-73, 0x1.e8e272p-69},
		{0x1.4848dep-73, 0x1.71a91ep-69},
		{0x1.ef5b16p-74, 0x1.176014p-69},
		{0x1.758b92p-74, 0x1.a6137cp-70},
		{0x1.198d42p-74, 0x1.3ead74p-70},
		{0x1.a838bp-75, 0x1.e0fbc2p-71},
		{0x1.3f700cp-75, 0x1.6accaep-71},
		{0x1.e0d68ep-76, 0x1.118578p-71},
		{0x1.69b7f4p-76, 0x1.9c3974p-72},
		{0x1.0ffa12p-76, 0x1.367afap-72},
		{0x1.98cd1cp-77, 0x1.d377fap-73},
		{0x1.33148p-77, 0x1.5fbee6p-73},
		{0x1.cd1dbap-78, 0x1.088a8p-73},
		{0x1.5a0a9cp-78, 0x1.8db7ccp-74},
		{0x1.038ef4p-78, 0x1.2ad2ecp-74},
		{0x1.85308ap-79, 0x1.c0d23ep-75},
		{0x1.23a3cp-79, 0x1.50e41ap-75},
		{0x1.b4de68p-80, 0x1.f980a8p-76},
		{0x1.470ce4p-80, 0x1.7b10fep-76},
		{0x1.e9700cp-81, 0x1.1c1d98p-76},
		{0x1.6e0c9p-81, 0x1.a9b08p-77},
		{0x1.11a25ap-81, 0x1.3ebfb4p-77},
		{0x1.98e73ap-82, 0x1.dd1d36p-78},
		{0x1.315f58p-82, 0x1.64e7fp-78},
		{0x1.c7e35cp-83, 0x1.0ada94p-78},
		{0x1.542176p-83, 0x1.8ed9e8p-79},
		{0x1.fb491ep-84, 0x1.29ecb2p-79},
		{0x1.7a1c34p-84, 0x1.bcdb34p-80},
		{0x1.19b0f2p-84, 0x1.4bf6cap-80},
		{0x1.a383cap-85, 0x1.ef3318p-81},
		{0x1.383bf2p-85, 0x1.712bc2p-81},
		{0x1.d08cdap-86, 0x1.13151p-81},
		{0x1.596adp-86, 0x1.99bf36p-82},
		{0x1.00b602p-86, 0x1.3104d6p-82},
		{0x1.7d62a2p-87, 0x1.c5e534p-83},
		{0x1.1b2abcp-87, 0x1.518db2p-83},
		{0x1.a4480ep-88, 0x1.f5d1c6p-84},
		{0x1.37be42p-88, 0x1.74d45ap-84},
		{0x1.ce3ee4p-89, 0x1.14dc4ap-84},
		{0x1.568986p-89, 0x1.9afd0ep-85},
		{0x1.fb69c6p-90, 0x1.30e632p-85},
		{0x1.77a47ep-90, 0x1.c42b48p-86},
		{0x1.15f4ep-90, 0x1.4f1f52p-86},
		{0x1.9b25dcp-91, 0x1.f08156p-87},
		{0x1.2feeeep-91, 0x1.6f9f62p-87},
		{0x1.c122bcp-92, 0x1.100ffap-87},
		{0x1.4bb154p-92, 0x1.927ce6p-88},
		{0x1.e9ae56p-93, 0x1.2992f4p-88},
		{0x1.6948e8p-93, 0x1.b7cccap-89},
		{0x1.0a6cd2p-93, 0x1.44d7c4p-89},
		{0x1.88c0cap-94, 0x1.dfa22p-90},
		{0x1.215988p-94, 0x1.61eb26p-90},
		{0x1.aa222ap-95, 0x1.0506e2p-90},
		{0x1.39a30ep-95, 0x1.80d828p-91},
		{0x1.cd740ep-96, 0x1.1b8f04p-91},
		{0x1.534d82p-96, 0x1.a1a7ecp-92},
		{0x1.f2bb06p-97, 0x1.336f3p-92},
		{0x1.6e5b34p-97, 0x1.c46172p-93},
		{0x1.0cfc82p-97, 0x1.4cab82p-93},
		{0x1.8acc82p-98, 0x1.e9094cp-94},
		{0x1.219686p-98, 0x1.67465p-94},
		{0x1.a89fa6p-99, 0x1.07d0b8p-94},
		{0x1.372982p-99, 0x1.833ffap-95},
		{0x1.c7d094p-100, 0x1.1c147ap-95},
		{0x1.4db1c8p-100, 0x1.a096ccp-96},
		{0x1.e858d8p-101, 0x1.314decp-96},
		{0x1.6529ep-101, 0x1.bf46cep-97},
		{0x1.0517bap-101, 0x1.47796ap-97},
		{0x1.7d8a8p-102, 0x1.df49a2p-98},
		{0x1.16a46p-102, 0x1.5e9198p-98},
		{0x1.96ca76p-103, 0x1.004b34p-98},
		{0x1.28cb2cp-103, 0x1.768f3ep-99},
		{0x1.b0de98p-104, 0x1.1190d2p-99},
	},
};

typedef struct
{
	struct
	{
		double erfc, scale;
	} tab[3488];
} erfc_data;

const erfc_data __erfc_data = {
	.tab = {
		{0x1p128, 0x1.20dd750429b6dp128},
		{0x1.fb7c9030853b3p127, 0x1.20d8f1975c85dp128},
		{0x1.f6f9447be0743p127, 0x1.20cb67bd452c7p128},
		{0x1.f27640f9853d9p127, 0x1.20b4d8bac36c1p128},
		{0x1.edf3a9ba22dadp127, 0x1.209546ad13ccfp128},
		{0x1.e971a2c4436aep127, 0x1.206cb4897b148p128},
		{0x1.e4f05010eca8cp127, 0x1.203b261cd0053p128},
		{0x1.e06fd58842c7ep127, 0x1.2000a00ae3804p128},
		{0x1.dbf056fe2df35p127, 0x1.1fbd27cdc72d3p128},
		{0x1.d771f82f02f4ep127, 0x1.1f70c3b4f2cc8p128},
		{0x1.d2f4dcbc2f894p127, 0x1.1f1b7ae44867fp128},
		{0x1.ce792828eae5cp127, 0x1.1ebd5552f795bp128},
		{0x1.c9fefdd6eaf19p127, 0x1.1e565bca400d4p128},
		{0x1.c58681031eb6ap127, 0x1.1de697e413d29p128},
		{0x1.c10fd4c26e896p127, 0x1.1d6e14099944ap128},
		{0x1.bc9b1bfe82687p127, 0x1.1cecdb718d61cp128},
		{0x1.b82879728f11ep127, 0x1.1c62fa1e869b6p128},
		{0x1.b3b80fa82a4bbp127, 0x1.1bd07cdd189acp128},
		{0x1.af4a00f426daap127, 0x1.1b357141d95d5p128},
		{0x1.aade6f7378a0ep127, 0x1.1a91e5a748165p128},
		{0x1.a6757d08215d8p127, 0x1.19e5e92b964abp128},
		{0x1.a20f4b5626818p127, 0x1.19318bae53a04p128},
		{0x1.9dabfbc090901p127, 0x1.1874ddcdfce24p128},
		{0x1.994baf66747adp127, 0x1.17aff0e56ec1p128},
		{0x1.94ee8720076b6p127, 0x1.16e2d7093cd8cp128},
		{0x1.9094a37bbd66ep127, 0x1.160da304ed92fp128},
		{0x1.8c3e24bb73372p127, 0x1.153068581b781p128},
		{0x1.87eb2ad1a4032p127, 0x1.144b3b337c90cp128},
		{0x1.839bd55eaafc8p127, 0x1.135e3075d076bp128},
		{0x1.7f5043ae11862p127, 0x1.12695da8b5bdep128},
		{0x1.7b0894b3ea35cp127, 0x1.116cd8fd67618p128},
		{0x1.76c4e70a390e7p127, 0x1.1068b94962e5ep128},
		{0x1.728558ee694fcp127, 0x1.0f5d1602f7e41p128},
		{0x1.6e4a083ed132fp127, 0x1.0e4a073dc1b91p128},
		{0x1.6a13127843ec1p127, 0x1.0d2fa5a70c168p128},
		{0x1.65e094b3b2413p127, 0x1.0c0e0a8223359p128},
		{0x1.61b2aba3da093p127, 0x1.0ae54fa490723p128},
		{0x1.5d89739304dcfp127, 0x1.09b58f724416bp128},
		{0x1.59650860d6469p127, 0x1.087ee4d9ad247p128},
		{0x1.5545858029b39p127, 0x1.07416b4fbfe7cp128},
		{0x1.512b05f5006e1p127, 0x1.05fd3ecbec298p128},
		{0x1.4d15a4527fdc7p127, 0x1.04b27bc403d3p128},
		{0x1.49057ab900447p127, 0x1.03613f2812dafp128},
		{0x1.44faa2d42c4ap127, 0x1.0209a65e29545p128},
		{0x1.40f535d93160ep127, 0x1.00abcf3e187a9p128},
		{0x1.3cf54c850162p127, 0x1.fe8fb01a47307p127},
		{0x1.38faff1aa574ap127, 0x1.fbbbbef34b4b2p127},
		{0x1.35066561a275dp127, 0x1.f8dc092d58ff8p127},
		{0x1.311796a46f064p127, 0x1.f5f0cdaf15313p127},
		{0x1.2d2ea9aefb636p127, 0x1.f2fa4c16c0019p127},
		{0x1.294bb4cd4b2bdp127, 0x1.eff8c4b1375dbp127},
		{0x1.256ecdca212ccp127, 0x1.ecec7870ebca8p127},
		{0x1.219809edbd524p127, 0x1.e9d5a8e4c934ep127},
		{0x1.1dc77dfcacd02p127, 0x1.e6b4982f158b9p127},
		{0x1.19fd3e36ac96ap127, 0x1.e38988fc46e72p127},
		{0x1.16395e559e218p127, 0x1.e054be79d3042p127},
		{0x1.127bf18c8eadcp127, 0x1.dd167c4cf9d2ap127},
		{0x1.0ec50a86d0dd4p127, 0x1.d9cf06898cdafp127},
		{0x1.0b14bb6728cd8p127, 0x1.d67ea1a8b5368p127},
		{0x1.076b15c70aa28p127, 0x1.d325927fb9d89p127},
		{0x1.03c82ab5eb831p127, 0x1.cfc41e36c7df9p127},
		{0x1.002c0ab8a5018p127, 0x1.cc5a8a3fbea4p127},
		{0x1.f92d8b91d5cc7p126, 0x1.c8e91c4d01368p127},
		{0x1.f210d6a9a6a31p126, 0x1.c5701a484ef9dp127},
		{0x1.eb02147ce245cp126, 0x1.c1efca49a5011p127},
		{0x1.e40161b701275p126, 0x1.be68728e29d5ep127},
		{0x1.dd0ed9ea4bdd6p126, 0x1.bada596f25436p127},
		{0x1.d62a978f7c957p126, 0x1.b745c55905bf8p127},
		{0x1.cf54b4058455fp126, 0x1.b3aafcc27502ep127},
		{0x1.c88d479173ccep126, 0x1.b00a46237d5bep127},
		{0x1.c1d4695e87644p126, 0x1.ac63e7ecc1411p127},
		{0x1.bb2a2f7e5652p126, 0x1.a8b8287ec6a09p127},
		{0x1.b48eaee924501p126, 0x1.a5074e215762p127},
		{0x1.ae01fb7e55a66p126, 0x1.a1519efaf889ep127},
		{0x1.a78428050527ep126, 0x1.9d97610879642p127},
		{0x1.a115462cbbc17p126, 0x1.99d8da149c13fp127},
		{0x1.9ab5668e4930ap126, 0x1.96164fafd8de3p127},
		{0x1.946498acbd766p126, 0x1.925007283d7aap127},
		{0x1.8e22eaf68291ep126, 0x1.8e86458169af8p127},
		{0x1.87f06ac6960c4p126, 0x1.8ab94f6caa71dp127},
		{0x1.81cd2465e1d96p126, 0x1.86e9694134b9ep127},
		{0x1.7bb9230cb40b4p126, 0x1.8316d6f48133dp127},
		{0x1.75b470e454d35p126, 0x1.7f41dc12c9e89p127},
		{0x1.6fbf1708ba47cp126, 0x1.7b6abbb7aaf19p127},
		{0x1.69d91d8a595dap126, 0x1.7791b886e7403p127},
		{0x1.64028b7013867p126, 0x1.73b714a552763p127},
		{0x1.5e3b66b9405a9p126, 0x1.6fdb11b1e0c34p127},
		{0x1.5883b45fd2b63p126, 0x1.6bfdf0beddaf5p127},
		{0x1.52db785a98acap126, 0x1.681ff24b4ab04p127},
		{0x1.4d42b59f95afap126, 0x1.6441563c665d4p127},
		{0x1.47b96e267647ap126, 0x1.60625bd75d07bp127},
		{0x1.423fa2eb1cb59p126, 0x1.5c8341bb23767p127},
		{0x1.3cd553f045d45p126, 0x1.58a445da7c74cp127},
		{0x1.377a8042458d1p126, 0x1.54c5a57629dbp127},
		{0x1.322f25f9da2fdp126, 0x1.50e79d1749ac9p127},
		{0x1.2cf3423f15fdfp126, 0x1.4d0a6889dfd9fp127},
		{0x1.27c6d14c5e341p126, 0x1.492e42d78d2c5p127},
		{0x1.22a9ce717edcbp126, 0x1.4553664273d24p127},
		{0x1.1d9c3416d2b4bp126, 0x1.417a0c4049fdp127},
		{0x1.189dfbc07e69p126, 0x1.3da26d759aef5p127},
		{0x1.13af1e11be721p126, 0x1.39ccc1b136d5ap127},
		{0x1.0ecf92d046d22p126, 0x1.35f93fe7d1b3dp127},
		{0x1.09ff50e7b3f93p126, 0x1.32281e2fd1a92p127},
		{0x1.053e4e6d0c10bp126, 0x1.2e5991bd4cbfcp127},
		{0x1.008c80a24ff1p126, 0x1.2a8dcede3673bp127},
		{0x1.f7d3b7f436013p125, 0x1.26c508f6bd0ffp127},
		{0x1.eeaca836a27ccp125, 0x1.22ff727dd6f7bp127},
		{0x1.e5a3b7c9b56dap125, 0x1.1f3d3cf9ffe5ap127},
		{0x1.dcb8cae2d747fp125, 0x1.1b7e98fe26217p127},
		{0x1.d3ebc436b0f26p125, 0x1.17c3b626c7a12p127},
		{0x1.cb3c8500ea349p125, 0x1.140cc3173f007p127},
		{0x1.c2aaed0bfcfeep125, 0x1.1059ed7740313p127},
		{0x1.ba36dab91c0e9p125, 0x1.0cab61f084b93p127},
		{0x1.b1e02b082b72p125, 0x1.09014c2ca74dap127},
		{0x1.a9a6b99fc973bp125, 0x1.055bd6d32e8d7p127},
		{0x1.a18a60d56673ep125, 0x1.01bb2b87c6968p127},
		{0x1.998af9b56a3aep125, 0x1.fc3ee5d1524bp126},
		{0x1.91a85c0b65519p125, 0x1.f511a91a67d2ap126},
		{0x1.89e25e6a4cef9p125, 0x1.edeeee0959518p126},
		{0x1.8238d634c0127p125, 0x1.e6d6ffaa65a25p126},
		{0x1.7aab97a554544p125, 0x1.dfca26f5bbf88p126},
		{0x1.733a75d6e91b8p125, 0x1.d8c8aace11e63p126},
		{0x1.6be542ccffc2fp125, 0x1.d1d2cfff91594p126},
		{0x1.64abcf7c175b4p125, 0x1.cae8d93f1d7b7p126},
		{0x1.5d8debd20aacep125, 0x1.c40b0729ed548p126},
		{0x1.568b66be6f268p125, 0x1.bd3998457afdbp126},
		{0x1.4fa40e3af3674p125, 0x1.b674c8ffc6283p126},
		{0x1.48d7af53bc19fp125, 0x1.afbcd3afe8ab6p126},
		{0x1.4226162fbddd5p125, 0x1.a911f096fbc26p126},
		{0x1.3b8f0e1912f7p125, 0x1.a27455e14c93cp126},
		{0x1.351261854b991p125, 0x1.9be437a7de946p126},
		{0x1.2eafda1db784ap125, 0x1.9561c7f23a47bp126},
		{0x1.286740c7a7dabp125, 0x1.8eed36b886d93p126},
		{0x1.22385daca7f47p125, 0x1.8886b1e5ecfd1p126},
		{0x1.1c22f842ac1f2p125, 0x1.822e655b417e7p126},
		{0x1.1626d7543522p125, 0x1.7be47af1f5d89p126},
		{0x1.1043c1086777dp125, 0x1.75a91a7f4d2edp126},
		{0x1.0a797aeb152f2p125, 0x1.6f7c69d7d3ef8p126},
		{0x1.04c7c9f4b969p125, 0x1.695e8cd31867ep126},
		{0x1.fe5ce524c8ee5p124, 0x1.634fa54fa285fp126},
		{0x1.f35a715b2f3e1p124, 0x1.5d4fd33729015p126},
		{0x1.e887bf681f218p124, 0x1.575f3483021c3p126},
		{0x1.dde4553ef94dep124, 0x1.517de540ce2a3p126},
		{0x1.d36fb7fa50177p124, 0x1.4babff975a04cp126},
		{0x1.c9296beb09cf1p124, 0x1.45e99bcbb7915p126},
		{0x1.bf10f4a759889p124, 0x1.4036d0468a7a2p126},
		{0x1.b525d5198cb1cp124, 0x1.3a93b1998736cp126},
		{0x1.ab678f8eabedbp124, 0x1.35005285227f1p126},
		{0x1.a1d5a5c4edb96p124, 0x1.2f7cc3fe6f423p126},
		{0x1.986f98f9f96c8p124, 0x1.2a09153529381p126},
		{0x1.8f34e9f8f93a6p124, 0x1.24a55399ea239p126},
		{0x1.8625192879e39p124, 0x1.1f518ae487dc8p126},
		{0x1.7d3fa69816db5p124, 0x1.1a0dc51a9934dp126},
		{0x1.7484120df1b01p124, 0x1.14da0a961fd14p126},
		{0x1.6bf1db13f3983p124, 0x1.0fb6620c550afp126},
		{0x1.63888104d811ap124, 0x1.0aa2d09497f2bp126},
		{0x1.5b478318ff939p124, 0x1.059f59af7a906p126},
		{0x1.532e6073095f2p124, 0x1.00abff4dec7a3p126},
		{0x1.4b3c982c338c7p124, 0x1.f79183b101c5bp125},
		{0x1.4371a960807f8p124, 0x1.edeb406d9c825p125},
		{0x1.3bcd133aa0ffcp124, 0x1.e4652fadcb6b2p125},
		{0x1.344e54ffa23b9p124, 0x1.daff4969c0b04p125},
		{0x1.2cf4ee1a5f0fcp124, 0x1.d1b982c50137p125},
		{0x1.25c05e26b3f99p124, 0x1.c893ce1dcbef7p125},
		{0x1.1eb024fc75285p124, 0x1.bf8e1b1ca2279p125},
		{0x1.17c3c2ba26319p124, 0x1.b6a856c3ed54fp125},
		{0x1.10fab7cf72f94p124, 0x1.ade26b7fbed95p125},
		{0x1.0a548507696cp124, 0x1.a53c4135a6526p125},
		{0x1.03d0ab9273b94p124, 0x1.9cb5bd549b111p125},
		{0x1.fadd5a20258d3p123, 0x1.944ec2e4f563p125},
		{0x1.ee5c1730b147cp123, 0x1.8c07329874652p125},
		{0x1.e21c938a45a83p123, 0x1.83deeada4d25ap125},
		{0x1.d61dd57628999p123, 0x1.7bd5c7df3fe9cp125},
		{0x1.ca5ee4649e31fp123, 0x1.73eba3b5b07b7p125},
		{0x1.bedec8fddb34p123, 0x1.6c205655be72p125},
		{0x1.b39c8d3276d8ap123, 0x1.6473b5b15a7a1p125},
		{0x1.a8973c4b5c03ep123, 0x1.5ce595c455b0ap125},
		{0x1.9dcde2f93a207p123, 0x1.5575c8a468362p125},
		{0x1.933f8f6375f2cp123, 0x1.4e241e912c305p125},
		{0x1.88eb51369acb9p123, 0x1.46f066040a832p125},
		{0x1.7ed039b24c96bp123, 0x1.3fda6bc016994p125},
		{0x1.74ed5bb6bb581p123, 0x1.38e1fae1d6a9dp125},
		{0x1.6b41cbd198bc8p123, 0x1.3206dceef5f87p125},
		{0x1.61cca04a90795p123, 0x1.2b48d9e5dea1cp125},
		{0x1.588cf12f4446bp123, 0x1.24a7b84d38971p125},
		{0x1.4f81d85ecc55bp123, 0x1.1e233d434b813p125},
		{0x1.46aa7194bd324p123, 0x1.17bb2c8d41535p125},
		{0x1.3e05da73b4159p123, 0x1.116f48a6476ccp125},
		{0x1.3593328f6abbep123, 0x1.0b3f52ce8c383p125},
		{0x1.2d519b7653e1ep123, 0x1.052b0b1a174eap125},
		{0x1.254038bac19d6p123, 0x1.fe6460fef468p124},
		{0x1.1d5e2ffb96d4p123, 0x1.f2a901ccafb37p124},
		{0x1.15aaa8ec85205p123, 0x1.e723726b824a9p124},
		{0x1.0e24cd5dd8846p123, 0x1.dbd32ac4c99bp124},
		{0x1.06cbc943d255ap123, 0x1.d0b7a0f921e7cp124},
		{0x1.ff3d957b29b39p122, 0x1.c5d0497c09e74p124},
		{0x1.f13a043742333p122, 0x1.bb1c972f23e5p124},
		{0x1.e38b43cbd0f0fp122, 0x1.b09bfb7d11a84p124},
		{0x1.d62fbdc2e756bp122, 0x1.a64de673e8837p124},
		{0x1.c925e02b41668p122, 0x1.9c31c6df3b1b8p124},
		{0x1.bc6c1da1f3121p122, 0x1.92470a61b6965p124},
		{0x1.b000ed5b4a626p122, 0x1.888d1d8e510a3p124},
		{0x1.a3e2cb2ae9edbp122, 0x1.7f036c0107294p124},
		{0x1.9810378b1f299p122, 0x1.75a96077274bap124},
		{0x1.8c87b7a37834fp122, 0x1.6c7e64e7281cbp124},
		{0x1.8147d54e9cc33p122, 0x1.6381e2980956bp124},
		{0x1.764f1f1f6ddeap122, 0x1.5ab342383d178p124},
		{0x1.6b9c28657041ap122, 0x1.5211ebf41880bp124},
		{0x1.612d893085125p122, 0x1.499d478bca735p124},
		{0x1.5701de53f4d2ep122, 0x1.4154bc68d75c3p124},
		{0x1.4d17c968d062bp122, 0x1.3937b1b31925ap124},
		{0x1.436df0cfabf1dp122, 0x1.31458e6542847p124},
		{0x1.3a02ffb1b7ceep122, 0x1.297db960e4f63p124},
		{0x1.30d5a6013afc5p122, 0x1.21df9981f8e53p124},
		{0x1.27e49879737d3p122, 0x1.1a6a95b1e786fp124},
		{0x1.1f2e909de04d2p122, 0x1.131e14fa1625dp124},
		{0x1.16b24cb8f8f92p122, 0x1.0bf97e95f2a64p124},
		{0x1.0e6e8fda56cf7p122, 0x1.04fc3a0481321p124},
		{0x1.066221d4539d8p122, 0x1.fc4b5e32d6259p123},
		{0x1.fd179e7243e3cp121, 0x1.eeea8c1b1db94p123},
		{0x1.edd4d2aec5adbp121, 0x1.e1d4cf1e2450ap123},
		{0x1.def98c6c79efap121, 0x1.d508f9a1ea64fp123},
		{0x1.d0838121f2418p121, 0x1.c885df3451a07p123},
		{0x1.c2706fa45005ep121, 0x1.bc4a54a84e834p123},
		{0x1.b4be201caa4b4p121, 0x1.b055303221015p123},
		{0x1.a76a63fc95c79p121, 0x1.a4a549829587ep123},
		{0x1.9a7315f1d6a55p121, 0x1.993979e14fffep123},
		{0x1.8dd619d943ca1p121, 0x1.8e109c4622913p123},
		{0x1.81915cb0e3323p121, 0x1.83298d717210ep123},
		{0x1.75a2d48946eb1p121, 0x1.78832c03aa2b1p123},
		{0x1.6a08807632262p121, 0x1.6e1c5893c380bp123},
		{0x1.5ec0687e8dcb2p121, 0x1.63f3f5c4de13bp123},
		{0x1.53c89d8bb3ddbp121, 0x1.5a08e85af27ep123},
		{0x1.491f395818f54p121, 0x1.505a174e9c929p123},
		{0x1.3ec25e5d5af12p121, 0x1.46e66be00224p123},
		{0x1.34b037c1bbfc5p121, 0x1.3dacd1a8d8ccep123},
		{0x1.2ae6f94510dd8p121, 0x1.34ac36ad8dafep123},
		{0x1.2164df2d29765p121, 0x1.2be38b6d92415p123},
		{0x1.18282e31ba3e8p121, 0x1.2351c2f2d1449p123},
		{0x1.0f2f3367cd6aap121, 0x1.1af5d2e04f3f6p123},
		{0x1.0678442cc256fp121, 0x1.12ceb37ff9bc3p123},
		{0x1.fc037c21c3622p120, 0x1.0adb5fcfa8c75p123},
		{0x1.eb940d8319831p120, 0x1.031ad58d56279p123},
		{0x1.db9f17e61c31p120, 0x1.f7182a851bca2p122},
		{0x1.cc218694238a2p120, 0x1.e85c449e377f3p122},
		{0x1.bd18548996419p120, 0x1.da0005e5f28dfp122},
		{0x1.ae808c479c371p120, 0x1.cc0180af00a8bp122},
		{0x1.a05747a543aa7p120, 0x1.be5ecd2fcb5f9p122},
		{0x1.9299afa0246a6p120, 0x1.b1160991ff737p122},
		{0x1.8544fc2c8c1dap120, 0x1.a4255a00b9f03p122},
		{0x1.785674053e8b9p120, 0x1.978ae8b55ce1bp122},
		{0x1.6bcb6c7ad4854p120, 0x1.8b44e6031383ep122},
		{0x1.5fa14942c3d54p120, 0x1.7f5188610ddc8p122},
		{0x1.53d57c461a5a7p120, 0x1.73af0c737bb45p122},
		{0x1.4865856ff632ap120, 0x1.685bb5134ef13p122},
		{0x1.3d4ef27bc49a6p120, 0x1.5d55cb54cd53ap122},
		{0x1.328f5ec350e67p120, 0x1.529b9e8cf9a1ep122},
		{0x1.2824730cacbb4p120, 0x1.482b8455dc491p122},
		{0x1.1e0be557fa673p120, 0x1.3e03d891b37dep122},
		{0x1.144378ad22027p120, 0x1.3422fd6d12e2bp122},
		{0x1.0ac8fce979b96p120, 0x1.2a875b5ffab56p122},
		{0x1.019a4e8d69649p120, 0x1.212f612dee7fbp122},
		{0x1.f16aad1422a55p119, 0x1.181983e5133ddp122},
		{0x1.e030141df7d25p119, 0x1.0f443edc5ce49p122},
		{0x1.cf80d4afc3019p119, 0x1.06ae13b0d3255p122},
		{0x1.bf5908f50b4ap119, 0x1.fcab1483ea7fcp121},
		{0x1.afb4e269693dfp119, 0x1.ec72615a894c4p121},
		{0x1.a090a974cfebep119, 0x1.dcaf3691fc448p121},
		{0x1.91e8bd0830a74p119, 0x1.cd5ec93c12432p121},
		{0x1.83b9923a85f7bp119, 0x1.be7e5ac24963bp121},
		{0x1.75ffb3e6519ap119, 0x1.b00b38d6b3575p121},
		{0x1.68b7c2479902dp119, 0x1.a202bd6372dcep121},
		{0x1.5bde729a6b60fp119, 0x1.94624e78e0fafp121},
		{0x1.4f708eb9fba63p119, 0x1.87275e3a6869ep121},
		{0x1.436af4c058acbp119, 0x1.7a4f6aca256cbp121},
		{0x1.37ca96a6cd1d4p119, 0x1.6dd7fe335823p121},
		{0x1.2c8c79e6f04a3p119, 0x1.61beae53b72b7p121},
		{0x1.21adb71c70c75p119, 0x1.56011cc3b036dp121},
		{0x1.172b79a7a1181p119, 0x1.4a9cf6bda3f4cp121},
		{0x1.0d02ff50ce651p119, 0x1.3f8ff5042a88ep121},
		{0x1.033197ec68c0ep119, 0x1.34d7dbc76d7e5p121},
		{0x1.f3694a0008381p118, 0x1.2a727a89a3f14p121},
		{0x1.e11332d0714c5p118, 0x1.205dac02bd6b9p121},
		{0x1.cf5bf1fed1e7p118, 0x1.1697560347b26p121},
		{0x1.be3eb08ae7c2p118, 0x1.0d1d69569b82dp121},
		{0x1.adb6b810af9e2p118, 0x1.03ede1a45bfeep121},
		{0x1.9dbf721b98dfap118, 0x1.f60d8aa2a88f2p120},
		{0x1.8e54677bb0151p118, 0x1.e4cc4abf7d065p120},
		{0x1.7f713f9cc9784p118, 0x1.d4143a9dfe965p120},
		{0x1.7111bfdfb3cep118, 0x1.c3e1a5f5c077cp120},
		{0x1.6331caf57b5dbp118, 0x1.b430ecf4a83a8p120},
		{0x1.55cd603cc415p118, 0x1.a4fe83fb9db25p120},
		{0x1.48e09b21414bfp118, 0x1.9646f35a76624p120},
		{0x1.3c67b27d50fe7p118, 0x1.8806d70b2fc36p120},
		{0x1.305ef7fdbfb95p118, 0x1.7a3ade6c8b3e5p120},
		{0x1.24c2d787b9e37p118, 0x1.6cdfcbfc1e263p120},
		{0x1.198fd6a0ee7bdp118, 0x1.5ff2750fe782p120},
		{0x1.0ec293d9e6d85p118, 0x1.536fc18f7ce5cp120},
		{0x1.0457c63a9669p118, 0x1.4754abacdf1dcp120},
		{0x1.f49879624a021p117, 0x1.3b9e3f9d06e3fp120},
		{0x1.e139bb05eb49ep117, 0x1.30499b503957fp120},
		{0x1.ce8d4b7fd6c7p117, 0x1.2553ee2a336bfp120},
		{0x1.bc8d516fda8bap117, 0x1.1aba78ba3af89p120},
		{0x1.ab341ee553e25p117, 0x1.107a8c7323a6ep120},
		{0x1.9a7c305336484p117, 0x1.06918b6355624p120},
		{0x1.8a602b88919cp117, 0x1.f9f9cfd9c3035p119},
		{0x1.7adadead962edp117, 0x1.e77448fb66bb9p119},
		{0x1.6be73f45149fbp117, 0x1.d58da68fd117p119},
		{0x1.5d80693276a6dp117, 0x1.c4412bf4b8f0bp119},
		{0x1.4fa19dc42d409p117, 0x1.b38a3af2e55b4p119},
		{0x1.424642c28ff75p117, 0x1.a3645330550ffp119},
		{0x1.3569e18328604p117, 0x1.93cb11a30d765p119},
		{0x1.29082600643fdp117, 0x1.84ba3004a50dp119},
		{0x1.1d1cddf5a82dep117, 0x1.762d84469c18fp119},
		{0x1.11a3f7ffbbfeap117, 0x1.6821000795a03p119},
		{0x1.069982c189a9ep117, 0x1.5a90b00981d93p119},
		{0x1.f7f3581a4dc2cp116, 0x1.4d78bba8ca5fdp119},
		{0x1.e381802242163p116, 0x1.40d564548fad7p119},
		{0x1.cfd6511405b2dp116, 0x1.34a305080681fp119},
		{0x1.bcead7f01492fp116, 0x1.28de11c5031ebp119},
		{0x1.aab859b20ac9ep116, 0x1.1d83170fbf6fbp119},
		{0x1.993851cc9779ap116, 0x1.128eb96be8798p119},
		{0x1.886470ad946a7p116, 0x1.07fdb4dafea5fp119},
		{0x1.78369a4a2cbd6p116, 0x1.fb99b8b8279e1p118},
		{0x1.68a8e4b2fc8c2p116, 0x1.e7f232d9e263p118},
		{0x1.59b596b012aaap116, 0x1.d4fed7195d7e8p118},
		{0x1.4b572664bd2dcp116, 0x1.c2b9cf7f893bfp118},
		{0x1.3d8837fb08d1dp116, 0x1.b11d702b3deb2p118},
		{0x1.30439c56dadf6p116, 0x1.a024365f771bdp118},
		{0x1.23844fd08cb93p116, 0x1.8fc8c794b03b5p118},
		{0x1.174578f6efd5dp116, 0x1.8005f08d6f1efp118},
		{0x1.0b826758a086bp116, 0x1.70d6a46e07ddap118},
		{0x1.003692548d98bp116, 0x1.6235fbd7a4345p118},
		{0x1.eabb2fe335196p115, 0x1.541f340697987p118},
		{0x1.d5e6777a83c2ap115, 0x1.468dadf4080abp118},
		{0x1.c1e6cb6239574p115, 0x1.397ced7af2b15p118},
		{0x1.aeb4423e690e7p115, 0x1.2ce898809244ep118},
		{0x1.9c47374a0974ep115, 0x1.20cc76202c5fbp118},
		{0x1.8a98484a1e8d3p115, 0x1.15246dda49d47p118},
		{0x1.79a0538dd4fc7p115, 0x1.09ec86c75d497p118},
		{0x1.695875fb574ap115, 0x1.fe41cd9bb4eeep117},
		{0x1.59ba0929261c5p115, 0x1.e97ba3b77f306p117},
		{0x1.4abea183bc47p115, 0x1.d57f524723822p117},
		{0x1.3c600c7f477c5p115, 0x1.c245d4b99847ap117},
		{0x1.2e984ed53e777p115, 0x1.afc85e0f82e12p117},
		{0x1.2161a2cd9d894p115, 0x1.9e005769dbc1dp117},
		{0x1.14b67693928cfp115, 0x1.8ce75e9f6f8ap117},
		{0x1.08916a956172p115, 0x1.7c7744d9378f7p117},
		{0x1.f9da9fde95755p114, 0x1.6caa0d3582fe9p117},
		{0x1.e38a4dc27b11bp114, 0x1.5d79eb71e893bp117},
		{0x1.ce283a9e3e33p114, 0x1.4ee1429bf7ccp117},
		{0x1.b9ab1a96e3b3ep114, 0x1.40daa3c89f5b6p117},
		{0x1.a609f7584d32bp114, 0x1.3360ccd23db3ap117},
		{0x1.933c2d52c56c9p114, 0x1.266ea71d4f71ap117},
		{0x1.8139690c0d187p114, 0x1.19ff4663ae9dfp117},
		{0x1.6ff9a4837fa43p114, 0x1.0e0de78654d1ep117},
		{0x1.5f7524a8e81a2p114, 0x1.0295ef6591848p117},
		{0x1.4fa476e59f668p114, 0x1.ef25d37f49fe1p116},
		{0x1.40806eb78e353p114, 0x1.da01102b5f851p116},
		{0x1.3202235dada5p114, 0x1.c5b5412dcafadp116},
		{0x1.2422ed95a3235p114, 0x1.b23a5a23e421p116},
		{0x1.16dc656a14df6p114, 0x1.9f8893d8fd1c1p116},
		{0x1.0a2860115569cp114, 0x1.8d986a4187285p116},
		{0x1.fc01dbb80c841p113, 0x1.7c629a822bc9ep116},
		{0x1.e4c0b066a497p113, 0x1.6be02102b352p116},
		{0x1.ce823f4cc4badp113, 0x1.5c0a378c90bcap116},
		{0x1.b93bf40d5eccbp113, 0x1.4cda5374ea275p116},
		{0x1.a4e3a125adc76p113, 0x1.3e4a23d1f4703p116},
		{0x1.916f7c5f2f764p113, 0x1.30538fbb77ecdp116},
		{0x1.7ed61b5d3db0ap113, 0x1.22f0b496539bep116},
		{0x1.6d0e7045988cbp113, 0x1.161be46ad3b5p116},
		{0x1.5c0fc68335b0cp113, 0x1.09cfa445b00ffp116},
		{0x1.4bd1bfa2aba3dp113, 0x1.fc0d55470cf51p115},
		{0x1.3c4c504792bf8p113, 0x1.e577bbcd49935p115},
		{0x1.2d77bd3a382bcp113, 0x1.cfd4a5adec5cp115},
		{0x1.1f4c988d02149p113, 0x1.bb1a9657ce465p115},
		{0x1.11c3bed8e716ap113, 0x1.a740684026555p115},
		{0x1.04d654905dadp113, 0x1.943d4a1d1ed39p115},
		{0x1.f0fb86d056745p112, 0x1.8208bc334a6a5p115},
		{0x1.d9676faafa27fp112, 0x1.709a8db59f25cp115},
		{0x1.c2e43d417197bp112, 0x1.5feada379d8b7p115},
		{0x1.ad664518e771bp112, 0x1.4ff207314a102p115},
		{0x1.98e25420092dap112, 0x1.40a8c1949f75ep115},
		{0x1.854daa4a49b0fp112, 0x1.3207fb7420eb9p115},
		{0x1.729df6503422ap112, 0x1.2408e9ba3327fp115},
		{0x1.60c95193c542dp112, 0x1.16a501f0e42cap115},
		{0x1.4fc63c27c71aep112, 0x1.09d5f819c9e29p115},
		{0x1.3f8b98f93052ap112, 0x1.fb2b792b40a22p114},
		{0x1.3010aa198de78p112, 0x1.e3bcf436a1a95p114},
		{0x1.214d0d298365p112, 0x1.cd55277c18d05p114},
		{0x1.1338b7e273194p112, 0x1.b7e94604479dcp114},
		{0x1.05cbf4be650abp112, 0x1.a36eec00926ddp114},
		{0x1.f1febf7a916aap111, 0x1.8fdc1b2dcf7b9p114},
		{0x1.d997c68d65936p111, 0x1.7d2737527c3f9p114},
		{0x1.c2556a4e7a90fp111, 0x1.6b4702d7d5849p114},
		{0x1.ac2aa7516ade4p111, 0x1.5a329b7d30748p114},
		{0x1.970b05888fda2p111, 0x1.49e17724f4d41p114},
		{0x1.82ea92dbc1a27p111, 0x1.3a4b60ba9aa4ep114},
		{0x1.6fbdddeff308fp111, 0x1.2b6875310f785p114},
		{0x1.5d79f11e27f6bp111, 0x1.1d312098e9dbap114},
		{0x1.4c144d984e1b8p111, 0x1.0f9e1b4dd36dfp114},
		{0x1.3b82e6ba892a4p111, 0x1.02a8673a94692p114},
		{0x1.2bbc1d878d272p111, 0x1.ec929a665b449p113},
		{0x1.1cb6bc4eaa678p111, 0x1.d4f4b4c8e09edp113},
		{0x1.0e69f27a37df3p111, 0x1.be6abbb10a5aap113},
		{0x1.00cd508511266p111, 0x1.a8e8cc1fadef6p113},
		{0x1.e7b1882bccac5p110, 0x1.94637d5bacfdbp113},
		{0x1.cf09287e48bb9p110, 0x1.80cfdc72220cfp113},
		{0x1.b792bbc489b04p110, 0x1.6e2367dc27f95p113},
		{0x1.a140206ab945p110, 0x1.5c540b4936fd2p113},
		{0x1.8c03d2d39119bp110, 0x1.4b581b8d170fcp113},
		{0x1.77d0e6e5bed21p110, 0x1.3b2652b06c2b2p113},
		{0x1.649b01d73110ap110, 0x1.2bb5cc22e5db6p113},
		{0x1.525654343aad2p110, 0x1.1cfe010e2052dp113},
		{0x1.40f79420887c7p110, 0x1.0ef6c4c84a0fep113},
		{0x1.3073f7cff4a85p110, 0x1.01984165a5f36p113},
		{0x1.20c1303550f0ep110, 0x1.e9b5e8d00ce77p112},
		{0x1.11d563e54f40ep110, 0x1.d16f5716c6c1ap112},
		{0x1.03a72a2bbdc06p110, 0x1.ba4f035d60e03p112},
		{0x1.ec5b0ca2b20f5p109, 0x1.a447b7b03f045p112},
		{0x1.d2bfc6210880ap109, 0x1.8f4ccca7fc90dp112},
		{0x1.ba6c1c6e87c4p109, 0x1.7b5223dac7336p112},
		{0x1.a35068e9c89cfp109, 0x1.684c227fcacefp112},
		{0x1.8d5dbaa383b98p109, 0x1.562fac4329b48p112},
		{0x1.7885ce9f67cdbp109, 0x1.44f21e49054f2p112},
		{0x1.64bb0863504ddp109, 0x1.34894a5e24657p112},
		{0x1.51f06ad20e4c3p109, 0x1.24eb7254ccf83p112},
		{0x1.4019914f0b53ap109, 0x1.160f438c70913p112},
		{0x1.2f2aa92823e8p109, 0x1.07ebd2a2d2844p112},
		{0x1.1f186b432c98bp109, 0x1.f4f12e9ab070ap111},
		{0x1.0fd8160ca94ap109, 0x1.db5ad0b27805cp111},
		{0x1.015f67a552924p109, 0x1.c304efa2c6f4ep111},
		{0x1.e749309831666p108, 0x1.abe09e9144b5ep111},
		{0x1.cd3caa04cdd1bp108, 0x1.95df988e76644p111},
		{0x1.b48774d0f8e45p108, 0x1.80f439b4ee04bp111},
		{0x1.9d189f9f85cbfp108, 0x1.6d11788a69c64p111},
		{0x1.86e0050236315p108, 0x1.5a2adfa0b4bc4p111},
		{0x1.71ce426a561d3p108, 0x1.4834877429b8fp111},
		{0x1.5dd4af79906a9p108, 0x1.37231085c7d9ap111},
		{0x1.4ae555af52cdfp108, 0x1.26eb9daed6f7ep111},
		{0x1.38f2e86f38216p108, 0x1.1783ceac2891p111},
		{0x1.27f0bd5d0e6b1p108, 0x1.08e1badf0fcedp111},
		{0x1.17d2c50b2bfafp108, 0x1.f5f7d88472604p110},
		{0x1.088d83f7e4069p108, 0x1.db92b5212fb8dp110},
		{0x1.f42c17ae0ebf6p107, 0x1.c282cd3957edap110},
		{0x1.d8c3ea48f2889p107, 0x1.aab7abace48dcp110},
		{0x1.beceb1f9f5b3dp107, 0x1.94219bfcb4928p110},
		{0x1.a6399674d366bp107, 0x1.7eb1a2075864ep110},
		{0x1.8ef2a9a18d857p107, 0x1.6a597219a93dap110},
		{0x1.78e8dcd2e6bfdp107, 0x1.570b69502f313p110},
		{0x1.640bf6745325ep107, 0x1.44ba864670882p110},
		{0x1.504c882a97424p107, 0x1.335a62115bce2p110},
		{0x1.3d9be56279ee9p107, 0x1.22df298214423p110},
		{0x1.2bec1a4917edbp107, 0x1.133d96ae7e0ddp110},
		{0x1.1b2fe32991d5cp107, 0x1.046aeabcfcdecp110},
		{0x1.0b5aa42bf5054p107, 0x1.ecb9cfe1d8642p109},
		{0x1.f8c0c2e2ce8dep106, 0x1.d21397ead99cbp109},
		{0x1.dc6b6f1384e18p106, 0x1.b8d094c86d374p109},
		{0x1.c19fa87de37fbp106, 0x1.a0df0f0c626dcp109},
		{0x1.a848df650bea7p106, 0x1.8a2e269750a39p109},
		{0x1.90538b942ea7cp106, 0x1.74adc8f4064d3p109},
		{0x1.79ad1fce5b3d8p106, 0x1.604ea819f007cp109},
		{0x1.6443fdcf0c327p106, 0x1.4d0231928c6f9p109},
		{0x1.50076ad55cc39p106, 0x1.3aba85fe22e2p109},
		{0x1.3ce784b411931p106, 0x1.296a70f414053p109},
		{0x1.2ad53760d7287p106, 0x1.1905613b3abf2p109},
		{0x1.19c232fd50b88p106, 0x1.097f6156f32c5p109},
		{0x1.09a0e254c75ep106, 0x1.f59a20caf6695p108},
		{0x1.f4c8c392fb944p105, 0x1.d9c73698fb1dcp108},
		{0x1.d800ed59bd026p105, 0x1.bf716c6168baep108},
		{0x1.bcd30dfbd611bp105, 0x1.a6852c6b58392p108},
		{0x1.a32923130213fp105, 0x1.8eefd70594a89p108},
		{0x1.8aee4cd06ec1bp105, 0x1.789fb715aae95p108},
		{0x1.740ebfab80eb4p105, 0x1.6383f726a8e04p108},
		{0x1.5e77b6bbd2127p105, 0x1.4f8c96f26a26ap108},
		{0x1.4a1766b6e5e8ap105, 0x1.3caa61607f92p108},
		{0x1.36dcf18a6465cp105, 0x1.2acee2f5ecdb8p108},
		{0x1.24b85a8bf0124p105, 0x1.19ec60b1242edp108},
		{0x1.139a7b37f8475p105, 0x1.09f5cf4dd2877p108},
		{0x1.0374f8792ca97p105, 0x1.f5bd95d8730d8p107},
		{0x1.e87470e4f4246p104, 0x1.d9371e2ff7c35p107},
		{0x1.cbbab18b73217p104, 0x1.be41de54d155ap107},
		{0x1.b0a44aa2f067ep104, 0x1.a4c89e08ef4f3p107},
		{0x1.971a1ec0f40c7p104, 0x1.8cb738399b12cp107},
		{0x1.7f064a8ba8323p104, 0x1.75fa8dbc84becp107},
		{0x1.685414c16188ep104, 0x1.608078a70dcbcp107},
		{0x1.52efdf060cd2p104, 0x1.4c37c0394d094p107},
		{0x1.3ec7176d784b5p104, 0x1.39100d5687bfep107},
		{0x1.2bc82ab9d2302p104, 0x1.26f9df8519bd7p107},
		{0x1.19e277461404p104, 0x1.15e6827001f18p107},
		{0x1.090640946d2d5p104, 0x1.05c803e4831c1p107},
		{0x1.f24946f22d5aep103, 0x1.ed22548cffd35p106},
		{0x1.d45f15b49b35ep103, 0x1.d06ad6ecdf971p106},
		{0x1.b83349fd05191p103, 0x1.b551c847fbc96p106},
		{0x1.9dacb2c432ef4p103, 0x1.9bc09f112b494p106},
		{0x1.84b37e1cbf8ebp103, 0x1.83a1ff0aa239dp106},
		{0x1.6d3126d74b6ccp103, 0x1.6ce1aa3fd7bddp106},
		{0x1.5710631158bffp103, 0x1.576c72b514859p106},
		{0x1.423d13a3b73e1p103, 0x1.43302cc4a0da8p106},
		{0x1.2ea43465e3995p103, 0x1.301ba221dc9bbp106},
		{0x1.1c33cd3c37addp103, 0x1.1e1e857adc568p106},
		{0x1.0adae3e73c2b5p103, 0x1.0d2966b1746f7p106},
		{0x1.f512dd15b73b7p102, 0x1.fa5b4f49cc6b2p105},
		{0x1.d6608dc942687p102, 0x1.dc3ae30b55c16p105},
		{0x1.b9823c51276e1p102, 0x1.bfd7555a3bd68p105},
		{0x1.9e5ce2f93dd76p102, 0x1.a517d9e61628ap105},
		{0x1.84d6fe15b6b93p102, 0x1.8be4f8f6c951fp105},
		{0x1.6cd87746bc76bp102, 0x1.74287ded49339p105},
		{0x1.564a91cd221fp102, 0x1.5dcd669f2cd34p105},
		{0x1.4117d7e2c667dp102, 0x1.48bfd38302871p105},
		{0x1.2d2c0909ebeb9p102, 0x1.34ecf8a3c124ap105},
		{0x1.1a7409475f2f9p102, 0x1.22430f521cbcfp105},
		{0x1.08ddd13bd35e7p102, 0x1.10b1488aeb235p105},
		{0x1.f0b0be22d18e8p101, 0x1.0027c00a263a6p105},
		{0x1.d1a75065a8c74p101, 0x1.e12ee004efc37p104},
		{0x1.b48117843c1c7p101, 0x1.c3e44ae32b16bp104},
		{0x1.99218b8ac7f8ep101, 0x1.a854ea14102a8p104},
		{0x1.7f6dc6010b4adp101, 0x1.8e6761569f45dp104},
		{0x1.674c6ae60d852p101, 0x1.7603bac345f65p104},
		{0x1.50a592e3c968ep101, 0x1.5f1353cdad001p104},
		{0x1.3b62b6aafb0c8p101, 0x1.4980cb3c80949p104},
		{0x1.276e9b681072fp101, 0x1.3537f00b6ad4dp104},
		{0x1.14b54042f445bp101, 0x1.2225b12bffc68p104},
		{0x1.0323ccdc1a3dcp101, 0x1.10380e1adb7e9p104},
		{0x1.e5510173b9a5p100, 0x1.febc107d5efaap103},
		{0x1.c6654733b86adp100, 0x1.df0f2a0ee6947p103},
		{0x1.a964ed354f984p100, 0x1.c14b2188bcee4p103},
		{0x1.8e324c651b064p100, 0x1.a553644f7f07dp103},
		{0x1.74b179d1eba81p100, 0x1.8b0cfce0579ep103},
		{0x1.5cc82d9070d95p100, 0x1.725e7c5dd20f7p103},
		{0x1.465daafca8b1dp100, 0x1.5b2fe547a134p103},
		{0x1.315aaa46df48ep100, 0x1.456a974e92e93p103},
		{0x1.1da9433aebbcfp100, 0x1.30f93c3699078p103},
		{0x1.0b34d93135fcp100, 0x1.1dc7b5b978cf8p103},
		{0x1.f3d41033c44ccp99, 0x1.0bc30c5d52f15p103},
		{0x1.d36d25268cd2bp99, 0x1.f5b2be65a0c7fp102},
		{0x1.b512a1fb1d8fcp99, 0x1.d5f3a8dea7357p102},
		{0x1.98a442fc4fc15p99, 0x1.b82915b03515bp102},
		{0x1.7e03b1cc6d738p99, 0x1.9c3517e789488p102},
		{0x1.651468e010b8ap99, 0x1.81fb7df06136ep102},
		{0x1.4dbb989001d84p99, 0x1.6961b8d641d06p102},
		{0x1.37e00dac4e8b5p99, 0x1.524ec4d916caep102},
		{0x1.236a197bf0b9ap99, 0x1.3cab1343d18d1p102},
		{0x1.10437b1569d7ep99, 0x1.2860757487a01p102},
		{0x1.fcae93fb7323cp98, 0x1.155a09065d4f7p102},
		{0x1.db23c3f816f92p98, 0x1.0384250e4c9fcp102},
		{0x1.bbc1a022c14d4p98, 0x1.e59890b926c78p101},
		{0x1.9e658108af2ep98, 0x1.c642116a8a9e3p101},
		{0x1.82eedbe410407p98, 0x1.a8e405e651ab6p101},
		{0x1.693f22ab61ce9p98, 0x1.8d5f98114f872p101},
		{0x1.5139a5f3661fbp98, 0x1.7397c5a66e307p101},
		{0x1.3ac3788a1b429p98, 0x1.5b71456c5a4c4p101},
		{0x1.25c354b26cb4ep98, 0x1.44d26de513197p101},
		{0x1.122182e9a270fp98, 0x1.2fa31d6371537p101},
		{0x1.ff8f84418d51p97, 0x1.1bcca373b7b43p101},
		{0x1.dd4262aac53e8p97, 0x1.0939ab853339fp101},
		{0x1.bd3474ec16ca5p97, 0x1.efac5187b2863p100},
		{0x1.9f40fd0082b72p97, 0x1.cf1e86235d0e7p100},
		{0x1.8345858c4438dp97, 0x1.b0a68a2128babp100},
		{0x1.6921be96b86b1p97, 0x1.9423165bc4444p100},
		{0x1.50b75c536f927p97, 0x1.7974e743dea3dp100},
		{0x1.39e9f7dcbe479p97, 0x1.607e9eacd105p100},
		{0x1.249ef1c3be817p97, 0x1.4924a74dec729p100},
		{0x1.10bd565b35393p97, 0x1.334d19e0c216p100},
		{0x1.fc5b8748842b2p96, 0x1.1edfa3c5f5ccap100},
		{0x1.d9b4a18a38642p96, 0x1.0bc56f1b54701p100},
		{0x1.b95cede6d524bp96, 0x1.f3d2185e047d9p99},
		{0x1.9b2df77a02225p96, 0x1.d26cb87945e87p99},
		{0x1.7f03b935e8e3ap96, 0x1.b334fac4b9f99p99},
		{0x1.64bc777824f0ep96, 0x1.96076f7918d1cp99},
		{0x1.4c389be9acb83p96, 0x1.7ac2d72fc2c63p99},
		{0x1.355a9387de78cp96, 0x1.614801550319ep99},
		{0x1.2006aeb6bc768p96, 0x1.4979ac8b28927p99},
		{0x1.0c23033e2a376p96, 0x1.333c68e2d0548p99},
		{0x1.f32ea02b55d23p95, 0x1.1e767bce37dd7p99},
		{0x1.d099c5c770f5ap95, 0x1.0b0fc5b6d05ap99},
		{0x1.b05cfe2e99435p95, 0x1.f1e3523b41d7dp98},
		{0x1.92508d0743fc9p95, 0x1.d00de6608effep98},
		{0x1.764f46cf19f9cp95, 0x1.b0778b7b3301bp98},
		{0x1.5c36679625a01p95, 0x1.92fb04ec0f6cfp98},
		{0x1.43e56c3e340a7p95, 0x1.77756ec9f78fap98},
		{0x1.2d3dee1869201p95, 0x1.5dc61922d5a06p98},
		{0x1.182380bd2f494p95, 0x1.45ce65699ff6dp98},
		{0x1.047b91fcb6491p95, 0x1.2f71a5f15997p98},
		{0x1.e45a9790460c1p94, 0x1.1a94ff571654fp98},
		{0x1.c242efeaca76p94, 0x1.071f4bbea09ecp98},
		{0x1.a284cb82c31cep94, 0x1.e9f1ff8ddd774p97},
		{0x1.84f7a1eb7f7f3p94, 0x1.c818223a202c7p97},
		{0x1.697595326d7dcp94, 0x1.a887bd2b4404dp97},
		{0x1.4fdb462549af1p94, 0x1.8b1a336c5eb6bp97},
		{0x1.3807ab51436a8p94, 0x1.6fab63324088ap97},
		{0x1.21dbea9108398p94, 0x1.56197e30205bap97},
		{0x1.0d3b35021d695p94, 0x1.3e44e45301b92p97},
		{0x1.f4154a787cc1bp93, 0x1.281000bfe4c3fp97},
		{0x1.d0623f4f4a28fp93, 0x1.135f28f2d50b4p97},
		{0x1.af2e69a26261p93, 0x1.00187dded5975p97},
		{0x1.904e0b3aa82a3p93, 0x1.dc479de0ef001p96},
		{0x1.73985278fa30ep93, 0x1.bad4fdad3caa1p96},
		{0x1.58e7298af87d9p93, 0x1.9baed3ed27ab8p96},
		{0x1.401708b7e64c6p93, 0x1.7ead9ce4285bbp96},
		{0x1.2906cb94eb40dp93, 0x1.63ac6b4edc88ep96},
		{0x1.139788f2dd663p93, 0x1.4a88be2a6390cp96},
		{0x1.ff58dab4f2a79p92, 0x1.332259185f1ap96},
		{0x1.da552fdd03043p92, 0x1.1d5b1f3793044p96},
		{0x1.b7f1f31b571b6p92, 0x1.0916f04b6e18bp96},
		{0x1.98006c2117e39p92, 0x1.ec77101de6926p95},
		{0x1.7a550f03b145bp92, 0x1.c960bf23153ep95},
		{0x1.5ec74662c5961p92, 0x1.a8bd20fc65ef7p95},
		{0x1.453141082302ap92, 0x1.8a61745ec7d1dp95},
		{0x1.2d6fc2c9e8bcp92, 0x1.6e25d0e756261p95},
		{0x1.1761f87a6dc3dp92, 0x1.53e4f7d1666cbp95},
		{0x1.02e94eb4ac8a5p92, 0x1.3b7c27a7ddb0ep95},
		{0x1.dfd296adef82ap91, 0x1.24caf2c32af14p95},
		{0x1.bc8ed301215ebp91, 0x1.0fb3186804d0fp95},
		{0x1.9bd5efd2c0f15p91, 0x1.f830c0bb41fd7p94},
		{0x1.7d79f2db2d4a5p91, 0x1.d3c0f1a91c846p94},
		{0x1.61500f5293f06p91, 0x1.b1e5acf351d87p94},
		{0x1.47306f04df3d6p91, 0x1.92712d259ce66p94},
		{0x1.2ef5ff0323b28p91, 0x1.7538c60a04476p94},
		{0x1.187e3fb74914dp91, 0x1.5a14b04b47879p94},
		{0x1.03a918225a966p91, 0x1.40dfd87456f4cp94},
		{0x1.e0b15822be4ep90, 0x1.2977b1172b9d5p94},
		{0x1.bce26a2fb7176p90, 0x1.13bc07e891491p94},
		{0x1.9bb1bc445c3c6p90, 0x1.ff1dbb4300811p93},
		{0x1.7cef42e9a617dp90, 0x1.d9a880f306bd8p93},
		{0x1.606e51e0a4963p90, 0x1.b6e45220b55ep93},
		{0x1.460560e841d79p90, 0x1.96a0b33f2c4dap93},
		{0x1.2d8dd47a40ad8p90, 0x1.78b07e9e924acp93},
		{0x1.16e3ca3d4393fp90, 0x1.5ce9ab1670dd2p93},
		{0x1.01e5e8edda47bp90, 0x1.4325167006bbp93},
		{0x1.dcea670907819p89, 0x1.2b3e53538ff3fp93},
		{0x1.b8e9bec48816dp89, 0x1.15137a7f44864p93},
		{0x1.97945aa1c9c35p89, 0x1.0084ff125639dp93},
		{0x1.78b88a4e7107bp89, 0x1.daeb0b7311ec7p92},
		{0x1.5c2827c986b62p89, 0x1.b7937d1c40c53p92},
		{0x1.41b858361b0fep89, 0x1.96d082f59ab06p92},
		{0x1.294150fb19119p89, 0x1.7872d9fa10aadp92},
		{0x1.129e20e732adcp89, 0x1.5c4e8e37bc7dp92},
		{0x1.fb58fa290d436p88, 0x1.423ac0df49a4p92},
		{0x1.d499229819bc6p88, 0x1.2a117230ad284p92},
		{0x1.b0c1a759f7739p88, 0x1.13af4f04f9998p92},
		{0x1.8f9bb6c075486p88, 0x1.fde703724e56p91},
		{0x1.70f4744735c2bp88, 0x1.d77f0c82e7641p91},
		{0x1.549cb0f7ef8e2p88, 0x1.b3ee02611d7ddp91},
		{0x1.3a68a8c1234e1p88, 0x1.92ff33023d5bdp91},
		{0x1.222fc469e8b8cp88, 0x1.7481a9e69f53fp91},
		{0x1.0bcc5fd30f1ddp88, 0x1.5847eda620959p91},
		{0x1.ee3728761897bp87, 0x1.3e27c1fcc74bdp91},
		{0x1.c7fa0c7e3bac7p87, 0x1.25f9ee0b923dcp91},
		{0x1.a4a56eb132a54p87, 0x1.0f9a0686532p91},
		{0x1.8401b5336a8ap87, 0x1.f5cc7718082bp90},
		{0x1.65db58e2358c1p87, 0x1.cf7e53d6a2ca5p90},
		{0x1.4a029a7ea7cd1p87, 0x1.ac0f5f3229372p90},
		{0x1.304b3d1961171p87, 0x1.8b498644847eap90},
		{0x1.188c45630dc53p87, 0x1.6cfa9bcca59dcp90},
		{0x1.029fbd8b92835p87, 0x1.50f411d4fd2cdp90},
		{0x1.dcc4fabf32f1cp86, 0x1.370ab8327af5ep90},
		{0x1.b767ecb334a7ep86, 0x1.1f167f88c6b6ep90},
		{0x1.94ec06c0ff29fp86, 0x1.08f24085d4597p90},
		{0x1.751977e5803d3p86, 0x1.e8f70e181d61ap89},
		{0x1.57bc950253825p86, 0x1.c324c20e337dcp89},
		{0x1.3ca58b816a87fp86, 0x1.a03261574b54ep89},
		{0x1.23a8197d2607ep86, 0x1.7fe903cdf5855p89},
		{0x1.0c9b4b0a6a16fp86, 0x1.6215c58da345p89},
		{0x1.eeb27891d2bb3p85, 0x1.46897d4b69fc6p89},
		{0x1.c77dbfc848866p85, 0x1.2d1877d731b7bp89},
		{0x1.a357936adf17bp85, 0x1.159a386b11517p89},
		{0x1.8203fa7992554p85, 0x1.ffd27ae9393cep88},
		{0x1.634b7f56b0a5cp85, 0x1.d7c593130dd0bp88},
		{0x1.46fada7e6a5fep85, 0x1.b2cd607c79bcfp88},
		{0x1.2ce2a3690576bp85, 0x1.90ae4d3405651p88},
		{0x1.14d707280e6cfp85, 0x1.71312dd1759e2p88},
		{0x1.fd5f08ad2b29ap84, 0x1.5422ef5d8949dp88},
		{0x1.d48d57f7718b7p84, 0x1.39544b0ecc957p88},
		{0x1.aef3ce0add578p84, 0x1.20997f73e73ddp88},
		{0x1.8c52800f939c8p84, 0x1.09ca0eaacd277p88},
		{0x1.6c6e61e57bf9bp84, 0x1.e9810295890ecp87},
		{0x1.4f10e8ebc44a9p84, 0x1.c2b45b5aa4a1dp87},
		{0x1.3407b59d72a5bp84, 0x1.9eee068fa7596p87},
		{0x1.1b2443858c0a1p84, 0x1.7df2b399c10a8p87},
		{0x1.043b9f1621ff3p84, 0x1.5f8b87a31bd85p87},
		{0x1.de4c41eb96b45p83, 0x1.4385c96e9a2d9p87},
		{0x1.b77e5cbd5d147p83, 0x1.29b2933ef4cbcp87},
		{0x1.93c9fc62bfb11p83, 0x1.11e68a6378f8ap87},
		{0x1.72f0c4c8e9bffp83, 0x1.f7f338086a86bp86},
		{0x1.54b92affb11afp83, 0x1.cf8d7d9ce040ap86},
		{0x1.38ee17b150182p83, 0x1.aa577251ae485p86},
		{0x1.1f5e908f70e0cp83, 0x1.8811d739efb5fp86},
		{0x1.07dd6833bb38p83, 0x1.68823e52970bep86},
		{0x1.e481e7f6ac4bcp82, 0x1.4b72ae68e8b4cp86},
		{0x1.bcc58edad5559p82, 0x1.30b14dbe876bcp86},
		{0x1.983ee9896d582p82, 0x1.181012ef8661p86},
		{0x1.76aca47764427p82, 0x1.01647ba798745p86},
		{0x1.57d287836bd3dp82, 0x1.d90e917701675p85},
		{0x1.3b79118c097a1p82, 0x1.b2a87e86d0c8ap85},
		{0x1.216d1b97279a9p82, 0x1.8f53dcb377293p85},
		{0x1.097f82fc04025p82, 0x1.6ed2f2515e933p85},
		{0x1.e709b415656dp81, 0x1.50ecc9ed47f19p85},
		{0x1.beaa3d6c15504p81, 0x1.356cd5ce7799ep85},
		{0x1.9996ed9b83967p81, 0x1.1c229a587ab78p85},
		{0x1.778be2bd9795bp81, 0x1.04e15ecc7f3f6p85},
		{0x1.584a99af8a842p81, 0x1.deffc7e6a6017p84},
		{0x1.3b99832cbefddp81, 0x1.b7b040832f31p84},
		{0x1.2143a112d0466p81, 0x1.938e021f36d76p84},
		{0x1.09182b326b229p81, 0x1.7258610b3b233p84},
		{0x1.e5d47637f5db5p80, 0x1.53d3bfc82a909p84},
		{0x1.bd20fcc3b76d7p80, 0x1.37c92babdc2fdp84},
		{0x1.97c9dda748fc7p80, 0x1.1e06010120f6ap84},
		{0x1.7589207e91ad1p80, 0x1.065b9616170d4p84},
		{0x1.561e669aa7fdbp80, 0x1.e13dd96b3753bp83},
		{0x1.394e7a2ac9fc7p80, 0x1.b950d32467392p83},
		{0x1.1ee2e61eccc99p80, 0x1.94a72263259a5p83},
		{0x1.06a996198f06fp80, 0x1.72fd93e036cdcp83},
		{0x1.e0e8fbad2703ep79, 0x1.54164576929abp83},
		{0x1.b8328ee330ae9p79, 0x1.37b83c521fe96p83},
		{0x1.92e21013a767p79, 0x1.1daf033182e96p83},
		{0x1.70aff489136ebp79, 0x1.05ca50205d26ap83},
		{0x1.515a7c77fab48p79, 0x1.dfbb6235639fap82},
		{0x1.34a53ce0bbb6fp79, 0x1.b7807e294781fp82},
		{0x1.1a58b2b09fdcbp79, 0x1.9298add70a734p82},
		{0x1.0241de6c31e5bp79, 0x1.70beaf9c7ffb6p82},
		{0x1.d863cf753825cp78, 0x1.51b2cd6709222p82},
		{0x1.affb906d0ae09p78, 0x1.353a6cf7f7fffp82},
		{0x1.8afbf9e9520c2p78, 0x1.1b1fa8cbe84a7p82},
		{0x1.691c7c768becep78, 0x1.0330f0fd69921p82},
		{0x1.4a1a79df39cdep78, 0x1.da81670f96f9bp81},
		{0x1.2db8ca9009091p78, 0x1.b24a16b4d09aap81},
		{0x1.13bf4cb384e4ap78, 0x1.8d6eeb6efdbd6p81},
		{0x1.f7f4f88751db4p77, 0x1.6ba91ac734786p81},
		{0x1.cc7626bced452p77, 0x1.4cb7966770ab5p81},
		{0x1.a4ab6470c1c5cp77, 0x1.305e9721d0981p81},
		{0x1.80451c2811052p77, 0x1.1667311fff70ap81},
		{0x1.5efa4d64f59f6p77, 0x1.fd3de10d62855p80},
		{0x1.40880373ed74p77, 0x1.d1aefbcd48d0cp80},
		{0x1.24b0d7368076ep77, 0x1.a9cc93c25aca9p80},
		{0x1.0b3c7b0d960fp77, 0x1.85487ee3ea735p80},
		{0x1.e7eea02e4ed88p76, 0x1.63daf8b4b1e0cp80},
		{0x1.bd6408059b696p76, 0x1.45421e69a6ca1p80},
		{0x1.96826d9e90341p76, 0x1.294175802d99ap80},
		{0x1.72fa4fa12d516p76, 0x1.0fa17bf41068fp80},
		{0x1.5282d2d5803fep76, 0x1.f05e82aae2bb9p79},
		{0x1.34d935f1be064p76, 0x1.c578101b29058p79},
		{0x1.19c050c56d0d7p76, 0x1.9e39dc5dd2f7cp79},
		{0x1.01001dd9c7ccep76, 0x1.7a553a728bbf2p79},
		{0x1.d4ca9b634ecbap75, 0x1.5982008db1304p79},
		{0x1.ab81c5c80cf39p75, 0x1.3b7e00422e51bp79},
		{0x1.85cfacb7477f2p75, 0x1.200c898d9ee3ep79},
		{0x1.6365862923eb9p75, 0x1.06f5f7eb65a56p79},
		{0x1.43fb317b5dc37p75, 0x1.e00e9148a1d25p78},
		{0x1.274ea96044bd7p75, 0x1.b623734024e92p78},
		{0x1.0d23817479c67p75, 0x1.8fd4e01891bf8p78},
		{0x1.ea84dd159259p74, 0x1.6cd44c7470d89p78},
		{0x1.bef1b1a12823ep74, 0x1.4cd9c04158cd7p78},
		{0x1.9730edfda64acp74, 0x1.2fa34bf5c8344p78},
		{0x1.72ede3b7eaa25p74, 0x1.14f4890ff2461p78},
		{0x1.51db1ec3a3087p74, 0x1.f92c49dfa4df5p77},
		{0x1.33b1c9d1576ecp74, 0x1.ccaaea71ab0dfp77},
		{0x1.18311f8a03acap74, 0x1.a40829f001197p77},
		{0x1.fe3bcf4629feap73, 0x1.7eef13b59e96cp77},
		{0x1.d083fda665164p73, 0x1.5d11e1a252bf5p77},
		{0x1.a6d7d18831888p73, 0x1.3e296303b2297p77},
		{0x1.80dcd6603df1bp73, 0x1.21f47009f43cep77},
		{0x1.5e4062d5b6a4ep73, 0x1.083768c5e4542p77},
		{0x1.3eb6ef47c2758p73, 0x1.e1777d831265fp76},
		{0x1.21fb7a81c5444p73, 0x1.b69f10b0191b5p76},
		{0x1.07cefb734d68bp73, 0x1.8f8a3a05b5b53p76},
		{0x1.dfefbdb19ac7ep72, 0x1.6be573c40c8e7p76},
		{0x1.b4831fb12344p72, 0x1.4b645ba991fdbp76},
		{0x1.8cf81557d20b6p72, 0x1.2dc119095729fp76},
		{0x1.68f6f0feb4755p72, 0x1.12bbcfa4d62dep76},
		{0x1.482fa78c40635p72, 0x1.f4343c7d504b9p75},
		{0x1.2a59289a484fbp72, 0x1.c74d4fe1e0e8bp75},
		{0x1.0f30c4d0be5cp72, 0x1.9e614ecbf4af6p75},
		{0x1.ecf3428c48d4fp71, 0x1.791716475420cp75},
		{0x1.bff86d9ec8499p71, 0x1.571d34563050ap75},
		{0x1.970bb87f4ae14p71, 0x1.3829407a207d8p75},
		{0x1.71d0b55b79b86p71, 0x1.1bf74244aed5ap75},
		{0x1.4ff315d036fbdp71, 0x1.024924c7520d1p75},
		{0x1.3125f6a3d257p71, 0x1.d5cc6ba567f29p74},
		{0x1.15233ae8815f2p71, 0x1.ab3560167ccaap74},
		{0x1.f755ea760487dp70, 0x1.846e9dda7a163p74},
		{0x1.c905bbd9ab5a6p70, 0x1.6121d7db32bddp74},
		{0x1.9eebaa0589b4ep70, 0x1.410047ead6894p74},
		{0x1.78a6de0f41b89p70, 0x1.23c2090cdde78p74},
		{0x1.55df1790f2f61p70, 0x1.09257fca001cp74},
		{0x1.3643ec463a3cfp70, 0x1.e1dd9ec677783p73},
		{0x1.198c18435598dp70, 0x1.b5ceb5a13221bp73},
		{0x1.fee9bab9f4e14p69, 0x1.8dbaa11de2037p73},
		{0x1.cf82e0eb6196bp69, 0x1.694680a9a3ee6p73},
		{0x1.a474e7029a919p69, 0x1.481f73b3778e8p73},
		{0x1.7d5af6513e2bep69, 0x1.29f9e7d8fd094p73},
		{0x1.59d93e1d8f57dp69, 0x1.0e90f64b5b103p73},
		{0x1.399c279e4699ap69, 0x1.eb4b9e47b58c9p72},
		{0x1.1c579bbca6885p69, 0x1.bdfe62f60dd7p72},
		{0x1.01c659160612dp69, 0x1.94d1de5c4576fp72},
		{0x1.d352b1ae2694p68, 0x1.6f66f6ab90c3cp72},
		{0x1.a78e8252c204dp68, 0x1.4d67050b31c2ap72},
		{0x1.7fd7c80f3410ep68, 0x1.2e8318008cf89p72},
		{0x1.5bcf92cc55d86p68, 0x1.1273463a1589bp72},
		{0x1.3b1f876b10da7p68, 0x1.f1ec20afad0e2p71},
		{0x1.1d791bb1324a1p68, 0x1.c39fa0d4a5a2bp71},
		{0x1.0294e37abcee8p68, 0x1.99946bf7e02a1p71},
		{0x1.d463db5fa3c13p67, 0x1.73679b24aeb9bp71},
		{0x1.a82a5f4047a5bp67, 0x1.50bf2558ab78fp71},
		{0x1.8011fb05fe09p67, 0x1.314916abfa1eap71},
		{0x1.5bb91decf8a58p67, 0x1.14bad9006f53bp71},
		{0x1.3ac71ce35c1d3p67, 0x1.f5a1196b5bb2ep70},
		{0x1.1ceb656955c59p67, 0x1.c698e001f6d3p70},
		{0x1.01dcc2acf7755p67, 0x1.9beca74b0f147p70},
		{0x1.d2b166911c178p66, 0x1.753637caac6d9p70},
		{0x1.a6459c5b11342p66, 0x1.5218993857afcp70},
		{0x1.7e086accc805dp66, 0x1.323f3f19cff3ep70},
		{0x1.59962aef547b3p66, 0x1.155d47fdb9c94p70},
		{0x1.3894608650edep66, 0x1.f6599b70323cap69},
		{0x1.1ab0e4d284f44p66, 0x1.c6dc8a4bb3ba6p69},
		{0x1.ff4248ebb8299p65, 0x1.9bcfd83a431e9p69},
		{0x1.ce42dd8e4fa23p65, 0x1.74ca889bbacd5p69},
		{0x1.a1e8aa1400997p65, 0x1.516d33e26c04p69},
		{0x1.79c430435a7fcp65, 0x1.31612a7ef535fp69},
		{0x1.557046eb39249p65, 0x1.1457ab75c2489p69},
		{0x1.349127b59b217p65, 0x1.f41259c9550cp68},
		{0x1.16d392dff5104p65, 0x1.c46969ca99a2ep68},
		{0x1.f7d80dc993f2fp64, 0x1.993e82b76e726p68},
		{0x1.c72c149cb214bp64, 0x1.72267ac1b25ap68},
		{0x1.9b270c24cc8fap64, 0x1.4ec0062aeeb78p68},
		{0x1.73585df7b6643p64, 0x1.2eb2d18a2081bp68},
		{0x1.4f59f9910367ep64, 0x1.11aeb0b11d1a1p68},
		{0x1.2ecf5b7f6abe3p64, 0x1.eed5c0bbf1061p67},
		{0x1.1164ab45aa235p64, 0x1.bf4ab21b4f3fp67},
		{0x1.ed9bdbc6f1b0ap63, 0x1.944462d4d5991p67},
		{0x1.bd8c96533b39bp63, 0x1.6d561de54f6a1p67},
		{0x1.921ec84d5860ep63, 0x1.4a1d472804fc8p67},
		{0x1.6ae172414cebap63, 0x1.2a406e25fcb44p67},
		{0x1.476e3b661be8cp63, 0x1.0d6e7662dda9dp67},
		{0x1.276873924f0b4p63, 0x1.e6bba6770e22dp66},
		{0x1.0a7c2c9322f59p63, 0x1.b797ab2ba22d2p66},
		{0x1.e0bad18c4e37dp62, 0x1.8cf813910fdcdp66},
		{0x1.b18eba0be4d24p62, 0x1.666f488db6e0ap66},
		{0x1.86f7884e1caadp62, 0x1.4399f7770045fp66},
		{0x1.608484d592328p62, 0x1.241e1ebbbf4ecp66},
		{0x1.3dcfaee52a8f5p62, 0x1.07aa30ce6a5ap66},
		{0x1.1e7cbac093f27p62, 0x1.dbe8969a24c6fp65},
		{0x1.023827dc88ed9p62, 0x1.ad7301258d788p65},
		{0x1.d16cd999791c3p61, 0x1.837a640fa9d3dp65},
		{0x1.a3666de0788bp61, 0x1.5d90f358d61f6p65},
		{0x1.79e17816df1e8p61, 0x1.3b5342f7be9cp65},
		{0x1.546e385224d1p61, 0x1.1c674ecd152d3p65},
		{0x1.32a7a483e977bp61, 0x1.007b997a0b531p65},
		{0x1.1432649c86c4dp61, 0x1.ce8cc007a6432p64},
		{0x1.f177ce0bd5836p60, 0x1.a109c0bccbc39p64},
		{0x1.bff3166bc36eep60, 0x1.77f5624913c3ap64},
		{0x1.934fc0975fb3p60, 0x1.52e251d5d3b1fp64},
		{0x1.6b13ebb9a5ad4p60, 0x1.316da780bc4d9p64},
		{0x1.46d17a80cc174p60, 0x1.133deb1d3526p64},
		{0x1.2624f3a0a887p60, 0x1.f00460b24acf8p63},
		{0x1.08b47d7733cb6p60, 0x1.bee2903d584f9p63},
		{0x1.dc5de496b181p59, 0x1.92920a7c80e26p63},
		{0x1.ac9615b3c9fd7p59, 0x1.6a9b25345c773p63},
		{0x1.818d3a356669ep59, 0x1.4691b26b9c82fp63},
		{0x1.5acbdab2ed713p59, 0x1.2613e9610f6d1p63},
		{0x1.37e61fd4c0fep59, 0x1.08c969adf0beap63},
		{0x1.187ab3d71db11p59, 0x1.dcc4ac4f59be5p62},
		{0x1.f8637ea4e52acp58, 0x1.ad2d0a9a18288p62},
		{0x1.c577fd709b099p58, 0x1.82498a7cc94b9p62},
		{0x1.97a3dc62119c8p58, 0x1.5ba462dee8a02p62},
		{0x1.6e66137bb7ccap58, 0x1.38d330d8806ap62},
		{0x1.494a3f6a9a70ep58, 0x1.1975e0627306cp62},
		{0x1.27e767bb79ea2p58, 0x1.fa6b5ee8f3088p61},
		{0x1.09dee32687729p58, 0x1.c78892308bd9p61},
		{0x1.ddb6ae2f39381p57, 0x1.99b5ec6741cb3p61},
		{0x1.ad1f9fba4b2abp57, 0x1.7073c400e10dcp61},
		{0x1.816dde4c11ca3p57, 0x1.4b4ee0b3a84d6p61},
		{0x1.5a245d5e5289cp57, 0x1.29df4862ac231p61},
		{0x1.36d26a686daafp57, 0x1.0bc7294e0cbafp61},
		{0x1.171277cbbce9cp57, 0x1.e163bd8df864p60},
		{0x1.f5120b45c00e6p56, 0x1.b0a61bce91993p60},
		{0x1.c1c74b30d0bbp56, 0x1.84cbb00f925fp60},
		{0x1.93b02e5cf0324p56, 0x1.5d5841ce6cb73p60},
		{0x1.6a46f43f3118cp56, 0x1.39dbcd485dd07p60},
		{0x1.45132973bb79bp56, 0x1.19f153b38a108p60},
		{0x1.23a85891dc72bp56, 0x1.fa7b9159fc471p59},
		{0x1.05a4dba466c4ep56, 0x1.c6de3429e31fap59},
		{0x1.d561964307dc4p55, 0x1.98769faac8a1bp59},
		{0x1.a4fa0f13737e8p55, 0x1.6ebf82977acfp59},
		{0x1.7984b636ad1bep55, 0x1.4940bc89fa5aap59},
		{0x1.5281628cb373ap55, 0x1.278e135bcf0a4p59},
		{0x1.2f7cc38bc628dp55, 0x1.0946088b6f8edp59},
		{0x1.100f1aef8eaf5p55, 0x1.dc21972b9e9f4p58},
		{0x1.e7b62ce66acdep54, 0x1.ab3e8cfada51ap58},
		{0x1.b5198cf325114p54, 0x1.7f5483f729c27p58},
		{0x1.87b15da6677afp54, 0x1.57e33e2b1c6dap58},
		{0x1.5ef5de2e68985p54, 0x1.3477480d89e25p58},
		{0x1.3a6d00852a688p54, 0x1.14a8b54629fb2p58},
		{0x1.19a90b14f53afp54, 0x1.f033fa073d52p57},
		{0x1.f88eba04114cbp53, 0x1.bcede5acc0d4p57},
		{0x1.c3dea36b87937p53, 0x1.8ee7b29d0b081p57},
		{0x1.94a28136fa731p53, 0x1.659917bbb6632p57},
		{0x1.6a4b2c9663fa1p53, 0x1.40877b79cd868p57},
		{0x1.44580945b8452p53, 0x1.1f44979177348p57},
		{0x1.22558f1aa9f03p53, 0x1.016d3f035816p57},
		{0x1.03dbf8db89298p53, 0x1.cd508600d0ba8p56},
		{0x1.d11c2965639f6p52, 0x1.9d4ae77a21604p56},
		{0x1.a03065db54a4bp52, 0x1.723974e9529d8p56},
		{0x1.745e6013d8cf3p52, 0x1.4b9a944f57915p56},
		{0x1.4d1f2eb8531p52, 0x1.28f9c9b769ee3p56},
		{0x1.29f9b7c4f56dfp52, 0x1.09ee66b6e99e9p56},
		{0x1.0a814a1dfc5edp52, 0x1.dc34b6999ff72p55},
		{0x1.dca8b63e38fa9p51, 0x1.aa5249b4cca57p55},
		{0x1.aa36c9242f8bcp51, 0x1.7d9db080918bap55},
		{0x1.7d0fbfa6c3c19p51, 0x1.558e88e8945efp55},
		{0x1.54a6b679dd96fp51, 0x1.31aa564e92066p55},
		{0x1.307d4e71272d7p51, 0x1.11831a9c3763dp55},
		{0x1.1022313b11381p51, 0x1.e96c265c21fbfp54},
		{0x1.e65f78e13edcdp50, 0x1.b5d52c19374fep54},
		{0x1.b2959e487c93fp50, 0x1.87a2188252d5fp54},
		{0x1.84436cf62b6f8p50, 0x1.5e440cc8caaf9p54},
		{0x1.5ad66c67f3f63p50, 0x1.393ad199301dep54},
		{0x1.35cb549c616ebp50, 0x1.18135a0647102p54},
		{0x1.14ac7e9322a1ap50, 0x1.f4ccd98eab06bp53},
		{0x1.ee20fae75a2c5p49, 0x1.bfaedff2748c1p53},
		{0x1.b931b883c77f2p49, 0x1.9026a7e3c9538p53},
		{0x1.89e1f8e1d4be6p49, 0x1.659f3419269eep53},
		{0x1.5f9a24050e89fp49, 0x1.3f92e9472ca4cp53},
		{0x1.39d2746cbe57fp49, 0x1.1d89fb6602df9p53},
		{0x1.18115431b6c4ap49, 0x1.fe32077e095c4p52},
		{0x1.f3d3ca19edf64p48, 0x1.c7bf775863df5p52},
		{0x1.bdf55dd9bdcep48, 0x1.970fb0b5580dcp52},
		{0x1.8dd8e25d2255dp48, 0x1.6b88087e4af9fp52},
		{0x1.62e225ebca19p48, 0x1.449de67f2c6b2p52},
		{0x1.3c855ef212badp48, 0x1.21d51dc348d4dp52},
		{0x1.1a4576cd5cddcp48, 0x1.02be7023a443ep52},
		{0x1.f765035c713d8p47, 0x1.cdec7155697e1p51},
		{0x1.c0d0bdeb46ae2p47, 0x1.9c4671c1a6e3cp51},
		{0x1.901afbd3819bep47, 0x1.6feb0af26f865p51},
		{0x1.64a386137b955p47, 0x1.484b1e63b3be4p51},
		{0x1.3ddb15521ce49p47, 0x1.24e68a1458bd7p51},
		{0x1.1b418ba2217c6p47, 0x1.054a9a7c2f05ap51},
		{0x1.f8c8bad8e2a2p46, 0x1.d2214ad33ca5ep50},
		{0x1.c1ba4950b8f4fp46, 0x1.9fb9933adac68p50},
		{0x1.90a0b40dd690cp46, 0x1.72b99eccc462ep50},
		{0x1.64d860502b279p46, 0x1.4a8e4dbe3539cp50},
		{0x1.3dcf1aadc099dp46, 0x1.26b4018ef81f7p50},
		{0x1.1b02414a73357p46, 0x1.06b4fe82cc6aep50},
		{0x1.f7fa3e4bec2aep45, 0x1.d44feffb34893p49},
		{0x1.c0aee6d6b1406p45, 0x1.a15d86bb23572p49},
		{0x1.8f684065398bfp45, 0x1.73ea5ac0d71a9p49},
		{0x1.637ff9397e989p45, 0x1.4b5fdd0f567fap49},
		{0x1.3c618d3c706ebp45, 0x1.2737769828878p49},
		{0x1.1988625955723p45, 0x1.06f8da87263cep49},
		{0x1.f4fc2f6d50e41p44, 0x1.d4710a9e149edp48},
		{0x1.bdb204ff1cda3p44, 0x1.a12cc7b1bf616p48},
		{0x1.8c75a6fa17116p44, 0x1.73793d6253bd7p48},
		{0x1.609ec277b8703p44, 0x1.4abd0af44c7f8p48},
		{0x1.399725d96eb63p44, 0x1.266f2e981ccfbp48},
		{0x1.16d8d1241b86bp44, 0x1.06154a07d21a2p48},
		{0x1.efd875a51d28dp43, 0x1.d2842b40e25fp47},
		{0x1.b8cd873c4de72p43, 0x1.9f27fa465d061p47},
		{0x1.87d2a89e5ac65p43, 0x1.7167c3937ded9p47},
		{0x1.5c3e42539c769p43, 0x1.48a7fb96552cap47},
		{0x1.35791e04cd29fp43, 0x1.245dcbaa25b1bp47},
		{0x1.12fc6cdafd10dp43, 0x1.040d4ab2de626p47},
		{0x1.e8a0077a1ed47p42, 0x1.ce8fcb8dadc2cp46},
		{0x1.b2118f75a4eb7p42, 0x1.9b55e7c11d9e6p46},
		{0x1.818e8b1c2616fp42, 0x1.6dbce02ec5c77p46},
		{0x1.566cdf4525ebp42, 0x1.4527acab6dfebp46},
		{0x1.3014fd204bc71p42, 0x1.210a3ddcb4706p46},
		{0x1.0dffe0bfc0c74p42, 0x1.00e7aba6527c9p46},
		{0x1.df6a8d5e14f11p41, 0x1.c8a12a152d814p45},
		{0x1.a9942579915cdp41, 0x1.95c35893651c9p45},
		{0x1.79bdc576e403ap41, 0x1.6884d52cc9914p45},
		{0x1.4f3d9114d799bp41, 0x1.4047ce663f641p45},
		{0x1.297c4e6eb62fcp41, 0x1.1c7f9c74f3e7cp45},
		{0x1.07f35ef1a4fcp41, 0x1.f95dcee779f74p44},
		{0x1.d455e0a3b0d94p40, 0x1.c0cc007cc808ep44},
		{0x1.9f70bf04a77cep40, 0x1.8e82cd2a6133cp44},
		{0x1.707990a8defefp40, 0x1.61d0ef76712e4p44},
		{0x1.46c779ebb14aep40, 0x1.3a1882865d26ep44},
		{0x1.21c4420bc9879p40, 0x1.16cce86450b2p44},
		{0x1.00ea48df1e7fbp40, 0x1.eee1d41e1e516p43},
		{0x1.c7856a7693627p39, 0x1.b72a1658393d4p43},
		{0x1.93c7abef59a2cp39, 0x1.85ac17b553c4fp43},
		{0x1.65df602b1e0ffp39, 0x1.59b72775450f3p43},
		{0x1.3d256a5ee461dp39, 0x1.32ae03812fcp43},
		{0x1.19053bac5f645p39, 0x1.1004b9cd4bae6p43},
		{0x1.f1f58fe66e142p38, 0x1.e27d88d5289bfp42},
		{0x1.b9216793da422p38, 0x1.abdab3fb224cep42},
		{0x1.86bd6adace04ep38, 0x1.7b5bd9f52a89ep42},
		{0x1.5a104640aeb74p38, 0x1.5051a941eb13p42},
		{0x1.32755417b50ddp38, 0x1.2a20366f6a0dep42},
		{0x1.0f5a5274f5c45p38, 0x1.083cdb1163405p42},
		{0x1.e07ab300dc4b9p37, 0x1.d458a013d18b4p41},
		{0x1.a956163a49613p37, 0x1.9f01f97b2e043p41},
		{0x1.7879eb52380edp37, 0x1.6fb2eaf7d8102p41},
		{0x1.4d30488394e18p37, 0x1.45be480207b14p41},
		{0x1.26d7af2869fc5p37, 0x1.208a2b041836ep41},
		{0x1.04e0c593552f5p37, 0x1.ff1ba8cbc9c8dp40},
		{0x1.cd98a274acae3p36, 0x1.c49f8a8ec4aebp40},
		{0x1.9852d44d7528bp36, 0x1.90c81ede57558p40},
		{0x1.6927c2c3e497p36, 0x1.62d5a948b6358p40},
		{0x1.3f65a98c177c9p36, 0x1.3a1de0952fd2bp40},
		{0x1.1a6ed66936eeap36, 0x1.16098d4b94692p40},
		{0x1.f36ed3084aa81p35, 0x1.ec24d6a8bc072p39},
		{0x1.b986ab7ebdd54p35, 0x1.b3828ebcc128bp39},
		{0x1.864933f3c0573p35, 0x1.8158a3038115ep39},
		{0x1.58f359f0c4e8fp35, 0x1.54eb3e9a3e72bp39},
		{0x1.30d82cb8a968cp35, 0x1.2d93b0174f61ap39},
		{0x1.0d5e5f59de7c1p35, 0x1.0abe0d45fd5c2p39},
		{0x1.dbfc240ab5f81p34, 0x1.d7ce33a39bd89p38},
		{0x1.a47db588b15cfp34, 0x1.a134d30d655e4p38},
		{0x1.736c0d0a31187p34, 0x1.70e16f315ef4p38},
		{0x1.480a1879e8f57p34, 0x1.461cda38e2783p38},
		{0x1.21b0591ce1cfdp34, 0x1.2044a2faebb7bp38},
		{0x1.ff94e3fca1752p33, 0x1.fd91813f8cc8cp37},
		{0x1.c3a9f9558ffap33, 0x1.c2530177987fep37},
		{0x1.8eb738c76b2f2p33, 0x1.8deb61106f334p37},
		{0x1.5fee91a43fef1p33, 0x1.5f91f55e86346p37},
		{0x1.3699940a6a811p33, 0x1.3694e7b13691bp37},
		{0x1.1216c07263dep33, 0x1.1256a18de488bp37},
		{0x1.e3ae49fef5535p32, 0x1.e49705a5ebd5fp36},
		{0x1.aab87fb8e4441p32, 0x1.abefb3186e784p36},
		{0x1.786c3dca158c4p32, 0x1.79dc285401b7dp36},
		{0x1.4c036b7451223p32, 0x1.4d9a4f359ba1ep36},
		{0x1.24cec8453db03p32, 0x1.267e46fd85893p36},
		{0x1.02334e92993b9p32, 0x1.03efdea0a0506p36},
		{0x1.c74fc41217dfbp31, 0x1.cad0afbb569b1p35},
		{0x1.9166837399532p31, 0x1.94e0d5e7a8744p35},
		{0x1.61d46c11dd916p31, 0x1.653d077d9eefp35},
		{0x1.37dbe7711fcd4p31, 0x1.3b2a639494566p35},
		{0x1.12d55c1e73c65p31, 0x1.16038b4af0a0ep35},
		{0x1.e4594b115943bp30, 0x1.ea6c598920c48p34},
		{0x1.aabdabdb93484p30, 0x1.b081aaf25ade1p34},
		{0x1.77f073eb945dfp30, 0x1.7d62079a4e4a6p34},
		{0x1.4b252d0bc8bebp30, 0x1.5042e1a8664edp34},
		{0x1.23a7345c57ccap30, 0x1.287117d29a9e6p34},
		{0x1.00d6f8a57f06ep30, 0x1.054e44f8ee735p34},
		{0x1.c44f136cf3bd8p29, 0x1.cc9cbc5fe04a8p33},
		{0x1.8e38df2790b7ap29, 0x1.95eb2cb828067p33},
		{0x1.5e8f828661e21p29, 0x1.65acfefcd0029p33},
		{0x1.3490e7e2bc31cp29, 0x1.3b20c56ad84f5p33},
		{0x1.0f91b7ff9bb2ap29, 0x1.159b917beb87ap33},
		{0x1.ddf56913a541ep28, 0x1.e90cb5cac7057p32},
		{0x1.a48cc1b8a7bc7p28, 0x1.aeb7659e5f7efp32},
		{0x1.71fde01e2ca8cp28, 0x1.7b4b752e86e5fp32},
		{0x1.4578e0b906b32p28, 0x1.4df8ace15322ep32},
		{0x1.1e4659a2a2156p28, 0x1.26072a17961ap32},
		{0x1.f788fc218597bp27, 0x1.02d48c75e7d9bp32},
		{0x1.bac92daac0b9dp27, 0x1.c7a2ecd5f05ap31},
		{0x1.85518c3484796p27, 0x1.90feaede7f2aep31},
		{0x1.56441b55bfff1p27, 0x1.60dcef1cedc3ap31},
		{0x1.2cdd203ab43a1p27, 0x1.36787980e7387p31},
		{0x1.08700c199ad4fp27, 0x1.112346e13dd7ep31},
		{0x1.d0c9857c390f3p26, 0x1.e087915129a98p30},
		{0x1.986a650394095p26, 0x1.a6a5096da5b7dp30},
		{0x1.66d6688315ad6p26, 0x1.73aff07c7874ep30},
		{0x1.3b3d55ebd8547p26, 0x1.46d572e10e216p30},
		{0x1.14e7b714e7093p26, 0x1.1f5ba17e5a90bp30},
		{0x1.e667d9a8bcd9ep25, 0x1.f93d0d186fbcdp29},
		{0x1.ab2733e383ad8p25, 0x1.bc1b22cec72bp29},
		{0x1.7712b76c8c7f6p25, 0x1.86529e9df069cp29},
		{0x1.494d8e1d4fc61p25, 0x1.5702d052bf73ap29},
		{0x1.2115447c6627dp25, 0x1.2d65aee08874cp29},
		{0x1.fb7d503fc65c8p24, 0x1.08ccb49580d43p29},
		{0x1.bd660913b938cp24, 0x1.d13c32a98512bp28},
		{0x1.86db66e158524p24, 0x1.98a4bfd5a5fadp28},
		{0x1.56f3ed5aa4222p24, 0x1.66e459a7794f4p28},
		{0x1.2ce2265a96befp24, 0x1.3b28bbce3c1c6p28},
		{0x1.07f14a8d0c116p24, 0x1.14b8b6b67144ep28},
		{0x1.cf049ebedf60dp23, 0x1.e5e26dbef0e28p27},
		{0x1.96129ca292f7ep23, 0x1.aa854b5c4f131p27},
		{0x1.6416763f6b3bcp23, 0x1.765d329106241p27},
		{0x1.3837bf030f4a8p23, 0x1.488b9479ee1c4p27},
		{0x1.11b82880134f9p23, 0x1.204c8d940530bp27},
		{0x1.dfe0c1b8af1f3p22, 0x1.f9e77238e0031p26},
		{0x1.a49aa1651cfcap22, 0x1.bbd2c8fd7e193p26},
		{0x1.709b5a3a79128p22, 0x1.85502f16a0f8dp26},
		{0x1.42ffa7e9ace3fp22, 0x1.5574ceffe3945p26},
		{0x1.1affd2eccd616p22, 0x1.2b72182c97af5p26},
		{0x1.efd8be43ac9a9p21, 0x1.06925da53a0fcp26},
		{0x1.b2564005de7e5p21, 0x1.cc6bb6d71090dp25},
		{0x1.7c694cd2b4ffdp21, 0x1.93a02d0c97221p25},
		{0x1.4d23fa69bd814p21, 0x1.61cb1a027e057p25},
		{0x1.23b556e6e918ep21, 0x1.361358dd1f243p25},
		{0x1.fecbcf04dca9p20, 0x1.0fba0d2660d89p25},
		{0x1.bf29264dcdc82p20, 0x1.dc2ef387bd0ep24},
		{0x1.8767d7fc43eb6p20, 0x1.a130711aadcdap24},
		{0x1.568f9937abc79p20, 0x1.6d758e1ac9659p24},
		{0x1.2bc67d8c20136p20, 0x1.401abca024479p24},
		{0x1.064d4616b0094p20, 0x1.185819a7f8c6ap24},
		{0x1.caf8458ad2a12p19, 0x1.eafc2b00a99b1p23},
		{0x1.917faff93e54p19, 0x1.ade505ba61e89p23},
		{0x1.5f2e79283b1cap19, 0x1.785c00b5cb27ep23},
		{0x1.33220b1da4f59p19, 0x1.4973634932c1ap23},
		{0x1.0c93ac678b0ccp19, 0x1.205a7d78be568p23},
		{0x1.d5aa313452daep18, 0x1.f8b4440d68221p22},
		{0x1.9a9b05368c88bp18, 0x1.b9a31a7b9868cp22},
		{0x1.66ede7f0c2d55p18, 0x1.826756e1a42e2p22},
		{0x1.39b7fc18e5891p18, 0x1.5209676e4b424p22},
		{0x1.122b662569616p18, 0x1.27b019965e362p22},
		{0x1.df2779ceabfc8p17, 0x1.029ce648133fdp22},
		{0x1.a2a5d2945d2b7p17, 0x1.c45161cd95fe8p21},
		{0x1.6dbccf848794ap17, 0x1.8b81d680cdfc5p21},
		{0x1.3f79bf21caa96p17, 0x1.59ca24a7521ddp21},
		{0x1.17080ae674896p17, 0x1.2e48f266999cfp21},
		{0x1.e75b024885f54p16, 0x1.0838b13324d03p21},
		{0x1.a98e26924c6c8p16, 0x1.cdd86b83e679dp20},
		{0x1.738bf4bc8d296p16, 0x1.93977456406ddp20},
		{0x1.445a6a9a273c6p16, 0x1.60a47aca18e96p20},
		{0x1.1b1eabeffc3a5p16, 0x1.341669953fe1cp20},
		{0x1.ee324e1fde417p15, 0x1.0d210b765b3d6p20},
		{0x1.af4465e9c5668p15, 0x1.d622fa53c02cep19},
		{0x1.784e3008fb46bp15, 0x1.9a961d6383ef7p19},
		{0x1.484eecd2f1383p15, 0x1.66890cd0bf55fp19},
		{0x1.1e65fd1ef2701p15, 0x1.390b73f2a4fbp19},
		{0x1.f39dc6baaccd7p14, 0x1.114ae59581395p19},
		{0x1.b3bb863d26278p14, 0x1.dd1e5296953a3p18},
		{0x1.7bf89f052b591p14, 0x1.a06dfa21b6c59p18},
		{0x1.4b4e35dbe0cddp14, 0x1.6b6a7a27c9005p18},
		{0x1.20d6781986167p14, 0x1.3d1cca3d4f6d8p18},
		{0x1.f790f6877f51ep13, 0x1.14acc164c64fep18},
		{0x1.b6e93fa7299b3p13, 0x1.e2ba80b9c3a1bp17},
		{0x1.7e82cde922833p13, 0x1.a511aa3827999p17},
		{0x1.4d515a14a6132p13, 0x1.6f3d9139319edp17},
		{0x1.226a790f97768p13, 0x1.404113d7d18e6p17},
		{0x1.fa02b8ac73416p12, 0x1.173ed60fcd6fap17},
		{0x1.b8c634233722p12, 0x1.e6ea95e92c624p16},
		{0x1.7fe6d7fbcef2cp12, 0x1.a8767775dd309p16},
		{0x1.4e53acc7531b1p12, 0x1.71f97a2983044p16},
		{0x1.231e547065724p12, 0x1.42710a88aab19p16},
		{0x1.faed5c4559717p11, 0x1.18fb2ded8ebb1p16},
		{0x1.b94e0bfb59934p11, 0x1.e9a4d9b21386ep15},
		{0x1.80217e57d8a3fp11, 0x1.aa947efe69879p15},
		{0x1.4e52d23cf50bp11, 0x1.7397d8e2bd385p15},
		{0x1.22f0652094ae6p11, 0x1.43a79684f6ef6p15},
		{0x1.fa4eba730bf6p10, 0x1.19ddbd8138a9p15},
		{0x1.b87f86a26fad7p10, 0x1.eae2ef93df996p14},
		{0x1.7f323487ff94ap10, 0x1.ab66cfccafb75p14},
		{0x1.4d4ec8ea8ee67p10, 0x1.7414e5b5ca43cp14},
		{0x1.21e112e39bf18p10, 0x1.43e1e22ebfdb4p14},
		{0x1.f8283ec45f117p9, 0x1.19e4732be2ffp14},
		{0x1.b65c7f9f1fbedp9, 0x1.eaa1efb3b003ep13},
		{0x1.7d1b22b6810f6p9, 0x1.aaeb7de6855e2p13},
		{0x1.4b49e984886ep9, 0x1.736f7c0d13f06p13},
		{0x1.1ff2d0d5a2649p9, 0x1.431f651be2ff4p13},
		{0x1.f47ee1cab73ddp8, 0x1.190f3f39e9af4p13},
		{0x1.b2e9e76c8d9f9p8, 0x1.e8e2722ca46cfp12},
		{0x1.79e11d635b9a7p8, 0x1.a923a9d8d5019p12},
		{0x1.4848ddf7dfffep8, 0x1.71a91ee04e82cp12},
		{0x1.1d2a13fdd2709p8, 0x1.4161e6298ed3ap12},
		{0x1.ef5b15f73200ap7, 0x1.176014201ab17p12},
		{0x1.ae2fb07705cc3p7, 0x1.e5a88cbf394e4p11},
		{0x1.758b92cdfdc64p7, 0x1.a6137c537bf6dp11},
		{0x1.44528f79b1b51p7, 0x1.6ec5f2d1367f4p11},
		{0x1.198d422be3f8cp7, 0x1.3ead7491061afp11},
		{0x1.e8c8a7276c93p6, 0x1.14dadee76975ap11},
		{0x1.a838b09afcf62p6, 0x1.e0fbc2ec572b9p10},
		{0x1.70246e766d2f3p6, 0x1.a1c215fcd0beap10},
		{0x1.3f700c0d99876p6, 0x1.6accae115453ep10},
		{0x1.1524997d01ap6, 0x1.3b08582357e32p10},
		{0x1.e0d68d9047f7ap5, 0x1.118577f06b2f2p10},
		{0x1.a11277ca2bd3fp5, 0x1.dae6e8d292a1ep9},
		{0x1.69b7f34ec048ep5, 0x1.9c3973d4c9b08p9},
		{0x1.39ac6410ceb63p5, 0x1.65c67e684d1e6p9},
		{0x1.0ffa110b113fp5, 0x1.367af901b137p9},
		{0x1.d796b4f7aaf7fp4, 0x1.0d678c614f535p9},
		{0x1.98cd1cb38dccp4, 0x1.d377f96b9fd62p8},
		{0x1.62548d6675835p4, 0x1.958648bd6035p8},
		{0x1.331480815e7cdp4, 0x1.5fbee5e7590f4p8},
		{0x1.0a19336cc73a1p4, 0x1.310fbf558eca2p8},
		{0x1.cd1db96a6c6efp3, 0x1.088a80b837328p8},
		{0x1.8f7b007e1de49p3, 0x1.cabfe10b3371ap7},
		{0x1.5a0a9c047e3c7p3, 0x1.8db7ccf7600f4p7},
		{0x1.2bb6f2dd8e254p3, 0x1.58c38f07b7c3bp7},
		{0x1.038ef3cbdc1c7p3, 0x1.2ad2ebb6268bdp7},
		{0x1.c1829acfb62b3p2, 0x1.02f94d1fb1ba4p7},
		{0x1.85308ad209551p2, 0x1.c0d23d3daadadp6},
		{0x1.50ec3549a202dp2, 0x1.84df8496cc3aep6},
		{0x1.23a3bf963c1ebp2, 0x1.50e4191e1b76cp6},
		{0x1.f8d2fce0ebb41p1, 0x1.23d2690dc7344p6},
		{0x1.b4de68e608347p1, 0x1.f980a88588961p5},
		{0x1.7a03df8f9f479p1, 0x1.b5c5135a44acbp5},
		{0x1.470ce4924af72p1, 0x1.7b10fe1f0aeaap5},
		{0x1.1aec242758b4fp1, 0x1.4831de32e25bdp5},
		{0x1.e9700b697ec96p0, 0x1.1c1d98f1b1f71p5},
		{0x1.a74be9568f922p0, 0x1.ebda6af103d07p4},
		{0x1.6e0c8fadbb05p0, 0x1.a9b07f491a273p4},
		{0x1.3c8164e42f29cp0, 0x1.70618a9c019dap4},
		{0x1.11a259faba91ep0, 0x1.3ebfb36da371bp4},
		{0x1.d91518c2acaf6p-1, 0x1.13c51b7852ecp4},
		{0x1.98e739a118b5ep-1, 0x1.dd1d36683753bp3},
		{0x1.616346ca3be0ep-1, 0x1.9cae5c1f5de61p3},
		{0x1.315f58c13df9cp-1, 0x1.64e7f0a95542fp3},
		{0x1.07d957435b8c4p-1, 0x1.34a1a5595e9cbp3},
		{0x1.c7e35cf4db634p-2, 0x1.0ada93ac2688ep3},
		{0x1.89cd6ead31b71p-2, 0x1.cd680d6a376d2p2},
		{0x1.542176fe1c2b2p-2, 0x1.8ed9e84be9bacp2},
		{0x1.25bd00bd97eddp-2, 0x1.58bc1beb8e117p2},
		{0x1.fb491e02b7c15p-3, 0x1.29ecb15514182p2},
		{0x1.b5fcd30c7e1f6p-3, 0x1.017069c4b54cfp2},
		{0x1.7a1c33cc1922bp-3, 0x1.bcdb33f7b88f9p1},
		{0x1.46610483f2395p-3, 0x1.804f671a7a35cp1},
		{0x1.19b0f23241b88p-3, 0x1.4bf6ca87a4707p1},
		{0x1.e62f62b4555dcp-4, 0x1.1eb67d8a75351p1},
		{0x1.a383ca9f98a0fp-4, 0x1.ef3318a5788dep0},
		{0x1.69f16aeb3677p-4, 0x1.ab97c2106c4d2p0},
		{0x1.383bf2b37a037p-4, 0x1.712bc1550fb6ap0},
		{0x1.0d51cf5a16254p-4, 0x1.3eb13a24821e2p0},
		{0x1.d08cdac87dce6p-5, 0x1.131510c1da6adp0},
		{0x1.909a7c3ac6f99p-5, 0x1.dad26311e9efp-1},
		{0x1.596acfa0bcc8fp-5, 0x1.99bf36c7ef068p-1},
		{0x1.29cc13bfd53ap-5, 0x1.618c26c1169a6p-1},
		{0x1.00b60212cf113p-5, 0x1.3104d5f799552p-1},
		{0x1.ba886ae6e40ep-6, 0x1.071e8b6003b16p-1},
		{0x1.7d62a282a4851p-6, 0x1.c5e5338097f6bp-2},
		{0x1.48a59e9cb1eb1p-6, 0x1.87730de08c821p-2},
		{0x1.1b2abc895a771p-6, 0x1.518db221cf8bap-2},
		{0x1.e7e6f4c33ededp-7, 0x1.230ae74a714aap-2},
		{0x1.a4480db60fe17p-7, 0x1.f5d1c58fdc6acp-3},
		{0x1.69fd19aacb90ap-7, 0x1.b091a88a72f08p-3},
		{0x1.37be42e1159e7p-7, 0x1.74d459ba38afep-3},
		{0x1.0c707db025298p-7, 0x1.414d114bdcde1p-3},
		{0x1.ce3ee3757dbe5p-8, 0x1.14dc49cbc0c3p-3},
		{0x1.8df06bfb34f6dp-8, 0x1.dd13408401cdcp-4},
		{0x1.568986affafc5p-8, 0x1.9afd0eca1593dp-4},
		{0x1.26d009f5af049p-8, 0x1.6203633a6814ap-4},
		{0x1.fb69c5d6b524ep-9, 0x1.30e632b0008c9p-4},
		{0x1.b49c67cd1611fp-9, 0x1.069124dc6eaefp-4},
		{0x1.77a47ec4e9fa1p-9, 0x1.c42b48d5cfe42p-5},
		{0x1.43260788f0a1fp-9, 0x1.854b792c33d4ap-5},
		{0x1.15f4e018a09eep-9, 0x1.4f1f511f7b2d7p-5},
		{0x1.de1c72f739a49p-10, 0x1.2073f996519cp-5},
		{0x1.9b25dc6d6642ep-10, 0x1.f08155c194aadp-6},
		{0x1.61853cc8eddacp-10, 0x1.ab41e011814e5p-6},
		{0x1.2feeed430b87bp-10, 0x1.6f9f62ec4193ap-6},
		{0x1.05451535e8102p-10, 0x1.3c45d7f9e2fbp-6},
		{0x1.c122bcbda7f8ep-11, 0x1.100ffa10ff0f3p-6},
		{0x1.81ff0b26f3b6ap-11, 0x1.d401bee3a7787p-7},
		{0x1.4bb153d2d0728p-11, 0x1.927ce5fbbe352p-7},
		{0x1.1cfe80beb05a4p-11, 0x1.5a195c6e2a08ep-7},
		{0x1.e9ae566e02486p-12, 0x1.2992f3c7d2ce7p-7},
		{0x1.a4a3297375461p-12, 0x1.ffa47aef63bd2p-8},
		{0x1.6948e77b6c537p-12, 0x1.b7ccca35ce88ep-8},
		{0x1.3644eed5b1126p-12, 0x1.79ffc3cd6bc92p-8},
		{0x1.0a6cd27d913d7p-12, 0x1.44d7c3dca9cc8p-8},
		{0x1.c97f5c053e775p-13, 0x1.1720abf01aa9bp-8},
		{0x1.88c0c973b68fcp-13, 0x1.dfa22008cf2c8p-9},
		{0x1.512157ee1d8bep-13, 0x1.9c08a63df00dcp-9},
		{0x1.215988e86b086p-13, 0x1.61eb258af5a93p-9},
		{0x1.f09f2b684fb31p-14, 0x1.2ff68a28f7dc4p-9},
		{0x1.aa222a98ba953p-14, 0x1.0506e21782262p-9},
		{0x1.6d9b06046eb66p-14, 0x1.c041afe3a1ad2p-10},
		{0x1.39a30e3030664p-14, 0x1.80d8271e40929p-10},
		{0x1.0d05cd2b64652p-14, 0x1.4a5cc1e67b046p-10},
		{0x1.cd740d2318d4dp-15, 0x1.1b8f04bdfa1bfp-10},
		{0x1.8bb7603d9828p-15, 0x1.e6b65816f0ff1p-11},
		{0x1.534d810db5377p-15, 0x1.a1a7ec86c94fbp-11},
		{0x1.22e56de90dc1ap-15, 0x1.665a9398034f1p-11},
		{0x1.f2bb06a7069e2p-16, 0x1.336f30c8d3345p-11},
		{0x1.ab79b6edb04e1p-16, 0x1.07b7cbf13abf4p-11},
		{0x1.6e5b33b150249p-16, 0x1.c461717dacbd8p-12},
		{0x1.39f005226a7dbp-16, 0x1.83f56253c12f1p-12},
		{0x1.0cfc8192e69bdp-16, 0x1.4cab82baddd6cp-12},
		{0x1.cce310b024fd4p-17, 0x1.1d39d04e50424p-12},
		{0x1.8acc81455f971p-17, 0x1.e9094beff3587p-13},
		{0x1.522570529739fp-17, 0x1.a3308036822dbp-13},
		{0x1.219685023e1bep-17, 0x1.67464f8a36affp-13},
		{0x1.eff1f945e7f7bp-18, 0x1.33e2c9c277148p-13},
		{0x1.a89fa515a2b44p-18, 0x1.07d0b7bb52fc7p-13},
		{0x1.6b83bb4ee4348p-18, 0x1.c40cfbd11fd1p-14},
		{0x1.372982e2fde1dp-18, 0x1.833ffa698fa8bp-14},
		{0x1.0a51297b20ab7p-18, 0x1.4bb29dadf3acp-14},
		{0x1.c7d093fb7e463p-19, 0x1.1c147957723bdp-14},
		{0x1.8607006600009p-19, 0x1.e6896f5762306p-15},
		{0x1.4db1c7b733812p-19, 0x1.a096cc3260668p-15},
		{0x1.1d76959a6b622p-19, 0x1.64a7647d3f88ap-15},
		{0x1.e858d8b3acc8p-20, 0x1.314deba7bab37p-15},
		{0x1.a1a94b14e3d7fp-20, 0x1.0550e92636252p-15},
		{0x1.6529df3d1cf1cp-20, 0x1.bf46cd0f972c3p-16},
		{0x1.316449a955429p-20, 0x1.7ebd49fbb30eep-16},
		{0x1.0517b9e1f89dep-20, 0x1.47796af08285bp-16},
		{0x1.be627dddb55d7p-21, 0x1.1827a73755ec7p-16},
		{0x1.7d8a7f2a8a2dp-21, 0x1.df49a10ccc568p-17},
		{0x1.4613bf000c71dp-21, 0x1.99ee7037b652bp-17},
		{0x1.16a45fcb7b882p-21, 0x1.5e9197017791dp-17},
		{0x1.dc283bcbe780fp-22, 0x1.2bc40c543e36bp-17},
		{0x1.96ca751cac37fp-22, 0x1.004b34180a4a9p-17},
		{0x1.5b7cd13179ddep-22, 0x1.b632d58444fadp-18},
		{0x1.28cb2cb8b4015p-22, 0x1.768f3e13d3bdcp-18},
		{0x1.faedd62dabd96p-23, 0x1.401fa7657909ep-18},
		{0x1.b0de982dbf111p-23, 0x1.1190d162109abp-18},
		{0x1.7195b2becea19p-23, 0x1.d3803e22a78e4p-19},
		{0x1.3b8387eea3f9dp-23, 0x1.8f694ad8ac632p-19},
		{0x1.0d521f8291cd6p-23, 0x1.55326d6aac6fap-19},
		{0x1.cbb9be9cbac1ep-24, 0x1.236e8d3a9e0e7p-19},
		{0x1.8852e54d26542p-24, 0x1.f1ca221c0b98bp-20},
		{0x1.4ec36b8fdf428p-24, 0x1.a914b62872bc3p-20},
		{0x1.1d9d0055d11dp-24, 0x1.6af2ae42db58p-20},
		{0x1.e74cb7ebdea0ap-25, 0x1.35dbe86ed95c7p-20},
		{0x1.9fa735b03463ap-25, 0x1.0880cfe68041ep-20},
		{0x1.627f6220ca6a9p-25, 0x1.c3847cbf78a3bp-21},
		{0x1.2e4d9d8b5b22fp-25, 0x1.81550cf271bfdp-21},
		{0x1.01c325e8bb3cp-25, 0x1.48cefa0aac509p-21},
		{0x1.b783bc148fcefp-26, 0x1.188ab9ce5fdddp-21},
		{0x1.76aa8791eba33p-26, 0x1.dea9996bf1c0fp-22},
		{0x1.3f58d390caeecp-26, 0x1.984c7bb9c53ffp-22},
		{0x1.10299f255a2cap-26, 0x1.5c3c6ce5f2f75p-22},
		{0x1.cfd7e08a13b2p-27, 0x1.28f8faa7c3202p-22},
		{0x1.8b368e0429dacp-27, 0x1.fa7304087353p-23},
		{0x1.50b2501707be6p-27, 0x1.afca3c464e1d5p-23},
		{0x1.1ecf2c897b782p-27, 0x1.701780b38d71ap-23},
		{0x1.e891642306feep-28, 0x1.39c08dab159ep-23},
		{0x1.a013c6709bdd5p-28, 0x1.0b66dac93672bp-23},
		{0x1.624c9a2f2f8fcp-28, 0x1.c7bde43ebd873p-24},
		{0x1.2da83d59392f5p-28, 0x1.84520ec5eb55ap-24},
		{0x1.00ce3767b77a8p-28, 0x1.4ad54236cf6b4p-24},
		{0x1.b5312d520a3f4p-29, 0x1.19d258cf47194p-24},
		{0x1.74191dcab90bcp-29, 0x1.e015665e4efbdp-25},
		{0x1.3ca855a30dad5p-29, 0x1.98dc92b26aeap-25},
		{0x1.0d71d1069e44fp-29, 0x1.5c29c3e79c162p-25},
		{0x1.ca7c7b61a5357p-30, 0x1.28708aaed4d7p-25},
		{0x1.86083aaabaf73p-30, 0x1.f8bd2046619b5p-26},
		{0x1.4bc21b880f9dep-30, 0x1.ada636f165959p-26},
		{0x1.1a28183b0e32p-30, 0x1.6dafa60f704a1p-26},
		{0x1.dfe23a6ad4f8bp-31, 0x1.37351629c53cp-26},
		{0x1.980956bea8ccp-31, 0x1.08cff68f5874cp-26},
		{0x1.5ae767663002ep-31, 0x1.c29ce58c1fc1p-27},
		{0x1.26e4fd1165b76p-31, 0x1.7f5772973d16cp-27},
		{0x1.f54dde2ba8f56p-32, 0x1.4612c5674eed9p-27},
		{0x1.aa0af3e698b26p-32, 0x1.15539e864d70fp-27},
		{0x1.6a0956d7d1b63p-32, 0x1.d7ad5cdc3741ep-28},
		{0x1.339bd6e517d44p-32, 0x1.9110bc4b50f8cp-28},
		{0x1.0554f0943ba8cp-32, 0x1.54fb970dbe54ep-28},
		{0x1.bbfac9007ec07p-33, 0x1.21dd98bc7de87p-28},
		{0x1.791862715d02fp-33, 0x1.ecc34851c9763p-29},
		{0x1.403f77382e654p-33, 0x1.a2ca34863bfcbp-29},
		{0x1.0feff2a4fc49p-33, 0x1.63e0d12d4d288p-29},
		{0x1.cdc5de1ae8c09p-34, 0x1.2e615f0543e41p-29},
		{0x1.8804761a993c4p-34, 0x1.00e4ae934cb56p-29},
		{0x1.4cc23eb3b5ffap-34, 0x1.b471c42165f4ap-30},
		{0x1.1a6c6c06ea18bp-34, 0x1.72b316e47cc93p-30},
		{0x1.df58ab9ae4fcbp-35, 0x1.3ad1e7143aa75p-30},
		{0x1.96bd0bd6c9a31p-35, 0x1.0b54bd6a9e23fp-30},
		{0x1.59163428fb3a6p-35, 0x1.c5f4a785a88d1p-31},
		{0x1.24be8d0138113p-35, 0x1.8162809b8dff6p-31},
		{0x1.f09f3c1618809p-36, 0x1.4721b76389525p-31},
		{0x1.a53148c3fc482p-36, 0x1.15a6678e0082cp-31},
		{0x1.652d1d62b45e1p-36, 0x1.d73f8da963966p-32},
		{0x1.2eda549c16ee8p-36, 0x1.8fdeb6a9e8ebcp-32},
		{0x1.00c2a84aed164p-36, 0x1.5342fe16e83a5p-32},
		{0x1.b3501c0fdbbcfp-37, 0x1.1fcdfea216d16p-32},
		{0x1.70f8998ccf075p-37, 0x1.e83eb9bce31c4p-33},
		{0x1.38b3a7222dd33p-37, 0x1.9e170e2dbff8cp-33},
		{0x1.08fb437656229p-37, 0x1.5f27a9aa5f66p-33},
		{0x1.c1085f96d9feep-38, 0x1.29bfa42bc7b76p-33},
		{0x1.7c6a3cf1c9dcfp-38, 0x1.f8de2739c95a9p-34},
		{0x1.423e65b2a3a8cp-38, 0x1.abfaa7d4233fap-34},
		{0x1.10ef40de709bcp-38, 0x1.6ac1833360c58p-34},
		{0x1.ce48f9d9e5928p-39, 0x1.336f5ff042b88p-34},
		{0x1.8773adc5703cep-39, 0x1.0484d7ff5f6bdp-34},
		{0x1.4b6e86a5aa9d8p-39, 0x1.b978904649f57p-35},
		{0x1.189488e2e9743p-39, 0x1.760249f31a968p-35},
		{0x1.db0100ef385d3p-40, 0x1.3cd13761f1731p-35},
		{0x1.9206c1ae9fb29p-40, 0x1.0c569a0b1627cp-35},
		{0x1.54382e8081943p-40, 0x1.c67fe1e83e91p-36},
		{0x1.1fe13002859cap-40, 0x1.80dbcff1d72cfp-36},
		{0x1.e71fde0c5e218p-41, 0x1.45d945dc4844dp-36},
		{0x1.9c159bbc9900ap-41, 0x1.13da615eb6c5fp-36},
		{0x1.5c8fc931c6d94p-41, 0x1.d2ffe78d87996p-37},
		{0x1.26cb8c1920344p-41, 0x1.8b4017551e03bp-37},
		{0x1.f295714275bc3p-42, 0x1.4e7bd56b77338p-37},
		{0x1.a592ca70605e5p-42, 0x1.1b06621cfb60ep-37},
		{0x1.646a234bddd88p-42, 0x1.dee83fc205fc8p-38},
		{0x1.2d4a498c21371p-42, 0x1.9521701d324dap-38},
		{0x1.fd5235020e009p-43, 0x1.56ad77d8efe38p-38},
		{0x1.ae71657ff542ep-43, 0x1.21d11201bfbcfp-38},
		{0x1.6bbc82f12468ap-43, 0x1.ea290040397f4p-39},
		{0x1.3354802504d9ep-43, 0x1.9e7295f29cf91p-39},
		{0x1.03a3b07cf84bp-43, 0x1.5e631fb2a96dbp-39},
		{0x1.b6a52af7c7202p-44, 0x1.28313d62cbf4fp-39},
		{0x1.727cc024d462ap-44, 0x1.f4b2d92a8da6ap-40},
		{0x1.38e1c7590edafp-44, 0x1.a726cda9c5fc4p-40},
		{0x1.083385f1e344cp-44, 0x1.6592390114765p-40},
		{0x1.be229b5ed10ebp-45, 0x1.2e1e1bdc1cff3p-40},
		{0x1.78a15c33bf0d1p-45, 0x1.fe77379b5869ap-41},
		{0x1.3dea49bdca04dp-45, 0x1.af3202215009fp-41},
		{0x1.0c5225e967ce3p-45, 0x1.6c30c15ee186bp-41},
		{0x1.c4df14833b32ep-46, 0x1.338f646703f05p-41},
		{0x1.7e2197e99732ep-46, 0x1.03b4338f71d3bp-41},
		{0x1.4266d76b7e9efp-46, 0x1.b688e02001605p-42},
		{0x1.0ff9aa4df55cbp-46, 0x1.72355f261c90fp-42},
		{0x1.cad0ea9847218p-47, 0x1.387d609c076c8p-42},
		{0x1.82f5884a3c4ffp-47, 0x1.07bcd8d61f54dp-42},
		{0x1.4650f71159187p-47, 0x1.bd20f0d88c869p-43},
		{0x1.1324c9f973607p-47, 0x1.77977767b819cp-43},
		{0x1.cfef7f529f1bfp-48, 0x1.3ce0fee10ae91p-43},
		{0x1.8716298a66d68p-48, 0x1.0b4fbeda58aa9p-43},
		{0x1.49a2f582864b8p-48, 0x1.c2f0b2bc85943p-44},
		{0x1.15cee56fb8f8p-48, 0x1.7c4f426570458p-44},
		{0x1.d43356b5d1bc3p-49, 0x1.40b3e347db73ap-44},
		{0x1.8a7d700826ce3p-49, 0x1.0e67b4f33d066p-44},
		{0x1.4c57f38808af9p-49, 0x1.c7efb04c36011p-45},
		{0x1.17f41219f6e6ep-49, 0x1.8055de49eb405p-45},
		{0x1.d796294cc09e7p-50, 0x1.43f076e4dac86p-45},
		{0x1.8d265709c8b81p-50, 0x1.11003322f9f2ap-45},
		{0x1.4e6bf1c869176p-50, 0x1.cc169496c493bp-46},
		{0x1.199123dce7f7cp-50, 0x1.83a55fe01c77fp-46},
		{0x1.da12f38ef6065p-51, 0x1.4691f56a0b9d1p-46},
		{0x1.8f0ced10d0db4p-51, 0x1.131565242338p-46},
		{0x1.4fdbda9c9106cp-51, 0x1.cf5f3d25346p-47},
		{0x1.1aa3b4e8f3caap-51, 0x1.8638e1112031dp-47},
		{0x1.dba6023e1257ap-52, 0x1.489478d82c425p-47},
		{0x1.902e5d96b5dc7p-52, 0x1.14a433d21a4e2p-47},
		{0x1.50a589affacc9p-52, 0x1.d1c4c912f9acbp-48},
		{0x1.1b2a2ba958505p-52, 0x1.880c8cf6ecf16p-48},
		{0x1.dc4cfb90a7ce5p-53, 0x1.49f5031dc194p-48},
		{0x1.9088f811b7254p-53, 0x1.15aa4ccc2f79bp-48},
		{0x1.50c7d151d73dp-53, 0x1.d343a5202c7c4p-49},
		{0x1.1b23bebdcda6dp-53, 0x1.891da95a3a6f5p-49},
		{0x1.dc06e50abd949p-54, 0x1.4ab18582d9df2p-49},
		{0x1.901c34297491p-54, 0x1.1626283914e64p-49},
		{0x1.50427d64b1c7dp-54, 0x1.d3d994938f3adp-50},
		{0x1.1a9076f0d2e24p-54, 0x1.896a9d7ab89b1p-50},
		{0x1.dad425efa38efp-55, 0x1.4ac8e5c7c8723p-50},
		{0x1.8ee8b30ca2586p-55, 0x1.16170c969f828p-50},
		{0x1.4f1653e256f41p-55, 0x1.d385b6cd88b32p-51},
		{0x1.19712f23cae3dp-55, 0x1.88f2f609fe4d3p-51},
		{0x1.d8b686448b5afp-56, 0x1.4a3b00e506616p-51},
		{0x1.8cf03de32b406p-56, 0x1.157d10888e2f3p-51},
		{0x1.4d4512f22a65dp-56, 0x1.d2488978a2f74p-52},
		{0x1.17c7923127a39p-56, 0x1.87b7664b4e00cp-52},
		{0x1.d5b12a674c804p-57, 0x1.4908ab62a09acp-52},
		{0x1.8a35c1621f2ccp-57, 0x1.14591aa0080cap-52},
		{0x1.4ad16c988b007p-57, 0x1.d023e74fea7e1p-53},
		{0x1.159616cbf8a0cp-57, 0x1.85b9c65443c51p-53},
		{0x1.d1c88b489c5c3p-58, 0x1.4733af4601fe1p-53},
		{0x1.86bd4690c0845p-58, 0x1.12acdf1c9738cp-53},
		{0x1.47bf000e37ae9p-58, 0x1.cd1b037f7490bp-54},
		{0x1.12dff96b26d81p-58, 0x1.82fd0e7486194p-54},
		{0x1.cd026b64a0ca8p-59, 0x1.44bec79d5416cp-54},
		{0x1.828be8d7b2e74p-59, 0x1.107adbae7661dp-54},
		{0x1.441250d6b8cc7p-59, 0x1.c93261af2cd0dp-55},
		{0x1.0fa934555eb5ap-59, 0x1.7f854fd47e7d3p-55},
		{0x1.c765c89feb632p-60, 0x1.41ad99b7fc9ebp-55},
		{0x1.7da7c97c8ea4bp-60, 0x1.0dc65148f57fcp-55},
		{0x1.3fd0bbb47d67cp-60, 0x1.c46fcad39a071p-56},
		{0x1.0bf675e9015a3p-60, 0x1.7b57aa64c1e42p-56},
		{0x1.c0facb396944ap-61, 0x1.3e04ac23c3f11p-56},
		{0x1.781800b4c5862p-61, 0x1.0a933c1a65e31p-56},
		{0x1.3b0069a07f02dp-61, 0x1.beda3eeb5f0a2p-57},
		{0x1.07cd15415698ap-61, 0x1.767a404101f5ap-57},
		{0x1.b9cab20b7b4acp-62, 0x1.39c95b8dcd835p-57},
		{0x1.71e48c82b190ap-62, 0x1.06e649c54a11dp-57},
		{0x1.35a840f1bb9bfp-62, 0x1.b879e3daa485dp-58},
		{0x1.0333055f872d1p-62, 0x1.70f426b1f5c67p-58},
		{0x1.b1dfbc5f13465p-63, 0x1.3501cdad9df5bp-58},
		{0x1.6b163d96b3dd9p-63, 0x1.02c4cdfc5722cp-58},
		{0x1.2fcfd4e6913cap-63, 0x1.b157f19f267eap-59},
		{0x1.fc5d8e0519af3p-64, 0x1.6acd55017e4e2p-59},
		{0x1.a945119b38a65p-64, 0x1.2fb4e266d3e9fp-59},
		{0x1.63b6a2745bde1p-64, 0x1.fc696b5025168p-60},
		{0x1.297f53c6e927fp-64, 0x1.a97e9c202c067p-60},
		{0x1.f18eb2ba6357fp-65, 0x1.640e915b3f3eap-60},
		{0x1.a006a7219c6a4p-65, 0x1.29ea2353deb28p-60},
		{0x1.5bcff1208eb99p-65, 0x1.f278f182d5ccep-61},
		{0x1.22bf73da1838dp-65, 0x1.a0f8fae51588p-61},
		{0x1.e60853b8b4b65p-66, 0x1.5cc15bf9dbbbbp-61},
		{0x1.963124add21cp-66, 0x1.23a9b1f0c9515p-61},
		{0x1.536cefa1810b4p-66, 0x1.e7c6162103b4ep-62},
		{0x1.1b995f6e584afp-66, 0x1.97d2ef035140ap-62},
		{0x1.d9da06644bc9dp-67, 0x1.54efd8e5e8a15p-62},
		{0x1.8bd1c79049ec2p-67, 0x1.1cfc34a10ee47p-62},
		{0x1.4a98db9bff0e8p-67, 0x1.dc5f9803d5324p-63},
		{0x1.1416a031bacf2p-67, 0x1.8e1907994f8d3p-63},
		{0x1.cd13f7b7c3414p-68, 0x1.4ca4b88f6234cp-63},
		{0x1.80f645203dff7p-68, 0x1.15eac2ce52257p-63},
		{0x1.415f515af2672p-68, 0x1.d054eb8db2ad5p-64},
		{0x1.0c410a1d6b3cap-68, 0x1.83d8652f7235cp-64},
		{0x1.bfc6c8b2d1c95p-69, 0x1.43eb1f8cfdcf1p-64},
		{0x1.75acacc068ebep-69, 0x1.0e7ed05fb3af3p-64},
		{0x1.37cc328e513e5p-69, 0x1.c3b617ec3cfd6p-65},
		{0x1.0422a6340a512p-69, 0x1.791e9c59e2b42p-65},
		{0x1.b2036a988beadp-70, 0x1.3ace8dce03fbdp-65},
		{0x1.6a0349d192d1ap-70, 0x1.06c218ca5f25ap-65},
		{0x1.2deb8d0dae905p-70, 0x1.b69393c895b87p-66},
		{0x1.f78b3aa5bebbep-71, 0x1.6df997f6bab1bp-66},
		{0x1.a3dafb67a96cfp-71, 0x1.315ac58b7d6b7p-66},
		{0x1.5e0885ebd9cc3p-71, 0x1.fd7d13f78002dp-67},
		{0x1.23c981e88b022p-71, 0x1.a8fe21d205ebp-67},
		{0x1.e66846a73c925p-72, 0x1.62777b62fde0cp-67},
		{0x1.955ea2f392221p-72, 0x1.279bb2446baf4p-67},
		{0x1.51cacbb42476ep-72, 0x1.ecfc5eb955129p-68},
		{0x1.19722d0b598a4p-72, 0x1.9b06ad8cbcafbp-68},
		{0x1.d4f0c5733dbc9p-73, 0x1.56a684fe99fcap-68},
		{0x1.869f70ffc1fcbp-73, 0x1.1d9d500e92622p-68},
		{0x1.45586a9e82938p-73, 0x1.dc163a555fefbp-69},
		{0x1.0ef18dbc017ffp-73, 0x1.8cbe28ca7c426p-69},
		{0x1.c338d2435fb4bp-74, 0x1.4a94f1540c9eap-69},
		{0x1.77ae3cb88b469p-74, 0x1.136b93820fc76p-69},
		{0x1.38bf7be87e681p-74, 0x1.cadeb8c3bba05p-70},
		{0x1.0453702b9a5bbp-74, 0x1.7e356a2db5e15p-70},
		{0x1.b154294e891dap-75, 0x1.3e50df3387f95p-70},
		{0x1.689b85dc875b1p-75, 0x1.09125281c373ap-70},
		{0x1.2c0dc90fab5bap-75, 0x1.b969aedac7779p-71},
		{0x1.f346b0aa94647p-76, 0x1.6f7d0d10edd84p-71},
		{0x1.9f5604d9610bp-76, 0x1.31e8350b95daep-71},
		{0x1.597757e14e4e8p-76, 0x1.fd3a5c3ac18bbp-72},
		{0x1.1f50b401397f7p-76, 0x1.a7ca8fa24018p-72},
		{0x1.ddd8dcb76e388p-77, 0x1.60a5532471804p-72},
		{0x1.8d50fcdd2a012p-77, 0x1.256887c26e498p-72},
		{0x1.4a512f5483d32p-77, 0x1.e82efb884fa7p-73},
		{0x1.129521372a709p-77, 0x1.961449f1f5f93p-73},
		{0x1.c872d91eff745p-78, 0x1.51be080b9d49dp-73},
		{0x1.7b56e9895b756p-78, 0x1.18df034ba2c47p-73},
		{0x1.3b37e1b01d1bdp-78, 0x1.d31877f1753bap-74},
		{0x1.05e763ef1c6e1p-78, 0x1.845928aac023dp-74},
		{0x1.b3291e83a6ddap-79, 0x1.42d6673958cf7p-74},
		{0x1.6978c8d7d61b8p-79, 0x1.0c58552d896bdp-74},
		{0x1.2c3987ce2b431p-79, 0x1.be0be95f0126ep-75},
		{0x1.f2a6593b4ee39p-80, 0x1.72aab5cc51918p-75},
		{0x1.9e0f0cfd57ab4p-80, 0x1.33fd04413c4e8p-75},
		{0x1.57c6a75ebbd36p-80, 0x1.ffc132424c87ap-76},
		{0x1.1d636b1da2b46p-80, 0x1.a91d6af35687bp-76},
		{0x1.d9c6f3705063cp-81, 0x1.6119a09e14fe5p-76},
		{0x1.8936d384f421ap-81, 0x1.253fb5c838ba6p-76},
		{0x1.464f8c7e074fcp-81, 0x1.e7068fdcaeb4ep-77},
		{0x1.0ec1f5aebc21fp-81, 0x1.945fff2eb1b17p-77},
		{0x1.c14515cb6f8fp-82, 0x1.4fb5a7146299ap-77},
		{0x1.74b15b6eeceb1p-82, 0x1.16ab8334ccb0ap-77},
		{0x1.352169fa33216p-82, 0x1.ce965139dad89p-78},
		{0x1.0060a522d6818p-82, 0x1.7fe578074e0c8p-78},
		{0x1.a933ad3e37ea3p-83, 0x1.3e8d828e807b4p-78},
		{0x1.608e37fe916b7p-83, 0x1.084c9533fea9dp-78},
		{0x1.24490f08ca22dp-83, 0x1.b68488148e38cp-79},
		{0x1.e4940102c0a26p-84, 0x1.6bbe630bdc58cp-79},
		{0x1.91a40479b1837p-84, 0x1.2daed7fd23569p-79},
		{0x1.4cdb9a0d20ef7p-84, 0x1.f45c523b5ec4ep-80},
		{0x1.13d21ec7ce7a5p-84, 0x1.9ee3b5d440d2p-80},
		{0x1.c90f21d2d475fp-85, 0x1.57f9f997e1f52p-80},
		{0x1.7aa5b8d4b4359p-85, 0x1.1d262b74c69e4p-80},
		{0x1.39a647b21bed6p-85, 0x1.d8b50e711660ap-81},
		{0x1.03c70a0dadb1dp-85, 0x1.87c4bc616ed3dp-81},
		{0x1.ae43ba1c85bb1p-86, 0x1.44a615135e868p-81},
		{0x1.6446b3db12c58p-86, 0x1.0cfed72363bb7p-81},
		{0x1.26f997cdc041dp-86, 0x1.bdb5f7a82d0f4p-82},
		{0x1.e86218ea3e6acp-87, 0x1.7136d3b897e11p-82},
		{0x1.9440cec9f5e3ap-87, 0x1.31cf2729ac24dp-82},
		{0x1.4e93295651e9bp-87, 0x1.fa860b2bf75f8p-83},
		{0x1.14df714b2cc27p-87, 0x1.a36fa64c5b19fp-83},
		{0x1.ca3058fde005fp-88, 0x1.5b478418ed951p-83},
		{0x1.7b135dc219792p-88, 0x1.1f8035d726d41p-83},
		{0x1.3995999427ba7p-88, 0x1.dbf75e60682c2p-84},
		{0x1.03604de581436p-88, 0x1.89f0afa1deecap-84},
		{0x1.ad067d36fa2c8p-89, 0x1.4602a49df0a52p-84},
		{0x1.62c6642f5d4b9p-89, 0x1.0dc2db21eaf21p-84},
		{0x1.2556d7a42568ap-89, 0x1.be61355e30a98p-85},
		{0x1.e5068065139bep-90, 0x1.7145a7dd1cf8cp-85},
		{0x1.90efd5cd13c3p-90, 0x1.31725e0702649p-85},
		{0x1.4b62e9374c452p-90, 0x1.f93e90900fd6bp-86},
		{0x1.11de133cc6916p-90, 0x1.a1d0c10ff74dfp-86},
		{0x1.c49bf95c5f745p-91, 0x1.597928f3e0c7p-86},
		{0x1.75f56ab48bd89p-91, 0x1.1d9f316556fccp-86},
		{0x1.34f00cbd8ea42p-91, 0x1.d8389849eaf01p-87},
		{0x1.fe61cbe17950dp-92, 0x1.8650e1db268ebp-87},
		{0x1.a589caf82618cp-92, 0x1.4293ddcb013c1p-87},
		{0x1.5c1e107375834p-92, 0x1.0a90025fd130cp-87},
		{0x1.1f7319c565581p-92, 0x1.b87eb911fc5efp-88},
		{0x1.daa6c6af5c17fp-93, 0x1.6bea387f6b0ap-88},
		{0x1.87d63120a742cp-93, 0x1.2c9c915a28ddap-88},
		{0x1.436e80df031fp-93, 0x1.f094496a5e827p-89},
		{0x1.0aef9bffa708dp-93, 0x1.9a19446f657ccp-89},
		{0x1.b890579385cdcp-94, 0x1.52a33b4b8094cp-89},
		{0x1.6b84ffdb5d885p-94, 0x1.179841589cdp-89},
		{0x1.2be9773700384p-94, 0x1.cda2d93f291abp-90},
		{0x1.eecef0206652cp-95, 0x1.7d0e0e7cac5bp-90},
		{0x1.9821029662ccfp-95, 0x1.3a804f20fd2f4p-90},
		{0x1.5097c74b3d08ep-95, 0x1.038a34010e13fp-90},
		{0x1.158fcf12f6c8ep-95, 0x1.ac508371be502p-91},
		{0x1.c9b60c296975dp-96, 0x1.61608ea10db83p-91},
		{0x1.7958bc88e6006p-96, 0x1.2383e3bce375p-91},
		{0x1.370dfa8e149d1p-96, 0x1.e0e820ef7463p-92},
		{0x1.0060a594f59c7p-96, 0x1.8c9f67fa9c048p-92},
		{0x1.a6925bee98d74p-97, 0x1.471203b047e85p-92},
		{0x1.5c351b499632p-97, 0x1.0dae92b93887p-92},
		{0x1.1ee518d278c58p-97, 0x1.bcabf2ba981bfp-93},
		{0x1.d8b2f8b0b2924p-98, 0x1.6e8f25135d13fp-93},
		{0x1.855f0a34582a6p-98, 0x1.2e219acb023aep-93},
		{0x1.40b1881e58e3p-98, 0x1.f1fe817902cebp-94},
		{0x1.0818d80634105p-98, 0x1.9a5d5233d8e13p-94},
		{0x1.b2ecbb2e8d76cp-99, 0x1.521d0766f8b85p-94},
		{0x1.6614d9da549fbp-99, 0x1.168c985c93c95p-94},
		{0x1.26c7736a63e7fp-99, 0x1.cae6809d7d445p-95},
		{0x1.e546a107b57d5p-100, 0x1.79f71edd3cb51p-95},
		{0x1.8f64020effd9cp-100, 0x1.37443c37e4835p-95},
		{0x1.48aa64075b15p-100, 0x1.004e8297ce819p-95},
		{0x1.0e6e891142764p-100, 0x1.a60ceba01346ap-96},
		{0x1.bcfa525d16889p-101, 0x1.5b71dfbe662f9p-96},
		{0x1.6e0be1ed4e4ccp-101, 0x1.1dfe04c5b884ap-96},
		{0x1.2d14568fa3103p-101, 0x1.d6c299b6b03dep-97},
		{0x1.ef39c9c67da7p-102, 0x1.8366f8264d161p-97},
		{0x1.973b86e9a718fp-102, 0x1.3ec401194be5fp-97},
		{0x1.4ed55e6d4d5dfp-102, 0x1.0641ea45be131p-97},
		{0x1.1345b1de4a541p-102, 0x1.af7b06dd7c2fap-98},
		{0x1.c48e8cf8e20edp-103, 0x1.62e7924beab28p-98},
		{0x1.73f6cd7db5a56p-103, 0x1.23e2123cac1dcp-98},
		{0x1.31afb2e91937bp-103, 0x1.e00be39adba8fp-99},
		{0x1.f6600b76754fcp-104, 0x1.8ab4ee2717624p-99},
		{0x1.9cc2881babafp-104, 0x1.447fa5b4e25fep-99},
		{0x1.5316d5b010b17p-104, 0x1.0abf02c055867p-99},
		{0x1.1688993cfebe3p-104, 0x1.b67d9f35f4de8p-100},
		{0x1.c98758b0a4ebap-105, 0x1.685ccfe1e2ab5p-100},
		{0x1.77baf72da4868p-105, 0x1.281e65593d67p-100},
		{0x1.3484c1e2418cbp-105, 0x1.e698bd1000fd2p-101},
		{0x1.fa991c211034p-106, 0x1.8fc0326c87b11p-101},
		{0x1.9fe006460b912p-106, 0x1.485d5ed97243ep-101},
		{0x1.555b844a27ecdp-106, 0x1.0db191585c5a2p-101},
		{0x1.182875c9f3984p-106, 0x1.baf50ff65044dp-102},
		{0x1.cbce2423a80acp-107, 0x1.6bb8ebe73c54ap-102},
		{0x1.794741d4d28c6p-107, 0x1.2a9fd1221e357p-102},
		{0x1.3586a18110b0ep-107, 0x1.ea4b746dbeae3p-103},
		{0x1.fbd1c1dcb3991p-108, 0x1.9271dfe5687e7p-103},
		{0x1.a085cf5d6c87ep-108, 0x1.4a4b9ae2c857dp-103},
		{0x1.559911f8b7812p-108, 0x1.0f0c2d578f06ap-103},
		{0x1.181ddd71c27fbp-108, 0x1.bccd0201398bap-104},
		{0x1.cb5889458c00ep-109, 0x1.6cec95dfef21ap-104},
		{0x1.789499da6bff1p-109, 0x1.2b5ae7721763fp-104},
		{0x1.34b0b5ddf82c6p-109, 0x1.eb1327842cc63p-105},
		{0x1.fa04646636ebep-110, 0x1.92bda7bca05b7p-105},
		{0x1.9eb0ea42d451ep-110, 0x1.4a4186866270ap-105},
		{0x1.53ce6234f7db7p-110, 0x1.0ec8a57831ec5p-105},
		{0x1.1668fdbb007d5p-110, 0x1.bbfd05e1b64f3p-106},
		{0x1.c8289c5fd0187p-111, 0x1.6bf24d893426cp-106},
		{0x1.75a62b0407aefp-111, 0x1.2a4c4fb42b862p-106},
		{0x1.3206cc37b0e4ap-111, 0x1.e8ec43d273fbap-107},
		{0x1.f53937c26236ep-112, 0x1.90a22ee0d506ep-107},
		{0x1.9a69ad7793258p-112, 0x1.483f4fee6553cp-107},
		{0x1.50039cbf56e41p-112, 0x1.0ce82f0139653p-107},
		{0x1.13119a81ee824p-112, 0x1.b888d3fea2a71p-108},
		{0x1.c24cdc6a6909bp-113, 0x1.68ce8cbb7eaebp-108},
		{0x1.7089487e1182ep-113, 0x1.2778e05f0f826p-108},
		{0x1.2d94fe2dcd5a4p-113, 0x1.e3e0a1bcb7b9p-109},
		{0x1.ed85fe218f015p-114, 0x1.8c29185861611p-109},
		{0x1.93c37ffa2be3p-114, 0x1.444e2559eb861p-109},
		{0x1.4a49efe08b764p-114, 0x1.09735c9244f77p-109},
		{0x1.0e26d33274acdp-114, 0x1.b28030446d467p-110},
		{0x1.b9dfc560135fp-115, 0x1.638fa554a9791p-110},
		{0x1.6955081ac80b2p-115, 0x1.22ed7a20d2031p-110},
		{0x1.276f565251c73p-115, 0x1.dc07399fb9ebdp-111},
		{0x1.e30d639687648p-116, 0x1.8566bbf3afdccp-111},
		{0x1.8adc46e842374p-116, 0x1.3e7fef514c8f7p-111},
		{0x1.42bb0eedd3fb2p-116, 0x1.0479dd0162987p-111},
		{0x1.07beb0edff1b8p-116, 0x1.a9fe7272a642bp-112},
		{0x1.af070915be74ep-117, 0x1.5c4d5495043b3p-112},
		{0x1.602994f04daa5p-117, 0x1.1cbea64272b5fp-112},
		{0x1.1fb139d7ad13p-117, 0x1.d18375dee0b86p-113},
		{0x1.d5fdfa65dd70dp-118, 0x1.7c798c690caf6p-113},
		{0x1.7fdb85ec65bd4p-118, 0x1.36eec953c25e3p-113},
		{0x1.39787263ebbcap-118, 0x1.fc2409fc1812ep-114},
		{0x1.ffeb0495cc103p-119, 0x1.9f29b80329143p-114},
		{0x1.a1f276c1aeb71p-119, 0x1.5328106ecc8f8p-114},
		{0x1.552f40714fe54p-119, 0x1.1507fc4d2f4bap-114},
		{0x1.167c9d827337cp-119, 0x1.c484291d11ffp-115},
		{0x1.c690e28b6a9bfp-120, 0x1.7189333483e3bp-115},
		{0x1.72f13b97db104p-120, 0x1.2dbc3e931f24dp-115},
		{0x1.2eaa616a9b21cp-120, 0x1.ecb050b3055ap-116},
		{0x1.edda16b7edc87p-121, 0x1.9231c8255bcdbp-116},
		{0x1.92da9c960076ap-121, 0x1.4848161f4e509p-116},
		{0x1.48955baf138afp-121, 0x1.0beb55467080ap-116},
		{0x1.0bf90e157d9dap-121, 0x1.b542338309321p-117},
		{0x1.b5082a5d8de09p-122, 0x1.64c56b8fb3cecp-117},
		{0x1.6454856772fedp-122, 0x1.231052b5f7dd6p-117},
		{0x1.227ecea87251dp-122, 0x1.dadb937ed07ebp-118},
		{0x1.d99724acabf71p-123, 0x1.834eb55a1d18ep-118},
		{0x1.81ff31715569ap-123, 0x1.3bdc43dd8955fp-118},
		{0x1.3a90e48619574p-123, 0x1.018fd4cd15479p-118},
		{0x1.005296113b586p-123, 0x1.a3fee5158c03fp-119},
		{0x1.a1acf8c750894p-124, 0x1.5664a8518a142p-119},
		{0x1.54421936100c1p-124, 0x1.171860917e7c8p-119},
		{0x1.152813e135602p-124, 0x1.c6f152728fb8fp-120},
		{0x1.c375a4cba7b23p-125, 0x1.72bf4ab4db677p-120},
		{0x1.6fa5568fa20f3p-125, 0x1.2e18c95c4bfb1p-120},
		{0x1.2b5b13ef0805cp-125, 0x1.ec41a3d4cf576p-121},
		{0x1.e77117811a7d2p-126, 0x1.91022d83bf8f5p-121},
		{0x1.8ccd934db2cbp-126, 0x1.46a292659269ep-121},
		{0x1.42faa33070d2ap-126, 0x1.0a05da41d6048p-121},
		{0x1.06db98d7f6125p-126, 0x1.b14375f322de2p-122},
		{0x1.abcdbdfcc9f7cp-127, 0x1.60c75486158bp-122},
		{0x1.5c15c23fbb403p-127, 0x1.1f35bc35fb59fp-122},
		{0x1.1b2fdb7cab6dfp-127, 0x1.d39954e0a9d3dp-123},
		{0x1.ccb8a64624f6cp-128, 0x1.7c98ab66270f5p-123},
		{0x1.76bb52e82b59ap-128, 0x1.35be6eb898758p-123},
		{0x1.30c117f001ac3p-128, 0x1.f819edd38db9cp-124},
		{0x1.efa0e49e3feccp-129, 0x1.9a2821242ebdp-124},
		{0x1.92fa046d58d4ep-129, 0x1.4dadd528d6ea9p-124},
		{0x1.479ae4e865feep-129, 0x1.0f6d9e092345cp-124},
		{0x1.0a4c603089f16p-129, 0x1.b987187720ae4p-125},
		{0x1.b0e03e96a5485p-130, 0x1.6711ad9310ce1p-125},
		{0x1.5fc89a9e03199p-130, 0x1.23f97aea9f29fp-125},
		{0x1.1dd90a3522c75p-130, 0x1.dac6b554960ffp-126},
		{0x1.d07c0b8b30398p-131, 0x1.81f77dc55f2bdp-126},
		{0x1.795540ea5dda7p-131, 0x1.39bb36d1a51dap-126},
		{0x1.327f191dd6247p-131, 0x1.fdf7c425dfb89p-127},
		{0x1.f1db008e061d6p-132, 0x1.9e6c7f42ee3ap-127},
		{0x1.944b7c8850269p-132, 0x1.50bd38f4b0e14p-127},
		{0x1.4846e1e475567p-132, 0x1.11954fcd9d596p-127},
		{0x1.0a8512d6deebp-132, 0x1.bc7d8a23288e1p-128},
		{0x1.b0b57b848dfd5p-133, 0x1.69099571fea27p-128},
		{0x1.5f385601a1095p-133, 0x1.25378a982372p-128},
		{0x1.1d0aee3f21eaep-133, 0x1.dc36feecfa2bap-129},
		{0x1.ce9ce0f1b56b8p-134, 0x1.82a9fb7ad076bp-129},
		{0x1.775af322a6fb6p-134, 0x1.39ea243c7bf71p-129},
		{0x1.3084e2fb958e5p-134, 0x1.fda4af81b306ap-130},
		{0x1.ee0aaff5c7275p-135, 0x1.9da7a2c5ab52cp-130},
		{0x1.90b5b261712acp-135, 0x1.4fb44aa933f5cp-130},
		{0x1.44f853ca3d2a1p-135, 0x1.1068e39733d5fp-130},
		{0x1.07839b24e2329p-135, 0x1.ba0b385a9673fp-131},
		{0x1.ab4ef712ea53cp-136, 0x1.669cb88b98bb4p-131},
		{0x1.5a6a27edc2aafp-136, 0x1.22e458ff074e2p-131},
		{0x1.18ccfb2383c0dp-136, 0x1.d7dccacf16bdfp-132},
		{0x1.c72c7d427b5c7p-137, 0x1.7ea9a57d9c3fdp-132},
		{0x1.70debd3477d7cp-137, 0x1.364981b4fcaccp-132},
		{0x1.2ae4c8505c4dcp-137, 0x1.f723b60a4c45ap-133},
		{0x1.e45347f37826dp-138, 0x1.97e0b5db827a8p-133},
		{0x1.8859d9d834871p-138, 0x1.4a9cae44d02aap-133},
		{0x1.3dcdd6f53a761p-138, 0x1.0bf347561e06fp-133},
		{0x1.0163c7a1b8ce3p-138, 0x1.b246ea577dcd5p-134},
		{0x1.a0de9e4d0326ap-139, 0x1.5fe1a8f2ffd47p-134},
		{0x1.518a7407eb90ep-139, 0x1.1d15869af1a46p-134},
		{0x1.1146574533e59p-139, 0x1.cde08f63664fdp-135},
		{0x1.ba6f77161f191p-140, 0x1.761ba88bf6eedp-135},
		{0x1.661c59f17faep-140, 0x1.2efafc89163c3p-135},
		{0x1.21d2894bdd4c7p-140, 0x1.eab12c8aa7e5p-136},
		{0x1.d50e0eba3e44dp-141, 0x1.8d4d432dee077p-136},
		{0x1.7b84a5753cf1fp-141, 0x1.41a589d11cb19p-136},
		{0x1.33091416396dbp-141, 0x1.045db9ec2ba81p-136},
		{0x1.f0bb3ff173143p-142, 0x1.a57861242277fp-137},
		{0x1.91c3cacc75aaap-142, 0x1.551681b8d361p-137},
		{0x1.44ea256a84bbp-142, 0x1.140098b38820cp-137},
		{0x1.06bb841410434p-142, 0x1.be9e2feb561ep-138},
		{0x1.a8d98b0d5771p-143, 0x1.694e9fdcb7be5p-138},
		{0x1.57755a2313bdfp-143, 0x1.24419d9ce37ffp-138},
		{0x1.15a03d39bca43p-143, 0x1.d8bf1578b3aacp-139},
		{0x1.c0c4e9f387792p-144, 0x1.7e4dfe2cee6a2p-139},
		{0x1.6aa9b63079411p-144, 0x1.3520b0bf08a51p-139},
		{0x1.250ad98a67e4fp-144, 0x1.f3daa3dd37f3ap-140},
		{0x1.d9842421f4af1p-145, 0x1.94140b3abb78ep-140},
		{0x1.7e859d0226582p-145, 0x1.469d2facc66f7p-140},
		{0x1.34f9e5d4c96d3p-145, 0x1.07f7c6b04c092p-140},
		{0x1.f314a5f5af6d7p-146, 0x1.aa9f80ec12e52p-141},
		{0x1.9306ca687d568p-146, 0x1.58b5e63278412p-141},
		{0x1.456b681315dafp-146, 0x1.167dcc97a0fd3p-141},
		{0x1.06b98180e66fp-146, 0x1.c1ee5bab4ede7p-142},
		{0x1.a82a4c036e3f3p-147, 0x1.6b69077bfc3c7p-142},
		{0x1.565cda5d05a6ap-147, 0x1.257dcc5bc2717p-142},
		{0x1.144d77262f022p-147, 0x1.d9fdd2296338fp-143},
		{0x1.bdec7b50a66cp-148, 0x1.7eb427b4ddd71p-143},
		{0x1.67cb265d8483ap-148, 0x1.34f5aee91217p-143},
		{0x1.224399b226996p-148, 0x1.f2ca4dc8ff69fp-144},
		{0x1.d448f86c23d12p-149, 0x1.92943634830d2p-144},
		{0x1.79b2a15ae0faap-149, 0x1.44e2d8e947442p-144},
		{0x1.3098d833c2dap-149, 0x1.0627b1e47c261p-144},
		{0x1.eb3aa595948f3p-150, 0x1.a705784809825p-145},
		{0x1.8c0f08dff4e68p-150, 0x1.554226cd542efp-145},
		{0x1.3f49a8880f6adp-150, 0x1.1343e7a202e9p-145},
		{0x1.015dd1c62a082p-150, 0x1.bc0384ab3550dp-146},
		{0x1.9edb80143a705p-151, 0x1.660fe966c4e28p-146},
		{0x1.4e52056f2dec4p-151, 0x1.20b6b60dae611p-146},
		{0x1.0d62a769875ep-151, 0x1.d1893fc15ba16p-147},
		{0x1.b2128dd015485p-152, 0x1.7747e31ddd25cp-147},
		{0x1.5dad6d3a16694p-152, 0x1.2e7c997078049p-147},
		{0x1.19a81ef58dfc6p-152, 0x1.e790d89e8e564p-148},
		{0x1.c5ae1b79c4ee8p-153, 0x1.88e545d12ba57p-148},
		{0x1.6d56e11abc8a7p-153, 0x1.3c919aea9787p-148},
		{0x1.262a204b39df1p-153, 0x1.fe13c6f07b6aep-149},
		{0x1.d9a774b67b183p-154, 0x1.9ae2b16a9550ap-149},
		{0x1.7d48e51f6d6edp-154, 0x1.4af14f857334ep-149},
		{0x1.32e43016e50e4p-154, 0x1.0a8564eab8ff5p-149},
		{0x1.edf747f9f14f1p-155, 0x1.ad3a33350402p-150},
		{0x1.8d7d80e14b91p-155, 0x1.5996d7e13f467p-150},
		{0x1.3fd1708b687cbp-155, 0x1.1636f3d76858ap-150},
		{0x1.014ad3fec9ec4p-155, 0x1.bfe545fce7a55p-151},
		{0x1.9dee40ecc2982p-156, 0x1.687ce08618977p-151},
		{0x1.4ceca2b27454p-156, 0x1.221a377d62eb4p-151},
		{0x1.0bbd071377b87p-156, 0x1.d2dcd30499eb7p-152},
		{0x1.ae9438e9a5c0bp-157, 0x1.779da2df7a30cp-152},
		{0x1.5a30285652adp-157, 0x1.2e2a7c1fe1c5fp-152},
		{0x1.164daef1c2b15p-157, 0x1.e61933d473856p-153},
		{0x1.bf6806876a635p-158, 0x1.86f2e6e7e582ap-153},
		{0x1.67960688424efp-158, 0x1.3a62b4892ce6ep-153},
		{0x1.20f7f47f404a7p-158, 0x1.f99234ed0089ep-154},
		{0x1.d061d530972c5p-159, 0x1.9676058974913p-154},
		{0x1.7517e8c57f622p-159, 0x1.46bd7c1e28efp-154},
		{0x1.2bb6ba79809edp-159, 0x1.069f8cb02119fp-154},
		{0x1.e17962871247p-160, 0x1.a61febb6d574dp-155},
		{0x1.82af24bbe81ddp-160, 0x1.53351984f5d61p-155},
		{0x1.3684a09debb18p-160, 0x1.108b4faaa8971p-155},
		{0x1.f2a603a977e7cp-161, 0x1.b5e91e3ee196dp-156},
		{0x1.9054beadf5a51p-161, 0x1.5fc381e001854p-156},
		{0x1.415c074fc9065p-161, 0x1.1a8782bc000bep-156},
		{0x1.01ef55a0092e3p-161, 0x1.c5c9be5ba37d4p-157},
		{0x1.9e016e74801cbp-162, 0x1.6c625c9dd5c05p-157},
		{0x1.4c3713bae315dp-162, 0x1.248f08aa2a9f5p-157},
		{0x1.0a8cf82738469p-162, 0x1.d5b98efc2e8d5p-158},
		{0x1.abada51b7b47ep-163, 0x1.790b07dcc17ddp-158},
		{0x1.570fb47030aa8p-163, 0x1.2e9c8b4dec3dep-158},
		{0x1.13270ae279a57p-163, 0x1.e5affac730013p-159},
		{0x1.b951931589ad6p-164, 0x1.85b69d604d483p-159},
		{0x1.61dfa678e3296p-164, 0x1.38aa7fa8655e3p-159},
		{0x1.1bb88966006c4p-164, 0x1.f5a41ad29abd6p-160},
		{0x1.c6e52f00f28e6p-165, 0x1.925df815332e1p-160},
		{0x1.6ca07adb2cabep-165, 0x1.42b32a68b6433p-160},
		{0x1.243c4de072741p-165, 0x1.02c65f05a223cp-160},
		{0x1.d4603cf73627ep-166, 0x1.9ef9ba1f58105p-161},
		{0x1.774b9c8b0652p-166, 0x1.4cb0a4ddc2264p-161},
		{0x1.2cad15ed5f00dp-166, 0x1.0ab038a2ddd17p-161},
		{0x1.e1ba565f2f2dap-167, 0x1.ab82536c08c11p-162},
		{0x1.81da56c03901cp-167, 0x1.569ce24f30cadp-162},
		{0x1.350587b61e2e7p-167, 0x1.128ac3f80b9acp-162},
		{0x1.eeeaf2386ba73p-168, 0x1.b7f008c184953p-163},
		{0x1.8c45dba9ebaffp-168, 0x1.6071b5b7d5f0bp-163},
		{0x1.3d40375ab2fc9p-168, 0x1.1a5112ad78884p-163},
		{0x1.fbe96dd52dd2ap-169, 0x1.c43afb43abf3ap-164},
		{0x1.96874b77050b3p-169, 0x1.6a28d7dab475p-164},
		{0x1.4557ac9b8a4ffp-169, 0x1.21fe234726979p-164},
		{0x1.04568afbad70bp-169, 0x1.d05b30647f5b6p-165},
		{0x1.a097bba9c5bbap-170, 0x1.73bbedaae952fp-165},
		{0x1.4d4668bc3c638p-170, 0x1.298ce64edbc52p-165},
		{0x1.0a969821c25d4p-170, 0x1.dc489a35fd89p-166},
		{0x1.aa703eac27071p-171, 0x1.7d248efdebaf1p-166},
		{0x1.5506ec96ce1d8p-171, 0x1.30f843b6c62b7p-166},
		{0x1.10b0827e1c59fp-171, 0x1.e7fb2011e1175p-167},
		{0x1.b409eb99c2287p-172, 0x1.865c4d7ebd336p-167},
		{0x1.5c93bed6568e9p-172, 0x1.383b206d0bb99p-167},
		{0x1.169ff47b694c6p-172, 0x1.f36aa78ac249dp-168},
		{0x1.bd5de633517f7p-173, 0x1.8f5cbbd7e3bd9p-168},
		{0x1.63e7724f64774p-173, 0x1.3f5064180659dp-168},
		{0x1.1c60a3dd2224ep-173, 0x1.fe8f1d993bb19p-169},
		{0x1.c66566ef40333p-174, 0x1.981f750955121p-169},
		{0x1.6afcac6c09d1ap-174, 0x1.4632fef2669ecp-169},
		{0x1.21ee56dbc8c6ap-174, 0x1.04b03ffb7174ap-169},
		{0x1.cf19c31a391acp-175, 0x1.a09e23dee12dbp-170},
		{0x1.71ce2ba111a68p-175, 0x1.4cddefbe00daep-170},
		{0x1.2744e94597dfp-175, 0x1.09eb734c1a314p-170},
		{0x1.d77474fa3c96fp-176, 0x1.a8d28a7b21f9ep-171},
		{0x1.7856cde19858bp-176, 0x1.534c49c3a48ap-171},
		{0x1.2c60519b06073p-176, 0x1.0ef5469afe541p-171},
		{0x1.df6f23e67822ep-177, 0x1.b0b689ea896fp-172},
		{0x1.7e9197060941ap-177, 0x1.59793ad60d8abp-172},
		{0x1.313ca61e59763p-177, 0x1.13c9ee6b2a529p-172},
		{0x1.e703ac45eb1a5p-178, 0x1.b84429b1d33d8p-173},
		{0x1.8479b71b66ff2p-178, 0x1.5f60114dc317ap-173},
		{0x1.35d621cd7892fp-178, 0x1.1865baa279b03p-173},
		{0x1.ee2c2766d39aep-179, 0x1.bf759f4ae6481p-174},
		{0x1.8a0a908fbee34p-179, 0x1.64fc41f392bcdp-174},
		{0x1.3a29293d26666p-179, 0x1.1cc51b3533d1bp-174},
		{0x1.f4e2f320ed2f5p-180, 0x1.c645558315ad7p-175},
		{0x1.8f3fbe30bc1d8p-180, 0x1.6a496dcf4682p-175},
		{0x1.3e324f4cf0981p-180, 0x1.20e4a4b8e031ep-175},
		{0x1.fb22b934b993p-181, 0x1.ccadf3adb1afp-176},
		{0x1.941518f17ca26p-181, 0x1.6f4367d03dbd8p-176},
		{0x1.41ee59ab3f625p-181, 0x1.24c114d62226p-176},
		{0x1.00733b2d2d2a7p-181, 0x1.d2aa649df6e65p-177},
		{0x1.9886bd6d1085bp-182, 0x1.73e63a45afd4dp-177},
		{0x1.455a452136a6p-182, 0x1.285756918be22p-177},
		{0x1.0314c07978175p-182, 0x1.d835dd5ba6335p-178},
		{0x1.9c91111b6c15fp-183, 0x1.782e2c1c97a81p-178},
		{0x1.4873499e69a71p-183, 0x1.2ba486638ab1ep-178},
		{0x1.0573c7a800f18p-183, 0x1.dd4be385e972p-179},
		{0x1.a030c72f0cf33p-184, 0x1.7c17c5d99552cp-179},
		{0x1.4b36ddfcc8743p-184, 0x1.2ea5f617d321fp-179},
		{0x1.078e5ec28bafdp-184, 0x1.e1e853589fe15p-180},
		{0x1.a362e51221b9fp-185, 0x1.7f9fd64579e1ap-180},
		{0x1.4da2bb75a5c65p-185, 0x1.3159306d0abdp-180},
		{0x1.0962c95c3eb5p-185, 0x1.e6076548c0765p-181},
		{0x1.a624c67aa97dfp-186, 0x1.82c376c3acddfp-181},
		{0x1.4fb4e0c13d49p-186, 0x1.33bbfc6dd55a6p-181},
		{0x1.0aef82f484486p-186, 0x1.e9a5b32d2ef52p-182},
		{0x1.a874210dbadcfp-187, 0x1.85800f4a2d262p-182},
		{0x1.516b94dabb86dp-187, 0x1.35cc607ce4fd8p-182},
		{0x1.0c33410fd4c56p-187, 0x1.ecc03cea2935dp-183},
		{0x1.aa4f078af0321p-188, 0x1.87d359f39448ep-183},
		{0x1.52c5696370c9dp-188, 0x1.3788a50e33e44p-183},
		{0x1.0d2cf5025ba2dp-188, 0x1.ef546c9652b0ap-184},
		{0x1.abb3ec79d594dp-189, 0x1.89bb66243bfd5p-184},
		{0x1.53c13ca08d951p-189, 0x1.38ef570827673p-184},
		{0x1.0ddbcd68fc943p-189, 0x1.f1601a115b514p-185},
		{0x1.aca1a45423b35p-190, 0x1.8b369b3c6ec4fp-185},
		{0x1.545e3b0f8838ap-190, 0x1.39ff49c7fe5e8p-185},
		{0x1.0e3f374dd9d68p-190, 0x1.f2e18e05495b4p-186},
		{0x1.ad1767288e013p-191, 0x1.8c43bad265564p-186},
		{0x1.549be08e15927p-191, 0x1.3ab798c59d4c2p-186},
		{0x1.0e56def61fbc4p-191, 0x1.f3d7844c8a592p-187},
		{0x1.ad14d1b2f0b5fp-192, 0x1.8ce1e26fb8214p-187},
		{0x1.5479f9137160bp-192, 0x1.3b17a8d383f04p-187},
		{0x1.0e22b05782284p-192, 0x1.f4412db819edfp-188},
		{0x1.ac99e5e7b9269p-193, 0x1.8d108ccedcd75p-188},
		{0x1.53f8a0f98a8b8p-193, 0x1.3b1f28f8795cap-188},
		{0x1.0da2d734853ffp-193, 0x1.f41e3132440dap-189},
		{0x1.aba70af1767bp-194, 0x1.8ccf9296410aep-189},
		{0x1.531844d58365ep-194, 0x1.3ace12e143377p-189},
		{0x1.0cd7bedf59779p-194, 0x1.f36eac3bc78c2p-190},
		{0x1.aa3d0ca096eedp-195, 0x1.8c1f2a8f92477p-190},
		{0x1.51d9a0dfd2e93p-195, 0x1.3a24aae988ae7p-190},
		{0x1.0bc211a3c2859p-195, 0x1.f23332c263066p-191},
		{0x1.a85d1a4e6bedcp-196, 0x1.8affe95ac6f2ap-191},
		{0x1.503dbfed30324p-196, 0x1.39237fbbcfa18p-191},
		{0x1.0a62b7d92f095p-196, 0x1.f06cce511da3ep-192},
		{0x1.a608c535a2ba1p-197, 0x1.8972c09d7f45cp-192},
		{0x1.4e45f9fa4adffp-197, 0x1.37cb698950bdap-192},
		{0x1.08bad69ed20a4p-197, 0x1.ee1cfc9be3df9p-193},
		{0x1.a341fe436d2d7p-198, 0x1.8778fdb058321p-193},
		{0x1.4bf3f24d273a5p-198, 0x1.361d88db2b95bp-193},
		{0x1.06cbce44363ecp-198, 0x1.eb45ad695330ap-194},
		{0x1.a00b13659be7cp-199, 0x1.851447ccc879bp-194},
		{0x1.4949952fc2371p-199, 0x1.341b44ff4c3c6p-194},
		{0x1.0497386163a39p-199, 0x1.e7e93fdecaep-195},
		{0x1.9c66ac5ae65b3p-200, 0x1.82469dbf1833ep-195},
		{0x1.464915486577bp-200, 0x1.31c64a141680ep-195},
		{0x1.021ee5a248c7fp-200, 0x1.e40a7f340982ap-196},
		{0x1.9857c70b8b2bcp-201, 0x1.7f125320f1e94p-196},
		{0x1.42f4e894cc71ap-201, 0x1.2f2086b6a5cf4p-196},
		{0x1.fec9b69351b7p-202, 0x1.dfac9ed4c27cep-197},
		{0x1.93e1b371520a1p-202, 0x1.7b7a0d21f0262p-197},
		{0x1.3f4fc50de840ap-202, 0x1.2c2c295822108p-197},
		{0x1.f8d6a0e0a9508p-203, 0x1.dad335f7aacdbp-198},
		{0x1.8f080f16c57cp-203, 0x1.7780bee4609a1p-198},
		{0x1.3b5c9cfaada16p-203, 0x1.28eb9d3f5000ap-198},
		{0x1.f269560bdbf92p-204, 0x1.d5823ab37d92ep-199},
		{0x1.89cec0363502dp-204, 0x1.7329a5753ca24p-199},
		{0x1.371e9af8e6ccfp-204, 0x1.2561873c1cc7ap-199},
		{0x1.eb86f931c309dp-205, 0x1.cfbdfc9b64d6ep-200},
		{0x1.8439f081b525ap-205, 0x1.6e7843670c8d2p-200},
		{0x1.32991dc38028ep-205, 0x1.2190c2136fc76p-200},
		{0x1.e434fdd743954p-206, 0x1.c98b1eed08258p-201},
		{0x1.7e4e079de1a2ep-206, 0x1.69705c180d6c1p-201},
		{0x1.2dcfb3be31ebdp-206, 0x1.1d7c5aaa0949p-201},
		{0x1.dc7920bafc5dcp-207, 0x1.c2ee925b3e3f6p-202},
		{0x1.780fa5599d558p-207, 0x1.6415eeac7f744p-202},
		{0x1.28c6164ec1235p-207, 0x1.19278bf59ff34p-202},
		{0x1.d459605b63623p-208, 0x1.bbed8e8100752p-203},
		{0x1.71839bad6a45bp-208, 0x1.5e6d30c67b96bp-203},
		{0x1.2380250c57526p-208, 0x1.1495babbc8d8ep-203},
		{0x1.cbdbf53eed588p-209, 0x1.b48d8b08c37b5p-204},
		{0x1.6aaee88d3a5e6p-209, 0x1.587a8905112ebp-204},
		{0x1.1e01e0cda0c0ep-209, 0x1.0fca71267dd26p-204},
		{0x1.c3074a0c1c67dp-210, 0x1.acd43894c1f06p-205},
		{0x1.6396af97c5f7fp-210, 0x1.52428954b7c2fp-205},
		{0x1.184f669e7e645p-210, 0x1.0ac95a364b406p-205},
		{0x1.b9e1f37f768c9p-211, 0x1.a4c779750fb77p-206},
		{0x1.5c4033ae88d94p-211, 0x1.4bc9e91b546a8p-206},
		{0x1.126ceaa621095p-211, 0x1.05963d1a5105bp-206},
		{0x1.b072a84d6770bp-212, 0x1.9c6d5a387a6d7p-207},
		{0x1.54b0d08180ac6p-212, 0x1.45157f4a2e598p-207},
		{0x1.0c5eb30658611p-212, 0x1.0034f87652744p-207},
		{0x1.a6c038fdf5aedp-213, 0x1.93cc0a254a9f5p-208},
		{0x1.4cedf419a9b38p-213, 0x1.3e2a3c60327aap-208},
		{0x1.062912bcc23f9p-213, 0x1.f552fb3e1c70bp-209},
		{0x1.9cd187cff951cp-214, 0x1.8ae9d3a6eb66fp-209},
		{0x1.44fd186d008c2p-214, 0x1.370d2466d3327p-209},
		{0x1.ffa0c91caab55p-215, 0x1.e9ef97aa04b46p-210},
		{0x1.92ad80b12a09bp-215, 0x1.81cd14bd535bbp-210},
		{0x1.3ce3bd0683046p-215, 0x1.2fc348f3a8121p-210},
		{0x1.f2b20c0b002abp-216, 0x1.de47d70b3398cp-211},
		{0x1.885b1157e885cp-216, 0x1.787c377ac34cdp-211},
		{0x1.34a760cc47acap-216, 0x1.2851c338b22e4p-211},
		{0x1.e58ea51580badp-217, 0x1.d263d33512bb6p-212},
		{0x1.7de1218b19542p-217, 0x1.6efdaa9c0e45ep-212},
		{0x1.2c4d7bed4d522p-217, 0x1.20bdae2cd61c6p-212},
		{0x1.d83f3d3e6d15p-218, 0x1.c64ba5bdb46dep-213},
		{0x1.73468ba3c29b8p-218, 0x1.6557da47246f7p-213},
		{0x1.23db7a001a935p-218, 0x1.190c20d5b5808p-213},
		{0x1.cacc668087b83p-219, 0x1.ba075f0192b6p-214},
		{0x1.689215536317fp-219, 0x1.5b9128fb09361p-214},
		{0x1.1b56b45aac06fp-219, 0x1.114228bb99133p-214},
		{0x1.bd3e92f58e3aep-220, 0x1.ad9efd6e7e35p-215},
		{0x1.5dca68b92a62fp-220, 0x1.51afe8bbb6b6cp-215},
		{0x1.12c46cab86e91p-220, 0x1.0964c48f92b05p-215},
		{0x1.af9e0c680145ap-221, 0x1.a11a652260dp-216},
		{0x1.52f60dcf5b39p-221, 0x1.47ba5483b6e8fp-216},
		{0x1.0a29c7db10f7p-221, 0x1.0178df0b67157p-216},
		{0x1.a1f2ec5b27de2p-222, 0x1.948157e97fbd7p-217},
		{0x1.481b643932becp-222, 0x1.3db68a0470a4fp-217},
		{0x1.018bc93b8e2e5p-222, 0x1.f306942454ae6p-218},
		{0x1.9445149305037p-223, 0x1.87db6da6dd3cap-218},
		{0x1.3d409d78b6819p-223, 0x1.33aa83bd4deabp-218},
		{0x1.f1de9c1ab95aap-224, 0x1.e311742f9561bp-219},
		{0x1.869c2824b4b6bp-224, 0x1.7b300d303ed2cp-219},
		{0x1.326bb792c8c5bp-224, 0x1.299c1370fc2d1p-219},
		{0x1.e0b212b870715p-225, 0x1.d31b83aa1a53bp-220},
		{0x1.78ff85165ac91p-225, 0x1.6e8665a634affp-220},
		{0x1.27a27826da7a5p-225, 0x1.1f90dcff1976ep-220},
		{0x1.cf9b0072f8176p-226, 0x1.c32d9c998168ap-221},
		{0x1.6b763e947db08p-226, 0x1.61e5684f4d137p-221},
		{0x1.1cea67fe8699cp-226, 0x1.158e51a7ac97ep-221},
		{0x1.bea20cad09b1fp-227, 0x1.b350464c51c99p-222},
		{0x1.5e0717c155a1cp-227, 0x1.5553c2fc66728p-222},
		{0x1.1248cf18568a2p-227, 0x1.0b99abbccdbb1p-222},
		{0x1.adcf760300963p-228, 0x1.a38baebfb68e4p-223},
		{0x1.50b87f214792dp-228, 0x1.48d7dafad7ffep-223},
		{0x1.07c2b12fe4dbap-228, 0x1.01b7eac5ea688p-223},
		{0x1.9d2b0d0c4a0b1p-229, 0x1.93e7a4bb0743p-224},
		{0x1.43908aa677d25p-229, 0x1.3c77c897ed254p-224},
		{0x1.fab995891c153p-230, 0x1.efdba02e2ceffp-225},
		{0x1.8cbc2fe600108p-230, 0x1.846b92a47c343p-225},
		{0x1.3694f45c1b92fp-230, 0x1.30395337f89bbp-225},
		{0x1.e6371d3dc0233p-231, 0x1.dc7fb7bbca8adp-226},
		{0x1.7c89c6867890ep-231, 0x1.751e7a10e8264p-226},
		{0x1.29cb17b0f706bp-231, 0x1.2421ee0211f87p-226},
		{0x1.d20647a807a0cp-232, 0x1.c9649548abac7p-227},
		{0x1.6c9a3fd812077p-232, 0x1.6606f00ed6d5dp-227},
		{0x1.1d37ef5f490cdp-232, 0x1.1836b52067807p-227},
		{0x1.be2ec88ae1479p-233, 0x1.b6922692e74d4p-228},
		{0x1.5cf38f9818abfp-233, 0x1.572b1a2c0293ap-228},
		{0x1.10e013ef486f7p-233, 0x1.0c7c6b93f06a1p-228},
		{0x1.aab7b734b99f6p-234, 0x1.a40fcadcdd133p-229},
		{0x1.4d9b2cf546b09p-234, 0x1.4890ac32b69b5p-229},
		{0x1.04c7bad04b57cp-234, 0x1.00f779993bbc1p-229},
		{0x1.97a78d5f1c6dbp-235, 0x1.91e450ac30542p-230},
		{0x1.3e9611e8218p-235, 0x1.3a3ce69b6a143p-230},
		{0x1.f1e56c0773bb7p-236, 0x1.eb57d7362f984p-231},
		{0x1.850426f2df55dp-236, 0x1.8015f467ddd4p-231},
		{0x1.2fe8bb3e4f4d8p-236, 0x1.2c3495adab7d8p-231},
		{0x1.dac8e8a813f1fp-237, 0x1.d53ae35dbfa26p-232},
		{0x1.72d2c2a7422abp-237, 0x1.6eaa5fce4af3ap-232},
		{0x1.21972950f570dp-237, 0x1.1e7c114a57a33p-232},
		{0x1.c44004226dc17p-238, 0x1.bf9ebf2ac34cfp-233},
		{0x1.6118037139874p-238, 0x1.5da6aa3adb7a3p-233},
		{0x1.13a4e15d42467p-238, 0x1.11173d5813f4dp-233},
		{0x1.ae501496e23f2p-239, 0x1.aa895a750e0f6p-234},
		{0x1.4fd7f2b705e64p-239, 0x1.4d0f59b16ac32p-234},
		{0x1.0614ef7575b09p-239, 0x1.04098aca1b898p-234},
		{0x1.98fdb1084fd1cp-240, 0x1.95ffef5a788b3p-235},
		{0x1.3f16033b4da17p-240, 0x1.3ce864a4f75bbp-235},
		{0x1.f1d3d20014dd3p-241, 0x1.eeabf27142ccbp-236},
		{0x1.844cb59a101a9p-241, 0x1.82070510e6e91p-236},
		{0x1.2ed514b22b68bp-241, 0x1.2d35346de60f3p-236},
		{0x1.d84bdf7421499p-242, 0x1.d5fe3202b4d44p-237},
		{0x1.7040489842ad7p-242, 0x1.6ea2738b3dbebp-237},
		{0x1.1f1777f205012p-242, 0x1.1df8a8637ba9cp-237},
		{0x1.bf956a62adf73p-243, 0x1.be0e1bcc5bf2bp-238},
		{0x1.5cdae0381ff94p-243, 0x1.5bd567e120a1cp-238},
		{0x1.0fdef3b187063p-243, 0x1.0f35198b8b7f7p-238},
		{0x1.a7b2fd5556b6ap-244, 0x1.a6df243f2c6f4p-239},
		{0x1.4a1e48fd99b8ep-244, 0x1.49a26968a8fd1p-239},
		{0x1.012cc9c3d142ap-244, 0x1.00ec5ed2dbe3ep-239},
		{0x1.90a652d08b6ecp-245, 0x1.9073f3afbdfebp-240},
		{0x1.380bacb3471d9p-245, 0x1.380b5f70c487dp-240},
		{0x1.e603798765b0ap-246, 0x1.e63fa380d130bp-241},
		{0x1.7a705e88ab4c8p-246, 0x1.7ace6e086aab7p-241},
		{0x1.26a399e180e7cp-246, 0x1.2711978a97cf7p-241},
		{0x1.cabc2c3d98d7cp-247, 0x1.cba0a72ae9c08p-242},
		{0x1.651157275ac6fp-247, 0x1.65efbb20adf2dp-242},
		{0x1.15e60bb1a2bacp-247, 0x1.16b5cc5019368p-242},
		{0x1.b08358e30e1b1p-248, 0x1.b1fca598944c3p-243},
		{0x1.5088c08941b89p-248, 0x1.51d84fa353951p-243},
		{0x1.05d2722aa0abep-248, 0x1.06f82c9619b9p-243},
		{0x1.9757d44a0d5d1p-249, 0x1.9953a1cf16aadp-244},
		{0x1.3cd5765cc7b51p-249, 0x1.3e87f66d27bbp-244},
		{0x1.eccf7568ff3afp-250, 0x1.efb0c5f0312cdp-245},
		{0x1.7f37a88128933p-250, 0x1.81a4d1085cfd1p-245},
		{0x1.29f5b70afae6ep-250, 0x1.2bfdda4e2b20cp-245},
		{0x1.cf48b1a182cb9p-251, 0x1.d2ab3b59164a6p-246},
		{0x1.682022c0d8296p-251, 0x1.6aeea740e7e26p-246},
		{0x1.17e72ed48d1c2p-251, 0x1.1a389017ca93cp-246},
		{0x1.b30c9decefa86p-252, 0x1.b6dd2d215fccfp-247},
		{0x1.520de188c8ff4p-252, 0x1.552ee415230cdp-247},
		{0x1.06a7030db71fbp-252, 0x1.093620e33d9f9p-247},
		{0x1.98166f02e00aap-253, 0x1.9c4336b720df7p-248},
		{0x1.3cfce2d301755p-253, 0x1.40629fd47fda6p-248},
		{0x1.ec63bac9af50ap-254, 0x1.f1e828f7f1e6ep-249},
		{0x1.7e609b497d4bfp-254, 0x1.82d92bd0fbc5bp-249},
		{0x1.28e89244647b5p-254, 0x1.2c8658b1c7fabp-249},
		{0x1.cd07ee41894f6p-255, 0x1.d2def7b6139fbp-250},
		{0x1.65e4eca3c47cep-255, 0x1.6a9a29142865ap-250},
		{0x1.15cbd7439af48p-255, 0x1.1995fff959855p-250},
		{0x1.af324889fe32ep-256, 0x1.b549f742691f7p-251},
		{0x1.4e9c920d5db05p-256, 0x1.5380a4af4c2e9p-251},
		{0x1.03a122e1077b7p-256, 0x1.078d07375b0bp-251},
		{0x1.92d9bd168c63p-257, 0x1.9921acfd99f39p-252},
		{0x1.388030ea8589cp-257, 0x1.3d867ecfb60a5p-252},
		{0x1.e4c4faf832008p-258, 0x1.ecccda72dba49p-253},
		{0x1.77f4a046c515ep-258, 0x1.7e5deef2de87bp-253},
		{0x1.2387f5f4b712ep-258, 0x1.28a511d87ce7dp-253},
		{0x1.c413282821079p-259, 0x1.cc3995b1e2c4p-254},
		{0x1.5e78bc56d0fbbp-259, 0x1.64f5f80200f46p-254},
		{0x1.0faba5af01355p-259, 0x1.14d5424501d7ep-254},
		{0x1.a51f8a6830159p-260, 0x1.ad54bef9112dp-255},
		{0x1.465b65a83bdbbp-260, 0x1.4ce07b8d50856p-255},
		{0x1.f9c5589e7201fp-261, 0x1.020f8e226943ep-255},
		{0x1.87dc5ad8af9ecp-261, 0x1.90123a8271991p-256},
		{0x1.2f918e4d3f95cp-261, 0x1.3613b89391a8fp-256},
		{0x1.d6485a170413ap-262, 0x1.e098381b76cd3p-257},
		{0x1.6c3b66970be3dp-262, 0x1.7465697a54c64p-257},
		{0x1.1a0fd8c3a4e6fp-262, 0x1.20858c20a1795p-257},
		{0x1.b4ce217bd5e55p-263, 0x1.bf05934cfa1ccp-258},
		{0x1.522e259c7017ap-263, 0x1.5a41409f84e49p-258},
		{0x1.05caa9cf257c4p-263, 0x1.0c2b83023243dp-258},
		{0x1.954427a430b11p-264, 0x1.9f5672cf62a4fp-259},
		{0x1.39a5d07601e71p-264, 0x1.41985de8f7a14p-259},
		{0x1.e56c72cc01fccp-265, 0x1.f1f5d5615d783p-260},
		{0x1.7797a6e64ddc9p-265, 0x1.8179bfb69c631p-260},
		{0x1.229374c83806p-265, 0x1.2a5d1d1f1ae5cp-260},
		{0x1.c18d454a503aep-266, 0x1.cdd1c2bddbb9ep-261},
		{0x1.5bb5b3e414ad3p-266, 0x1.655e203c78adp-261},
		{0x1.0ce808921de57p-266, 0x1.1481ab5a1469ap-261},
		{0x1.9fdfe587f056ap-267, 0x1.abd4ca4bd8884p-262},
		{0x1.418b54bd6a895p-267, 0x1.4af20f59f283dp-262},
		{0x1.f128f851039d9p-268, 0x1.fff032b2dbde7p-263},
		{0x1.804c6e03f60cbp-268, 0x1.8be8c488684b4p-263},
		{0x1.290596a08a94fp-268, 0x1.3223f2e5be0fp-263},
		{0x1.cb1395c8187f6p-269, 0x1.d964d959533d1p-264},
		{0x1.62bb1316ec5fcp-269, 0x1.6df780d5ecc43p-264},
		{0x1.1211a1b47d3aep-269, 0x1.1ae2302fd4bcdp-264},
		{0x1.a772150026811p-270, 0x1.b5455f4e2ce45p-265},
		{0x1.47143aa78b5fep-270, 0x1.51eade2a24279p-265},
		{0x1.f93996ba5e93dp-271, 0x1.051b3f15282e5p-265},
		{0x1.8626f2553e204p-271, 0x1.93760037df87ap-266},
		{0x1.2d4091cd12adcp-271, 0x1.37ace1ccc1a8dp-266},
		{0x1.d1294db79df79p-272, 0x1.e17b7713cf17fp-267},
		{0x1.6715149108678p-272, 0x1.73db39c4b278bp-267},
		{0x1.1529206516167p-272, 0x1.1f27cc2724f9p-267},
		{0x1.abce28a1f17f2p-273, 0x1.bb70eb3792a1cp-268},
		{0x1.4a1fe3e55f964p-273, 0x1.5659e4463ddd1p-268},
		{0x1.fd6eb54be7326p-274, 0x1.08462ba9624dbp-268},
		{0x1.89049c51b8388p-274, 0x1.97f4ffe1284a1p-269},
		{0x1.2f2b5e6789756p-274, 0x1.3ad748e88c53fp-269},
		{0x1.d3aa617478594p-275, 0x1.e5e5db98318a5p-270},
		{0x1.68a9e9f7b2f9ap-275, 0x1.76e6798f53e9ap-270},
		{0x1.161c2a1de488ep-275, 0x1.21393590da64bp-270},
		{0x1.acda38e82463bp-276, 0x1.be32dc731f12cp-271},
		{0x1.4a9c33e05809ap-276, 0x1.5824d30f3fce1p-271},
		{0x1.fdaf4969fc45p-277, 0x1.09660e736b8bdp-271},
		{0x1.88d45a53c41c5p-277, 0x1.994b0856743cbp-272},
		{0x1.2eba8f55fe897p-277, 0x1.3b9051c5e7679p-272},
		{0x1.d287e1e77c85ap-278, 0x1.e689bae600601p-273},
		{0x1.6770239fc87e6p-278, 0x1.77071c1633b26p-273},
		{0x1.14e513c1b20dcp-278, 0x1.210a174166fcdp-273},
		{0x1.aa90041143186p-279, 0x1.bd7abebe480e6p-274},
		{0x1.488642c71cfa6p-279, 0x1.5740f6d4ed277p-274},
		{0x1.f9f9ce5a157bbp-280, 0x1.0874302ee34fdp-274},
		{0x1.85974997b931fp-280, 0x1.97701e51a6bfep-275},
		{0x1.2bf0c37efc00bp-280, 0x1.39d3aac239fe2p-275},
		{0x1.cdc89092e43c3p-281, 0x1.e36341a88ea0cp-276},
		{0x1.636f0e2785c54p-281, 0x1.743c5e4db43f9p-276},
		{0x1.118b19def65f8p-281, 0x1.1e9b8ad36fd99p-276},
		{0x1.a4fd2c459c71p-282, 0x1.b94cde5e4fc3p-277},
		{0x1.43ea7a73d5cfp-282, 0x1.53b3a109a94aep-277},
		{0x1.f26454740b953p-283, 0x1.057635a1ed1dfp-277},
		{0x1.7f60ab495565cp-283, 0x1.926f55b776f91p-278},
		{0x1.26de8be09d876p-283, 0x1.35abb1f1cadefp-278},
		{0x1.c5889cb51dbb9p-284, 0x1.dc853b381e5ap-279},
		{0x1.5cbe6a335189cp-284, 0x1.6e96e5d005f5dp-279},
		{0x1.0c22190c33c65p-284, 0x1.19fc0dba0e848p-279},
		{0x1.9c42b0a7816acp-285, 0x1.b1c21d6e11086p-280},
		{0x1.3ce41b9a97542p-285, 0x1.4d91f3701143cp-280},
		{0x1.e71ba6efe048bp-286, 0x1.007de792cfd6ep-280},
		{0x1.76552635a3b27p-286, 0x1.8a6663a0ececbp-281},
		{0x1.1fa1c7f04e719p-286, 0x1.2f310e41037d6p-281},
		{0x1.b9f88d1e59fb3p-287, 0x1.d2185735c5ad9p-282},
		{0x1.538582347c59ep-287, 0x1.66381bdd98a02p-282},
		{0x1.04c9ca3c242adp-287, 0x1.1346f1ba5a69ap-282},
		{0x1.9093a8968bba5p-288, 0x1.a706fd9470fb8p-283},
		{0x1.339c31e0d51b7p-288, 0x1.45000f1eec014p-283},
		{0x1.d8619415342d3p-289, 0x1.f3510620184eap-284},
		{0x1.6aa95f63dd017p-289, 0x1.7f84791f6fdbbp-284},
		{0x1.16648113f6ec6p-289, 0x1.2689bc620188bp-284},
		{0x1.ab5b65b277be7p-290, 0x1.c45998d7521aep-285},
		{0x1.47f9aad3382fep-290, 0x1.5b50e4b7d6356p-285},
		{0x1.f7591b1b1c875p-291, 0x1.0aa3508d5dbp-285},
		{0x1.82335294ba26p-291, 0x1.9959eb6f64db6p-286},
		{0x1.2848053b7dfb1p-291, 0x1.3a2fb2a16d1ccp-286},
		{0x1.c68a6f5a8ef62p-292, 0x1.e23b370697cbbp-287},
		{0x1.5c9ffcce7e5fdp-292, 0x1.720876851d9fbp-287},
		{0x1.0b5b54d487d35p-292, 0x1.1be79c992aff6p-287},
		{0x1.9a0421e5c5d71p-293, 0x1.b3980569c43a5p-288},
		{0x1.3a5c4268d4e27p-293, 0x1.4e1fc4f822568p-288},
		{0x1.e1fba80d34a41p-294, 0x1.0042910b94342p-288},
		{0x1.7172912ec21f8p-294, 0x1.8908e30f7a1b3p-289},
		{0x1.1b271db151968p-294, 0x1.2d5e5a1b8288ep-289},
		{0x1.b1f9ef2d6b135p-295, 0x1.ce1b3b9ea6267p-290},
		{0x1.4c872d1af92bcp-295, 0x1.623e8fb994f23p-290},
		{0x1.fd87064e02a6fp-296, 0x1.0f8695160ca38p-290},
		{0x1.8652a61cdcd3bp-296, 0x1.a031b186be289p-291},
		{0x1.2af84a660968dp-296, 0x1.3eee8e04dc3ap-291},
		{0x1.c9f07af149226p-297, 0x1.e8bd23cc416fp-292},
		{0x1.5eacf76fffc0cp-297, 0x1.766e8d5583265p-292},
		{0x1.0c80f3efbbf3fp-297, 0x1.1ed2fab014c43p-292},
		{0x1.9b1f8ffd8f3c8p-298, 0x1.b76010ebb6c6ap-293},
		{0x1.3ab5d5023fe4ap-298, 0x1.507d813502ab7p-293},
		{0x1.e1c174ea2aaa6p-299, 0x1.01aa61c90eaccp-293},
		{0x1.70b05029068dap-299, 0x1.8a90544ab274dp-294},
		{0x1.1a1fba21de5fp-299, 0x1.2e0fb0911dd84p-294},
		{0x1.afb70654af059p-300, 0x1.ce6f24739f7c7p-295},
		{0x1.4a458b53b2a84p-300, 0x1.61eefc532711fp-295},
		{0x1.f944d95c81983p-301, 0x1.0edb77098a96p-295},
		{0x1.8272ab43f7156p-301, 0x1.9e82e04d9025fp-296},
		{0x1.278886c5a4d73p-301, 0x1.3d237a2e0f859p-296},
		{0x1.c3f57b512a1f2p-302, 0x1.e5385c7d0efep-297},
		{0x1.598c52c5d1746p-302, 0x1.73258d0b919ebp-297},
		{0x1.0828ad1da0983p-302, 0x1.1bdb57d01ceccp-297},
		{0x1.93d4935512f54p-303, 0x1.b223e5e67d24ap-298},
		{0x1.34a3670d3cd59p-303, 0x1.4bf43098a2ef1p-298},
		{0x1.d7b67cefff216p-304, 0x1.fb93db1e39a21p-299},
		{0x1.686e7356020d2p-304, 0x1.8402d3eada60ap-299},
		{0x1.135e695d6d4f8p-304, 0x1.2892e3159736p-299},
		{0x1.a4b6028e1ae52p-305, 0x1.c5502f868f04bp-300},
		{0x1.415808da66669p-305, 0x1.5a670a5d83e0ep-300},
		{0x1.ead51e60a821dp-306, 0x1.08ac71830fd4ep-300},
		{0x1.76cfe88ffbfa7p-306, 0x1.9467d9d3bce7dp-301},
		{0x1.1e2e61d740a91p-306, 0x1.34ea92731d6fp-301},
		{0x1.b4f6c22875415p-307, 0x1.d7e402cf49a21p-302},
		{0x1.4d8e03e448998p-307, 0x1.6860e96265ba8p-302},
		{0x1.fd2c6816f010bp-308, 0x1.132f279000564p-302},
		{0x1.8494b75728df1p-308, 0x1.a4356bd52863ep-303},
		{0x1.28836b62851b4p-308, 0x1.40cac092d16a6p-303},
		{0x1.c476ceb4ce0a6p-309, 0x1.e9bb8c8c45eaap-304},
		{0x1.592d26553a529p-309, 0x1.75c6ad9777c96p-304},
		{0x1.074be65f60432p-309, 0x1.1d3d889242361p-304},
		{0x1.91a14719373e5p-310, 0x1.b34c7bf3e0108p-305},
		{0x1.3248b33f78dd9p-310, 0x1.4c1bf325b5886p-305},
		{0x1.d316bfa6ecf07p-311, 0x1.fab351a6d7271p-306},
		{0x1.641dc398561efp-311, 0x1.827d8b273a859p-306},
		{0x1.0f79d08c027e2p-311, 0x1.26c35a8453a6ep-306},
		{0x1.9ddabce45ff88p-312, 0x1.c18e854f7a653p-307},
		{0x1.3b6a0443345f1p-312, 0x1.56c727238c10ep-307},
		{0x1.e0b830517633fp-313, 0x1.05545196af9e3p-307},
		{0x1.6e4903f595976p-313, 0x1.8e6b62ae03487p-308},
		{0x1.170eca4e7a4cap-313, 0x1.2facf384d3a3bp-308},
		{0x1.a92756c27d93ap-314, 0x1.ceddf1e753b81p-309},
		{0x1.43d40bf74392dp-314, 0x1.60b61e0028436p-309},
		{0x1.ed3e286c4c0dep-315, 0x1.0cbd09b1e5e1p-309},
		{0x1.77993389df313p-315, 0x1.997719e8b73a8p-310},
		{0x1.1dfa945eaae99p-315, 0x1.37e77cf85ca37p-310},
		{0x1.b36ec5aa0588p-316, 0x1.db1e802a6c81fp-311},
		{0x1.4b749e64b35f5p-316, 0x1.69d3aa6fccfd9p-311},
		{0x1.f88d823260c9ep-317, 0x1.1383f4dd09079p-311},
		{0x1.7ffa0f1fabb65p-317, 0x1.a388f33976b7bp-312},
		{0x1.242e12375b352p-317, 0x1.3f613589599c6p-312},
		{0x1.bc9a844ffd2b5p-318, 0x1.e635a66e3ebe7p-313},
		{0x1.523af73f84783p-318, 0x1.720bfb4a981d7p-313},
		{0x1.0146a610e0588p-318, 0x1.199a49bcc51p-313},
		{0x1.87590d6d36008p-319, 0x1.ac8ae259e160cp-314},
		{0x1.299b80ea6bb7fp-319, 0x1.4609b0c4183cap-314},
		{0x1.c496292aa266bp-320, 0x1.f00af26520f9dp-315},
		{0x1.5817f72c95e4cp-320, 0x1.794ce31e24c7bp-315},
		{0x1.059392396d038p-320, 0x1.1ef2877dbfcadp-315},
		{0x1.8da5a346cbb3fp-321, 0x1.b468dc95cb829p-316},
		{0x1.2e36a9eb80d32p-321, 0x1.4bd213115ac94p-316},
		{0x1.cb4fb203e18ap-322, 0x1.f88862b544527p-317},
		{0x1.5cfe5be9615c7p-322, 0x1.7f861b04cbe3ap-317},
		{0x1.0923c6394f695p-322, 0x1.2380a7a548a2fp-317},
		{0x1.92d18166ccd51p-323, 0x1.bb1122f6e5762p-318},
		{0x1.31f510cb3f507p-323, 0x1.50ad48dd9b3a6p-318},
		{0x1.d0b7c794af438p-324, 0x1.ff9ab8e5d6631p-319},
		{0x1.60e2f23228dedp-324, 0x1.84a97f6b3e853p-319},
		{0x1.0bef1906dac58p-324, 0x1.273a4b16ba84fp-319},
		{0x1.96d0ca88e4fcp-325, 0x1.c07484e1da469p-320},
		{0x1.34ce1af3c1b6p-325, 0x1.549037ceef1fep-320},
		{0x1.d4c1f7c67dd18p-326, 0x1.0298e0fc06037p-320},
		{0x1.63bcc0600e3b1p-326, 0x1.88ab45875f419p-321},
		{0x1.0def17046c37ep-326, 0x1.2a16e161fa35fp-321},
		{0x1.999a40ba75f42p-327, 0x1.c48699c75f345p-322},
		{0x1.36bb3093bcf7fp-327, 0x1.5771e906a9978p-322},
		{0x1.d764e5657aa2p-328, 0x1.04a04a1699caap-322},
		{0x1.658528dc53bd5p-328, 0x1.8b822865b44e6p-323},
		{0x1.0f1f1acd583cp-328, 0x1.2c0fc98ac934cp-323},
		{0x1.9b2768ee2e28p-329, 0x1.c73df0b6d4334p-324},
		{0x1.37b7d60833afbp-329, 0x1.594bab8ddacb1p-324},
		{0x1.d89a6c43f4c1p-330, 0x1.05dee05833b3cp-324},
		{0x1.663803afd90e2p-330, 0x1.8d278c9cbfc58p-325},
		{0x1.0f7c5f2e4265p-330, 0x1.2d206b997c2ccp-325},
		{0x1.9b74a41343d69p-331, 0x1.c89434d36542fp-326},
		{0x1.37c1bd3bb9cfep-331, 0x1.5a192e33cf627p-326},
		{0x1.d85fb90bdf218p-332, 0x1.0651bc0c61b2p-326},
		{0x1.65d3aea4b609ep-332, 0x1.8d9799e5f2521p-327},
		{0x1.0f0609e7aa674p-332, 0x1.2d464a6b30dc2p-327},
		{0x1.9a813d2878f74p-333, 0x1.c88645e6c88eep-328},
		{0x1.36d8ce9d2217bp-333, 0x1.59d89052b0525p-328},
		{0x1.d6b5543d3c94p-334, 0x1.05f7d07f3fb02p-328},
		{0x1.645913a262a36p-334, 0x1.8cd14a1185c8dp-329},
		{0x1.0dbd2f003b6a5p-334, 0x1.2c810d60e767ep-329},
		{0x1.984f6bfe6778p-335, 0x1.c714448c370a6p-330},
		{0x1.34ff297cd534dp-335, 0x1.588a691f2cd1fp-330},
		{0x1.d39f201da2255p-336, 0x1.04d1f01416963p-330},
		{0x1.61cba521cabb4p-336, 0x1.8ad66d03eba59p-331},
		{0x1.0ba4cc94c45b3p-336, 0x1.2ad281b8cc2ap-331},
		{0x1.94e44c9a075e7p-337, 0x1.c44191b160ec2p-332},
		{0x1.32391bcecdc03p-337, 0x1.5631c55b5d22cp-332},
		{0x1.cf2449a3fda4bp-338, 0x1.02e2c911c7929p-332},
		{0x1.5e3150cc8eda4p-338, 0x1.87aba1a7120bfp-333},
		{0x1.08c1bf3c985fap-338, 0x1.283e938a586f7p-333},
		{0x1.9047cb663bb8cp-339, 0x1.c014c17012593p-334},
		{0x1.2e8d117dfdd44p-339, 0x1.52d41b7968429p-334},
		{0x1.c94f2cb2815a8p-340, 0x1.002edb3674f27p-334},
		{0x1.599268900e7bcp-340, 0x1.835843f5f0b0cp-335},
		{0x1.051aaf415041dp-340, 0x1.24cb3e8b7d756p-335},
		{0x1.8a84869fc8267p-341, 0x1.ba9781881c8a9p-336},
		{0x1.2a037bab743e1p-341, 0x1.4e79366e7a47p-336},
		{0x1.c22d2c350e306p-342, 0x1.f978cc962d426p-337},
		{0x1.53f982a03a248p-342, 0x1.7de65083f0e21p-337},
		{0x1.00b7f70f68972p-342, 0x1.208076f18ea3p-337},
		{0x1.83a7a5a0b9d4dp-343, 0x1.b3d6740403453p-338},
		{0x1.24a6b05eb3edap-343, 0x1.492b17a8d9ad4p-338},
		{0x1.b9ce7efad864cp-344, 0x1.f126a42ab2a64p-339},
		{0x1.4d7351162fad8p-344, 0x1.77623e1a3ca2fp-339},
		{0x1.f74706d1f613cp-345, 0x1.1b680aeae0c3cp-339},
		{0x1.7bc0a6e57fbc5p-345, 0x1.abe0fed214bcap-340},
		{0x1.1e82c35430e3dp-345, 0x1.42f5d0cb0afebp-340},
		{0x1.b045f25c98b4bp-346, 0x1.e77a20528f8f5p-341},
		{0x1.460e7202036c7p-346, 0x1.6fdace394b03cp-341},
		{0x1.ebd15c07c2acdp-347, 0x1.158d7d54f1681p-341},
		{0x1.72e125d540295p-347, 0x1.a2c9115542385p-342},
		{0x1.17a558b9c184fp-347, 0x1.3be755f8b210cp-342},
		{0x1.a5a8a3f3de092p-348, 0x1.dc88f077bd369p-343},
		{0x1.3ddb38ecb5b52p-348, 0x1.6760d57bb9982p-343},
		{0x1.df2826b036578p-349, 0x1.0efdda755dbb3p-343},
		{0x1.691c997f37f0ep-349, 0x1.98a2e123c782ep-344},
		{0x1.101d72c627ff7p-349, 0x1.340f49a72211p-344},
		{0x1.9a0db3d2b8dacp-350, 0x1.d06b3f65f6fdp-345},
		{0x1.34eb72e63e592p-350, 0x1.5e06fcff790f4p-345},
		{0x1.d166c8f34fca4p-351, 0x1.07c787991a68p-345},
		{0x1.5e880d9f1fe43p-351, 0x1.8d849f54265f7p-346},
		{0x1.07fb3b2ff1602p-351, 0x1.2b7ec30262d2bp-346},
		{0x1.8d8df0cbffd52p-352, 0x1.c33b5a8ad639fp-347},
		{0x1.2b52265317648p-352, 0x1.53e17e1a8afadp-347},
		{0x1.c2aa6bd34f17bp-353, 0x1.fff41d2913dabp-348},
		{0x1.5339d751ff2a1p-353, 0x1.818627da2e9e4p-348},
		{0x1.fe9f93308c405p-354, 0x1.2248100f21115p-348},
		{0x1.80438073219dep-354, 0x1.b515531d535ebp-349},
		{0x1.21234fbc4a127p-354, 0x1.4905d9b84e0cbp-349},
		{0x1.b31198aa5f8abp-355, 0x1.ef4bcc5f71a72p-350},
		{0x1.474946f304456p-355, 0x1.74c0ac8d03b2bp-350},
		{0x1.ec59d00f3fe38p-356, 0x1.187e74c209a91p-350},
		{0x1.7249848679fa9p-356, 0x1.a6169b09c4411p-351},
		{0x1.16739cec78bd4p-356, 0x1.3d8a8ccb26cd9p-351},
		{0x1.a2bbd0795adeep-357, 0x1.ddb87127c2076p-352},
		{0x1.3ace589cd3352p-357, 0x1.674e5d7be735cp-352},
		{0x1.d949ad392f075p-358, 0x1.0e35e84d33d3fp-352},
		{0x1.63bbbf78651ccp-358, 0x1.965d9f895d99cp-353},
		{0x1.0b5827a3ba382p-358, 0x1.3186c3440696p-353},
		{0x1.91c922f9ee4cp-359, 0x1.cb5d51a48d7d4p-354},
		{0x1.2de164c74e725p-359, 0x1.594a1039f0199p-354},
		{0x1.c5941f108d9d1p-360, 0x1.0382d1e479246p-354},
		{0x1.54b639c219649p-360, 0x1.8609634a384ccp-355},
		{0x1.ffcc62473097ap-361, 0x1.25120afe02122p-355},
		{0x1.8059c757355aep-361, 0x1.b85e31314f4b4p-356},
		{0x1.209ad26ca18d9p-361, 0x1.4acee7c0fcbafp-356},
		{0x1.b15e18d0d2d12p-362, 0x1.f0f38c6449ad9p-357},
		{0x1.4554e9983b016p-362, 0x1.753919ff4b182p-357},
		{0x1.e865bf893f8f4p-363, 0x1.1844080030d76p-357},
		{0x1.6e8db855aac9ap-363, 0x1.a4dede3a3eb93p-358},
		{0x1.1312cc0ae5d04p-363, 0x1.3bf7fe7aa33ap-358},
		{0x1.9ccc1bfbf7ecbp-364, 0x1.da5e8d4d639edp-359},
		{0x1.35b35e7d0088ep-364, 0x1.640bc7176cda7p-359},
		{0x1.d0a5ff60b92cfp-365, 0x1.0b342b640cc13p-359},
		{0x1.5c84558f35d95p-365, 0x1.9102c47629cb9p-360},
		{0x1.0560f8bafb2c7p-365, 0x1.2ce013e375d0fp-360},
		{0x1.8801ce509ea26p-366, 0x1.c36f07720a932p-361},
		{0x1.25ec7207b3c64p-366, 0x1.529fe13854ed9p-361},
		{0x1.b8b58f7c67c36p-367, 0x1.fbf2dc269c35dp-362},
		{0x1.4a5c0b3b7424dp-367, 0x1.7cec854a40ddcp-362},
		{0x1.ef3874e46141bp-368, 0x1.1da13f1aaaee6p-362},
		{0x1.732197e24d857p-368, 0x1.ac4c46230c45cp-363},
		{0x1.1619ff0ea7ec6p-368, 0x1.4112fbeff8a1fp-363},
		{0x1.a0bb46a0a2c53p-369, 0x1.e15420dda8758p-364},
		{0x1.383201c8ba71ap-369, 0x1.68bd97eb5b05dp-364},
		{0x1.d3b4e4b894768p-370, 0x1.0e54a78756b6bp-364},
		{0x1.5e4c4aaef013p-370, 0x1.951c14f527745p-365},
		{0x1.0654a030d3e7p-370, 0x1.2f8178dd14a04p-365},
		{0x1.88dc03d1ca801p-371, 0x1.c6b6bf9361ee4p-366},
		{0x1.2621d65152a67p-371, 0x1.5495f2949c65ep-366},
		{0x1.b860981f4834ap-372, 0x1.fe24891c8ca0cp-367},
		{0x1.49a0d4c97c281p-372, 0x1.7e02609a87253p-367},
		{0x1.ed66ed1143993p-373, 0x1.1e064158c947bp-367},
		{0x1.713a5a10cc9bp-373, 0x1.ac4304f253262p-368},
		{0x1.14455cbbff469p-373, 0x1.4093bdea6e36fp-368},
		{0x1.9d62205df47a6p-374, 0x1.dfe14a435c3c2p-369},
		{0x1.353bfdeb15aa4p-374, 0x1.6720e3d624fdcp-369},
		{0x1.ce97f23783a55p-375, 0x1.0cba8970a9d66p-369},
		{0x1.59f649793ea9ap-375, 0x1.921e961b81171p-370},
		{0x1.02b46c188f22dp-375, 0x1.2cd3135c626d1p-370},
		{0x1.82dcfdba2d59cp-376, 0x1.c2097f7f7c953p-371},
		{0x1.213830f44d648p-376, 0x1.5096e15b063dbp-371},
		{0x1.b0639acae41c7p-377, 0x1.f76b39886a20dp-372},
		{0x1.432d063e4cc5ap-377, 0x1.786c2636e4e2ap-372},
		{0x1.e3096b161ade1p-378, 0x1.196dc712e8651p-372},
		{0x1.68f1646f450ccp-378, 0x1.a4c39680abb0bp-373},
		{0x1.0dad51a121c5fp-378, 0x1.3a80eb1934625p-373},
		{0x1.92ed52465cf13p-379, 0x1.d6196b3830612p-374},
		{0x1.2cf8cdb32b26dp-379, 0x1.5f4b3b930a91ap-374},
		{0x1.c1934bb7035c1p-380, 0x1.067b3db09279ep-374},
		{0x1.4fbc11c19c0b7p-380, 0x1.8832413bcb6f5p-375},
		{0x1.f5613cdc1ad52p-381, 0x1.24f8b72bbd6eep-375},
		{0x1.76547ab0f816ap-381, 0x1.b5a5bcacf14ddp-376},
		{0x1.1770c93ef3136p-381, 0x1.46d8046ba690cp-376},
		{0x1.a128a30d837ebp-382, 0x1.e8209bd7c6d4dp-377},
		{0x1.375630e92b79p-382, 0x1.6c744b66f6406p-377},
		{0x1.d0a93cd8add1ep-383, 0x1.1015024fefc8dp-377},
		{0x1.5ab4549d6cf15p-383, 0x1.9631ba1694964p-378},
		{0x1.02a8fed4a1944p-383, 0x1.2f2b3b1ae197dp-378},
		{0x1.81e6d5efc2ecep-384, 0x1.c47e5b8f9de0cp-379},
		{0x1.1fd54f3e20bfcp-384, 0x1.51a481761d265p-379},
		{0x1.ad523512d80aep-385, 0x1.f7d2ff106229cp-380},
		{0x1.4023f854f9c86p-385, 0x1.77da522f79ec5p-380},
		{0x1.dd649c8fad0d5p-386, 0x1.185a192bd02b4p-380},
		{0x1.63e684c4d4572p-386, 0x1.a22ed5ef67f83p-381},
		{0x1.094b5ecc6e29p-386, 0x1.37d9a85948033p-381},
		{0x1.8b7643330549ep-387, 0x1.d10da89b8212ap-382},
		{0x1.26b65f14cd4dap-387, 0x1.5ab7d4224f7e2p-382},
		{0x1.b734f53e57228p-388, 0x1.0276587fa1c2p-382},
		{0x1.473b9d1931175p-388, 0x1.814bdb918424dp-383},
		{0x1.e78d8c6e84fddp-389, 0x1.1f2684f2af658p-383},
		{0x1.6b2a2c93cd65ap-389, 0x1.abf540fb4e1a1p-384},
		{0x1.0e7a7b055d281p-389, 0x1.3eddfeeed0dd2p-384},
		{0x1.92d87cacce695p-390, 0x1.db1c82f79707dp-385},
		{0x1.2bf57b6e0d98dp-390, 0x1.61ea0b7eb4c3cp-385},
		{0x1.bea4f9488e121p-391, 0x1.0799f1fb897d8p-385},
		{0x1.4c7d8bf7bdc41p-391, 0x1.889f21fdb1d69p-386},
		{0x1.eef6b8bfa9225p-392, 0x1.245c20ba28a39p-386},
		{0x1.705ed2bbfd521p-392, 0x1.b3598a0d5984p-387},
		{0x1.121f1b69882ebp-392, 0x1.4418fde75923ep-387},
		{0x1.97ec608197c79p-393, 0x1.e27e05b6c31f9p-388},
		{0x1.2f7b0edc74f1cp-393, 0x1.671af7f5d8858p-388},
		{0x1.c380c41f7503p-394, 0x1.0b3d4442eda68p-388},
		{0x1.4fd20f15083b3p-394, 0x1.8db341e4d4306p-389},
		{0x1.f37ea8d01e9c5p-395, 0x1.27e37e3bc73c9p-389},
		{0x1.736cebb19a201p-395, 0x1.b83a639f29a8p-390},
		{0x1.1428c012e2c57p-395, 0x1.47730acf38edcp-390},
		{0x1.9a9ae80c06018p-396, 0x1.e710d5155d028p-391},
		{0x1.31371c2b63b8p-396, 0x1.6a331ab64b688p-391},
		{0x1.c5b240b14f4d6p-397, 0x1.0d4fd25f7f52ep-391},
		{0x1.5129ffd17a136p-397, 0x1.90712f4e38e37p-392},
		{0x1.f510ba62354a5p-398, 0x1.29ac951c1e60bp-392},
		{0x1.74468acd1611cp-398, 0x1.ba819d5f14678p-393},
		{0x1.148e1d96c299ep-398, 0x1.48dce2dc3ecd5p-393},
		{0x1.9ad7d58aaba44p-399, 0x1.e8c0193d16d55p-394},
		{0x1.3121b71d77179p-399, 0x1.6b2456938b866p-394},
		{0x1.c52f68dd90e64p-400, 0x1.0dc826696c76cp-394},
		{0x1.507f397188496p-400, 0x1.90cc63cdbf2a2p-395},
		{0x1.f3a5bdf92c388p-401, 0x1.29af3c144f8cp-395},
		{0x1.72e7cbdbb95dbp-401, 0x1.ba24cc0f4c8e2p-396},
		{0x1.134d638b07143p-401, 0x1.48500e815d897p-396},
		{0x1.98a2111174d79p-402, 0x1.e7841c45926dp-397},
		{0x1.2f3b409e1b7b6p-402, 0x1.69ea5b1b71301p-397},
		{0x1.c1fa91a869695p-403, 0x1.0ca4195cda6d3p-397},
		{0x1.4dd4c7d7ec9fap-403, 0x1.8ec33daf13649p-398},
		{0x1.ef442d8796795p-404, 0x1.27eb66fea5e85p-398},
		{0x1.6f56f0c0f22b9p-404, 0x1.b72598c77c448p-399},
		{0x1.106c4a594a047p-404, 0x1.45cf12a60cb9ap-399},
		{0x1.9403b0e4bd1b9p-405, 0x1.e36284e81b5ffp-400},
		{0x1.2b8c63e7468c1p-405, 0x1.668ac570f2fc8p-400},
		{0x1.bc22598793379p-406, 0x1.09e8e37ef2488p-400},
		{0x1.4936d06178106p-406, 0x1.8a5f0c63b5c24p-401},
		{0x1.e7fffb3b16a7dp-407, 0x1.2469273320bdap-401},
		{0x1.69a431ed205ap-407, 0x1.b191b44e70edfp-402},
		{0x1.0bf7e7cce4d07p-407, 0x1.41655d7606103p-402},
		{0x1.8d11ace4d8996p-408, 0x1.dc6e2b76185d5p-403},
		{0x1.2625d4b960a47p-408, 0x1.6114f58eab906p-403},
		{0x1.b3c139841a735p-409, 0x1.05a2f4a403a4dp-403},
		{0x1.42ba35d81be5cp-409, 0x1.83b3c9af7ee45p-404},
		{0x1.ddf9fa6fc513ap-410, 0x1.1f386e3013e68p-404},
		{0x1.61e943a26f542p-410, 0x1.a9826f127d04dp-405},
		{0x1.06044c28d2704p-410, 0x1.3b26ef9596f74p-405},
		{0x1.83eb403668f94p-411, 0x1.d2c68adc24dd3p-406},
		{0x1.1f1fd15ed30fep-411, 0x1.59a199b7c8167p-406},
		{0x1.a8fcbdc7eab51p-412, 0x1.ffcb2bfa5b8dap-407},
		{0x1.3a7bfb4be9962p-412, 0x1.7adf828472cfdp-407},
		{0x1.d15ee90987618p-413, 0x1.1870951a86a79p-407},
		{0x1.584895194492p-413, 0x1.9f1bfa110cbbap-408},
		{0x1.fd57d7b45b3cap-414, 0x1.332fc55367264p-408},
		{0x1.78b8ffae32bfp-414, 0x1.c696d39db75f3p-409},
		{0x1.16996dab0cd1ep-414, 0x1.5051f4ea04fdfp-409},
		{0x1.9c046dcaa75a4p-415, 0x1.f194b2a4cb97p-410},
		{0x1.30a06c462f23ep-415, 0x1.700975cbb46aap-410},
		{0x1.c2662350ce7fap-416, 0x1.102fae0ec7794p-410},
		{0x1.4cec5169fb931p-416, 0x1.928c588cfb6d9p-411},
		{0x1.ec1db7d8e44b5p-417, 0x1.29a3060c44f3ap-411},
		{0x1.6babae8929706p-417, 0x1.b814aa869e0e4p-412},
		{0x1.0cb7ae5506e7ep-417, 0x1.454ee7edd0063p-412},
		{0x1.8d106f7f4047ep-418, 0x1.e0e0b72e6ef2ep-413},
		{0x1.255213192c405p-418, 0x1.6360f251c2f1fp-413},
		{0x1.b1500fc71b69ap-419, 0x1.0699a6631f93fp-413},
		{0x1.40052c8ba04b4p-419, 0x1.840a0d97bb129p-414},
		{0x1.d8a3d24511c07p-420, 0x1.1eaa023d58a69p-414},
		{0x1.5cfadd7b9716p-420, 0x1.a77ea01d8b821p-415},
		{0x1.01a47ddad3ea8p-420, 0x1.38c7c7057a652p-415},
		{0x1.7c5ff3799c35bp-421, 0x1.cdf6c504a93e5p-416},
		{0x1.18c087e86a1f3p-421, 0x1.551bff88c1175p-416},
		{0x1.9e64530b957f4p-422, 0x1.f7ae8590bb8p-417},
		{0x1.31c908986e1a8p-422, 0x1.73d293026bc2ap-417},
		{0x1.c33b25da2082ep-423, 0x1.12730a9790f69p-417},
		{0x1.4ce362055227ep-423, 0x1.951a7082f394ap-418},
		{0x1.eb1b0ae0a386ap-424, 0x1.2af1081b22794p-418},
		{0x1.6a3779e1ff3bp-424, 0x1.b925bc48353ep-419},
		{0x1.0b1f245435eeap-424, 0x1.4575deb5305a2p-419},
		{0x1.89efddb97fd18p-425, 0x1.e029ff0fc8645p-420},
		{0x1.227180cb0a8cap-425, 0x1.6228a92a17423p-420},
		{0x1.ac39e8a7de062p-426, 0x1.05302bb5e3a1ap-420},
		{0x1.3ba5b5279aa24p-426, 0x1.81331d3a2cc81p-421},
		{0x1.d145ea8ff6403p-427, 0x1.1c02d69097c72p-421},
		{0x1.56df011e743b9p-427, 0x1.a2c1b0ae83a64p-422},
		{0x1.f94750d0f9308p-428, 0x1.34ad734ae6135p-422},
		{0x1.7442e7172840ap-428, 0x1.c703bfdc748cdp-423},
		{0x1.123a683e9b9d5p-428, 0x1.4f5290291de6ep-423},
		{0x1.93f94a8e393e5p-429, 0x1.ee2bb5a2a447p-424},
		{0x1.298449094a08p-429, 0x1.6c16f34d9525ep-424},
		{0x1.b62c8f87855a8p-430, 0x1.0c379a70923bcp-424},
		{0x1.42a02f59d51efp-430, 0x1.8b21b8919710fp-425},
		{0x1.db09bb0ffb21fp-431, 0x1.2303a1b68b2dep-425},
		{0x1.5daee76f997a8p-431, 0x1.ac9c706a79cfcp-426},
		{0x1.01604a662bf4cp-431, 0x1.3b983b3f72fb5p-426},
		{0x1.7ad33d50dacdp-432, 0x1.d0b33fd9b6e85p-427},
		{0x1.16c1e4c8c451ap-432, 0x1.5615904c6373ap-427},
		{0x1.9a32159dea0d8p-433, 0x1.f7950165d693dp-428},
		{0x1.2dc48781056c9p-433, 0x1.729dc070c926ap-428},
		{0x1.bbf2871addffbp-434, 0x1.10b9b38c6e833p-428},
		{0x1.4684a4152d4ep-434, 0x1.9154f9f73ee5fp-429},
		{0x1.e03df4eb2c204p-435, 0x1.27418ebfd96bep-429},
		{0x1.6120558a89b12p-435, 0x1.b26192fa2f36ep-430},
		{0x1.03a014bcb5352p-435, 0x1.3f7df7d25b3e6p-430},
		{0x1.7db773a6f6623p-436, 0x1.d5ec232ba3385p-431},
		{0x1.1893b9023690dp-436, 0x1.598c75ff21ea4p-431},
		{0x1.9c6ba6a49465ap-437, 0x1.fc1f9e46a53e2p-432},
		{0x1.2f125d64e7642p-437, 0x1.758c452444076p-432},
		{0x1.bd607b51aff83p-438, 0x1.1294b791c6529p-432},
		{0x1.4735d5e25dd32p-438, 0x1.939e692035be7p-433},
		{0x1.e0bb7795ebab2p-439, 0x1.289cc9b3b4107p-433},
		{0x1.611962fb4b008p-439, 0x1.b3e5c199dc217p-434},
		{0x1.035217aa6e0adp-439, 0x1.40415be2c6028p-434},
		{0x1.7cd9c096da3b3p-440, 0x1.d6871e2c76342p-435},
		{0x1.17a22cd2a508fp-440, 0x1.599d2a64857abp-435},
		{0x1.9a95351e8c9f1p-441, 0x1.fba952efabe51p-436},
		{0x1.2d63f329a8bcbp-441, 0x1.74cc660d4897ap-436},
		{0x1.ba6ba0cb47e2bp-442, 0x1.11baa6a990cd8p-436},
		{0x1.44ae89d144108p-442, 0x1.91ecc31adec4ep-437},
		{0x1.dc7e8d1b8f556p-443, 0x1.270b14a1f9816p-437},
		{0x1.5d9a42222275cp-443, 0x1.b11d883fd3ec1p-438},
		{0x1.00789e350bd1ap-443, 0x1.3ddca348b8e79p-438},
		{0x1.7840aaba80c98p-444, 0x1.d27f9dd765764p-439},
		{0x1.13f45ccd8c935p-444, 0x1.56472f42babf3p-439},
		{0x1.94bc9a9955f26p-445, 0x1.f6359d3980ea5p-440},
		{0x1.28c5f3eaf8eddp-445, 0x1.7063ccd1b83c6p-440},
		{0x1.b32a3c3e46a35p-446, 0x1.0e31f012ad2b3p-440},
		{0x1.3f01c91fe7f47p-446, 0x1.8c4cd2c02ec2dp-441},
		{0x1.d3a718c61d154p-447, 0x1.2298481c2ca0dp-441},
		{0x1.56bd3dd5a05c1p-447, 0x1.aa1de55237abcp-442},
		{0x1.f65222fadfcp-448, 0x1.3861db33230bp-442},
		{0x1.700eb717cfb77p-448, 0x1.c9f401331dbf6p-443},
		{0x1.0da5e12700c8dp-448, 0x1.4fa3a533642f6p-443},
		{0x1.8b0da54d3c71fp-449, 0x1.ebed8656f1a7bp-444},
		{0x1.215aeed941b43p-449, 0x1.6873a105b43c2p-444},
		{0x1.a7d28bd609e5p-450, 0x1.081521636047p-444},
		{0x1.3659f3261d19p-450, 0x1.82e8d038330cap-445},
		{0x1.c6770887b13f6p-451, 0x1.1b65bea6b7e6ap-445},
		{0x1.4cb570f463d9dp-451, 0x1.9f1b427ce89a2p-446},
		{0x1.e715dafe5cd6p-452, 0x1.2ff9fffd4f5f9p-446},
		{0x1.6480ba9b1723cp-452, 0x1.bd241d06b6757p-447},
		{0x1.04e575dd6f2ebp-452, 0x1.45e411382662bp-447},
		{0x1.7dcff6d521467p-453, 0x1.dd1da1bc7ec85p-448},
		{0x1.1759a98201ff3p-453, 0x1.5d36e9f7af39cp-448},
		{0x1.98b82586ccf2dp-454, 0x1.ff233639de02ap-449},
		{0x1.2af6afc0ce651p-454, 0x1.7606528b3cf28p-449},
		{0x1.b54f244df93dfp-455, 0x1.11a8b54a30c34p-449},
		{0x1.3fcc4e4385b18p-455, 0x1.9066e8a3084adp-450},
		{0x1.d3abb2d5b9282p-456, 0x1.24e2ffedd9f78p-450},
		{0x1.55eaec016b2b5p-456, 0x1.ac6e23cde6ac9p-451},
		{0x1.f3e576e5bfb2cp-457, 0x1.394ff72563c26p-451},
		{0x1.6d6394041cb01p-457, 0x1.ca3259bb8013ep-452},
		{0x1.0b0a8012d71fbp-457, 0x1.4effb58fcce2p-452},
		{0x1.8647f7f3a91dep-458, 0x1.e9cac23b8427ep-453},
		{0x1.1d29e5c60946bp-458, 0x1.6602f707600f3p-453},
		{0x1.a0aa72640fd47p-459, 0x1.05a7bd790a4bcp-453},
		{0x1.305e23384e58ap-459, 0x1.7e6b1b23c38f4p-454},
		{0x1.bc9e08de1532fp-460, 0x1.176cc55ca9b8p-454},
		{0x1.44b4e89c6a35fp-460, 0x1.984a277e8539ap-455},
		{0x1.da366d9d2b975p-461, 0x1.2a417253e014bp-455},
		{0x1.5a3c60cb2c6b1p-461, 0x1.b3b2c9b4277c6p-456},
		{0x1.f98800fc076dbp-462, 0x1.3e333559670c8p-456},
		{0x1.71033226bf0afp-462, 0x1.d0b8591b88278p-457},
		{0x1.0d53e944a7e18p-462, 0x1.534ff7f271b4dp-457},
		{0x1.89187f3d75a14p-463, 0x1.ef6ed82d51675p-458},
		{0x1.1ed5d0deddfb7p-463, 0x1.69a61d0edc9d2p-458},
		{0x1.a28be72757b85p-464, 0x1.07f57aca805f1p-458},
		{0x1.3154ef266983dp-464, 0x1.814481a9f253cp-459},
		{0x1.bd6d859990532p-465, 0x1.1921067277b5dp-459},
		{0x1.44dcd404b4fcdp-465, 0x1.9a3a7d2712f82p-460},
		{0x1.d9cdf2aadd6a6p-466, 0x1.2b45137355f77p-460},
		{0x1.5979672b76b96p-466, 0x1.b497e1657b91bp-461},
		{0x1.f7be424410479p-467, 0x1.3e6cfcc06ed27p-461},
		{0x1.6f36e7903ba4fp-467, 0x1.d06cfa865bc4ep-462},
		{0x1.0ba8019bd4e86p-467, 0x1.52a47395ed2aep-462},
		{0x1.8621eaa755f34p-468, 0x1.edca8e605e67ap-463},
		{0x1.1c4a9efdce654p-468, 0x1.67f77ef705254p-463},
		{0x1.9e475b5aaea97p-469, 0x1.0660edcde1e02p-463},
		{0x1.2dd03980220acp-469, 0x1.7e727aec99554p-464},
		{0x1.b7b478b8fda1cp-470, 0x1.16b24c391593bp-464},
		{0x1.40424c4fd21f7p-470, 0x1.96221780dfe95p-465},
		{0x1.d276d459f43c7p-471, 0x1.27e2788696d86p-465},
		{0x1.53aa8c500f5dp-471, 0x1.af1357749947cp-466},
		{0x1.ee9c5073f397ep-472, 0x1.39fac2bf7a531p-466},
		{0x1.6812e6a2e8fcp-472, 0x1.c9538eaa71fbp-467},
		{0x1.06198ecffc0ep-472, 0x1.4d04b3a802aeep-467},
		{0x1.7d857ef6fe55ap-473, 0x1.e4f0604536408p-468},
		{0x1.15a4dc243cc5fp-473, 0x1.610a0b4ec8401p-468},
		{0x1.940cad97ee071p-474, 0x1.00fbde3ac71c6p-468},
		{0x1.25f772e00c70ap-474, 0x1.7614bf61d6bfap-469},
		{0x1.abb2fd3f529efp-475, 0x1.103beefa0765p-469},
		{0x1.3718d87e8a0afp-475, 0x1.8c2ef94786008p-470},
		{0x1.c48328a4346ebp-476, 0x1.203fa39242793p-470},
		{0x1.4910b37b4de72p-476, 0x1.a36313f8e64ecp-471},
		{0x1.de8817c6f33b9p-477, 0x1.310e5f6fbfd44p-471},
		{0x1.5be6c950a7e6fp-477, 0x1.bbbb999bb060ap-472},
		{0x1.f9ccdcf7c94fep-478, 0x1.42afa66f9fdc1p-472},
		{0x1.6fa2fc442a9d3p-478, 0x1.d54340d9c375dp-473},
		{0x1.0b2e58cb15f5cp-478, 0x1.552b1ae6aeaa2p-473},
		{0x1.844d490056942p-479, 0x1.f004e9f45a94bp-474},
		{0x1.1a217943b9ac7p-479, 0x1.68887b7750462p-474},
		{0x1.99edc3fa555f4p-480, 0x1.0605cdc8a1e5ep-474},
		{0x1.29c58e31af831p-480, 0x1.7ccfa0b55e3f7p-475},
		{0x1.b08c96a2d341cp-481, 0x1.14b13fa04509fp-475},
		{0x1.3a2063aa9bfc9p-481, 0x1.92087a96ea8f4p-476},
		{0x1.c831fc61280f7p-482, 0x1.240a6edc95f53p-476},
		{0x1.4b37d15842e1dp-482, 0x1.a83b0db0fa5b6p-477},
		{0x1.e0e63f582488bp-483, 0x1.34170d65d2fe5p-477},
		{0x1.5d11b81c3fea7p-483, 0x1.bf6f703f6c8b1p-478},
		{0x1.fab1b4f400c2ep-484, 0x1.44dcd884a52dcp-478},
		{0x1.6fb3ff8ccf41cp-484, 0x1.d7adc6f76430fp-479},
		{0x1.0ace5d20891a2p-484, 0x1.5661968fc8c68p-479},
		{0x1.8324934a763f4p-485, 0x1.f0fe41a3b588bp-480},
		{0x1.18d7d8058e531p-485, 0x1.68ab147365bffp-480},
		{0x1.9769602e7d2c4p-486, 0x1.05b48bc57ed71p-480},
		{0x1.27797b62a04a4p-486, 0x1.7bbf2311e9661p-481},
		{0x1.ac8851524d431p-487, 0x1.137b41cf9c9a4p-481},
		{0x1.36b7751d5da7fp-487, 0x1.8fa3947e525d9p-482},
		{0x1.c2874cefea298p-488, 0x1.21d7603b6e2ccp-482},
		{0x1.4695ee8470b66p-488, 0x1.a45e3910021acp-483},
		{0x1.d96c311be3eb3p-489, 0x1.30cd0207d04edp-483},
		{0x1.571909f179506p-489, 0x1.b9f4dc504a668p-484},
		{0x1.f13cd05945d89p-490, 0x1.40603dadb780ap-484},
		{0x1.6844e0504f766p-490, 0x1.d06d41c212c13p-485},
		{0x1.04ff770417c7ep-490, 0x1.509522cc01f2fp-485},
		{0x1.7a1d7e8c27e5p-491, 0x1.e7cd2184183ebp-486},
		{0x1.11dc1d57f7df8p-491, 0x1.616fb7b910c11p-486},
		{0x1.8ca6e2e342651p-492, 0x1.000d1267395e3p-486},
		{0x1.1f372812d1e14p-492, 0x1.72f3f6faafe57p-487},
		{0x1.9fe4fa21e8c98p-493, 0x1.0cacf12619fe1p-487},
		{0x1.2d1356c845fd1p-493, 0x1.8525cca4f244dp-488},
		{0x1.b3db9cc5a58f3p-494, 0x1.19c8ed29100e2p-488},
		{0x1.3b7359a6b9391p-494, 0x1.980913a0c5f1ep-489},
		{0x1.c88e8c09b9bb2p-495, 0x1.2763b979d57b5p-489},
		{0x1.4a59cf5958098p-495, 0x1.aba192db244fdp-490},
		{0x1.de016eddfacadp-496, 0x1.357ff9fbc97f4p-490},
		{0x1.59c942db45eaep-496, 0x1.bff2fa5de1e9dp-491},
		{0x1.f437cec9632b8p-497, 0x1.44204156d00fcp-491},
		{0x1.69c4293cefa3fp-497, 0x1.d500e0534289dp-492},
		{0x1.059a8a5ce0ce7p-497, 0x1.53470ed39dd97p-492},
		{0x1.7a4cdf5c8de47p-498, 0x1.eacebdf5973c2p-493},
		{0x1.117e42e10afc5p-498, 0x1.62f6cc2a62dbdp-493},
		{0x1.8b65a792fe14p-499, 0x1.00aff63626acfp-493},
		{0x1.1dc89fe4a5f8ap-499, 0x1.7331cb44dd6ecp-494},
		{0x1.9d10a7562f377p-500, 0x1.0c5bd0cbfba3p-494},
		{0x1.2a7b1b1593291p-500, 0x1.83fa43f4f73d5p-495},
		{0x1.af4fe4d278bf9p-501, 0x1.186c76677c8f7p-495},
		{0x1.37971726a776ep-501, 0x1.955251a12574cp-496},
		{0x1.c225447c48b85p-502, 0x1.24e359c6528bbp-496},
		{0x1.451dde15504ecp-502, 0x1.a73bf0e7dcf7bp-497},
		{0x1.d592869bae136p-503, 0x1.31c1d70a5a26cp-497},
		{0x1.53109f6b70a02p-503, 0x1.b9b8fd3b82acep-498},
		{0x1.e99944d35a898p-504, 0x1.3f09320694d4p-498},
		{0x1.61706e7ea0b42p-504, 0x1.cccb2e7856e93p-499},
		{0x1.fe3aefa4cdaa2p-505, 0x1.4cba948866255p-499},
		{0x1.703e40ae0b133p-505, 0x1.e0741675f15a5p-500},
		{0x1.09bc65f9b8064p-505, 0x1.5ad70c9e433d4p-500},
		{0x1.7f7aeba02f7efp-506, 0x1.f4b51e95f89d5p-501},
		{0x1.14a9f8443d058p-506, 0x1.695f8add0a062p-501},
		{0x1.8f272381e3222p-507, 0x1.04c7c2a8ead79p-501},
		{0x1.1fe6a1ccca721p-507, 0x1.7854e0a5444cfp-502},
		{0x1.9f437947f2743p-508, 0x1.0f822de49bc54p-502},
		{0x1.2b72bc2a1bb29p-508, 0x1.87b7be69a8c26p-503},
		{0x1.afd058f4d5cb9p-509, 0x1.1a8a41a9a734p-503},
		{0x1.374e8637e822fp-509, 0x1.9788b1f83908ep-504},
		{0x1.c0ce07e3f5247p-510, 0x1.25e0558a5c077p-504},
		{0x1.437a22e46ffc9p-510, 0x1.a7c824c7683f1p-505},
		{0x1.d23ca31c0220cp-511, 0x1.3184a6ce13b46p-505},
		{0x1.4ff5980398e02p-511, 0x1.b8765a48c0cf1p-506},
		{0x1.e41c1da9f8a5fp-512, 0x1.3d775743f06aep-506},
		{0x1.5cc0cd28b81e5p-512, 0x1.c9936e428a9d9p-507},
		{0x1.f66c3f065ea05p-513, 0x1.49b86c1b194cep-507},
		{0x1.69db8a882e29p-513, 0x1.db1f5331fbe71p-508},
		{0x1.049650c331274p-513, 0x1.5647ccc18e717p-508},
		{0x1.774577e1faf4fp-514, 0x1.ed19d0b78718cp-509},
		{0x1.0e2e586d3df5cp-514, 0x1.632541cab3acp-509},
		{0x1.84fe1b767669bp-515, 0x1.ff82820edeaabp-510},
		{0x1.17fdd44e1dc6cp-515, 0x1.705073deb552ap-510},
		{0x1.9304d9065a4b9p-516, 0x1.092c6a4a26abfp-510},
		{0x1.220449767742ap-516, 0x1.7dc8eab3ed87ap-511},
		{0x1.a158f0df4c356p-517, 0x1.12ce032c827cep-511},
		{0x1.2c4123936432bp-517, 0x1.8b8e0c1372c25p-512},
		{0x1.aff97ef6163edp-518, 0x1.1ca5926404568p-512},
		{0x1.36b3b4511d82bp-518, 0x1.999f1ae9f978bp-513},
		{0x1.bee57a0fbbbdcp-519, 0x1.26b285aeabdbep-513},
		{0x1.415b32c89327cp-519, 0x1.a7fb366632c72p-514},
		{0x1.ce1bb2fa9523ep-520, 0x1.30f431387ee69p-514},
		{0x1.4c36baf8c2285p-520, 0x1.b6a15925d0c25p-515},
		{0x1.dd9ad3d89a4a5p-521, 0x1.3b69cf0bd5608p-515},
		{0x1.57454d4c97f21p-521, 0x1.c590587256b75p-516},
		{0x1.ed615f7bfd7d2p-522, 0x1.46127e8d37ba7p-516},
		{0x1.6285ce2e2e29bp-522, 0x1.d4c6e38ed7f06p-517},
		{0x1.fd6db0d73348ep-523, 0x1.50ed44039bd53p-517},
		{0x1.6df705a8252f7p-523, 0x1.e4438317c2a1ep-518},
		{0x1.06defd40bdb09p-523, 0x1.5bf9082dc8412p-518},
		{0x1.79979f15ddb0dp-524, 0x1.f4049875ce63p-519},
		{0x1.0f2823287afb6p-524, 0x1.673497e5a0d03p-519},
		{0x1.856628e34ac2cp-525, 0x1.02042eb28efefp-519},
		{0x1.17913a85a33a7p-525, 0x1.729ea3d219a53p-520},
		{0x1.9161145d0e326p-526, 0x1.0a2671c8cdbeep-520},
		{0x1.20191f16dc709p-526, 0x1.7e35c0288722ep-521},
		{0x1.9d86b59187f4ep-527, 0x1.12680a24c58f5p-521},
		{0x1.28be97e6e9065p-527, 0x1.89f8647df9662p-522},
		{0x1.a9d5434377e7bp-528, 0x1.1ac7d823a316cp-522},
		{0x1.31805749922c3p-528, 0x1.95e4eba9494cap-523},
		{0x1.b64ad6eec66d3p-529, 0x1.2344a7c981006p-523},
		{0x1.3a5cfae5998ecp-529, 0x1.a1f993b67371dp-524},
		{0x1.c2e56cdffce02p-530, 0x1.2bdd30bebc795p-524},
		{0x1.43530bcc0ee3ap-530, 0x1.ae347debd307p-525},
		{0x1.cfa2e45eea63dp-531, 0x1.3490165a1de5p-525},
		{0x1.4c60fe9d5cbc1p-531, 0x1.ba93aee1c301fp-526},
		{0x1.dc80ffece4451p-532, 0x1.3d5be7b8309a9p-526},
		{0x1.558533bc564e3p-532, 0x1.c7150ead1fd0ep-527},
		{0x1.e97d659702f92p-533, 0x1.463f1fe01b7dap-527},
		{0x1.5ebdf78f85a03p-533, 0x1.d3b6691d169e3p-528},
		{0x1.f6959f5cadd73p-534, 0x1.4f3825f642bp-528},
		{0x1.680982d0eea8ap-534, 0x1.e0756e0ca137bp-529},
		{0x1.01e38dd55bfc7p-534, 0x1.58454d7cf072p-529},
		{0x1.7165faec70a1p-535, 0x1.ed4fb1c7fef16p-530},
		{0x1.088796f5a026p-535, 0x1.6164d6a338985p-530},
		{0x1.7ad1726ce2f3cp-536, 0x1.fa42ad866b6p-531},
		{0x1.0f3587953aeb5p-536, 0x1.6a94eea23ecd2p-531},
		{0x1.8449e977fef01p-537, 0x1.03a5dffc21d0dp-531},
		{0x1.15ebef6827c9dp-537, 0x1.73d3b028fc2cfp-532},
		{0x1.8dcd4e591ac76p-538, 0x1.0a3416f4dd0f1p-532},
		{0x1.1ca951b79a938p-538, 0x1.7d1f23d694b62p-533},
		{0x1.97597e1aad586p-539, 0x1.10ca917d13a59p-533},
		{0x1.236c25d3c18a2p-539, 0x1.867540c340902p-534},
		{0x1.a0ec452e85047p-540, 0x1.1767d933fa0f7p-534},
		{0x1.2a32d78fe110fp-540, 0x1.8fd3ed17c059fp-535},
		{0x1.aa8360248e3edp-541, 0x1.1e0a6bf884441p-535},
		{0x1.30fbc7c8ab284p-541, 0x1.9938feb3469d1p-536},
		{0x1.b41c7c6ff8cc6p-542, 0x1.24b0bc63cac6bp-536},
		{0x1.37c54cf4ab1fcp-542, 0x1.a2a23bdfb3241p-537},
		{0x1.bdb5393a7ccd2p-543, 0x1.2b59324d7fd9bp-537},
		{0x1.3e8db3be9418cp-543, 0x1.ac0d5c13ef72ap-538},
		{0x1.c74b284572b4cp-544, 0x1.32022b5a4d882p-538},
		{0x1.45533fa93710cp-544, 0x1.b57808c42df0bp-539},
		{0x1.d0dbced86364cp-545, 0x1.38a9fb93eb86p-539},
		{0x1.4c142bbcdb51bp-545, 0x1.bedfde3fbf9f1p-540},
		{0x1.da64a6bca7adp-546, 0x1.3f4eee0ab230dp-540},
		{0x1.52ceab3daa53bp-546, 0x1.c8426c9c266d4p-541},
		{0x1.e3e31f45a0a96p-547, 0x1.45ef458066425p-541},
		{0x1.5980ea6ad6692p-547, 0x1.d19d38acfc932p-542},
		{0x1.ed549e6504cf2p-548, 0x1.4c893d1bef1fep-542},
		{0x1.60290f4619f98p-548, 0x1.daedbd083bb8ep-543},
		{0x1.f6b681cab013bp-549, 0x1.531b0925a021ep-543},
		{0x1.66c53a6323b06p-549, 0x1.e4316b16614afp-544},
		{0x1.00031007ac3e3p-549, 0x1.59a2d7cbb3c39p-544},
		{0x1.6d5387be7adf6p-550, 0x1.ed65ac2de0264p-545},
		{0x1.04a064f4bdd38p-550, 0x1.601ed1ee8e719p-545},
		{0x1.73d20f9b5e73bp-551, 0x1.f687e2b942e41p-546},
		{0x1.0931e5b5e6c43p-551, 0x1.668d1bf455ad8p-546},
		{0x1.7a3ee7681856fp-552, 0x1.ff956b675583bp-547},
		{0x1.0db636a632668p-552, 0x1.6cebd6a35f863p-547},
		{0x1.809822a836e1fp-553, 0x1.0445cf3250898p-547},
		{0x1.122bfb19eafe7p-553, 0x1.73392002f5fc2p-548},
		{0x1.86dbd3e416493p-554, 0x1.08b3e84ebc2b9p-548},
		{0x1.1691d609b1ec9p-554, 0x1.79731441e1e21p-549},
		{0x1.8d080d9d1c96dp-555, 0x1.0d13aa83e4b01p-549},
		{0x1.1ae66ac0b0b6ap-555, 0x1.7f97cea22928bp-550},
		{0x1.931ae34603f62p-556, 0x1.1163bef9eebc1p-550},
		{0x1.1f285d8d6c817p-556, 0x1.85a56a6965552p-551},
		{0x1.99126a3e88ca5p-557, 0x1.15a2cf3193875p-551},
		{0x1.23565474c154ep-557, 0x1.8b9a03d510324p-552},
		{0x1.9eecbad1cb519p-558, 0x1.19cf85b21a11fp-552},
		{0x1.276ef7e686addp-558, 0x1.9173b9121e9f7p-553},
		{0x1.a4a7f136af77ep-559, 0x1.1de88eb969b39p-553},
		{0x1.2b70f3735b79fp-559, 0x1.9730ab373bc61p-554},
		{0x1.aa422e918100dp-560, 0x1.21ec98edb9593p-554},
		{0x1.2f5af68314ac2p-560, 0x1.9cceff40f1fb1p-555},
		{0x1.afb999f61e5d4p-561, 0x1.25da56105b758p-555},
		{0x1.332bb50b471fbp-561, 0x1.a24cdf0f0a2e7p-556},
		{0x1.b50c6169e961bp-562, 0x1.29b07bb123c75p-556},
		{0x1.36e1e845638bbp-562, 0x1.a7a87a6267113p-557},
		{0x1.ba38bae4baa67p-563, 0x1.2d6dc3e1e1b47p-557},
		{0x1.3a7c4f63d9d53p-563, 0x1.ace007da9e0c8p-558},
		{0x1.bf3ce55012ad1p-564, 0x1.3110ede9680cep-558},
		{0x1.3df9b045b81fcp-564, 0x1.b1f1c5f28dcc9p-559},
		{0x1.c4172983c2f7ep-565, 0x1.3498bef599a58p-559},
		{0x1.4158d828399aep-565, 0x1.b6dbfbfb30836p-560},
		{0x1.c8c5db3f49157p-566, 0x1.380402cbf1542p-560},
		{0x1.44989c55b9312p-566, 0x1.bb9cfb13e7262p-561},
		{0x1.cd475a1f163eep-567, 0x1.3b518c77fb7d2p-561},
		{0x1.47b7dad17cf31p-567, 0x1.c0331f1f7ac71p-562},
		{0x1.d19a128cff8a4p-568, 0x1.3e8036f737914p-562},
		{0x1.4ab57affd05a9p-568, 0x1.c49ccfb511d2cp-563},
		{0x1.d5bc7eab14dfbp-569, 0x1.418ee5e1d890ep-563},
		{0x1.4d906e49e5535p-569, 0x1.c8d8810c585d4p-564},
		{0x1.d9ad27381fd3dp-570, 0x1.447c860fdcf2cp-564},
		{0x1.5047b0bcf6527p-570, 0x1.cce4b4e41cdcap-565},
		{0x1.dd6aa46d0f45cp-571, 0x1.47480e39f8181p-565},
		{0x1.52da49a426b16p-571, 0x1.d0bffb62a59f5p-566},
		{0x1.e0f39ed2991f9p-572, 0x1.49f07f95c9d66p-566},
		{0x1.55474c1ca1f2bp-572, 0x1.d468f3ef07049p-567},
		{0x1.e446d00e60d84p-573, 0x1.4c74e66ce3841p-567},
		{0x1.578dd7a37e92bp-573, 0x1.d7de4e02c6f6fp-568},
		{0x1.e76303a6f7572p-574, 0x1.4ed45aae1d60cp-568},
		{0x1.59ad189ced845p-574, 0x1.db1ec9f31f5e1p-569},
		{0x1.ea4717be0f8c8p-575, 0x1.510e0078c325ep-569},
		{0x1.5ba448d444792p-575, 0x1.de2939b1372f7p-570},
		{0x1.ecf1fdc04a7dbp-576, 0x1.532108a122ff3p-570},
		{0x1.5d72aff4768dap-576, 0x1.e0fc8180b06b8p-571},
		{0x1.ef62bb0a0594ap-577, 0x1.550cb12e0f1dbp-571},
		{0x1.5f17a3f894e1dp-577, 0x1.e39798a3f0a89p-572},
		{0x1.f19869809eb8ap-578, 0x1.56d045cee7811p-572},
		{0x1.60928993f7077p-578, 0x1.e5f989fd91cadp-573},
		{0x1.f392381fab056p-579, 0x1.586b2049c7737p-573},
		{0x1.61e2d491b1f68p-579, 0x1.e82174a67122fp-574},
		{0x1.f54f6b79a6d5fp-580, 0x1.59dca8e17880fp-574},
		{0x1.6308082b0b65cp-580, 0x1.ea0e8c77dc629p-575},
		{0x1.f6cf5e2bb03dcp-581, 0x1.5b2456b2d3672p-575},
		{0x1.6401b7549eebbp-581, 0x1.ebc01a8965943p-576},
		{0x1.f8118143e7ebp-582, 0x1.5c41b0093e8e9p-576},
		{0x1.64cf8501f223bp-582, 0x1.ed357da1f18bap-577},
		{0x1.f9155c9a1fbd1p-583, 0x1.5d344aaa010f1p-577},
		{0x1.6571245f3d39ap-583, 0x1.ee6e2a9b9efdp-578},
		{0x1.f9da8f1a8a0ccp-584, 0x1.5dfbcc1628fd2p-578},
		{0x1.65e6590135ap-584, 0x1.ef69acba2f951p-579},
		{0x1.fa60cf0228aadp-585, 0x1.5e97e9c2cbc7fp-579},
		{0x1.662ef70ab154bp-585, 0x1.f027a5f3a7f56p-580},
		{0x1.faa7ea0cc6ecbp-586, 0x1.5f0869476fb64p-580},
		{0x1.664ae34801e0ep-586, 0x1.f0a7cf2ae7563p-581},
		{0x1.faafc59456a8cp-587, 0x1.5f4d2082760f5p-581},
		{0x1.663a133fef35p-587, 0x1.f0e9f85c03b41p-582},
		{0x1.fa785ea194bf2p-588, 0x1.5f65f5b366281p-582},
		{0x1.65fc8d3a43882p-588, 0x1.f0ee08ba43cd5p-583},
		{0x1.fa01c9ede6a16p-589, 0x1.5f52df8b025d3p-583},
		{0x1.6592683be2829p-589, 0x1.f0b3febf9cbcdp-584},
		{0x1.f94c33d66f35bp-590, 0x1.5f13e53118eaap-584},
		{0x1.64fbcbf86f1abp-590, 0x1.f03bf02da5a7ap-585},
		{0x1.f857e040665ap-591, 0x1.5ea91e400b8afp-585},
		{0x1.6438f0b98cabp-591, 0x1.ef860a0000a7ap-586},
		{0x1.f7252a6ecb2bbp-592, 0x1.5e12b2b611c72p-586},
		{0x1.634a1f3bd0d7ep-592, 0x1.ee92905044d53p-587},
		{0x1.f5b484c995f72p-593, 0x1.5d50dadc42d9dp-587},
		{0x1.622fb08184d56p-593, 0x1.ed61de2b81fc4p-588},
		{0x1.f40678969b4f4p-594, 0x1.5c63df237cf4dp-588},
		{0x1.60ea0d9b5d711p-594, 0x1.ebf4655983167p-589},
		{0x1.f21ba5a45e2afp-595, 0x1.5b4c17f7488b1p-589},
		{0x1.5f79af6759efdp-595, 0x1.ea4aae160108ap-590},
		{0x1.eff4c1e71b057p-596, 0x1.5a09ed86def16p-590},
		{0x1.5ddf1e460242cp-596, 0x1.e86556bc034fep-591},
		{0x1.ed92990861c73p-597, 0x1.589dd784842fp-591},
		{0x1.5c1af1c6454bep-597, 0x1.e6451363b8311p-592},
		{0x1.eaf60be99fa59p-598, 0x1.57085cdb6c23ep-592},
		{0x1.5a2dd0483fd76p-598, 0x1.e3eaad7319948p-593},
		{0x1.e820101a05296p-599, 0x1.554a135c6b3d2p-593},
		{0x1.58186e973c8cbp-599, 0x1.e1570321beee3p-594},
		{0x1.e511af403f0e1p-600, 0x1.53639f61bab8bp-594},
		{0x1.55db8f7b445c6p-600, 0x1.de8b06f0475d8p-595},
		{0x1.e1cc067882b19p-601, 0x1.5155b36a1ff17p-595},
		{0x1.537803429dd3dp-601, 0x1.db87bf13d1856p-596},
		{0x1.de5045a77840fp-602, 0x1.4f210fabcd4fep-596},
		{0x1.50eea743a03bp-602, 0x1.d84e44d6006fdp-597},
		{0x1.da9faec295ac1p-603, 0x1.4cc6819f5a3a9p-597},
		{0x1.4e406557456e3p-603, 0x1.d4dfc3ea1615fp-598},
		{0x1.d6bb950e85a76p-604, 0x1.4a46e38335bf7p-598},
		{0x1.4b6e334ceafc3p-604, 0x1.d13d79b7b4d75p-599},
		{0x1.d2a55c543d97bp-605, 0x1.47a31bd7fd98ap-599},
		{0x1.48791257b832ep-605, 0x1.cd68b49be13bdp-600},
		{0x1.ce5e780d6c294p-606, 0x1.44dc1cd628aecp-600},
		{0x1.45620e7623619p-606, 0x1.c962d320e4c77p-601},
		{0x1.c9e86a88f07ffp-607, 0x1.41f2e3dd79383p-601},
		{0x1.422a3dd414b5ep-607, 0x1.c52d432db963cp-602},
		{0x1.c544c4080f626p-608, 0x1.3ee878deaf1c1p-602},
		{0x1.3ed2c02828af5p-608, 0x1.c0c9812daaed1p-603},
		{0x1.c07521d52071ep-609, 0x1.3bbdedbff743p-603},
		{0x1.3b5cbe0c97302p-609, 0x1.bc391730e1bf4p-604},
		{0x1.bb7b2d547171ap-610, 0x1.38745dbc97fd1p-604},
		{0x1.37c9685446b6bp-610, 0x1.b77d9c068db21p-605},
		{0x1.b6589b1020c3ep-611, 0x1.350cecc05d9cfp-605},
		{0x1.3419f75c953bcp-611, 0x1.b298b2516cc35p-606},
		{0x1.b10f29bfb2a68p-612, 0x1.3188c6bf4cd49p-606},
		{0x1.304faa5c619afp-612, 0x1.ad8c07976bbcp-607},
		{0x1.aba0a14c264ccp-613, 0x1.2de91f0a22435p-607},
		{0x1.2c6bc6b0e1424p-613, 0x1.a859534d21642p-608},
		{0x1.a60ed1d150c44p-614, 0x1.2a2f2fa027fc3p-608},
		{0x1.286f9728ce321p-614, 0x1.a30255dde65bep-609},
		{0x1.a05b929d439abp-615, 0x1.265c387eea954p-609},
		{0x1.245c6b4e79163p-615, 0x1.9d88d7b14c6d3p-610},
		{0x1.9a88c12e847c2p-616, 0x1.22717ef05792fp-610},
		{0x1.203396b14a77p-616, 0x1.97eea82eb8229p-611},
		{0x1.94984031d9858p-617, 0x1.1e704cd7ceb7cp-611},
		{0x1.1bf6702f3caf4p-617, 0x1.92359cbfdea74p-612},
		{0x1.8e8bf6806bcabp-618, 0x1.1a59effeaeef1p-612},
		{0x1.17a6513ed67fap-618, 0x1.8c5f8fd2e86f6p-613},
		{0x1.8865ce1efe9b6p-619, 0x1.162fb960e6361p-613},
		{0x1.1344953a2bc16p-619, 0x1.866e5fdcf6e5cp-614},
		{0x1.8227b33ef66f4p-620, 0x1.11f2fc7a0a0a9p-614},
		{0x1.0ed298ab66e97p-620, 0x1.8063ee5dc8676p-615},
		{0x1.7bd39341e60d2p-621, 0x1.0da50e937b941p-615},
		{0x1.0a51b89b5ac38p-621, 0x1.7a421ee53231bp-616},
		{0x1.756b5bc0538cfp-622, 0x1.0947461417eb2p-616},
		{0x1.05c351e298147p-622, 0x1.740ad61b23997p-617},
		{0x1.6ef0f9946142ep-623, 0x1.04daf9d1f19dp-617},
		{0x1.0128c07d7eac9p-623, 0x1.6dbff8cae0f32p-618},
		{0x1.686657e900799p-624, 0x1.006180668cd93p-618},
		{0x1.f906bdc779cfcp-625, 0x1.67636af21f0cbp-619},
		{0x1.61cd5f4e4d33cp-625, 0x1.f7b85f0c272bbp-620},
		{0x1.efa90ac757637p-626, 0x1.60f70ed4a200ep-620},
		{0x1.5b27f4d3aafafp-626, 0x1.ee98b6b3e4f34p-621},
		{0x1.e63b1303dfbfbp-627, 0x1.5a7cc414fb8aap-621},
		{0x1.5477f92833195p-627, 0x1.e566abbe94f87p-622},
		{0x1.dcbf7abb88524p-628, 0x1.53f666d2fde17p-622},
		{0x1.4dbf47c1fc8ap-628, 0x1.dc24dc933bf6dp-623},
		{0x1.d338de3492428p-629, 0x1.4d65ced070949p-623},
		{0x1.46ffb60cbd76p-629, 0x1.d2d5e0d43505p-624},
		{0x1.c9a9d09a6515fp-630, 0x1.46ccce9c8cdf5p-624},
		{0x1.403b12a03d499p-630, 0x1.c97c4837b573ep-625},
		{0x1.c014dae645fc3p-631, 0x1.402d32c6be96dp-625},
		{0x1.3973247f05596p-631, 0x1.c01a996aebdb3p-626},
		{0x1.b67c7ad400b86p-632, 0x1.3988c1191e211p-626},
		{0x1.32a9aa5db4bb3p-632, 0x1.b6b3510058b7ap-627},
		{0x1.ace321e309c7bp-633, 0x1.32e137db0ef23p-627},
		{0x1.2be059f3526f7p-633, 0x1.ad48e069f2207p-628},
		{0x1.a34b346493cc3p-634, 0x1.2c384d1c64d5bp-628},
		{0x1.2518df52ef492p-634, 0x1.a3ddacff96f65p-629},
		{0x1.99b70897047dcp-635, 0x1.258fae0968e74p-629},
		{0x1.1e54dc4edf3a3p-635, 0x1.9a740f1248851p-630},
		{0x1.9028e5cf277c7p-636, 0x1.1ee8fe480d92cp-630},
		{0x1.1795e7e5c7ccap-636, 0x1.910e510c93fe1p-631},
		{0x1.86a303af6f699p-637, 0x1.1845d75e974c6p-631},
		{0x1.10dd8db9b7b2p-637, 0x1.87aeaea087811p-632},
		{0x1.7d27896d87b8ep-638, 0x1.11a7c823f5ff5p-632},
		{0x1.0a2d4d917179ap-638, 0x1.7e57540380a9p-633},
		{0x1.73b88d266bc5ap-639, 0x1.0b10543a01766p-633},
		{0x1.03869ae409b27p-639, 0x1.750a5d3814d59p-634},
		{0x1.6a58134129f18p-640, 0x1.0480f391c14fcp-634},
		{0x1.f9d5b8ddde221p-641, 0x1.6bc9d56645be6p-635},
		{0x1.61080de06bfbp-641, 0x1.fbf623f3bedbap-636},
		{0x1.ecb6d7acd34f7p-642, 0x1.6297b642274f2p-636},
		{0x1.57ca5c62d05ddp-642, 0x1.ef001d6eb49dfp-637},
		{0x1.dfb32aa129cc6p-643, 0x1.5975e7810e7p-637},
		{0x1.4ea0caf213789p-643, 0x1.e222785106b16p-638},
		{0x1.d2cd2eb59de4cp-644, 0x1.50663e5d53392p-638},
		{0x1.458d1220fa79dp-644, 0x1.d55fbee497ep-639},
		{0x1.c60744f31e198p-645, 0x1.476a7d28a437bp-639},
		{0x1.3c90d697e5b5dp-645, 0x1.c8ba606fb6833p-640},
		{0x1.b963b20518321p-646, 0x1.3e8452ecdbe84p-640},
		{0x1.33ada8cfe418fp-646, 0x1.bc34b0b8bbc6p-641},
		{0x1.ace49de2283aep-647, 0x1.35b55b1b3d652p-641},
		{0x1.2ae504dc15f24p-647, 0x1.afd0e79df00ebp-642},
		{0x1.a08c1388db34fp-648, 0x1.2cff1d49f192cp-642},
		{0x1.223852412258p-648, 0x1.a39120c175c51p-643},
		{0x1.945c00d028182p-649, 0x1.24630cff92d39p-643},
		{0x1.19a8e3da77fbep-649, 0x1.97775b48ec1aap-644},
		{0x1.8856364b336c5p-650, 0x1.1be2898c8a8a4p-644},
		{0x1.1137f7cd08642p-650, 0x1.8b8579b06ca2cp-645},
		{0x1.7c7c673fe436ep-651, 0x1.137eddf1f97aep-645},
		{0x1.08e6b787233bap-651, 0x1.7fbd41b078795p-646},
		{0x1.70d029afc4472p-652, 0x1.0b3940d5da6fcp-646},
		{0x1.00b637cd0ec0bp-652, 0x1.74205c365c73ep-647},
		{0x1.6552f6729a259p-653, 0x1.0312d48405757p-647},
		{0x1.f14ef1a3e4ac2p-654, 0x1.68b0556e87723p-648},
		{0x1.5a06296220023p-654, 0x1.f6194df7630e5p-649},
		{0x1.e176ccb941b53p-655, 0x1.5d6e9ce0425a7p-649},
		{0x1.4eeb0196310cdp-655, 0x1.e64f64121563ep-650},
		{0x1.d1e5afef936dap-656, 0x1.525c859a2ea9ap-650},
		{0x1.4402a1b0bd9dfp-656, 0x1.d6c9b6d4d6fc5p-651},
		{0x1.c29d225a230e3p-657, 0x1.477b466ee6cc1p-651},
		{0x1.394e1038ce88ep-657, 0x1.c789ea0183d02p-652},
		{0x1.b39e83951bdaap-658, 0x1.3ccbfa4112a58p-652},
		{0x1.2ece3803d8d68p-658, 0x1.b8917a154498bp-653},
		{0x1.a4eb0c6436cf4p-659, 0x1.324fa05e3adc4p-653},
		{0x1.2483e8ac9d061p-659, 0x1.a9e1bcd30af1fp-654},
		{0x1.9683cf6400112p-660, 0x1.28071ce79e917p-654},
		{0x1.1a6fd716c7c18p-660, 0x1.9b7be1e1550cbp-655},
		{0x1.8869b9cc95345p-661, 0x1.1df33948493fap-655},
		{0x1.10929dfe85b79p-661, 0x1.8d60f37a227b9p-656},
		{0x1.7a9d9444b613ep-662, 0x1.1414a4b7a1729p-656},
		{0x1.06ecbe9338febp-662, 0x1.7f91d72bfd333p-657},
		{0x1.6d2003c3fdf54p-663, 0x1.0a6bf4c7a4f95p-657},
		{0x1.fafd4238f8063p-664, 0x1.720f4eaaf4bbbp-658},
		{0x1.5ff18a8317f0ap-664, 0x1.00f9a5fe04069p-658},
		{0x1.e8912b5139031p-665, 0x1.64d9f8b065b73p-659},
		{0x1.531288f8c01c7p-665, 0x1.ef7c38ee94e41p-660},
		{0x1.d695a98770e4bp-666, 0x1.57f251e86550ep-660},
		{0x1.46833ee262b1p-666, 0x1.dd73492689d2p-661},
		{0x1.c50b006d4e015p-667, 0x1.4b58b5eba6cc7p-661},
		{0x1.3a43cc572b3d3p-667, 0x1.cbd8e7539eac7p-662},
		{0x1.b3f14799b1616p-668, 0x1.3f0d6044b145dp-662},
		{0x1.2e5432e458097p-668, 0x1.baad518e7426ep-663},
		{0x1.a3486c40b74f1p-669, 0x1.33106d7f3cac9p-663},
		{0x1.22b456b1a8db7p-669, 0x1.a9f09adee91e3p-664},
		{0x1.931032d667261p-670, 0x1.2761dc408f1efp-664},
		{0x1.1763ffacc46acp-670, 0x1.99a2acce5bd7fp-665},
		{0x1.834838ba6fe3dp-671, 0x1.1c018e67b6eaep-665},
		{0x1.0c62daba74e7cp-671, 0x1.89c349043d67ep-666},
		{0x1.73eff5eb5eca5p-672, 0x1.10ef4a3481a29p-666},
		{0x1.01b07aeca1f42p-672, 0x1.7a520aeb63faep-667},
		{0x1.6506bebfc67bdp-673, 0x1.062abb7415c63p-667},
		{0x1.ee98b577ea7cap-674, 0x1.6b4e695e9099fp-668},
		{0x1.568bc5a3d72eep-674, 0x1.f766e96435041p-669},
		{0x1.da6bba883d22ap-675, 0x1.5cb7b85aa6067p-669},
		{0x1.487e1cd9f3e43p-675, 0x1.e311e0dabf963p-670},
		{0x1.c6d89f0368fc1p-676, 0x1.4e8d2ab5187d6p-670},
		{0x1.3adcb83cdccc3p-676, 0x1.cf55249e0172ap-671},
		{0x1.b3ddd3216f86ep-677, 0x1.40cdd3d52967cp-671},
		{0x1.2da66f0214306p-677, 0x1.bc2f50c60488ep-672},
		{0x1.a1799fd5925f4p-678, 0x1.3378a96e8e29ap-672},
		{0x1.20d9fd7b31257p-678, 0x1.a99ed8a2f2e6bp-673},
		{0x1.8faa294857a39p-679, 0x1.268c853c2e48dp-673},
		{0x1.147606d4e1ee3p-679, 0x1.97a2092e9b19dp-674},
		{0x1.7e6d714d6fce7p-680, 0x1.1a0826b9b2f1ep-674},
		{0x1.087916d26f37cp-680, 0x1.86370b7b69b46p-675},
		{0x1.6dc159d3dbce3p-681, 0x1.0dea34dab05c3p-675},
		{0x1.f9c3470942341p-682, 0x1.755be71f29feap-676},
		{0x1.5da3a74ec8bc7p-682, 0x1.02313fbe40a01p-676},
		{0x1.e35c1df5edf07p-683, 0x1.650e8497f58cdp-677},
		{0x1.4e120315adc06p-683, 0x1.edb784bbee452p-678},
		{0x1.cdb951dc67cbfp-684, 0x1.554cafa9d0c34p-678},
		{0x1.3f09fdba5037ep-684, 0x1.d7d0486e476ccp-679},
		{0x1.b8d760c6a3faap-685, 0x1.461419b3892c2p-679},
		{0x1.308911536a23dp-685, 0x1.c2a975dad9bep-680},
		{0x1.a4b2aa8c000cap-686, 0x1.37625bf981bdbp-680},
		{0x1.228ca3bac6e07p-686, 0x1.ae3f97cbb25cep-681},
		{0x1.914773f3bbbacp-687, 0x1.2934f9e530badp-681},
		{0x1.151208bdc254ep-687, 0x1.9a8f1bb2e0d78p-682},
		{0x1.7e91e9c37a26bp-688, 0x1.1b8963382a86p-682},
		{0x1.0816843f2edd8p-688, 0x1.879454bd5bf1ap-683},
		{0x1.6c8e23b87885fp-689, 0x1.0e5cf631ac83bp-683},
		{0x1.f72e98937c4f8p-690, 0x1.754b7ed21d736p-684},
		{0x1.5b38276a48eap-690, 0x1.01ad01a5b2ddp-684},
		{0x1.df23162441e8bp-691, 0x1.63b0c17c2afp-685},
		{0x1.4a8beb16012edp-691, 0x1.eaed8e09770edp-686},
		{0x1.c804c1d0522ebp-692, 0x1.52c032be62aabp-686},
		{0x1.3a855850eeeeap-692, 0x1.d36ef8a6e08fap-687},
		{0x1.b1cdcc2ca0214p-693, 0x1.4275d9d00481dp-687},
		{0x1.2b204ea20186ep-693, 0x1.bcd89c2310d59p-688},
		{0x1.9c78595e362cep-694, 0x1.32cdb1c10f0eep-688},
		{0x1.1c58a6013aaeep-694, 0x1.a724c21e93002p-689},
		{0x1.87fe848fd6bffp-695, 0x1.23c3ac05a8c19p-689},
		{0x1.0e2a313c94bb5p-695, 0x1.924da8624908p-690},
		{0x1.745a6341bd9d3p-696, 0x1.1553b2e7eba16p-690},
		{0x1.0090c041eb55fp-696, 0x1.7e4d844204d5fp-691},
		{0x1.61860872f36c7p-697, 0x1.0779abdf88654p-691},
		{0x1.e710449b20327p-698, 0x1.6b1e85d9cfdc3p-692},
		{0x1.4f7b87a3ccd22p-698, 0x1.f462f39da55f5p-693},
		{0x1.ce184ffaa0275p-699, 0x1.58badb2559681p-693},
		{0x1.3e34f7b15484dp-699, 0x1.daedfe49c8a9fp-694},
		{0x1.b6314a8f93441p-700, 0x1.471cb2f12adecp-694},
		{0x1.2dac75898461p-700, 0x1.c28c3fc94131bp-695},
		{0x1.9f52e6b0168fbp-701, 0x1.363e3fa56683p-695},
		{0x1.1ddc26b854422p-701, 0x1.ab358720f461fp-696},
		{0x1.8974e49b18481p-702, 0x1.2619b9e9f9276p-696},
		{0x1.0ebe3bcdc6652p-702, 0x1.94e1adf5ef17ap-697},
		{0x1.748f15c14a99p-703, 0x1.16a96324493c1p-697},
		{0x1.004cf29d383afp-703, 0x1.7f889bf8109c7p-698},
		{0x1.60995fd7916b4p-704, 0x1.07e787ce8decbp-698},
		{0x1.e50530acb7a2bp-705, 0x1.6b224a16aa4ep-699},
		{0x1.4d8bbfb38c98p-705, 0x1.f39d03522ee6ep-700},
		{0x1.cab316f0b29dep-706, 0x1.57a6c57f8fed2p-700},
		{0x1.3b5e4bf3051bbp-706, 0x1.d8b1738bdcb74p-701},
		{0x1.b1987b3f62cd2p-707, 0x1.450e32693ba8dp-701},
		{0x1.2a09376f26716p-707, 0x1.bf0154de94403p-702},
		{0x1.99aa6a5f22416p-708, 0x1.3350cea8cd61ap-702},
		{0x1.1984d37c8d151p-708, 0x1.a681c1d2f0b94p-703},
		{0x1.82de1daeb9c47p-709, 0x1.2266f414ce57bp-703},
		{0x1.09c991f950457p-709, 0x1.8f27fe21c9591p-704},
		{0x1.6d28fdea9871ap-710, 0x1.12491ab5c17d9p-704},
		{0x1.f5a00e548f085p-711, 0x1.78e979aa0c9bep-705},
		{0x1.5880a5ae03598p-711, 0x1.02efdac5a4ff4p-705},
		{0x1.d921d6d1c821bp-712, 0x1.63bbd32217718p-706},
		{0x1.44dae3b23367bp-712, 0x1.e8a7dcff4677cp-707},
		{0x1.be0a394617721p-713, 0x1.4f94da865b2a3p-707},
		{0x1.322dbccd73cabp-713, 0x1.ccdc67829105bp-708},
		{0x1.a44b3f5ce9c8bp-714, 0x1.3c6a934743c05p-708},
		{0x1.206f6db46b93p-714, 0x1.b26f5afd4ebc9p-709},
		{0x1.8bd742e227a38p-715, 0x1.2a3336386b4d7p-709},
		{0x1.0f966c7fd2396p-715, 0x1.99530a15ce61ap-710},
		{0x1.74a0efc06d36ep-716, 0x1.18e533433f227p-710},
		{0x1.ff32d3f1c0a49p-717, 0x1.817a166d90dbdp-711},
		{0x1.5e9b45aff1bep-717, 0x1.087732df4f3abp-711},
		{0x1.e0dea55db81c4p-718, 0x1.6ad7728d6db01p-712},
		{0x1.49b9999981d6cp-718, 0x1.f1c02ea5235f3p-713},
		{0x1.c41e9fb058b1ep-719, 0x1.555e63841a093p-713},
		{0x1.35ef96b0fe655p-719, 0x1.d42dfb77e321ep-714},
		{0x1.a8e19002cb47fp-720, 0x1.4102823a6a0a2p-714},
		{0x1.23313f4adb099p-720, 0x1.b8267dd51660dp-715},
		{0x1.8f16bf19917acp-721, 0x1.2db7bc80b123ep-715},
		{0x1.1172ed701cd4p-721, 0x1.9d98e007ff597p-716},
		{0x1.76adf2095d808p-722, 0x1.1b7255d8af1cep-716},
		{0x1.00a953345bce4p-722, 0x1.8474c5f89cf1fp-717},
		{0x1.5f976a86ba7a3p-723, 0x1.0a26e7ff7c8ap-717},
		{0x1.e192f5a290a0dp-724, 0x1.6caa4dc34bcc6p-718},
		{0x1.49c3e6e576cf8p-724, 0x1.f394c675d5da1p-719},
		{0x1.c3918d16606afp-725, 0x1.562a0ffd36fefp-719},
		{0x1.3524a1ccb90cep-725, 0x1.d4a41cdb95576p-720},
		{0x1.a739e0c3f00b3p-726, 0x1.40e51faa74ee4p-720},
		{0x1.21ab51a49a64p-726, 0x1.b7670ded07be7p-721},
		{0x1.8c781323e2b8bp-727, 0x1.2ccd09eaa341p-721},
		{0x1.0f4a27c210b83p-727, 0x1.9bc980b6cd88bp-722},
		{0x1.7338f3cfd4b18p-728, 0x1.19d3d560c7458p-722},
		{0x1.fbe79eabbab8bp-729, 0x1.81b807901b2ddp-723},
		{0x1.5b69fdd784131p-729, 0x1.07ec015b26bbfp-723},
		{0x1.db36d8463b3e1p-730, 0x1.691fdebe382bep-724},
		{0x1.44f955c9776f6p-730, 0x1.ee11097f70374p-725},
		{0x1.bc693203fe92cp-731, 0x1.51eeeac7320bep-725},
		{0x1.2fd5c7756dd24p-731, 0x1.ce39998362bf9p-726},
		{0x1.9f66cc65fb2cbp-732, 0x1.3c13b67a17ff2p-726},
		{0x1.1beec36eb8502p-732, 0x1.b03976c943068p-727},
		{0x1.8418af0dd65edp-733, 0x1.277d70b2ebc6fp-727},
		{0x1.09345c546e7cdp-733, 0x1.93f94ba2c6b6ap-728},
		{0x1.6a68c4bfd764bp-734, 0x1.141be9e049453p-728},
		{0x1.ef2e87ca7b717p-735, 0x1.7962a50231832p-729},
		{0x1.5241d71eb6e19p-735, 0x1.01df915097b64p-729},
		{0x1.ce118fc8beeeap-736, 0x1.605fee84767fp-730},
		{0x1.3b8f8a28fd848p-736, 0x1.e172e498cd2fcp-731},
		{0x1.aef59daa19c93p-737, 0x1.48dc6e3757e71p-731},
		{0x1.263e577f574dp-737, 0x1.c1366206ca036p-732},
		{0x1.91bfa9231de5cp-738, 0x1.32c440230ef3ap-732},
		{0x1.123b897af1af4p-738, 0x1.a2ee0ea25a216p-733},
		{0x1.7655cd85a2773p-739, 0x1.1e04519eb8f87p-733},
		{0x1.feea6c3554149p-740, 0x1.867f82bdccb8fp-734},
		{0x1.5c9f427a491a4p-740, 0x1.0a8a5c7678dffp-734},
		{0x1.dbb4739afff2ep-741, 0x1.6bd1744d1513ep-735},
		{0x1.4484548d479a3p-741, 0x1.f089c3d3d8b6fp-736},
		{0x1.bab46440d8e4bp-742, 0x1.52cbafb8bc99fp-736},
		{0x1.2dee5d96e696ep-742, 0x1.ce464b1286c0dp-737},
		{0x1.9bcaf0aad775cp-743, 0x1.3b571085ef9dbp-737},
		{0x1.18c7bd07b007fp-743, 0x1.ae2a4fedee59cp-738},
		{0x1.7eda37d26ae66p-744, 0x1.255d79dbe3905p-738},
		{0x1.04fbd01fd3b9ap-744, 0x1.9017432798e26p-739},
		{0x1.63c5ba199716fp-745, 0x1.10c9ceee61d28p-739},
		{0x1.e4edd431a7a4p-746, 0x1.73effa34f57abp-740},
		{0x1.4a724e2f6eadep-746, 0x1.fb0fd6a99ec28p-741},
		{0x1.c24c9890314cdp-747, 0x1.5998a4600495bp-741},
		{0x1.32c615eef6a3dp-747, 0x1.d70936a92f04ap-742},
		{0x1.a1f03c81340fdp-748, 0x1.40f6bfdad1f14p-742},
		{0x1.1ca87340e1c39p-748, 0x1.b55b284add8c1p-743},
		{0x1.83b6cbf2ba29fp-749, 0x1.29f10ece9036ep-743},
		{0x1.0801fd07f7284p-749, 0x1.95e2d86ae92c8p-744},
		{0x1.677ffffc31b92p-750, 0x1.146f8c6e8dc57p-744},
		{0x1.e978e83ebd95dp-751, 0x1.787f26e598ebbp-745},
		{0x1.4d2d2f5dd4096p-751, 0x1.005b6216a17eap-745},
		{0x1.c58570e2f641dp-752, 0x1.5d10973fbab06p-746},
		{0x1.34a13f272cdfap-752, 0x1.db3db8f832a58p-747},
		{0x1.a4017c5ace0dep-753, 0x1.4379416dfac63p-747},
		{0x1.1dc0938cfb932p-753, 0x1.b84ac1ef46255p-748},
		{0x1.84c7064147f81p-754, 0x1.2b9cc2c3d6738p-748},
		{0x1.087100f5e6429p-754, 0x1.97b6c5dc3637ap-749},
		{0x1.67b20873fc995p-755, 0x1.15602f1227af8p-749},
		{0x1.e9337a8979dap-756, 0x1.795cb2bb480b6p-750},
		{0x1.4ca0667456eb8p-756, 0x1.00aa01fc8a73ep-750},
		{0x1.c446a2ccade1cp-757, 0x1.5d196927cdaccp-751},
		{0x1.3371d92c55c69p-757, 0x1.dac421184af19p-752},
		{0x1.a1ef1650d3562p-758, 0x1.42cba823b93cbp-752},
		{0x1.1c07db1df4cf6p-758, 0x1.b6e2f60b615c1p-753},
		{0x1.8202debc2593cp-759, 0x1.2a53f94211ba9p-753},
		{0x1.064595037ce7bp-759, 0x1.95853e0fd75adp-754},
		{0x1.645a58ac6913cp-760, 0x1.13949d3b2fbd2p-754},
		{0x1.e41f95cc492cep-761, 0x1.768213ee2ba9cp-755},
		{0x1.48d0194e5b153p-761, 0x1.fce2f1e195a7ap-756},
		{0x1.be99935f38c42p-762, 0x1.59b2d772c1b04p-756},
		{0x1.2f40d4a5d287p-762, 0x1.d5a005ce1b15dp-757},
		{0x1.9bc8aa74c3805p-763, 0x1.3ef3138f8ae58p-757},
		{0x1.178b448b82b16p-763, 0x1.b12e626e3c8a1p-758},
		{0x1.7b7f2dc7fa066p-764, 0x1.2620652c3102cp-758},
		{0x1.0190106456396p-764, 0x1.8f5ecffd9c995p-759},
		{0x1.5d92194746ef2p-765, 0x1.0f1a62a97a48ep-759},
		{0x1.da636b2add63ap-766, 0x1.7004d0a0dd3fcp-760},
		{0x1.41d8f14e2d235p-766, 0x1.f38508375a815p-761},
		{0x1.b4a8e16df3a2ep-767, 0x1.52f67f4a45dbdp-761},
		{0x1.282da2ee06e9fp-767, 0x1.cbf8187da97p-762},
		{0x1.91bc4f0e82a1p-768, 0x1.380c6fa6ddd1bp-762},
		{0x1.106c65473611bp-768, 0x1.a757e44dde4fbp-763},
		{0x1.716ca73d3a1dcp-769, 0x1.1f218f165083cp-763},
		{0x1.f4e737e667fe6p-770, 0x1.8571975a9ba0cp-764},
		{0x1.538bdbc88035p-770, 0x1.081306aee058bp-764},
		{0x1.cc4774fe05a13p-771, 0x1.661571375ee31p-765},
		{0x1.37eeb586702afp-771, 0x1.e5803c9b677cp-766},
		{0x1.a6be51e94d2c3p-772, 0x1.49169d29f057fp-766},
		{0x1.1e6cae3cc5ce4p-772, 0x1.be144165bfdadp-767},
		{0x1.841452e30c6ecp-773, 0x1.2e4b0b7596d86p-767},
		{0x1.06dfcc0330324p-773, 0x1.99a8814f82396p-768},
		{0x1.64157d8dbcaa1p-774, 0x1.158b4c1d7aa61p-768},
		{0x1.e248fc3725278p-775, 0x1.7806fe5adc0dep-769},
		{0x1.4691284199248p-775, 0x1.fd64d63539ac4p-770},
		{0x1.ba32f675bcca1p-776, 0x1.58fd2560c98e3p-770},
		{0x1.2b59cb5fcd07p-776, 0x1.d33b9c01b8858p-771},
		{0x1.953f4278d9771p-777, 0x1.3c5b9e7be019ep-771},
		{0x1.1244d4a198783p-777, 0x1.ac5a261b57bd2p-772},
		{0x1.7333ac721d353p-778, 0x1.21f61f6e6a3a5p-772},
		{0x1.f654f8b2c9938p-779, 0x1.8883e334bf813p-773},
		{0x1.53d9d5f4e3889p-779, 0x1.09a33ffab8174p-773},
		{0x1.cbcb3935e8707p-780, 0x1.678037d69a88ap-774},
		{0x1.36fefd85e37f7p-780, 0x1.e678a0474dd4dp-775},
		{0x1.a4a7147e53789p-781, 0x1.491a44a8cc267p-775},
		{0x1.1c73c8c2f3143p-781, 0x1.bd3a60953bab8p-776},
		{0x1.80a7df6e9e4abp-782, 0x1.2d20af56e98e4p-776},
		{0x1.040c111171b21p-782, 0x1.9748563f2a02cp-777},
		{0x1.5f9153468350dp-783, 0x1.13656dff66048p-777},
		{0x1.db3d65827b6f1p-784, 0x1.7463a2ae57157p-778},
		{0x1.412b4a3b0b6bbp-784, 0x1.f77b2a384d071p-779},
		{0x1.b20abd232bd72p-785, 0x1.5451ae34b02aep-779},
		{0x1.25417f5fe18aap-785, 0x1.cc024fa52d21ep-780},
		{0x1.8c38db09c3d68p-786, 0x1.36dbe645ba702p-780},
		{0x1.0ba351c6b2c44p-786, 0x1.a415d531b6e85p-781},
		{0x1.69856de02317p-787, 0x1.1bcf7eeeba2f5p-781},
		{0x1.e847157246bfcp-788, 0x1.7f70703ac5558p-782},
		{0x1.49b2d16422141p-788, 0x1.02fd377359b1p-782},
		{0x1.bd304de355d85p-789, 0x1.5dd1b0bb84b26p-783},
		{0x1.2c87c2ff697dcp-789, 0x1.d87243e77ecadp-784},
		{0x1.95b4456f24a66p-790, 0x1.3efdb3b369292p-784},
		{0x1.11cf1a60f1d84p-790, 0x1.aeb4dc01a4631p-785},
		{0x1.718a9184a8678p-791, 0x1.22bcd99dbdb06p-785},
		{0x1.f2af0be1fde49p-792, 0x1.88766c06b0833p-786},
		{0x1.507007917e3d9p-792, 0x1.08db80d427d79p-786},
		{0x1.c5e695f15072bp-793, 0x1.65709eb54bf5ep-787},
		{0x1.32266540e08c2p-793, 0x1.e253876b38acep-788},
		{0x1.9cf012acb820bp-794, 0x1.45623a2f6a451p-788},
		{0x1.1673fda512b46p-794, 0x1.b6f674d703273p-789},
		{0x1.777d05328bd26p-795, 0x1.280eca736b4b1p-789},
		{0x1.fa46d62b8e57dp-796, 0x1.8f4d804e3ad6fp-790},
		{0x1.5544c8bc23e1cp-796, 0x1.0d3e50a2eecdcp-790},
		{0x1.cc068b1dc8ab2p-797, 0x1.6b0c7763ce52bp-791},
		{0x1.36042b906571p-797, 0x1.e979edc5b3767p-792},
		{0x1.a1cbbab815b4cp-798, 0x1.49ecd657d5dd6p-792},
		{0x1.197d0fe71564cp-798, 0x1.bcb59141dc715p-793},
		{0x1.7b41f3bcb1869p-799, 0x1.2bad65a82bb23p-793},
		{0x1.feec24eca8006p-800, 0x1.93d6de18ac6bfp-794},
		{0x1.581b387627669p-800, 0x1.1011dd6dfecf6p-794},
		{0x1.cf746ccaba032p-801, 0x1.6e8be31f2fe24p-795},
		{0x1.380f8b864e1acp-801, 0x1.edc51c8649aaap-796},
		{0x1.a4312cc2f816ap-802, 0x1.4c88f43732a1p-796},
		{0x1.1adc83c96accfp-802, 0x1.bfd81ed74f1cdp-797},
		{0x1.7cc835281bbf3p-803, 0x1.2d883a292df3bp-797},
		{0x1.0044e6f2b903fp-803, 0x1.95fde403b5724p-798},
		{0x1.58e66674c0f82p-804, 0x1.11494966870b7p-798},
		{0x1.d0209514d613dp-805, 0x1.6fdef1ca550b3p-799},
		{0x1.383f2f4495aedp-805, 0x1.ef217eb67d36dp-800},
		{0x1.a41575f0363d6p-806, 0x1.4d2aaa5b8e28ap-800},
		{0x1.1a8c12a0cae91p-806, 0x1.c04fcbf1fddd8p-801},
		{0x1.7c08d08f2ccbbp-807, 0x1.2d96cdd2a30b8p-801},
		{0x1.ff186c5b90604p-808, 0x1.95b8ba50a2687p-802},
		{0x1.57a2b0b1c4c86p-808, 0x1.10df03cd711e3p-802},
		{0x1.ce07ef98af2aep-809, 0x1.6eff939f51c8fp-803},
		{0x1.36923c5eb270bp-809, 0x1.ed88d96607fb4p-804},
		{0x1.a1791489717bfp-810, 0x1.4bcf1445c1d61p-804},
		{0x1.188d2c2d680a3p-810, 0x1.be1a747b458c8p-805},
		{0x1.7907312c7e255p-811, 0x1.2bd8dde16ba8ap-805},
		{0x1.fa9e995f4c414p-812, 0x1.93089dc23e417p-806},
		{0x1.5455df149c7b5p-812, 0x1.0ed4f34d6e965p-806},
		{0x1.c93410e8142f8p-813, 0x1.6bf1c754a3325p-807},
		{0x1.33105a5b594f7p-813, 0x1.e9027b1c5a4abp-808},
		{0x1.9c67f441e11b3p-814, 0x1.487c687197597p-808},
		{0x1.14e8ebae7496ep-814, 0x1.b942323a72767p-809},
		{0x1.73d10c597b774p-815, 0x1.285660efb3e9ap-809},
		{0x1.f330b99c7f9e7p-816, 0x1.8df9d62fb9c5ep-810},
		{0x1.4f0ef77c81a6fp-816, 0x1.0b34677fe9486p-810},
		{0x1.c1baedb5f2e65p-817, 0x1.66c37bb05de1ep-811},
		{0x1.2dc9788ad9864p-817, 0x1.e1a30436bcde5p-812},
		{0x1.94f913add4907p-818, 0x1.4341c90c553e7p-812},
		{0x1.0fafd2c40ba27p-818, 0x1.b1dd0ffc5d04bp-813},
		{0x1.6c7df995241d1p-819, 0x1.231f4a6757469p-813},
		{0x1.e8f062cc963cep-820, 0x1.86a35930ed5e1p-814},
		{0x1.47e5cbff0d92ep-820, 0x1.060dd236f49a3p-814},
		{0x1.b7be34be4e18dp-821, 0x1.5f8c25cd122d7p-815},
		{0x1.26d5559b935e7p-821, 0x1.d78bca82e9f37p-816},
		{0x1.8b4dd6af9c05dp-822, 0x1.3c36d15093021p-816},
		{0x1.08f94cfc79158p-822, 0x1.a80c62c44a65bp-817},
		{0x1.632ec0e0d009cp-823, 0x1.1c4b11ed6627ap-817},
		{0x1.dc0b5f2e40ea4p-824, 0x1.7d261cc2edf72p-818},
		{0x1.3efa480ea698bp-824, 0x1.fef096f5252fp-819},
		{0x1.ab6a5245de9e5p-825, 0x1.566c107178d1fp-819},
		{0x1.1e52cde409267p-825, 0x1.cae9de8f00c0bp-820},
		{0x1.7f910d0084829p-826, 0x1.337ae444bd293p-820},
		{0x1.00e3012bd4171p-826, 0x1.9bfbcfe9dc1e8p-821},
		{0x1.580c66bfc7cf5p-827, 0x1.13f803c0631d9p-821},
		{0x1.ccba595fe34b5p-828, 0x1.71ac2109d33c9p-822},
		{0x1.347383dcf4a9bp-828, 0x1.ef21caa7d80c3p-823},
		{0x1.9cf52785fcd1fp-829, 0x1.4b8b6bbdb7a4fp-823},
		{0x1.1466f7a4ba4b3p-829, 0x1.bbf4bcf8ca0c3p-824},
		{0x1.71f5b701cb667p-830, 0x1.2934441fdae8bp-824},
		{0x1.ef1fef5338f87p-831, 0x1.8de00a5d4cff3p-825},
		{0x1.4b46ffc2e70ccp-831, 0x1.0a4a61359d63ap-825},
		{0x1.bb3f3e667d5e5p-832, 0x1.64673b39bdd54p-826},
		{0x1.287ea78b8278fp-832, 0x1.dcf3acd0cc1f4p-827},
		{0x1.8c9c8347a2863p-833, 0x1.3f1926f0c2aa4p-827},
		{0x1.093c166d47d9p-833, 0x1.aaecb94ca24e1p-828},
		{0x1.62b5957e6b822p-834, 0x1.1d8efbbc88d6cp-828},
		{0x1.da4f3c5b8c56fp-835, 0x1.7df554174928cp-829},
		{0x1.3d1457a1afdaep-835, 0x1.fed6b4a9440a8p-830},
		{0x1.a7e3665ffae25p-836, 0x1.558fae0fed7aap-830},
		{0x1.1b4da97b89113p-836, 0x1.c8b307e047613p-831},
		{0x1.7aa46b2ec675cp-837, 0x1.3149a005e5984p-831},
		{0x1.fa00e080e536p-838, 0x1.9819329634547p-832},
		{0x1.520f92dcad4a2p-838, 0x1.10bba52994e8ep-832},
		{0x1.c3a9666328faap-839, 0x1.6c7dd2d93c0f9p-833},
		{0x1.2dae795ce73b6p-839, 0x1.e70fd5d6d806dp-834},
		{0x1.92f5963d343cfp-840, 0x1.45629dffe1fa7p-834},
		{0x1.0d15f439254bep-840, 0x1.b2b2e959996bp-835},
		{0x1.675546ac2c967p-841, 0x1.2255364dfcfd7p-835},
		{0x1.dfca1ff236f02p-842, 0x1.83c6a3841fccap-836},
		{0x1.4046155930cfbp-842, 0x1.02ee197efc99dp-836},
		{0x1.ab8846c89a496p-843, 0x1.59bfc8bdbfffep-837},
		{0x1.1d5226b496f7ep-843, 0x1.cd9f4c973304p-838},
		{0x1.7cc7edd2bedd1p-844, 0x1.3420703d360eap-838},
		{0x1.fc1e021531b11p-845, 0x1.9b4a6e4580455p-839},
		{0x1.52f9fd29afa7bp-845, 0x1.1276cde31355ep-839},
		{0x1.c439018f9e7bp-846, 0x1.6e44a0da72dedp-840},
		{0x1.2d9d4a3bfacfap-846, 0x1.e8b82d35e9882p-841},
		{0x1.9247c7d6b7109p-847, 0x1.4603c1a2de688p-841},
		{0x1.0c3d4d5746632p-847, 0x1.b2e6fa531d555p-842},
		{0x1.65add59367765p-848, 0x1.220b241172407p-842},
		{0x1.dce1e8301e6efp-849, 0x1.82d28ae825549p-843},
		{0x1.3dde18cb97a8dp-849, 0x1.01ea51e3f541cp-843},
		{0x1.a7b31ccb0b2f4p-850, 0x1.57e3d8e31e749p-844},
		{0x1.1a59798dd7aa2p-850, 0x1.ca77ce984ce61p-845},
		{0x1.7843a7981f8e3p-851, 0x1.3192c63185ef2p-845},
		{0x1.f55b0f3ffe463p-852, 0x1.974911a73b1a7p-846},
		{0x1.4df9fe655b0fbp-852, 0x1.0f64b579273f6p-846},
		{0x1.bce68ce6bcfedp-853, 0x1.69a3e1bad13dap-847},
		{0x1.284bfe1cdea24p-853, 0x1.e1d6859c11527p-848},
		{0x1.8a9c29acbf47dp-854, 0x1.40f425a16dca3p-848},
		{0x1.06bd70b72892bp-854, 0x1.ab8633790b1e2p-849},
		{0x1.5dd55c1a48477p-855, 0x1.1cb4a43b9229fp-849},
		{0x1.d1bd6b173b9f2p-856, 0x1.7b25cc6523c3bp-850},
		{0x1.35fc8451ff49ep-856, 0x1.f8db2dc70232bp-851},
		{0x1.9c9712232f548p-857, 0x1.5014bc06e7f91p-851},
		{0x1.128b47439dcd5p-857, 0x1.bf66ba3b9066cp-852},
		{0x1.6d53d2be0a0b6p-858, 0x1.29c2c1dc958dbp-852},
		{0x1.e6122171333dfp-859, 0x1.8c4a9d76af90fp-853},
		{0x1.435229d0cc681p-859, 0x1.07ae5a7347d0bp-853},
		{0x1.ae1371b74ea2dp-860, 0x1.5ed9539dfd0c9p-854},
		{0x1.1e01427183001p-860, 0x1.d2c69c7599edcp-855},
		{0x1.7c589442700ecp-861, 0x1.3677341a98a13p-855},
		{0x1.f9be9e1d7b4e4p-862, 0x1.9cf2c5625685ep-856},
		{0x1.5033c96eb757p-862, 0x1.1298aebe8af0fp-856},
		{0x1.bef014f36ffa9p-863, 0x1.6d2655c8560ebp-857},
		{0x1.290979be09b3bp-863, 0x1.e58166789d0bcp-858},
		{0x1.8ac6ba86dcc3cp-864, 0x1.42b9e90b536b6p-858},
		{0x1.064e638fb2517p-864, 0x1.acfe7e64002b1p-859},
		{0x1.5c884857d8adep-865, 0x1.1d179e12ade6ep-859},
		{0x1.cf0beaeb1b319p-866, 0x1.7ae01eb0f55cbp-860},
		{0x1.338e29511ffcdp-866, 0x1.f772a9e0423a1p-861},
		{0x1.9881a23b2ff9bp-867, 0x1.4e72e15f0f016p-861},
		{0x1.0f43798c4f845p-867, 0x1.bc4e2f5a8c9afp-862},
		{0x1.6836e63bd7d88p-868, 0x1.27165d875ec78p-862},
		{0x1.de466f9c32fdap-869, 0x1.87eb54ae1860dp-863},
		{0x1.3d79f883687bfp-869, 0x1.043b38d103ec9p-863},
		{0x1.a56d48500b8a3p-870, 0x1.598a7d65e3b67p-864},
		{0x1.17ac327f9b5e5p-870, 0x1.cac2d1ee89db1p-865},
		{0x1.73278f241bb95p-871, 0x1.308090afcd9f3p-865},
		{0x1.ec801820c3f3dp-872, 0x1.942d41e7bf2a3p-866},
		{0x1.46b841565ab3ep-872, 0x1.0c34dc595f4bfp-866},
		{0x1.b16ea850bfa34p-873, 0x1.63e9cb83e74b2p-867},
		{0x1.1f76e44abf0ecp-873, 0x1.d83e5a3ffd7adp-868},
		{0x1.7d432d7dd0ca1p-874, 0x1.39428e0fd00c5p-868},
		{0x1.f99abec00b682p-875, 0x1.9f8c2eadfb109p-869},
		{0x1.4f35579392d4bp-875, 0x1.13957092e7741p-869},
		{0x1.bc6c19eee10e8p-876, 0x1.6d7ad6ac744f9p-870},
		{0x1.2692d6adc530fp-876, 0x1.e4a41e3c393c2p-871},
		{0x1.8673fad41c337p-877, 0x1.4149a31665d1ep-871},
		{0x1.02bd066e6e446p-877, 0x1.a9efbad7c9909p-872},
		{0x1.56dece3f159c3p-878, 0x1.1a4d14ca40e6p-872},
		{0x1.c64dabfd6babdp-879, 0x1.7628f37011dc7p-873},
		{0x1.2cf07ed3ac7cap-879, 0x1.efd93aae49244p-874},
		{0x1.8ea5cdb1b77f8p-880, 0x1.4884565714d83p-874},
		{0x1.0801f05da3babp-880, 0x1.b341347ab9d2ep-875},
		{0x1.5da3ba0723cbcp-881, 0x1.204d0f497ca7dp-875},
		{0x1.cefd7b19fc691p-882, 0x1.7de10a24a9be3p-876},
		{0x1.3281b7ca3d771p-882, 0x1.f9c4f419d97b9p-877},
		{0x1.95c663259c5d8p-883, 0x1.4ee2a6bb63f1dp-877},
		{0x1.0c90568fe453bp-883, 0x1.bb6bea4d790c6p-878},
		{0x1.6374ef6370a23p-884, 0x1.258802fee3a1bp-878},
		{0x1.d668024e6e773p-885, 0x1.8491dcb50d65p-879},
		{0x1.3739f6c74a992p-885, 0x1.012888bcf5e1bp-879},
		{0x1.9bc5a2748239p-886, 0x1.5456466d99824p-880},
		{0x1.105de86fb726ep-886, 0x1.c25d7813e5a28p-881},
		{0x1.68453b252f9afp-887, 0x1.29f220ff323bdp-881},
		{0x1.dc7c640bf856fp-888, 0x1.8a2c46b36447dp-882},
		{0x1.3b0e7a2d8004dp-888, 0x1.04b5178932d9ep-882},
		{0x1.a095d99893beap-889, 0x1.58d2d04dcdef9p-883},
		{0x1.1361f24d04a1ep-889, 0x1.c8060b8a624d8p-884},
		{0x1.6c0994513d45bp-890, 0x1.2d8154e3020f5p-884},
		{0x1.e12caa0268707p-891, 0x1.8ea37661d565fp-885},
		{0x1.3df6725a60cf5p-891, 0x1.078003d294269p-885},
		{0x1.a42bf15180a09p-892, 0x1.5c4df6da1a5fp-886},
		{0x1.15957e82800c6p-892, 0x1.cc58a0676d26ep-887},
		{0x1.6eb9463d29a0dp-893, 0x1.302d6b1661efp-887},
		{0x1.e46dfa81a2018p-894, 0x1.91ed1d851d1ddp-888},
		{0x1.3feb236502138p-894, 0x1.0982d94421652p-888},
		{0x1.a67f97b02e026p-895, 0x1.5ebfab91b4a2bp-889},
		{0x1.16f37032d6085p-895, 0x1.cf4b3235443f5p-890},
		{0x1.704e120e656fdp-896, 0x1.31f0304f01ddbp-890},
		{0x1.e638c247f445dp-897, 0x1.940198fd0e1c2p-891},
		{0x1.40e7ff18c854cp-897, 0x1.0ab8eaa8fae67p-891},
		{0x1.a78b6039c7039p-898, 0x1.60223e0067b2cp-892},
		{0x1.1778970df4481p-898, 0x1.d0d6e2f89dd66p-893},
		{0x1.70c446e7535ccp-899, 0x1.32c589802b4bap-893},
		{0x1.e688d1dc06742p-900, 0x1.94dc0e4e3bd62p-894},
		{0x1.40eab69ffb357p-900, 0x1.0b1f64079cf15p-894},
		{0x1.a74cd8f49285bp-901, 0x1.607271cb1c23p-895},
		{0x1.1723bbb37e71p-901, 0x1.d0f815d3e30e4p-896},
		{0x1.701ad03f5aba2p-902, 0x1.32ab83cb1b9aap-896},
		{0x1.e55d6dd34aeb5p-903, 0x1.947a7e7d08e62p-897},
		{0x1.3ff3437e5e592p-903, 0x1.0ab555a059592p-897},
		{0x1.a5c493ec4b75bp-904, 0x1.5faf8b45ee11cp-898},
		{0x1.15f5a46f2a8c5p-904, 0x1.cfae7d166a387p-899},
		{0x1.6e533a1804da5p-905, 0x1.31a25c153692fp-899},
		{0x1.e2b951ac76b4bp-906, 0x1.92ddcdd3a585ap-900},
		{0x1.3e03e7aaf4a23p-906, 0x1.097bb793410b5p-900},
		{0x1.a2f624fa2da41p-907, 0x1.5ddb524f58124p-901},
		{0x1.13f112353b2e2p-907, 0x1.ccfd1b6b2b0d1p-902},
		{0x1.6b71aaf8395acp-908, 0x1.2fac7e1ac1a55p-902},
		{0x1.dea2a52e6f8d6p-909, 0x1.9009c068a7447p-903},
		{0x1.3b2124c85eb7dp-909, 0x1.077566199da13p-903},
		{0x1.9ee813dcc82f4p-910, 0x1.5afa0b60e30adp-904},
		{0x1.111ab5ef7d9cep-910, 0x1.c8ea38207b48cp-905},
		{0x1.677cd3ce598a2p-911, 0x1.2cce7b0334e93p-905},
		{0x1.d922e485849dfp-912, 0x1.8c04eb792831bp-906},
		{0x1.3751aaab95803p-912, 0x1.04a716678c7d9p-906},
		{0x1.99a3c2eb312dfp-913, 0x1.571266fb205e7p-907},
		{0x1.0d791e54efc95p-913, 0x1.c37f46c8a36cep-908},
		{0x1.627dd610c1f2fp-914, 0x1.290ef7aa6784ep-908},
		{0x1.d246bba093dddp-915, 0x1.86d89be61c44fp-909},
		{0x1.329e3d8fc35e5p-915, 0x1.011744722e8f8p-909},
		{0x1.93354aecb0f91p-916, 0x1.522d67c700dd9p-910},
		{0x1.09149eae599f4p-916, 0x1.bcc8c2b79e5e6p-911},
		{0x1.5c8020a89d6a7p-917, 0x1.247692feaf7c7p-911},
		{0x1.ca1dd59404578p-918, 0x1.8090b25f1fb1cp-912},
		{0x1.2d1194826d1d9p-918, 0x1.f99c33fa36826p-913},
		{0x1.8bab4cd7bc185p-919, 0x1.4c563ff8738edp-913},
		{0x1.03f72f0fa181cp-919, 0x1.b4d5ff233ee8bp-914},
		{0x1.559144638d7d2p-920, 0x1.1f0fc4fe41aefp-914},
		{0x1.c0baa10766979p-921, 0x1.793b75fbd2367p-915},
		{0x1.26b830bbc4f33p-921, 0x1.efaa9eeaa4992p-916},
		{0x1.8316ba6f8ef74p-922, 0x1.459a26ac43fcfp-916},
		{0x1.fc588d5eeb3p-923, 0x1.abb8ece685efep-917},
		{0x1.4dc0c0d42f863p-923, 0x1.18e6b704952c1p-917},
		{0x1.b6320aea7077ap-924, 0x1.70e95e366ca95p-918},
		{0x1.1fa02ebad6485p-924, 0x1.e4700e7fab75ep-919},
		{0x1.798a96e59845bp-925, 0x1.3e0826243926dp-919},
		{0x1.ef81624855ca5p-926, 0x1.a185d71d9ae78p-920},
		{0x1.451fcaaed5e7p-926, 0x1.1209163a43d8ap-920},
		{0x1.aa9b30dd7b333p-927, 0x1.67acd56555624p-921},
		{0x1.17d9121b4ff43p-927, 0x1.d805487b20ec2p-922},
		{0x1.6f1bb0c9eff18p-928, 0x1.35b0e3e76f72ap-922},
		{0x1.e184bec96bcc5p-929, 0x1.965317fc3f8ebp-923},
		{0x1.3bc10ccdff1d7p-929, 0x1.0a85e11600392p-923},
		{0x1.9e0f0cdf83a76p-930, 0x1.5d99f4f4fa7a2p-924},
		{0x1.0f738d3253e75p-930, 0x1.ca8538b911cc2p-925},
		{0x1.63e056b37b486p-931, 0x1.2ca663e8f6c6ep-925},
		{0x1.d2806afda0512p-932, 0x1.8a38c763ae5p-926},
		{0x1.31b865207923bp-932, 0x1.026d30f31261ep-926},
		{0x1.90a81bef15367p-933, 0x1.52c63cbe5201dp-927},
		{0x1.068145905baddp-933, 0x1.bc0c903e2dd51p-928},
		{0x1.57f0081c7461bp-934, 0x1.22fbc7eb40c8ep-928},
		{0x1.c293abfeb81c1p-935, 0x1.7d5064d5d2e6ap-929},
		{0x1.271a9ed146425p-935, 0x1.f3a001a1da12ap-930},
		{0x1.8282015bfd093p-936, 0x1.474846e880b8p-930},
		{0x1.fa292d1f4b615p-937, 0x1.acb96019278e3p-931},
		{0x1.4b6323fa7fafcp-937, 0x1.18c50c637e437p-931},
		{0x1.b1ded81f6cf48p-938, 0x1.6fb47e7243b1p-932},
		{0x1.1bfd2aff12d23p-938, 0x1.e17fe4af1cdcdp-933},
		{0x1.73b9288cf980bp-939, 0x1.3b3779cd081bcp-933},
		{0x1.e680a6315c8f9p-940, 0x1.9caab20737c4bp-934},
		{0x1.3e52969a46a03p-940, 0x1.0e16c42489121p-934},
		{0x1.a082ea93d471fp-941, 0x1.618056ad2fa0dp-935},
		{0x1.1075d9566cab2p-941, 0x1.ce9e247afa7efp-936},
		{0x1.646a66f6fb197p-942, 0x1.2eabb9557e4c3p-936},
		{0x1.d22f0f82317a8p-943, 0x1.8c0020c90fd02p-937},
		{0x1.30d7883df3e07p-943, 0x1.0305d4157bdecp-937},
		{0x1.8ea1187daf8b3p-944, 0x1.52cf8a69cbdeep-938},
		{0x1.049a91d747c02p-944, 0x1.bb1f3a4ce848cp-939},
		{0x1.54b29ff375e83p-945, 0x1.21bd19407d3a8p-939},
		{0x1.bd5a7cbaf896dp-946, 0x1.7ad97206eb3e9p-940},
		{0x1.230b0dec754dap-946, 0x1.ef4e6059f1fe4p-941},
		{0x1.7c5a693980a4p-947, 0x1.43bdb9112e65bp-941},
		{0x1.f10221f87a1cap-948, 0x1.a7278c0b2c815p-942},
		{0x1.44ae6c097e3b8p-948, 0x1.148391a9b5b7p-942},
		{0x1.a8288818abb4p-949, 0x1.69563388e87eep-943},
	},
};

template <class T>
int calSpecialcaseRes(T jd){
  int nums = 0;
  for (unsigned i = 0; i < jd.size(); ++i){
    if(jd[i])
      nums++;
  }

  switch(nums){
    case 0: return 0;
    case jd.size(): return 2;
    default: return 1;
  }
}

template <class Abi> 
floatv<Abi> cbrt(floatv<Abi> x){
  floatv<Abi> xm, u, t2, ym, f, y;
  samesize<int, floatv<Abi>> xe;

  Abi_32suf<Abi> ujdx;
  ujdx.f = x;
  ujdx.u = ujdx.u & AbsMaskf;
  uintv<Abi> specialcase_res = 0;
  where((ujdx.u>=0x7f800000U) | (ujdx.u==0x0U), specialcase_res) = 1;
  int flag = calSpecialcaseRes(specialcase_res);

  if(flag < 2){
    xm = frexp(abs(x), &xe);
    u = (0.492659620528969547f + (0.697570460207922770f - 0.191502161678719066f * xm) * xm);
    t2 = u * u * u;
    for(unsigned int i = 0; i < xe.size(); ++i)
      f[i] = (float)(cbrt_factor[2 + xe[i] % 3]);
    ym = u * (t2 + 2.f * xm) / (2.f * t2 + xm) * f;
    where(x<=0, ym) = -ym;
    y = ldexp(ym, xe / 3);
  }

  if(flag > 0){
    where(static_simd_cast<floatv<Abi>>(specialcase_res)==1, y) = x;
  }

  return y;
}
template <class Abi> 
doublev<Abi> cbrt(doublev<Abi> x){
    doublev<Abi> xm, u, t2, ym, p, q, f, y;
    samesize<int, doublev<Abi>> xe;

    Abi_64suf<Abi> ujdx;
    ujdx.f = x;
    ujdx.u = ujdx.u & AbsMask;
    ulongv<Abi> specialcase_res = 0;
    where((ujdx.u>=0x7ff0000000000000UL) | (ujdx.u==0x0UL), specialcase_res) = 1;
    int flag = calSpecialcaseRes(specialcase_res);

    if(flag < 2){
      xm = frexp(abs(x), &xe);
      p = 0.784932344976639262 - 0.145263899385486377 * xm;
      q = -1.83469277483613086 + p * xm;
      p = 2.44693122563534430 + q * xm;
      q = -2.11499494167371287 + p * xm;
      p = 1.50819193781584896 + q * xm;
      u = 0.354895765043919860 + p * xm;
      t2 = u * u * u;
      for(unsigned int i = 0; i < xe.size(); ++i)
        f[i] = (cbrt_factor[2 + xe[i] % 3]);
      ym = u * (t2 + 2.0 * xm) / (2.0 * t2 + xm) * f;
      where(x<=0, ym) = -ym;
      y = ldexp(ym, xe / 3);
    }

    if(flag > 0){
      where(static_simd_cast<doublev<Abi>>(specialcase_res)==1, y) = x;
    }

    return y;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> cbrt(ldoublev<Abi> x){
  Abi_128suf<Abi> ux, uv;
  Abi_32suf<Abi> uft;
  ldoublev<Abi> r, s, t, w;
  doublev<Abi> dr, dt, dx;
  uintv<Abi> expsign;
  intv<Abi> k, tm;

  Abi_128suf<Abi> ujdx;
  ujdx.f = x;

  ujdx.u = ujdx.u & ~((__uint128_t)0x1<<127);
  uint128v<Abi> specialcase_res = 0;
  where((ujdx.u>=((__uint128_t)0x7fff<<112)) | (ujdx.u==(__uint128_t)0x0), specialcase_res) = 1;
  int flag = calSpecialcaseRes(specialcase_res);

  if(flag < 2){
    ux.f = x;
    expsign = static_simd_cast<uintv<Abi>>(ux.u >> 112);
    k = static_simd_cast<intv<Abi>>(expsign & 0x7fff);

    intv<Abi> k_cp = k;

    where(static_simd_cast<ldoublev<Abi>>(k_cp)==0, ux.f) = ux.f * 0x1.0p514L;
    where(k_cp==0, k) = (static_simd_cast<intv<Abi>>(ux.u>>112) & 0x7fff) - (LLVM_BIAS + 514);
    where(k_cp!=0, k) = k - LLVM_BIAS;

    ux.u = ux.u & ~((__uint128_t)(0xffff)<<112) | ((__uint128_t)(LLVM_BIAS)<<112);
    uv.f = 1;
    x = ux.f;

    tm = 1;
    where((k%3==-1) | (k%3==2), tm) = 2;
    where((static_simd_cast<ldoublev<Abi>>(k%3)!=0), x) = static_simd_cast<ldoublev<Abi>>(tm) * static_simd_cast<ldoublev<Abi>>(2 * x);
    where(k%3!=0, k) = k - tm;

    uv.u = (uv.u & ~((__uint128_t)(0xffff)<<112)) | (static_simd_cast<uint128v<Abi>>((expsign & 0x8000) | static_simd_cast<uintv<Abi>>(LLVM_BIAS + k / 3))<<112);
    uft.f = static_simd_cast<floatv<Abi>>(x);
    uft.u = (uft.u & 0x7fffffff) / 3 + 709958130U;

    dx = static_simd_cast<doublev<Abi>>(x);
    dt = static_simd_cast<doublev<Abi>>(uft.f);
    dr = dt * dt * dt;
    dt = dt * (dx + dx + dr) / (dx + dr + dr);
    dr = dt * dt * dt;
    dt = dt * (dx + dx + dr) / (dx + dr + dr);

    t = static_simd_cast<ldoublev<Abi>>(dt) + 0x2.0p-46L + 0x1.0p60L - 0x1.0p60L;
    s = t * t;             /* t*t is exact */
    r = x / s;             /* error <= 0.5 ulps; |r| < |t| */
    w = t + t;             /* t+t is exact */
    r = (r - t) / (w + r); /* r-t is exact; w+r ~= 3*t */
    t = t + t * r;         /* error <= 0.5 + 0.5/3 + epsilon */
    t *= uv.f;
  }

  if(flag > 0){
      where(static_simd_cast<ldoublev<Abi>>(specialcase_res)==1, t) = x;
  }

  return t;
}
#else
template <class Abi> ldoublev<Abi> cbrt(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = cbrt(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

template <class Abi> 
floatv<Abi> hypot(floatv<Abi> x, floatv<Abi> y){
  floatv<Abi> n(2);
  floatv<Abi> x1 = x * x;
  floatv<Abi> x2 = y * y;
  floatv<Abi> res = sqrt(x1 + x2);

  Abi_32suf<Abi> ux, uy;
  ux.f = x;
  uy.f = y;
  ux.u = ux.u & 0x7fffffff;
  uy.u = uy.u & 0x7fffffff;

  simd_mask<float, Abi> jd = change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0x00000000 || uy.u == 0x00000000);
  where(jd, res) = 0;

  jd = change_simd_mask_type<unsigned int, float, Abi>(ux.u > 0x7f800000 || uy.u > 0x7f800000);
  where(jd, res) = LLVM_NAN_32F;

  jd = change_simd_mask_type<unsigned int, float, Abi>(ux.u==0x7f800000 || uy.u==0x7f800000);
  where(jd, res) = LLVM_INF_32F;

  return res;
}
template <class Abi> 
doublev<Abi> hypot(doublev<Abi> x, doublev<Abi> y){
  doublev<Abi> n(2);
  doublev<Abi> x1 = x * x;
  doublev<Abi> x2 = y * y;
  doublev<Abi> res = sqrt(x1 + x2);

  Abi_64suf<Abi> ux, uy;
  ux.f = x;
  uy.f = y;
  ux.u = ux.u & 0x7fffffffffffffffUL;
  uy.u = uy.u & 0x7fffffffffffffffUL;

  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x0UL || uy.u == 0x0UL);
  where(jd, res) = 0;

  jd = change_simd_mask_type<unsigned long int, double, Abi>(ux.u > 0x7ff0000000000000UL || uy.u > 0x7ff0000000000000UL);
  where(jd, res) = LLVM_NAN_64F;

  jd = change_simd_mask_type<unsigned long int, double, Abi>(ux.u==0x7ff0000000000000UL || uy.u==0x7ff0000000000000UL);
  where(jd, res) = LLVM_INF_64F;

  return res;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y){
  Abi_128suf<Abi> ux, uy, uin;
  ldoublev<Abi> a, b, t1, t2, yy1, y2, w, wt, retv;
  ulongv<Abi> j, k, ha, hb, low, hat, hbt, ut;

  ux.f = x;
  uy.f = y;
  __uint128_t AbsMask_128 = ~((__uint128_t)0x1<<127);
  ux.u &= AbsMask_128;
  uy.u &= AbsMask_128;
  ha = GET_LONGDOUBLE_HI(ux.u);
  hb = GET_LONGDOUBLE_HI(uy.u);
  a = x;
  b = y;

  simd_mask<long double, Abi> jd, jdt, jdtt, jdr1, jdr2, jdr3;

  j = ha;

  where(hb > ha, ha) = hb;
  where(hb > ha, hb) = j;
  jd = change_simd_mask_type<unsigned long int, long double, Abi>(hb > ha);
  where(jd, a) = y;
  where(jd, b) = x;

  jd = change_simd_mask_type<unsigned long int, long double, Abi>((ha - hb) > 0x78000000000000UL);
  jdr1 = jd;
  where(jdr1, retv) = a + b;


  jd = change_simd_mask_type<uint64_t, long double, Abi>(ha > 0x5f3f000000000000UL);
  jdt = change_simd_mask_type<uint64_t, long double, Abi>(ha >= 0x7fff000000000000UL);
  jdr2 = jd && jdt;
  wt = a + b;
  k = 0;

  uin.f = a;
  low = GET_LONGDOUBLE_LO(uin.u);
  jdtt = change_simd_mask_type<uint64_t, long double, Abi>(((ha & 0xffffffffffffUL) | low) == 0);
  where(jd && jdt && jdtt, wt) = a;
  uin.f = b;
  low = GET_LONGDOUBLE_LO(uin.u);
  jdtt = change_simd_mask_type<uint64_t, long double, Abi>(((hb ^ 0x7fff000000000000UL) | low) == 0);
  where(jd && jdt && jdtt, wt) = b;
  where(jdr2, retv) = wt;

  hat = ha - 0x2580000000000000UL;
  hbt = hb - 0x2580000000000000UL;
  where((ha > 0x5f3f000000000000UL) && !(ha >= 0x7fff000000000000UL), k) = k + 9600;
  where(jd && !jdt, a) = SET_LONGDOUBLE_HI(a, hat);
  where(jd && !jdt, b) = SET_LONGDOUBLE_HI(b, hbt);

  jd = change_simd_mask_type<uint64_t, long double, Abi>(hb < 0x20bf000000000000UL);
  jdt = change_simd_mask_type<uint64_t, long double, Abi>(hb <= 0x0000ffffffffffffUL);
  jdtt = change_simd_mask_type<uint64_t, long double, Abi>((hb | low) == 0);
  jdr3 = jd && jdt & jdtt;
  where(jdr3, retv) = a;

  t1 = 0.0L;
  ut = 0x7ffd000000000000UL;
  t1 = SET_LONGDOUBLE_HI(t1, ut);
  where(jd && jdt, b) = b * t1;
  where(jd && jdt, a) = a * t1;
  where((hb < 0x20bf000000000000UL) && (hb <= 0x0000ffffffffffffUL), k) = k - 16382;

  where((hb < 0x20bf000000000000UL) && !(hb <= 0x0000ffffffffffffUL), ha) = ha + 0x2580000000000000UL;
  where((hb < 0x20bf000000000000UL) && !(hb <= 0x0000ffffffffffffUL), hb) = hb + 0x2580000000000000UL;
  where((hb < 0x20bf000000000000UL) && !(hb <= 0x0000ffffffffffffUL), k) = k - 9600;
  where(jd && !jdt, a) = SET_LONGDOUBLE_HI(a, ha);
  where(jd && !jdt, b) = SET_LONGDOUBLE_HI(b, hb);

  wt = a - b;
  jd = wt > b;
  t1 = 0.0L;
  t1 = SET_LONGDOUBLE_HI(t1, ha);
  t2 = a - t1;
  where(jd, w) = sqrt(t1 * t1 - (b * (-b) - t2 * (a + t1)));

  where(!jd, a) = a + a;
  yy1 = 0.0L;
  yy1 = SET_LONGDOUBLE_HI(yy1, hb);
  y2 = b - yy1;
  t1 = 0.0L;
  t1 = SET_LONGDOUBLE_HI(t1, ha + 0x0001000000000000UL);
  t2 = a - t1;
  where(!jd, w) = sqrt(t1 * yy1 - (wt * (-wt) - (t1 * y2 + t2 * b)));

  jd = static_simd_cast<ldoublev<Abi>>(k) != 0;
  jdt = !(jdr1 | jdr2 | jdr3);
  t1 = 1.0L;
  uin.f = t1;
  t1 = SET_LONGDOUBLE_HI(t1, GET_LONGDOUBLE_HI(uin.u) + (k<<48));
  where(jd & jdt, retv) = t1 * w;
  where(!jd & jdt, retv) = w;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = hypot(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif



template <class Abi> floatv<Abi> sqr(floatv<Abi> x){
  return x * x;
}

template <class Abi> floatv<Abi> erf(floatv<Abi> x){
  Abi_32suf<Abi> ux, uz, utmp;
  floatv<Abi> r, erfr, scale, d, d2, y;
  uintv<Abi> sign, k;
  ux.f = x;
  sign = ux.u & ~0x7fffffff;
  ux.u = ux.u & 0x7fffffff;

  simd_mask<float, Abi> jd1 = change_simd_mask_type<unsigned int, float, Abi>(ux.u < 0x20800000);
  simd_mask<float, Abi> jd2 = change_simd_mask_type<unsigned int, float, Abi>(ux.u < 0x407b8000);
  simd_mask<float, Abi> jd3 = change_simd_mask_type<unsigned int, float, Abi>(ux.u >= 0x7f800000);

  where(jd1, y) = 0x1.06eba8p-3f * x - x;

  utmp.f = 0x1p16f;
  uz.f = ux.f + utmp.f;
  k = uz.u - utmp.u;
  r = uz.f - utmp.f;
  if(any_of(jd2)){
    for (unsigned i = 0; i < erfr.size(); ++i){
      if(jd2[i]){
        int idx = k[i];
        erfr[i] = __erff_data.tab[idx].erf;
        scale[i] = __erff_data.tab[idx].scale;
      }
    }
  }
  d = ux.f - r;
  d2 = d * d;

  utmp.f = 0x1.555556p-2f * d + r;
  utmp.f = -utmp.f * d2 + d;
  utmp.f = utmp.f * scale + erfr;
  utmp.u = utmp.u | sign;
  where(jd2, y) = utmp.f;

  where(jd3, y) = (1.0f - static_simd_cast<floatv<Abi>>(sign >> 30)) + 1.0f / x;

  utmp.f = 1.f;
  utmp.u = utmp.u | sign;
  where(!(jd1|jd2|jd3), y) = utmp.f;

  return y;
}

#define TwoOverSqrtPiMinusOne 0x1.06eba8214db69p-3

#define OneThird 0x1.5555555555555p-2
#define TwoThird 0x1.5555555555555p-1

#define TwoOverFifteen 0x1.1111111111111p-3
#define TwoOverFive 0x1.999999999999ap-2
#define Tenth 0x1.999999999999ap-4

#define TwoOverNine 0x1.c71c71c71c71cp-3
#define TwoOverFortyFive 0x1.6c16c16c16c17p-5
#define Sixth 0x1.555555555555p-3
template <class Abi> doublev<Abi> erf(doublev<Abi> x){
    Abi_64suf<Abi> ux, uz, utmp;
    doublev<Abi> r, r2, erfr, scale, d, d2, y, p1, p2, p3, p4, p5, p12, p34;
    ulongv<Abi> sign, k;
    ux.f = x;
    sign = ux.u & ~AbsMask;
    ux.u = ux.u & AbsMask;

    int n = x.size();

    bool btmp[n];
    auto tmp_jd = ux.u < 0x2030000000000000UL;
    tmp_jd.copy_to(&btmp[0], element_aligned);
    simd_mask<double, Abi> jd1(&btmp[0], element_aligned);

    tmp_jd = ux.u < 0x4017f80000000000UL;
    tmp_jd.copy_to(&btmp[0], element_aligned);
    simd_mask<double, Abi> jd2(&btmp[0], element_aligned);

    tmp_jd = ux.u >= 0x7ff0000000000000UL;
    tmp_jd.copy_to(&btmp[0], element_aligned);
    simd_mask<double, Abi> jd3(&btmp[0], element_aligned);

    where(jd1, y) = 0x1.06eba8214db69p-3 * x - x;

    uz.f = ux.f + 0x1p45;
    utmp.f = 0x1p45;
    k = uz.u - utmp.u;
    r = uz.f - 0x1p45;
    for (unsigned i = 0; i < erfr.size(); ++i){
      int idx = k[i];
      erfr[i] = __erf_data.tab[idx].erf;
      scale[i] = __erf_data.tab[idx].scale;
    }
    d = ux.f - r;
    r2 = r * r;
    d2 = d * d;

    p1 = -r;
    p2 = TwoThird * r2 - OneThird;
    p3 = -r * (OneThird * r2 - 0.5);
    p4 = TwoOverFifteen * r2 - TwoOverFive;
    p4 = p4 * r2 + Tenth;
    p5 = TwoOverFortyFive * r2 - TwoOverNine;
    p5 = -r * (p5 * r2 + Sixth);
    p34 = p4 * d + p3;
    p12 = p2 * d + p1;
    utmp.f = p5 * d2 + p34;
    utmp.f = utmp.f * d2 + p12;
    utmp.f = utmp.f * d2 + d;
    utmp.f = utmp.f * scale + erfr;
    utmp.u = utmp.u | sign;
    where(jd2, y) = utmp.f;

    where(jd3, y) = (1.0 - static_simd_cast<doublev<Abi>>(sign >> 62)) + 1.0 / x;

    utmp.f = 1.0;
    utmp.u = utmp.u | sign;
    where(!(jd1|jd2|jd3), y) = utmp.f;

    return y;
}

template <class Abi> 
uint128v<Abi> get_ldoublev_u32s_p0(uint128v<Abi> u){
  return (u >> 96);
}

template <class Abi> 
Abi_128suf<Abi> set_ldoublev_u32s_p0(Abi_128suf<Abi> &ux, uint128v<Abi> p0){
  ux.u = (ux.u & ~((__uint128_t)0xffffffff << 96)) | (p0 << 92);
  return ux;
}

template <class Abi> 
uint128v<Abi> get_ldoublev_u32s_p1(uint128v<Abi> u){
  return (u >> 64) & (__uint128_t)0xffffffff;
}

template <class Abi> 
Abi_128suf<Abi> set_ldoublev_u32s_p1(Abi_128suf<Abi> &ux, uint128v<Abi> p1){
  ux.u = (ux.u & ~((__uint128_t)0xffffffff << 64)) | (p1 << 64);
  return ux;
}

template <class Abi> 
uint128v<Abi> get_ldoublev_u32s_p2(uint128v<Abi> u){
  return (u >> 32) & (__uint128_t)0xffffffff;
}

template <class Abi> 
Abi_128suf<Abi> set_ldoublev_u32s_p2(Abi_128suf<Abi> &ux, uint128v<Abi> p2){
  ux.u = (ux.u & ~((__uint128_t)0xffffffff << 32)) | (p2 << 32);
  return ux;
}

template <class Abi> 
uint128v<Abi> get_ldoublev_u32s_p3(uint128v<Abi> u){
  return u & (__uint128_t)0xffffffff;
}

template <class Abi> 
Abi_128suf<Abi> set_ldoublev_u32s_p3(Abi_128suf<Abi> &ux, uint128v<Abi> p3){
  ux.u = (ux.u & ~(__uint128_t)0xffffffff) | p3;
  return ux;
}

template <class Abi> 
ldoublev<Abi> neval_simd(ldoublev<Abi> x, const long double *p, int n)
{
  ldoublev<Abi> y;
  p += n;
  y = *p--;
  do
  {
      y = y * x + *p--;
  } while (--n > 0);
  return y;
}

template <class Abi> 
ldoublev<Abi> deval_simd(ldoublev<Abi> x, const long double *p, int n)
{
  ldoublev<Abi> y;

  p += n;
  y = x + *p--;
  do
  {
      y = y * x + *p--;
  } while (--n > 0);
  return y;
}

#define SQRTPI 0.9189385332046727417803297
#define PI 3.1415926535897932384626434

#define PNT68 0.6796875
#define D1 -0.5772156649015328605195174
#define D2 0.4227843350984671393993777
#define D4 1.791759469228055000094023

#define Shifter_imf64   0x1.8p46                                // 0x42d8000000000000
#define InvPi_imf64     0.318309886183790691216444201928        // 0x3fd45f306dc9c883
#define Pi1_imf64       3.141592653589793115997963468544        // 0x400921fb54442d18
#define Pi2_imf64       0.000000000000000122464679881843        // 0x3ca1a62633000000
#define Pi3_imf64       0.000000000000000000000000032893        // 0x3aa45c06e0e68948
#define c1_s1           -0.166666666666666518636930049979       // 0xbfc5555555555550
#define c1_s2           -0.499999999999998667732370449812       // 0xbfdfffffffffffe8
#define c2_s2           0.008333333332083355665664825551        // 0x3f8111111106125e
#define c2_s3           0.041666666655416899345265591137        // 0x3fa55555553c9847
#define c3_s3           -0.000198409378372439232840127032       // 0xbf2a018395291dbb
#define c3_s4           -0.001388859008578828069593869010       // 0xbf56c14c01518711

static const double lgamma_p1[8] = {
    4.945235359296727046734888e0, 2.018112620856775083915565e2,
    2.290838373831346393026739e3, 1.131967205903380828685045e4,
    2.855724635671635335736389e4, 3.848496228443793359990269e4,
    2.637748787624195437963534e4, 7.225813979700288197698961e3};
static const double lgamma_q1[8] = {
    6.748212550303777196073036e1, 1.113332393857199323513008e3,
    7.738757056935398733233834e3, 2.763987074403340708898585e4,
    5.499310206226157329794414e4, 6.161122180066002127833352e4,
    3.635127591501940507276287e4, 8.785536302431013170870835e3};
static const double lgamma_p2[8] = {
    4.974607845568932035012064e0, 5.424138599891070494101986e2,
    1.550693864978364947665077e4, 1.847932904445632425417223e5,
    1.088204769468828767498470e6, 3.338152967987029735917223e6,
    5.106661678927352456275255e6, 3.074109054850539556250927e6};
static const double lgamma_q2[8] = {
    1.830328399370592604055942e2, 7.765049321445005871323047e3,
    1.331903827966074194402448e5, 1.136705821321969608938755e6,
    5.267964117437946917577538e6, 1.346701454311101692290052e7,
    1.782736530353274213975932e7, 9.533095591844353613395747e6};
static const double lgamma_p4[8] = {
    1.474502166059939948905062e4, 2.426813369486704502836312e6,
    1.214755574045093227939592e8, 2.663432449630976949898078e9,
    2.940378956634553899906876e10, 1.702665737765398868392998e11,
    4.926125793377430887588120e11, 5.606251856223951465078242e11};
static const double lgamma_q4[8] = {
    2.690530175870899333379843e3, 6.393885654300092398984238e5,
    4.135599930241388052042842e7, 1.120872109616147941376570e9,
    1.488613728678813811542398e10, 1.016803586272438228077304e11,
    3.417476345507377132798597e11, 4.463158187419713286462081e11};
static const double lgamma_c[7] = {
    -1.910444077728e-03, 8.4171387781295e-04,
    -5.952379913043012e-04, 7.93650793500350248e-04,
    -2.777777777777681622553e-03, 8.333333333333333331554247e-02,
    5.7083835261e-03};


/* erf special value */

/* erf(x)  = x  + x R(x^2)
   0 <= x <= 7/8
   Peak relative error 1.8e-35  */
#define NTN1 8
static const long double erf_TN1[NTN1 + 1] =
	{
		-3.858252324254637124543172907442106422373E10L,
		9.580319248590464682316366876952214879858E10L,
		1.302170519734879977595901236693040544854E10L,
		2.922956950426397417800321486727032845006E9L,
		1.764317520783319397868923218385468729799E8L,
		1.573436014601118630105796794840834145120E7L,
		4.028077380105721388745632295157816229289E5L,
		1.644056806467289066852135096352853491530E4L,
		3.390868480059991640235675479463287886081E1L};
#define NTD1 8
static const long double erf_TD1[NTD1 + 1] =
	{
		-3.005357030696532927149885530689529032152E11L,
		-1.342602283126282827411658673839982164042E11L,
		-2.777153893355340961288511024443668743399E10L,
		-3.483826391033531996955620074072768276974E9L,
		-2.906321047071299585682722511260895227921E8L,
		-1.653347985722154162439387878512427542691E7L,
		-6.245520581562848778466500301865173123136E5L,
		-1.402124304177498828590239373389110545142E4L,
		-1.209368072473510674493129989468348633579E2L
		/* 1.0E0 */
};

/* erf(z+1)  = erf_const + P(z)/Q(z)
   -.125 <= z <= 0
   Peak relative error 7.3e-36  */
#define NTN2 8
static const long double erf_TN2[NTN2 + 1] =
	{
		-4.088889697077485301010486931817357000235E1L,
		7.157046430681808553842307502826960051036E3L,
		-2.191561912574409865550015485451373731780E3L,
		2.180174916555316874988981177654057337219E3L,
		2.848578658049670668231333682379720943455E2L,
		1.630362490952512836762810462174798925274E2L,
		6.317712353961866974143739396865293596895E0L,
		2.450441034183492434655586496522857578066E1L,
		5.127662277706787664956025545897050896203E-1L};
#define NTD2 8
static const long double erf_TD2[NTD2 + 1] =
	{
		1.731026445926834008273768924015161048885E4L,
		1.209682239007990370796112604286048173750E4L,
		1.160950290217993641320602282462976163857E4L,
		5.394294645127126577825507169061355698157E3L,
		2.791239340533632669442158497532521776093E3L,
		8.989365571337319032943005387378993827684E2L,
		2.974016493766349409725385710897298069677E2L,
		6.148192754590376378740261072533527271947E1L,
		1.178502892490738445655468927408440847480E1L
		/* 1.0E0 */
};

#define NRNr13 8
static const long double erfc_RNr13[NRNr13 + 1] =
	{
		-2.353707097641280550282633036456457014829E3L,
		3.871159656228743599994116143079870279866E2L,
		-3.888105134258266192210485617504098426679E2L,
		-2.129998539120061668038806696199343094971E1L,
		-8.125462263594034672468446317145384108734E1L,
		8.151549093983505810118308635926270319660E0L,
		-5.033362032729207310462422357772568553670E0L,
		-4.253956621135136090295893547735851168471E-2L,
		-8.098602878463854789780108161581050357814E-2L};
#define NRDr13 7
static const long double erfc_RDr13[NRDr13 + 1] =
	{
		2.220448796306693503549505450626652881752E3L,
		1.899133258779578688791041599040951431383E2L,
		1.061906712284961110196427571557149268454E3L,
		7.497086072306967965180978101974566760042E1L,
		2.146796115662672795876463568170441327274E2L,
		1.120156008362573736664338015952284925592E1L,
		2.211014952075052616409845051695042741074E1L,
		6.469655675326150785692908453094054988938E-1L
		/* 1.0E0 */
};

#define NRNr14 8
static const long double erfc_RNr14[NRNr14 + 1] =
	{
		-2.446164016404426277577283038988918202456E3L,
		6.718753324496563913392217011618096698140E2L,
		-4.581631138049836157425391886957389240794E2L,
		-2.382844088987092233033215402335026078208E1L,
		-7.119237852400600507927038680970936336458E1L,
		1.313609646108420136332418282286454287146E1L,
		-6.188608702082264389155862490056401365834E0L,
		-2.787116601106678287277373011101132659279E-2L,
		-2.230395570574153963203348263549700967918E-2L};
#define NRDr14 7
static const long double erfc_RDr14[NRDr14 + 1] =
	{
		2.495187439241869732696223349840963702875E3L,
		2.503549449872925580011284635695738412162E2L,
		1.159033560988895481698051531263861842461E3L,
		9.493751466542304491261487998684383688622E1L,
		2.276214929562354328261422263078480321204E2L,
		1.367697521219069280358984081407807931847E1L,
		2.276988395995528495055594829206582732682E1L,
		7.647745753648996559837591812375456641163E-1L
		/* 1.0E0 */
};

#define NRNr15 8
static const long double erfc_RNr15[NRNr15 + 1] =
	{
		-2.624212418011181487924855581955853461925E3L,
		8.473828904647825181073831556439301342756E2L,
		-5.286207458628380765099405359607331669027E2L,
		-3.895781234155315729088407259045269652318E1L,
		-6.200857908065163618041240848728398496256E1L,
		1.469324610346924001393137895116129204737E1L,
		-6.961356525370658572800674953305625578903E0L,
		5.145724386641163809595512876629030548495E-3L,
		1.990253655948179713415957791776180406812E-2L};
#define NRDr15 7
static const long double erfc_RDr15[NRDr15 + 1] =
	{
		2.986190760847974943034021764693341524962E3L,
		5.288262758961073066335410218650047725985E2L,
		1.363649178071006978355113026427856008978E3L,
		1.921707975649915894241864988942255320833E2L,
		2.588651100651029023069013885900085533226E2L,
		2.628752920321455606558942309396855629459E1L,
		2.455649035885114308978333741080991380610E1L,
		1.378826653595128464383127836412100939126E0L
		/* 1.0E0 */
};

#define NRNr16 8
static const long double erfc_RNr16[NRNr16 + 1] =
	{
		-2.347887943200680563784690094002722906820E3L,
		8.008590660692105004780722726421020136482E2L,
		-5.257363310384119728760181252132311447963E2L,
		-4.471737717857801230450290232600243795637E1L,
		-4.849540386452573306708795324759300320304E1L,
		1.140885264677134679275986782978655952843E1L,
		-6.731591085460269447926746876983786152300E0L,
		1.370831653033047440345050025876085121231E-1L,
		2.022958279982138755020825717073966576670E-2L,
};
#define NRDr16 7
static const long double erfc_RDr16[NRDr16 + 1] =
	{
		3.075166170024837215399323264868308087281E3L,
		8.730468942160798031608053127270430036627E2L,
		1.458472799166340479742581949088453244767E3L,
		3.230423687568019709453130785873540386217E2L,
		2.804009872719893612081109617983169474655E2L,
		4.465334221323222943418085830026979293091E1L,
		2.612723259683205928103787842214809134746E1L,
		2.341526751185244109722204018543276124997E0L,
		/* 1.0E0 */
};

#define NRNr17 8
static const long double erfc_RNr17[NRNr17 + 1] =
	{
		-1.767068734220277728233364375724380366826E3L,
		6.693746645665242832426891888805363898707E2L,
		-4.746224241837275958126060307406616817753E2L,
		-2.274160637728782675145666064841883803196E1L,
		-3.541232266140939050094370552538987982637E1L,
		6.988950514747052676394491563585179503865E0L,
		-5.807687216836540830881352383529281215100E0L,
		3.631915988567346438830283503729569443642E-1L,
		-1.488945487149634820537348176770282391202E-2L};
#define NRDr17 7
static const long double erfc_RDr17[NRDr17 + 1] =
	{
		2.748457523498150741964464942246913394647E3L,
		1.020213390713477686776037331757871252652E3L,
		1.388857635935432621972601695296561952738E3L,
		3.903363681143817750895999579637315491087E2L,
		2.784568344378139499217928969529219886578E2L,
		5.555800830216764702779238020065345401144E1L,
		2.646215470959050279430447295801291168941E1L,
		2.984905282103517497081766758550112011265E0L,
		/* 1.0E0 */
};

#define NRNr18 8
static const long double erfc_RNr18[NRNr18 + 1] =
	{
		-1.342044899087593397419622771847219619588E3L,
		6.127221294229172997509252330961641850598E2L,
		-4.519821356522291185621206350470820610727E2L,
		1.223275177825128732497510264197915160235E1L,
		-2.730789571382971355625020710543532867692E1L,
		4.045181204921538886880171727755445395862E0L,
		-4.925146477876592723401384464691452700539E0L,
		5.933878036611279244654299924101068088582E-1L,
		-5.557645435858916025452563379795159124753E-2L};
#define NRDr18 7
static const long double erfc_RDr18[NRDr18 + 1] =
	{
		2.557518000661700588758505116291983092951E3L,
		1.070171433382888994954602511991940418588E3L,
		1.344842834423493081054489613250688918709E3L,
		4.161144478449381901208660598266288188426E2L,
		2.763670252219855198052378138756906980422E2L,
		5.998153487868943708236273854747564557632E1L,
		2.657695108438628847733050476209037025318E1L,
		3.252140524394421868923289114410336976512E0L,
		/* 1.0E0 */
};

#define NRNr19 8
static const long double erfc_RNr19[NRNr19 + 1] =
	{
		-1.139180936454157193495882956565663294826E3L,
		6.134903129086899737514712477207945973616E2L,
		-4.628909024715329562325555164720732868263E2L,
		4.165702387210732352564932347500364010833E1L,
		-2.286979913515229747204101330405771801610E1L,
		1.870695256449872743066783202326943667722E0L,
		-4.177486601273105752879868187237000032364E0L,
		7.533980372789646140112424811291782526263E-1L,
		-8.629945436917752003058064731308767664446E-2L};
#define NRDr19 7
static const long double erfc_RDr19[NRDr19 + 1] =
	{
		2.744303447981132701432716278363418643778E3L,
		1.266396359526187065222528050591302171471E3L,
		1.466739461422073351497972255511919814273E3L,
		4.868710570759693955597496520298058147162E2L,
		2.993694301559756046478189634131722579643E2L,
		6.868976819510254139741559102693828237440E1L,
		2.801505816247677193480190483913753613630E1L,
		3.604439909194350263552750347742663954481E0L,
		/* 1.0E0 */
};

#define NRNr20 8
static const long double erfc_RNr20[NRNr20 + 1] =
	{
		-9.652706916457973956366721379612508047640E2L,
		5.577066396050932776683469951773643880634E2L,
		-4.406335508848496713572223098693575485978E2L,
		5.202893466490242733570232680736966655434E1L,
		-1.931311847665757913322495948705563937159E1L,
		-9.364318268748287664267341457164918090611E-2L,
		-3.306390351286352764891355375882586201069E0L,
		7.573806045289044647727613003096916516475E-1L,
		-9.611744011489092894027478899545635991213E-2L};
#define NRDr20 7
static const long double erfc_RDr20[NRDr20 + 1] =
	{
		3.032829629520142564106649167182428189014E3L,
		1.659648470721967719961167083684972196891E3L,
		1.703545128657284619402511356932569292535E3L,
		6.393465677731598872500200253155257708763E2L,
		3.489131397281030947405287112726059221934E2L,
		8.848641738570783406484348434387611713070E1L,
		3.132269062552392974833215844236160958502E1L,
		4.430131663290563523933419966185230513168E0L
		/* 1.0E0 */
};

#define NRNr8 9
static const long double erfc_RNr8[NRNr8 + 1] =
	{
		3.587451489255356250759834295199296936784E1L,
		5.406249749087340431871378009874875889602E2L,
		2.931301290625250886238822286506381194157E3L,
		7.359254185241795584113047248898753470923E3L,
		9.201031849810636104112101947312492532314E3L,
		5.749697096193191467751650366613289284777E3L,
		1.710415234419860825710780802678697889231E3L,
		2.150753982543378580859546706243022719599E2L,
		8.740953582272147335100537849981160931197E0L,
		4.876422978828717219629814794707963640913E-2L};
#define NRDr8 8
static const long double erfc_RDr8[NRDr8 + 1] =
	{
		6.358593134096908350929496535931630140282E1L,
		9.900253816552450073757174323424051765523E2L,
		5.642928777856801020545245437089490805186E3L,
		1.524195375199570868195152698617273739609E4L,
		2.113829644500006749947332935305800887345E4L,
		1.526438562626465706267943737310282977138E4L,
		5.561370922149241457131421914140039411782E3L,
		9.394035530179705051609070428036834496942E2L,
		6.147019596150394577984175188032707343615E1L
		/* 1.0E0 */
};

#define NRNr7 9
static const long double erfc_RNr7[NRNr7 + 1] =
	{
		1.686222193385987690785945787708644476545E1L,
		1.178224543567604215602418571310612066594E3L,
		1.764550584290149466653899886088166091093E4L,
		1.073758321890334822002849369898232811561E5L,
		3.132840749205943137619839114451290324371E5L,
		4.607864939974100224615527007793867585915E5L,
		3.389781820105852303125270837910972384510E5L,
		1.174042187110565202875011358512564753399E5L,
		1.660013606011167144046604892622504338313E4L,
		6.700393957480661937695573729183733234400E2L};
#define NRDr7 9
static const long double erfc_RDr7[NRDr7 + 1] =
	{
		-1.709305024718358874701575813642933561169E3L,
		-3.280033887481333199580464617020514788369E4L,
		-2.345284228022521885093072363418750835214E5L,
		-8.086758123097763971926711729242327554917E5L,
		-1.456900414510108718402423999575992450138E6L,
		-1.391654264881255068392389037292702041855E6L,
		-6.842360801869939983674527468509852583855E5L,
		-1.597430214446573566179675395199807533371E5L,
		-1.488876130609876681421645314851760773480E4L,
		-3.511762950935060301403599443436465645703E2L
		/* 1.0E0 */
};

#define NRNr6 9
static const long double erfc_RNr6[NRNr6 + 1] =
	{
		1.642076876176834390623842732352935761108E0L,
		1.207150003611117689000664385596211076662E2L,
		2.119260779316389904742873816462800103939E3L,
		1.562942227734663441801452930916044224174E4L,
		5.656779189549710079988084081145693580479E4L,
		1.052166241021481691922831746350942786299E5L,
		9.949798524786000595621602790068349165758E4L,
		4.491790734080265043407035220188849562856E4L,
		8.377074098301530326270432059434791287601E3L,
		4.506934806567986810091824791963991057083E2L};
#define NRDr6 9
static const long double erfc_RDr6[NRDr6 + 1] =
	{
		-1.664557643928263091879301304019826629067E2L,
		-3.800035902507656624590531122291160668452E3L,
		-3.277028191591734928360050685359277076056E4L,
		-1.381359471502885446400589109566587443987E5L,
		-3.082204287382581873532528989283748656546E5L,
		-3.691071488256738343008271448234631037095E5L,
		-2.300482443038349815750714219117566715043E5L,
		-6.873955300927636236692803579555752171530E4L,
		-8.262158817978334142081581542749986845399E3L,
		-2.517122254384430859629423488157361983661E2L
		/* 1.00 */
};

#define NRNr5 10
static const long double erfc_RNr5[NRNr5 + 1] =
	{
		-3.332258927455285458355550878136506961608E-3L,
		-2.697100758900280402659586595884478660721E-1L,
		-6.083328551139621521416618424949137195536E0L,
		-6.119863528983308012970821226810162441263E1L,
		-3.176535282475593173248810678636522589861E2L,
		-8.933395175080560925809992467187963260693E2L,
		-1.360019508488475978060917477620199499560E3L,
		-1.075075579828188621541398761300910213280E3L,
		-4.017346561586014822824459436695197089916E2L,
		-5.857581368145266249509589726077645791341E1L,
		-2.077715925587834606379119585995758954399E0L};
#define NRDr5 9
static const long double erfc_RDr5[NRDr5 + 1] =
	{
		3.377879570417399341550710467744693125385E-1L,
		1.021963322742390735430008860602594456187E1L,
		1.200847646592942095192766255154827011939E2L,
		7.118915528142927104078182863387116942836E2L,
		2.318159380062066469386544552429625026238E3L,
		4.238729853534009221025582008928765281620E3L,
		4.279114907284825886266493994833515580782E3L,
		2.257277186663261531053293222591851737504E3L,
		5.570475501285054293371908382916063822957E2L,
		5.142189243856288981145786492585432443560E1L
		/* 1.0E0 */
};

#define NRNr4 10
static const long double erfc_RNr4[NRNr4 + 1] =
	{
		3.258530712024527835089319075288494524465E-3L,
		2.987056016877277929720231688689431056567E-1L,
		8.738729089340199750734409156830371528862E0L,
		1.207211160148647782396337792426311125923E2L,
		8.997558632489032902250523945248208224445E2L,
		3.798025197699757225978410230530640879762E3L,
		9.113203668683080975637043118209210146846E3L,
		1.203285891339933238608683715194034900149E4L,
		8.100647057919140328536743641735339740855E3L,
		2.383888249907144945837976899822927411769E3L,
		2.127493573166454249221983582495245662319E2L};
#define NRDr4 10
static const long double erfc_RDr4[NRDr4 + 1] =
	{
		-3.303141981514540274165450687270180479586E-1L,
		-1.353768629363605300707949368917687066724E1L,
		-2.206127630303621521950193783894598987033E2L,
		-1.861800338758066696514480386180875607204E3L,
		-8.889048775872605708249140016201753255599E3L,
		-2.465888106627948210478692168261494857089E4L,
		-3.934642211710774494879042116768390014289E4L,
		-3.455077258242252974937480623730228841003E4L,
		-1.524083977439690284820586063729912653196E4L,
		-2.810541887397984804237552337349093953857E3L,
		-1.343929553541159933824901621702567066156E2L
		/* 1.0E0 */
};

#define NRNr3 11
static const long double erfc_RNr3[NRNr3 + 1] =
	{
		-1.952401126551202208698629992497306292987E-6L,
		-2.130881743066372952515162564941682716125E-4L,
		-8.376493958090190943737529486107282224387E-3L,
		-1.650592646560987700661598877522831234791E-1L,
		-1.839290818933317338111364667708678163199E0L,
		-1.216278715570882422410442318517814388470E1L,
		-4.818759344462360427612133632533779091386E1L,
		-1.120994661297476876804405329172164436784E2L,
		-1.452850765662319264191141091859300126931E2L,
		-9.485207851128957108648038238656777241333E1L,
		-2.563663855025796641216191848818620020073E1L,
		-1.787995944187565676837847610706317833247E0L};
#define NRDr3 10
static const long double erfc_RDr3[NRDr3 + 1] =
	{
		1.979130686770349481460559711878399476903E-4L,
		1.156941716128488266238105813374635099057E-2L,
		2.752657634309886336431266395637285974292E-1L,
		3.482245457248318787349778336603569327521E0L,
		2.569347069372696358578399521203959253162E1L,
		1.142279000180457419740314694631879921561E2L,
		3.056503977190564294341422623108332700840E2L,
		4.780844020923794821656358157128719184422E2L,
		4.105972727212554277496256802312730410518E2L,
		1.724072188063746970865027817017067646246E2L,
		2.815939183464818198705278118326590370435E1L
		/* 1.0E0 */
};

#define NRNr2 11
static const long double erfc_RNr2[NRNr2 + 1] =
	{
		-2.638914383420287212401687401284326363787E-8L,
		-3.479198370260633977258201271399116766619E-6L,
		-1.783985295335697686382487087502222519983E-4L,
		-4.777876933122576014266349277217559356276E-3L,
		-7.450634738987325004070761301045014986520E-2L,
		-7.068318854874733315971973707247467326619E-1L,
		-4.113919921935944795764071670806867038732E0L,
		-1.440447573226906222417767283691888875082E1L,
		-2.883484031530718428417168042141288943905E1L,
		-2.990886974328476387277797361464279931446E1L,
		-1.325283914915104866248279787536128997331E1L,
		-1.572436106228070195510230310658206154374E0L};
#define NRDr2 10
static const long double erfc_RDr2[NRDr2 + 1] =
	{
		2.675042728136731923554119302571867799673E-6L,
		2.170997868451812708585443282998329996268E-4L,
		7.249969752687540289422684951196241427445E-3L,
		1.302040375859768674620410563307838448508E-1L,
		1.380202483082910888897654537144485285549E0L,
		8.926594113174165352623847870299170069350E0L,
		3.521089584782616472372909095331572607185E1L,
		8.233547427533181375185259050330809105570E1L,
		1.072971579885803033079469639073292840135E2L,
		6.943803113337964469736022094105143158033E1L,
		1.775695341031607738233608307835017282662E1L
		/* 1.0E0 */
};

#define NRNr1 9
static const long double erfc_RNr1[NRNr1 + 1] =
	{
		-4.250780883202361946697751475473042685782E-8L,
		-5.375777053288612282487696975623206383019E-6L,
		-2.573645949220896816208565944117382460452E-4L,
		-6.199032928113542080263152610799113086319E-3L,
		-8.262721198693404060380104048479916247786E-2L,
		-6.242615227257324746371284637695778043982E-1L,
		-2.609874739199595400225113299437099626386E0L,
		-5.581967563336676737146358534602770006970E0L,
		-5.124398923356022609707490956634280573882E0L,
		-1.290865243944292370661544030414667556649E0L};
#define NRDr1 8
static const long double erfc_RDr1[NRDr1 + 1] =
	{
		4.308976661749509034845251315983612976224E-6L,
		3.265390126432780184125233455960049294580E-4L,
		9.811328839187040701901866531796570418691E-3L,
		1.511222515036021033410078631914783519649E-1L,
		1.289264341917429958858379585970225092274E0L,
		6.147640356182230769548007536914983522270E0L,
		1.573966871337739784518246317003956180750E1L,
		1.955534123435095067199574045529218238263E1L,
		9.472613121363135472247929109615785855865E0L
		/* 1.0E0 */
};

#define one 1.0L
static __uint128_t LDSignMask = ~((__uint128_t)0x1 << 127);

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> erf(ldoublev<Abi> x){
  static const long double efx = 1.2837916709551257389615890312154517168810E-1L;
  static const long double efx8 = 1.0270333367641005911692712249723613735048E0L;
  static const long double erf_const = 0.845062911510467529296875L;

  ldoublev<Abi> a, z, retv;
  uint128v<Abi> sign, ix;
  Abi_128suf<Abi> ux;

  retv = 0;
  ux.f = x;
  sign = get_ldoublev_u32s_p0(ux.u);
  ux.u = ux.u & LDSignMask;
  ix = sign & (__uint128_t)0x7fffffff;
  
  simd_mask<long double, Abi> jd, jdt;
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x3fff0000 && ix<0x7fff0000);

  int erfc_input_n = 0;

  ldoublev<Abi> jx(LLVM_NAN_128F);
  for (unsigned k = 0; k < jd.size(); ++k){
    if(jd[k]){
      erfc_input_n++;
      jx[k] = x[k];
    }
  }

  if(erfc_input_n)
    where(jd, retv) = one - erfc(jx);

  a = ux.f;
  z = x * x;
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3ffec000);
  where(jd, retv) = a + a * neval_simd<Abi>(z, erf_TN1, NTN1) / deval_simd<Abi>(z, erf_TD1, NTD1);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3fc60000);
  where(jd, retv) = x + efx * x;

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x00080000);
  where(jd, retv) = 0.125 * (8.0 * x + efx8 * x);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x3ffec000 && ix < 0x3fff0000);
  a = a - one;
  where(jd, retv) = erf_const + neval_simd<Abi>(a, erf_TN2, NTN2) / deval_simd<Abi>(a, erf_TD2, NTD2);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3fff0000);
  jdt = change_simd_mask_type<__uint128_t, long double, Abi>((sign & 0x80000000) != 0);
  where(jd & jdt, retv) = -retv;

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x7fff0000);
  where(jd, retv) = static_simd_cast<ldoublev<Abi>>(1-((sign >> 31) << 1)) + one / x;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> erf(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = erf(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

#define OneThirdf 0x1.555556p-2f
#define TwoThirdff 0x1.555556p-1f

#define TwoOverFifteenf 0x1.111112p-3f
#define TwoOverFivef 0x1.99999ap-2f
#define Tenthf 0x1.99999ap-4f

template <class Abi> floatv<Abi> erfc(floatv<Abi> x){
  Abi_32suf<Abi> ux, uz, utmp, utmp2;
  floatv<Abi> r, r2, erfc, scale, d, d2, p1, p2, p3, p4, y, tmp;
  uintv<Abi> sign, k;
  ux.f = x;
  y = 0;
  sign = ux.u & ~0x7fffffff;
  ux.u = ux.u & 0x7fffffff;

  simd_mask<float, Abi> jd1 = change_simd_mask_type<unsigned int, float, Abi>(ux.u < 0x32800000);
  simd_mask<float, Abi> jd2 = change_simd_mask_type<unsigned int, float, Abi>(ux.u < 0x41210000);
  simd_mask<float, Abi> jd3 = change_simd_mask_type<unsigned int, float, Abi>(ux.u >= 0x7f800000);

  where(jd1, y) = 1.f - x;

  utmp.f = 0x1p17f;
  uz.f = ux.f + utmp.f;
  k = uz.u - utmp.u;
  r = uz.f - utmp.f;
  erfc = 0;
  scale = 0;
  if(any_of(jd2)){
    for (unsigned i = 0; i < erfc.size(); ++i){
      int idx = k[i];
      if(jd2[i]){
        erfc[i] = __erfcf_data.tab[idx].erfc;
        scale[i] = __erfcf_data.tab[idx].scale;
      }
    }
  }

  d = ux.f - r;
  d2 = d * d;
  r2 = r * r;

  p1 = -r;
  p2 = TwoThirdff * r2 - OneThirdf;
  p3 = -r * (OneThirdf * r2 - 0.5f);
  p4 = TwoOverFifteenf * r2 - TwoOverFivef;
  p4 = p4 * r2 + Tenthf;
  utmp.f = p4 * d + p3;
  utmp.f = utmp.f * d + p2;
  utmp.f = utmp.f * d + p1;
  utmp.f = utmp.f * d2 + d;
  utmp.f = -utmp.f * scale + erfc;
  utmp2.u = (sign >> 1);
  tmp = utmp2.f;
  utmp2.f = 0x1p-47f;
  utmp2.u = (utmp2.u | sign);
  where(!jd1 && jd2, y) = utmp.f * utmp2.f + tmp;

  where(!(jd1 || jd2) && jd3, y) = tmp + 1;

  utmp.f = 1.f;
  utmp.u = utmp.u | sign;
  where(!(jd1||jd2||jd3), y) = 1 - utmp.f;

  ux.f = x;
  where(change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0x7f800000), y) = 0.f;
  where(change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0xff800000), y) = 2.f;

  return y;
} 

#define P20 0x1.5555555555555p-2 /* 1/3.  */
#define P21 0x1.5555555555555p-1 /* 2/3.  */

#define P40 0x1.999999999999ap-4  /* 1/10.  */
#define P41 0x1.999999999999ap-2  /* 2/5.  */
#define P42 0x1.11111111111111p-3 /* 2/15.  */

#define P50 0x1.5555555555555p-3 /* 1/6.  */
#define P51 0x1.c71c71c71c71cp-3 /* 2/9.  */
#define P52 0x1.6c16c16c16c17p-5 /* 2/45.  */

/* Qi = (i+1) / i.  */
#define Q5 0x1.3333333333333p0
#define Q6 0x1.2aaaaaaaaaaabp0
#define Q7 0x1.2492492492492p0
#define Q8 0x1.2p0
#define Q9 0x1.1c71c71c71c72p0

/* Ri = -2 * i / ((i+1)*(i+2)).  */
#define R5 -0x1.e79e79e79e79ep-3
#define R6 -0x1.b6db6db6db6dbp-3
#define R7 -0x1.8e38e38e38e39p-3
#define R8 -0x1.6c16c16c16c17p-3
#define R9 -0x1.4f2094f2094f2p-3

template <class Abi> doublev<Abi> erfc(doublev<Abi> x){
  Abi_64suf<Abi> ux, uz, utmp, utmp2;
  doublev<Abi> r, r2, erfc, scale, d, d2, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p12, p34, p56, p78, p90, y, tmp;
  ulongv<Abi> sign, k;
  ux.f = x;
  y = 0;
  sign = ux.u & ~AbsMask;
  ux.u = ux.u & AbsMask;

  int n = x.size();

  bool btmp[n];
  auto tmp_jd = ux.u >= 0x7ff0000000000000UL;
  tmp_jd.copy_to(&btmp[0], element_aligned);
  simd_mask<double, Abi> jd1(&btmp[0], element_aligned);

  auto jd2 = (x < -6.0);

  tmp_jd = ux.u < 0x403b3e0000000000UL;
  tmp_jd.copy_to(&btmp[0], element_aligned);
  simd_mask<double, Abi> jd3(&btmp[0], element_aligned);

  auto jd4 = (ux.f<0x1p-511);

  utmp.f = 0x1p45;
  uz.f = ux.f + utmp.f;
  k = uz.u;
  r = uz.f - utmp.f;

  for (unsigned i = 0; i < erfc.size(); ++i){
    int idx = k[i];
    erfc[i] = __erfc_data.tab[idx].erfc;
    scale[i] = __erfc_data.tab[idx].scale;
  }

  d = ux.f - r;
  d2 = d * d;
  r2 = r * r;

  p1 = -r;
  p2 = P21 * r2 - P20;
  p3 = -r * (P20 * r2 - 0.5);
  p4 = P42 * r2 - P41;
  p4 = p4 * r2 + P40;
  p5 = P52 * r2 - P51;
  p5 = -r * (p5 * r2 + P50);
  p6 = (Q5 * r * p5 + p4) * R5;
  p7 = (Q6 * r * p6 + p5) * R6;
  p8 = (Q7 * r * p7 + p6) * R7;
  p9 = (Q8 * r * p8 + p7) * R8;
  p10 = (Q9 * r * p9 + p8) * R9;
  p90 = p10 * d + p9;
  p78 = p8 * d + p7;
  p56 = p6 * d + p5;
  p34 = p4 * d + p3;
  p12 = p2 * d + p1;
  utmp.f = p90 * d2 + p78;
  utmp.f = utmp.f * d2 + p56;
  utmp.f = utmp.f * d2 + p34;
  utmp.f = utmp.f * d2 + p12;
  utmp.f = utmp.f * d2 + d;
  utmp.f = -utmp.f * scale + erfc;

  utmp2.u = (sign >> 1);
  tmp = utmp2.f;
  utmp2.f = 0x1p-128;
  utmp2.u = (utmp2.u | sign);

  where(jd1, y) = tmp + 1.0 / x;
  where(jd3 & jd4, y) = 1.0-x;
  where(jd3 & (!jd4), y) = utmp.f * utmp2.f + tmp;
  where(jd2, y) = 2.0;

  return y;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> erfc(ldoublev<Abi> x){
  const long double tiny = 1e-4931L;
  const long double two = 2.0L;
  const long double C13a = 0.723663330078125L;
  const long double C13b = 1.0279753638067014931732235184287934646022E-5L;
  const long double C14a = 0.5958709716796875L;
  const long double C14b = 1.2118885490201676174914080878232469565953E-5L;
  const long double C15a = 0.4794921875L;
  const long double C15b = 7.9346869534623172533461080354712635484242E-6L;
  const long double C16a = 0.3767547607421875L;
  const long double C16b = 4.3570693945275513594941232097252997287766E-6L;
  const long double C17a = 0.2888336181640625L;
  const long double C17b = 1.0748182422368401062165408589222625794046E-5L;
  const long double C18a = 0.215911865234375L;
  const long double C18b = 1.3073705765341685464282101150637224028267E-5L;
  const long double C19a = 0.15728759765625L;
  const long double C19b = 1.1609394035130658779364917390740703933002E-5L;
  const long double C20a = 0.111602783203125L;
  const long double C20b = 8.9850951672359304215530728365232161564636E-6L;

  ldoublev<Abi> y, z, p, r, retv, tx, ty;
  uint128v<Abi> i, ix, sign, utmp;
  Abi_128suf<Abi> ux, utx;
  simd_mask<long double, Abi> jd, jdt, jdtt;

  retv = 0;
  y = 0;
  p = 0;
  ux.f = x;
  sign = get_ldoublev_u32s_p0(ux.u);
  ux.u = ux.u & LDSignMask;
  ix = sign & (__uint128_t)0x7fffffff;

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3ffd0000);
  int erf_input_n = 0;
  for (unsigned k = 0; k < jd.size(); ++k){
    if(jd[k])
      erf_input_n++;
  }
  if(erf_input_n){
    where(jd, retv) = one - erf(x);
  }

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3f8d0000);
  where(jd, retv) = one - x;

  tx = ux.f;
  i = static_simd_cast<uint128v<Abi>>(8 * tx);
  ty = 0;

  z = tx - 0.25L;
  y = C13b + z * neval_simd<Abi>(z, erfc_RNr13, NRNr13) / deval_simd<Abi>(z, erfc_RDr13, NRDr13);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==2);
  where(jd, ty) = y + C13a;

  z = tx - 0.375L;
  y = C14b + z * neval_simd<Abi>(z, erfc_RNr14, NRNr14) / deval_simd<Abi>(z, erfc_RDr14, NRDr14);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==3);
  where(jd, ty) = y + C14a;

  z = tx - 0.5L;
  y = C15b + z * neval_simd<Abi>(z, erfc_RNr15, NRNr15) / deval_simd<Abi>(z, erfc_RDr15, NRDr15);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==4);
  where(jd, ty) = y + C15a;

  z = tx - 0.625L;
  y = C16b + z * neval_simd<Abi>(z, erfc_RNr16, NRNr16) / deval_simd<Abi>(z, erfc_RDr16, NRDr16);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==5);
  where(jd, ty) = y + C16a;

  z = tx - 0.75L;
  y = C17b + z * neval_simd<Abi>(z, erfc_RNr17, NRNr17) / deval_simd<Abi>(z, erfc_RDr17, NRDr17);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==6);
  where(jd, ty) = y + C17a;

  z = tx - 0.875L;
  y = C18b + z * neval_simd<Abi>(z, erfc_RNr18, NRNr18) / deval_simd<Abi>(z, erfc_RDr18, NRDr18);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==7);
  where(jd, ty) = y + C18a;

  z = tx - 1.0L;
  y = C19b + z * neval_simd<Abi>(z, erfc_RNr19, NRNr19) / deval_simd<Abi>(z, erfc_RDr19, NRDr19);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==8);
  where(jd, ty) = y + C19a;

  z = tx - 1.125L;
  y = C20b + z * neval_simd<Abi>(z, erfc_RNr20, NRNr20) / deval_simd<Abi>(z, erfc_RDr20, NRDr20);
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==9);
  where(jd, ty) = y + C20a;

  jdt = change_simd_mask_type<__uint128_t, long double, Abi>((sign & 0x80000000)!=0);
  where(jdt, ty) = 2.0L - ty;

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x3fff4000 && ix >=0x3ffd0000);
  where(jd, retv) = ty;

  z = one / (tx * tx);
  i = static_simd_cast<uint128v<Abi>>(8 / tx);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==0);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr1, NRNr1) / deval_simd<Abi>(z, erfc_RDr1, NRDr1);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==1);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr2, NRNr2) / deval_simd<Abi>(z, erfc_RDr2, NRDr2);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==2);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr3, NRNr3) / deval_simd<Abi>(z, erfc_RDr3, NRDr3);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==3);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr4, NRNr4) / deval_simd<Abi>(z, erfc_RDr4, NRDr4);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==4);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr5, NRNr5) / deval_simd<Abi>(z, erfc_RDr5, NRDr5);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==5); 
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr6, NRNr6) / deval_simd<Abi>(z, erfc_RDr6, NRDr6);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==6);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr7, NRNr7) / deval_simd<Abi>(z, erfc_RDr7, NRDr7);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(i==7);
  where(jd, p) = neval_simd<Abi>(z, erfc_RNr8, NRNr8) / deval_simd<Abi>(z, erfc_RDr8, NRDr8);

  utx.f = tx;
  utmp = 0x0;
  utx = set_ldoublev_u32s_p3<Abi>(utx, utmp);
  utmp = 0xfe000000;
  utx = set_ldoublev_u32s_p2<Abi>(utx, get_ldoublev_u32s_p2<Abi>(utx.u)&utmp);
  z = utx.f;

  ldoublev<Abi> exp_i1 = -z * z - 0.5625;
  ldoublev<Abi> exp_i2 = (z - tx) * (z + tx) + p;
  r = exp(exp_i1) * exp(exp_i2);

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix < 0x4005ac00 && ix >= 0x3fff4000);
  where(jd & jdt, retv) = two - r / tx;
  where(jd & (!jdt), retv) = r / tx;

  jdtt = jd & change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x40022000);
  where(jdtt & jdt, retv) = two - tiny;

  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x4005ac00);
  where(jd & jdt, retv) = two - tiny;
  where(jd & !jdt, retv) =  tiny * tiny;

  ty = static_simd_cast<ldoublev<Abi>>((sign >> 31) << 1) + one / x;
  jd = change_simd_mask_type<__uint128_t, long double, Abi>(ix >= 0x7fff0000);
  where(jd, retv) = ty;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> erfc(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = erfc(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi> floatv<Abi> nearbyint(floatv<Abi> x){
  floatv<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return res;
}

template <class Abi> doublev<Abi> nearbyint(doublev<Abi> x){
  doublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return res;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> nearbyint(ldoublev<Abi> x){
  ldoublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return res;
}
#else
template <class Abi> ldoublev<Abi> nearbyint(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  fenv_t env;
  fegetenv(&env);
  res = rint(src1);
  fesetenv(&env);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

template <class Abi> samesize<long int, floatv<Abi>> lrint(floatv<Abi> x){
  floatv<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long int, floatv<Abi>>>(res);
}

template <class Abi> samesize<long int, doublev<Abi>> lrint(doublev<Abi> x){
  doublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long int, doublev<Abi>>>(res);
}

#ifdef LDOUBLE_BINARY128
template <class Abi> samesize<long int, ldoublev<Abi>> lrint(ldoublev<Abi> x){
  ldoublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long int, ldoublev<Abi>>>(res);
}
#else
template <class Abi> samesize<long int, ldoublev<Abi>> lrint(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  fenv_t env;
  fegetenv(&env);
  res = rint(src1);
  fesetenv(&env);
  return static_simd_cast<samesize<long int, ldoublev<Abi>>>(res);
}
#endif

template <class Abi> samesize<long long int, floatv<Abi>> llrint(floatv<Abi> x){
  floatv<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long long int, floatv<Abi>>>(res);
}

template <class Abi> samesize<long long int, doublev<Abi>> llrint(doublev<Abi> x){
  doublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long long int, doublev<Abi>>>(res);
}

#ifdef LDOUBLE_BINARY128
template <class Abi> samesize<long long int, ldoublev<Abi>> llrint(ldoublev<Abi> x){
  ldoublev<Abi> res;
  fenv_t env;
  fegetenv(&env);
  res = rint(x);
  fesetenv(&env);
  return static_simd_cast<samesize<long long int, ldoublev<Abi>>>(res);
}
#else
template <class Abi> samesize<long long int, ldoublev<Abi>> llrint(ldoublev<Abi> x)
{
  doublev<Abi> src1, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  fenv_t env;
  fegetenv(&env);
  res = rint(src1);
  fesetenv(&env);
  return static_simd_cast<samesize<long long int, ldoublev<Abi>>>(res);
}
#endif

template <class Abi>
samesize<long int, floatv<Abi>>  lround(floatv<Abi> x) {
  x = x + ExpShift23;
  return static_simd_cast<samesize<long int, floatv<Abi>>>(x - ExpShift23);
}

template <class Abi>
samesize<long int, doublev<Abi>>  lround(doublev<Abi> x) {
  x = x + ExpShift52;
  return static_simd_cast<samesize<long int, doublev<Abi>>>(x - ExpShift52);
}

#ifdef LDOUBLE_BINARY128
template <class Abi>
samesize<long int, ldoublev<Abi>>  lround(ldoublev<Abi> x) {
  x = x + ExpShift112;
  return static_simd_cast<samesize<long int, ldoublev<Abi>>>(x - ExpShift112);
}
#else
template <class Abi> samesize<long int, ldoublev<Abi>>lround(ldoublev<Abi> x)
{
  doublev<Abi> src1 = static_simd_cast<doublev<Abi>>(x);
  src1 = src1 + ExpShift52;
  return static_simd_cast<samesize<long int, ldoublev<Abi>>>(src1 - ExpShift52);
}
#endif

template <class Abi>
samesize<long long int, floatv<Abi>>  llround(floatv<Abi> x) {
  x = x + ExpShift23;
  return static_simd_cast<samesize<long long int, floatv<Abi>>>(x - ExpShift23);
}

template <class Abi>
samesize<long long int, doublev<Abi>>  llround(doublev<Abi> x) {
  x = x + ExpShift52;
  return static_simd_cast<samesize<long long int, doublev<Abi>>>(x - ExpShift52);
}

#ifdef LDOUBLE_BINARY128
template <class Abi> samesize<long long int, ldoublev<Abi>> llround(ldoublev<Abi> x) {
  x = x + ExpShift112;
  return static_simd_cast<samesize<long long int, ldoublev<Abi>>>(x - ExpShift112);
}
#else
template <class Abi> samesize<long long int, ldoublev<Abi>> llround(ldoublev<Abi> x)
{
  doublev<Abi> src1 = static_simd_cast<doublev<Abi>>(x);
  src1 = src1 + ExpShift52;
  return static_simd_cast<samesize<long long int, ldoublev<Abi>>>(src1 - ExpShift52);
}
#endif


template<class Abi>
doublev<Abi> __sinv(doublev<Abi> x, doublev<Abi> y, intv<Abi> iy)
{
	doublev<Abi> z,r,v,w,res;
  static const double
    S1  = -1.66666666666666324348e-01, /* 0xBFC55555, 0x55555549 */
    S2  =  8.33333333332248946124e-03, /* 0x3F811111, 0x1110F8A6 */
    S3  = -1.98412698298579493134e-04, /* 0xBF2A01A0, 0x19C161D5 */
    S4  =  2.75573137070700676789e-06, /* 0x3EC71DE3, 0x57B1FE7D */
    S5  = -2.50507602534068634195e-08, /* 0xBE5AE5E6, 0x8A2B9CEB */
    S6  =  1.58969099521155010221e-10; /* 0x3DE5D93A, 0x5ACFD57C */

	z = x*x;
	w = z*z;
	r = S2 + z*(S3 + z*S4) + z*w*(S5 + z*S6);
	v = z*x;

	res =  x - ((z*(0.5*y - v*r) - y) - v*S1);
  where(change_simd_mask_type<int, double, Abi>(iy == 0), res) = x + v*(S1 + z*r);
  return res;
}


template<class Abi>
doublev<Abi> __cosv(doublev<Abi> x, doublev<Abi> y)
{
  doublev<Abi> hz,z,r,w;
  static const double
    C1  =  4.16666666666666019037e-02, /* 0x3FA55555, 0x5555554C */
    C2  = -1.38888888888741095749e-03, /* 0xBF56C16C, 0x16C15177 */
    C3  =  2.48015872894767294178e-05, /* 0x3EFA01A0, 0x19CB1590 */
    C4  = -2.75573143513906633035e-07, /* 0xBE927E4F, 0x809C52AD */
    C5  =  2.08757232129817482790e-09, /* 0x3E21EE9E, 0xBDB4B1C4 */
    C6  = -1.13596475577881948265e-11; /* 0xBDA8FAE9, 0xBE8838D4 */


	z  = x*x;
	w  = z*z;
	r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
	hz = 0.5*z;
	w  = 1.0-hz;
	return w + (((1.0-w)-hz) + (z*r-x*y));
}



template<class Abi>
doublev<Abi> sin_piv(doublev<Abi> x)
{
	intv<Abi> n;
  doublev<Abi> res;
  static const double
    pi  =  3.14159265358979311600e+00; /* 0x400921FB, 0x54442D18 */
	/* spurious inexact if odd int */
	x = 2.0*(x*0.5 - floor(x*0.5));  /* x mod 2.0 */

	n = static_simd_cast<intv<Abi>>(x*4.0);
	n = (n+1)/2;
	x -= static_simd_cast<doublev<Abi>>(n)*0.5;
	x *= pi;


  auto jd1 = change_simd_mask_type<int, double, Abi>(n == 1);
  auto jd2 = change_simd_mask_type<int, double, Abi>(n == 2);
  auto jd3 = change_simd_mask_type<int, double, Abi>(n == 3);
  res = __sinv(x, s2v<double, doublev<Abi>>(0.0), s2v<int, intv<Abi>>(0));
  where(jd1, res) = __cosv(x, s2v<double, doublev<Abi>>(0.0));
  where(jd2, res) = __sinv(-x, s2v<double, doublev<Abi>>(0.0), s2v<int, intv<Abi>>(0));
  where(jd3, res) = -__cosv(x, s2v<double, doublev<Abi>>(0.0));

  return res;
}



template <class Abi> 
doublev<Abi> lgamma(doublev<Abi> x){
  static const double
pi  =  3.14159265358979311600e+00, /* 0x400921FB, 0x54442D18 */
a0  =  7.72156649015328655494e-02, /* 0x3FB3C467, 0xE37DB0C8 */
a1  =  3.22467033424113591611e-01, /* 0x3FD4A34C, 0xC4A60FAD */
a2  =  6.73523010531292681824e-02, /* 0x3FB13E00, 0x1A5562A7 */
a3  =  2.05808084325167332806e-02, /* 0x3F951322, 0xAC92547B */
a4  =  7.38555086081402883957e-03, /* 0x3F7E404F, 0xB68FEFE8 */
a5  =  2.89051383673415629091e-03, /* 0x3F67ADD8, 0xCCB7926B */
a6  =  1.19270763183362067845e-03, /* 0x3F538A94, 0x116F3F5D */
a7  =  5.10069792153511336608e-04, /* 0x3F40B6C6, 0x89B99C00 */
a8  =  2.20862790713908385557e-04, /* 0x3F2CF2EC, 0xED10E54D */
a9  =  1.08011567247583939954e-04, /* 0x3F1C5088, 0x987DFB07 */
a10 =  2.52144565451257326939e-05, /* 0x3EFA7074, 0x428CFA52 */
a11 =  4.48640949618915160150e-05, /* 0x3F07858E, 0x90A45837 */
tc  =  1.46163214496836224576e+00, /* 0x3FF762D8, 0x6356BE3F */
tf  = -1.21486290535849611461e-01, /* 0xBFBF19B9, 0xBCC38A42 */
/* tt = -(tail of tf) */
tt  = -3.63867699703950536541e-18, /* 0xBC50C7CA, 0xA48A971F */
t0  =  4.83836122723810047042e-01, /* 0x3FDEF72B, 0xC8EE38A2 */
t1  = -1.47587722994593911752e-01, /* 0xBFC2E427, 0x8DC6C509 */
t2  =  6.46249402391333854778e-02, /* 0x3FB08B42, 0x94D5419B */
t3  = -3.27885410759859649565e-02, /* 0xBFA0C9A8, 0xDF35B713 */
t4  =  1.79706750811820387126e-02, /* 0x3F9266E7, 0x970AF9EC */
t5  = -1.03142241298341437450e-02, /* 0xBF851F9F, 0xBA91EC6A */
t6  =  6.10053870246291332635e-03, /* 0x3F78FCE0, 0xE370E344 */
t7  = -3.68452016781138256760e-03, /* 0xBF6E2EFF, 0xB3E914D7 */
t8  =  2.25964780900612472250e-03, /* 0x3F6282D3, 0x2E15C915 */
t9  = -1.40346469989232843813e-03, /* 0xBF56FE8E, 0xBF2D1AF1 */
t10 =  8.81081882437654011382e-04, /* 0x3F4CDF0C, 0xEF61A8E9 */
t11 = -5.38595305356740546715e-04, /* 0xBF41A610, 0x9C73E0EC */
t12 =  3.15632070903625950361e-04, /* 0x3F34AF6D, 0x6C0EBBF7 */
t13 = -3.12754168375120860518e-04, /* 0xBF347F24, 0xECC38C38 */
t14 =  3.35529192635519073543e-04, /* 0x3F35FD3E, 0xE8C2D3F4 */
u0  = -7.72156649015328655494e-02, /* 0xBFB3C467, 0xE37DB0C8 */
u1  =  6.32827064025093366517e-01, /* 0x3FE4401E, 0x8B005DFF */
u2  =  1.45492250137234768737e+00, /* 0x3FF7475C, 0xD119BD6F */
u3  =  9.77717527963372745603e-01, /* 0x3FEF4976, 0x44EA8450 */
u4  =  2.28963728064692451092e-01, /* 0x3FCD4EAE, 0xF6010924 */
u5  =  1.33810918536787660377e-02, /* 0x3F8B678B, 0xBF2BAB09 */
v1  =  2.45597793713041134822e+00, /* 0x4003A5D7, 0xC2BD619C */
v2  =  2.12848976379893395361e+00, /* 0x40010725, 0xA42B18F5 */
v3  =  7.69285150456672783825e-01, /* 0x3FE89DFB, 0xE45050AF */
v4  =  1.04222645593369134254e-01, /* 0x3FBAAE55, 0xD6537C88 */
v5  =  3.21709242282423911810e-03, /* 0x3F6A5ABB, 0x57D0CF61 */
s0  = -7.72156649015328655494e-02, /* 0xBFB3C467, 0xE37DB0C8 */
s1  =  2.14982415960608852501e-01, /* 0x3FCB848B, 0x36E20878 */
s2  =  3.25778796408930981787e-01, /* 0x3FD4D98F, 0x4F139F59 */
s3  =  1.46350472652464452805e-01, /* 0x3FC2BB9C, 0xBEE5F2F7 */
s4  =  2.66422703033638609560e-02, /* 0x3F9B481C, 0x7E939961 */
s5  =  1.84028451407337715652e-03, /* 0x3F5E26B6, 0x7368F239 */
s6  =  3.19475326584100867617e-05, /* 0x3F00BFEC, 0xDD17E945 */
r1  =  1.39200533467621045958e+00, /* 0x3FF645A7, 0x62C4AB74 */
r2  =  7.21935547567138069525e-01, /* 0x3FE71A18, 0x93D3DCDC */
r3  =  1.71933865632803078993e-01, /* 0x3FC601ED, 0xCCFBDF27 */
r4  =  1.86459191715652901344e-02, /* 0x3F9317EA, 0x742ED475 */
r5  =  7.77942496381893596434e-04, /* 0x3F497DDA, 0xCA41A95B */
r6  =  7.32668430744625636189e-06, /* 0x3EDEBAF7, 0xA5B38140 */
w0  =  4.18938533204672725052e-01, /* 0x3FDACFE3, 0x90C97D69 */
w1  =  8.33333333333329678849e-02, /* 0x3FB55555, 0x5555553B */
w2  = -2.77777777728775536470e-03, /* 0xBF66C16C, 0x16B02E5C */
w3  =  7.93650558643019558500e-04, /* 0x3F4A019F, 0x98CF38B6 */
w4  = -5.95187557450339963135e-04, /* 0xBF4380CB, 0x8C0FE741 */
w5  =  8.36339918996282139126e-04, /* 0x3F4B67BA, 0x4CDAD5D1 */
w6  = -1.63092934096575273989e-03; /* 0xBF5AB89D, 0x0B9E43E4 */

    doublev<Abi> res;
    Abi_64suf<Abi> u;
    doublev<Abi> t,y,z,nadj,p,p1,p2,p3,q,r,w;
    uintv<Abi> ix;
    intv<Abi> sign,i;

    doublev<Abi> ttx;
    ttx = x;

    /* purge off +-inf, NaN, +-0, tiny and negative arguments */
    u.f = x;
    sign = static_simd_cast<intv<Abi>>(u.u>>63);
    ix = static_simd_cast<uintv<Abi>>(u.u>>32) & 0x7fffffffU;


    auto jd1 = change_simd_mask_type<int, double, Abi>(sign != 0);
    where(jd1, x) = -x;
    where(jd1, t) = sin_piv(x);

    where(jd1 & (t < 0.0), t) = -t;
    where(jd1, nadj) = log(pi/(t*x));

    jd1 = change_simd_mask_type<unsigned int, double, Abi>(
        (ix == 0x3ff00000U | ix == 0x40000000U) 
        & (static_simd_cast<uintv<Abi>>(u.u) == 0)
    );
    where(jd1, r) = 0;


    auto jd2 = change_simd_mask_type<unsigned int, double, Abi>(ix < 0x40000000);
    auto jdtmp = !jd1 & jd2;
    auto jdmask = !jd1 & !jd2;

    jd1 = change_simd_mask_type<unsigned int, double, Abi>(ix <= 0x3feccccc);
    where(jdtmp & jd1, r) = -log(x);;
    where(jdtmp & !jd1, r) = 0.0;

    for(size_t index = 0; index < x.size(); index++)
    {
      if(jdtmp[index])
      {
        if (jd1[index]) {   /* lgamma(x) = lgamma(x+1)-log(x) */
          if (ix[index] >= 0x3FE76944) {
            y[index] = 1.0 - x[index];
            i[index] = 0;
          } else if (ix[index] >= 0x3FCDA661) {
            y[index] = x[index] - (tc-1.0);
            i[index] = 1;
          } else {
            y[index] = x[index];
            i[index] = 2;
          }
        } else {
          if (ix[index] >= 0x3FFBB4C3) {  /* [1.7316,2] */
            y[index] = 2.0 - x[index];
            i[index] = 0;
          } else if(ix[index] >= 0x3FF3B4C4) {  /* [1.23,1.73] */
            y[index] = x[index] - tc;
            i[index] = 1;
          } else {
            y[index] = x[index] - 1.0;
            i[index] = 2;
          }
        }
      }
    }

    auto jdmask0 = jdtmp & change_simd_mask_type<int, double>(i == 0);
    auto jdmask1 = jdtmp & change_simd_mask_type<int, double>(i == 1);
    auto jdmask2 = jdtmp & change_simd_mask_type<int, double>(i == 2);

    where(jdmask0, z) = y*y;
    where(jdmask0, p1) = a0+z*(a2+z*(a4+z*(a6+z*(a8+z*a10))));
    where(jdmask0, p2) = z*(a1+z*(a3+z*(a5+z*(a7+z*(a9+z*a11)))));
    where(jdmask0, p) = y*p1+p2;
    where(jdmask0, r) = r + (p-0.5*y);

    where(jdmask1, z) = y*y;
    where(jdmask1, w) = z*y;
    where(jdmask1, p1) = t0+w*(t3+w*(t6+w*(t9 +w*t12)));    /* parallel comp */
    where(jdmask1, p2) = t1+w*(t4+w*(t7+w*(t10+w*t13)));
    where(jdmask1, p3) = t2+w*(t5+w*(t8+w*(t11+w*t14)));
    where(jdmask1, p) = z*p1-(tt-w*(p2+y*p3));
    where(jdmask1, r) = r + tf + p;

    where(jdmask2, p1) = y*(u0+y*(u1+y*(u2+y*(u3+y*(u4+y*u5)))));
    where(jdmask2, p2) = 1.0+y*(v1+y*(v2+y*(v3+y*(v4+y*v5))));
    where(jdmask2, r) =  r + (-0.5)*y + p1/p2;


    auto jd3 = change_simd_mask_type<unsigned int, double, Abi>(ix < 0x40200000);
    jdtmp = jdmask & jd3;
    jdmask = jdmask & !jd3;

    where(change_simd_mask_type<double ,int, Abi>(jdtmp), i) = static_simd_cast<intv<Abi>>(x);
    where(jdtmp, y) = x - static_simd_cast<doublev<Abi>>(i);
    where(jdtmp, p) = y*(s0+y*(s1+y*(s2+y*(s3+y*(s4+y*(s5+y*s6))))));
    where(jdtmp, q) = 1.0+y*(r1+y*(r2+y*(r3+y*(r4+y*(r5+y*r6)))));
    where(jdtmp, r) = 0.5*y+p/q;
    where(jdtmp, z) = 1.0;    /* lgamma(1+s) = log(s) + lgamma(s) */


         jdmask0 = jdtmp & change_simd_mask_type<int, double>(i == 7);
         jdmask1 = jdtmp & change_simd_mask_type<int, double>(i == 6);
         jdmask2 = jdtmp & change_simd_mask_type<int, double>(i == 5);
    auto jdmask3 = jdtmp & change_simd_mask_type<int, double>(i == 4);
    auto jdmask4 = jdtmp & change_simd_mask_type<int, double>(i == 3);

    where(jdmask0, z) = ((((z * y + 6.0)* y + 5.0)* y + 4.0)* y + 3.0)* y + 2.0;  /* FALLTHRU */
    where(jdmask1, z) = (((z * y + 5.0)* y + 4.0)* y + 3.0)* y + 2.0;  /* FALLTHRU */
    where(jdmask2, z) = ((z * y + 4.0)* y + 3.0)* y + 2.0;  /* FALLTHRU */
    where(jdmask3, z) = (z* y + 3.0)* y + 2.0;  /* FALLTHRU */
    where(jdmask4, z) = z * y + 2.0;  /* FALLTHRU */
    where(jdmask0|jdmask1|jdmask2|jdmask3|jdmask4, r) = r + log(z);

    auto jd4 = change_simd_mask_type<unsigned int, double, Abi>(ix < 0x43900000);
    jdtmp = jdmask & jd4;
    jdmask = jdmask & !jd4;

    where(jdtmp, t) = log(x);
    where(jdtmp, z) = 1.0/x;
    where(jdtmp, y) = z*z;
    where(jdtmp, w) = w0+z*(w1+y*(w2+y*(w3+y*(w4+y*(w5+y*w6)))));
    where(jdtmp, r) = (x-0.5)*(t-1.0)+w;
    where(jdmask, r) =  x*(log(x)-1.0);
      
    where(change_simd_mask_type<int, double, Abi>(sign != 0), r) = nadj - r;
    res = r;

    jd1 = change_simd_mask_type<unsigned int, double, Abi>(ix >= 0x7ff00000);
    jd2 = change_simd_mask_type<unsigned int, double, Abi>(ix < (0x3ff-70)<<20);

    where(jd1, res) = ttx*ttx;
    where(!jd1 & jd2, res) = -log(abs(ttx));
    jd3 = !jd1 & !jd2 & change_simd_mask_type<int, double, Abi>(sign != 0);
    where(jd3, ttx) = sin_piv(abs(ttx));
    where(jd3 & (t == 0.0), res) = 1.0/(ttx-ttx);

    return res;
}

template <class Abi> 
floatv<Abi> lgamma(floatv<Abi> x){
  return static_simd_cast<floatv<Abi>>(lgamma(static_simd_cast<doublev<Abi>>(x)));
}


/* lgammal special value */
#define NRASY 12
static const long double RASY[NRASY + 1] =
{
  8.333333333333333333333333333310437112111E-2L,
 -2.777777777777777777777774789556228296902E-3L,
  7.936507936507936507795933938448586499183E-4L,
 -5.952380952380952041799269756378148574045E-4L,
  8.417508417507928904209891117498524452523E-4L,
 -1.917526917481263997778542329739806086290E-3L,
  6.410256381217852504446848671499409919280E-3L,
 -2.955064066900961649768101034477363301626E-2L,
  1.796402955865634243663453415388336954675E-1L,
 -1.391522089007758553455753477688592767741E0L,
  1.326130089598399157988112385013829305510E1L,
 -1.420412699593782497803472576479997819149E2L,
  1.218058922427762808938869872528846787020E3L
};

#define NRN13 7
static const long double RN13[NRN13 + 1] =
{
  8.591478354823578150238226576156275285700E11L,
  2.347931159756482741018258864137297157668E11L,
  2.555408396679352028680662433943000804616E10L,
  1.408581709264464345480765758902967123937E9L,
  4.126759849752613822953004114044451046321E7L,
  6.133298899622688505854211579222889943778E5L,
  3.929248056293651597987893340755876578072E3L,
  6.850783280018706668924952057996075215223E0L
};
#define NRD13 6
static const long double RD13[NRD13 + 1] =
{
  3.401225382297342302296607039352935541669E11L,
  8.756765276918037910363513243563234551784E10L,
  8.873913342866613213078554180987647243903E9L,
  4.483797255342763263361893016049310017973E8L,
  1.178186288833066430952276702931512870676E7L,
  1.519928623743264797939103740132278337476E5L,
  7.989298844938119228411117593338850892311E2L
 /* 1.0E0L */
};

#define NRN12 7
static const long double RN12[NRN12 + 1] =
{
  4.709859662695606986110997348630997559137E11L,
  1.398713878079497115037857470168777995230E11L,
  1.654654931821564315970930093932954900867E10L,
  9.916279414876676861193649489207282144036E8L,
  3.159604070526036074112008954113411389879E7L,
  5.109099197547205212294747623977502492861E5L,
  3.563054878276102790183396740969279826988E3L,
  6.769610657004672719224614163196946862747E0L
};
#define NRD12 6
static const long double RD12[NRD12 + 1] =
{
  1.928167007860968063912467318985802726613E11L,
  5.383198282277806237247492369072266389233E10L,
  5.915693215338294477444809323037871058363E9L,
  3.241438287570196713148310560147925781342E8L,
  9.236680081763754597872713592701048455890E6L,
  1.292246897881650919242713651166596478850E5L,
  7.366532445427159272584194816076600211171E2L
 /* 1.0E0L */
};

#define NRN11 7
static const long double RN11[NRN11 + 1] =
{
  2.446960438029415837384622675816736622795E11L,
  7.955444974446413315803799763901729640350E10L,
  1.030555327949159293591618473447420338444E10L,
  6.765022131195302709153994345470493334946E8L,
  2.361892792609204855279723576041468347494E7L,
  4.186623629779479136428005806072176490125E5L,
  3.202506022088912768601325534149383594049E3L,
  6.681356101133728289358838690666225691363E0L
};
#define NRD11 6
static const long double RD11[NRD11 + 1] =
{
  1.040483786179428590683912396379079477432E11L,
  3.172251138489229497223696648369823779729E10L,
  3.806961885984850433709295832245848084614E9L,
  2.278070344022934913730015420611609620171E8L,
  7.089478198662651683977290023829391596481E6L,
  1.083246385105903533237139380509590158658E5L,
  6.744420991491385145885727942219463243597E2L
 /* 1.0E0L */
};

#define NRN10 7
static const long double RN10[NRN10 + 1] =
{
  -1.239059737177249934158597996648808363783E14L,
  -4.725899566371458992365624673357356908719E13L,
  -7.283906268647083312042059082837754850808E12L,
  -5.802855515464011422171165179767478794637E11L,
  -2.532349691157548788382820303182745897298E10L,
  -5.884260178023777312587193693477072061820E8L,
  -6.437774864512125749845840472131829114906E6L,
  -2.350975266781548931856017239843273049384E4L
};
#define NRD10 7
static const long double RD10[NRD10 + 1] =
{
  -5.502645997581822567468347817182347679552E13L,
  -1.970266640239849804162284805400136473801E13L,
  -2.819677689615038489384974042561531409392E12L,
  -2.056105863694742752589691183194061265094E11L,
  -8.053670086493258693186307810815819662078E9L,
  -1.632090155573373286153427982504851867131E8L,
  -1.483575879240631280658077826889223634921E6L,
  -4.002806669713232271615885826373550502510E3L
 /* 1.0E0L */
};

#define NRN9 7
static const long double RN9[NRN9 + 1] =
{
  -4.936332264202687973364500998984608306189E13L,
  -2.101372682623700967335206138517766274855E13L,
  -3.615893404644823888655732817505129444195E12L,
  -3.217104993800878891194322691860075472926E11L,
  -1.568465330337375725685439173603032921399E10L,
  -4.073317518162025744377629219101510217761E8L,
  -4.983232096406156139324846656819246974500E6L,
  -2.036280038903695980912289722995505277253E4L
};
#define NRD9 7
static const long double RD9[NRD9 + 1] =
{
  -2.306006080437656357167128541231915480393E13L,
  -9.183606842453274924895648863832233799950E12L,
  -1.461857965935942962087907301194381010380E12L,
  -1.185728254682789754150068652663124298303E11L,
  -5.166285094703468567389566085480783070037E9L,
  -1.164573656694603024184768200787835094317E8L,
  -1.177343939483908678474886454113163527909E6L,
  -3.529391059783109732159524500029157638736E3L
  /* 1.0E0L */
};

#define NRN8 8
static const long double RN8[NRN8 + 1] =
{
  6.600775438203423546565361176829139703289E11L,
  3.406361267593790705240802723914281025800E11L,
  7.222460928505293914746983300555538432830E10L,
  8.102984106025088123058747466840656458342E9L,
  5.157620015986282905232150979772409345927E8L,
  1.851445288272645829028129389609068641517E7L,
  3.489261702223124354745894067468953756656E5L,
  2.892095396706665774434217489775617756014E3L,
  6.596977510622195827183948478627058738034E0L
};
#define NRD8 7
static const long double RD8[NRD8 + 1] =
{
  3.274776546520735414638114828622673016920E11L,
  1.581811207929065544043963828487733970107E11L,
  3.108725655667825188135393076860104546416E10L,
  3.193055010502912617128480163681842165730E9L,
  1.830871482669835106357529710116211541839E8L,
  5.790862854275238129848491555068073485086E6L,
  9.305213264307921522842678835618803553589E4L,
  6.216974105861848386918949336819572333622E2L
  /* 1.0E0L */
};


#define NRN7 8
static const long double RN7[NRN7 + 1] =
{
  2.065019306969459407636744543358209942213E11L,
  1.226919919023736909889724951708796532847E11L,
  2.996157990374348596472241776917953749106E10L,
  3.873001919306801037344727168434909521030E9L,
  2.841575255593761593270885753992732145094E8L,
  1.176342515359431913664715324652399565551E7L,
  2.558097039684188723597519300356028511547E5L,
  2.448525238332609439023786244782810774702E3L,
  6.460280377802030953041566617300902020435E0L
};
#define NRD7 7
static const long double RD7[NRD7 + 1] =
{
  1.102646614598516998880874785339049304483E11L,
  6.099297512712715445879759589407189290040E10L,
  1.372898136289611312713283201112060238351E10L,
  1.615306270420293159907951633566635172343E9L,
  1.061114435798489135996614242842561967459E8L,
  3.845638971184305248268608902030718674691E6L,
  7.081730675423444975703917836972720495507E4L,
  5.423122582741398226693137276201344096370E2L
  /* 1.0E0L */
};

#define NRN6 8
static const long double RN6[NRN6 + 1] =
{
  -3.538412754670746879119162116819571823643E13L,
  -2.613432593406849155765698121483394257148E13L,
  -8.020670732770461579558867891923784753062E12L,
  -1.322227822931250045347591780332435433420E12L,
  -1.262809382777272476572558806855377129513E11L,
  -7.015006277027660872284922325741197022467E9L,
  -2.149320689089020841076532186783055727299E8L,
  -3.167210585700002703820077565539658995316E6L,
  -1.576834867378554185210279285358586385266E4L
};
#define NRD6 8
static const long double RD6[NRD6 + 1] =
{
  -2.073955870771283609792355579558899389085E13L,
  -1.421592856111673959642750863283919318175E13L,
  -4.012134994918353924219048850264207074949E12L,
  -6.013361045800992316498238470888523722431E11L,
  -5.145382510136622274784240527039643430628E10L,
  -2.510575820013409711678540476918249524123E9L,
  -6.564058379709759600836745035871373240904E7L,
  -7.861511116647120540275354855221373571536E5L,
  -2.821943442729620524365661338459579270561E3L
  /* 1.0E0L */
};

#define NRN5 9
static const long double RN5[NRN5 + 1] =
{
  2.010952885441805899580403215533972172098E11L,
  1.916132681242540921354921906708215338584E11L,
  7.679102403710581712903937970163206882492E10L,
  1.680514903671382470108010973615268125169E10L,
  2.181011222911537259440775283277711588410E9L,
  1.705361119398837808244780667539728356096E8L,
  7.792391565652481864976147945997033946360E6L,
  1.910741381027985291688667214472560023819E5L,
  2.088138241893612679762260077783794329559E3L,
  6.330318119566998299106803922739066556550E0L
};
#define NRD5 8
static const long double RD5[NRD5 + 1] =
{
  1.335189758138651840605141370223112376176E11L,
  1.174130445739492885895466097516530211283E11L,
  4.308006619274572338118732154886328519910E10L,
  8.547402888692578655814445003283720677468E9L,
  9.934628078575618309542580800421370730906E8L,
  6.847107420092173812998096295422311820672E7L,
  2.698552646016599923609773122139463150403E6L,
  5.526516251532464176412113632726150253215E4L,
  4.772343321713697385780533022595450486932E2L
  /* 1.0E0L */
};

#define NRN4 9
static const long double RN4[NRN4 + 1] =
{
  -1.026583408246155508572442242188887829208E13L,
  -1.306476685384622809290193031208776258809E13L,
  -7.051088602207062164232806511992978915508E12L,
  -2.100849457735620004967624442027793656108E12L,
  -3.767473790774546963588549871673843260569E11L,
  -4.156387497364909963498394522336575984206E10L,
  -2.764021460668011732047778992419118757746E9L,
  -1.036617204107109779944986471142938641399E8L,
  -1.895730886640349026257780896972598305443E6L,
  -1.180509051468390914200720003907727988201E4L
};
#define NRD4 9
static const long double RD4[NRD4 + 1] =
{
  -8.172669122056002077809119378047536240889E12L,
  -9.477592426087986751343695251801814226960E12L,
  -4.629448850139318158743900253637212801682E12L,
  -1.237965465892012573255370078308035272942E12L,
  -1.971624313506929845158062177061297598956E11L,
  -1.905434843346570533229942397763361493610E10L,
  -1.089409357680461419743730978512856675984E9L,
  -3.416703082301143192939774401370222822430E7L,
  -4.981791914177103793218433195857635265295E5L,
  -2.192507743896742751483055798411231453733E3L
  /* 1.0E0L */
};

#define NRN3 9
static const long double RN3[NRN3 + 1] =
{
  -4.813901815114776281494823863935820876670E11L,
  -8.425592975288250400493910291066881992620E11L,
  -6.228685507402467503655405482985516909157E11L,
  -2.531972054436786351403749276956707260499E11L,
  -6.170200796658926701311867484296426831687E10L,
  -9.211477458528156048231908798456365081135E9L,
  -8.251806236175037114064561038908691305583E8L,
  -4.147886355917831049939930101151160447495E7L,
  -1.010851868928346082547075956946476932162E6L,
  -8.333374463411801009783402800801201603736E3L
};
#define NRD3 9
static const long double RD3[NRD3 + 1] =
{
  -5.216713843111675050627304523368029262450E11L,
  -8.014292925418308759369583419234079164391E11L,
  -5.180106858220030014546267824392678611990E11L,
  -1.830406975497439003897734969120997840011E11L,
  -3.845274631904879621945745960119924118925E10L,
  -4.891033385370523863288908070309417710903E9L,
  -3.670172254411328640353855768698287474282E8L,
  -1.505316381525727713026364396635522516989E7L,
  -2.856327162923716881454613540575964890347E5L,
  -1.622140448015769906847567212766206894547E3L
  /* 1.0E0L */
};

#define NRN2r5 8
static const long double RN2r5[NRN2r5 + 1] =
{
  -4.676454313888335499356699817678862233205E9L,
  -9.361888347911187924389905984624216340639E9L,
  -7.695353600835685037920815799526540237703E9L,
  -3.364370100981509060441853085968900734521E9L,
  -8.449902011848163568670361316804900559863E8L,
  -1.225249050950801905108001246436783022179E8L,
  -9.732972931077110161639900388121650470926E6L,
  -3.695711763932153505623248207576425983573E5L,
  -4.717341584067827676530426007495274711306E3L
};
#define NRD2r5 8
static const long double RD2r5[NRD2r5 + 1] =
{
  -6.650657966618993679456019224416926875619E9L,
  -1.099511409330635807899718829033488771623E10L,
  -7.482546968307837168164311101447116903148E9L,
  -2.702967190056506495988922973755870557217E9L,
  -5.570008176482922704972943389590409280950E8L,
  -6.536934032192792470926310043166993233231E7L,
  -4.101991193844953082400035444146067511725E6L,
  -1.174082735875715802334430481065526664020E5L,
  -9.932840389994157592102947657277692978511E2L
  /* 1.0E0L */
};

#define NRN2 9
static const long double RN2[NRN2 + 1] =
{
  -3.716661929737318153526921358113793421524E9L,
  -1.138816715030710406922819131397532331321E10L,
  -1.421017419363526524544402598734013569950E10L,
  -9.510432842542519665483662502132010331451E9L,
  -3.747528562099410197957514973274474767329E9L,
  -8.923565763363912474488712255317033616626E8L,
  -1.261396653700237624185350402781338231697E8L,
  -9.918402520255661797735331317081425749014E6L,
  -3.753996255897143855113273724233104768831E5L,
  -4.778761333044147141559311805999540765612E3L
};
#define NRD2 9
static const long double RD2[NRD2 + 1] =
{
  -8.790916836764308497770359421351673950111E9L,
  -2.023108608053212516399197678553737477486E10L,
  -1.958067901852022239294231785363504458367E10L,
  -1.035515043621003101254252481625188704529E10L,
  -3.253884432621336737640841276619272224476E9L,
  -6.186383531162456814954947669274235815544E8L,
  -6.932557847749518463038934953605969951466E7L,
  -4.240731768287359608773351626528479703758E6L,
  -1.197343995089189188078944689846348116630E5L,
  -1.004622911670588064824904487064114090920E3L
/* 1.0E0 */
};

#define NRN1r75 8
static const long double RN1r75[NRN1r75 + 1] =
{
  -5.221061693929833937710891646275798251513E7L,
  -2.052466337474314812817883030472496436993E8L,
  -2.952718275974940270675670705084125640069E8L,
  -2.132294039648116684922965964126389017840E8L,
  -8.554103077186505960591321962207519908489E7L,
  -1.940250901348870867323943119132071960050E7L,
  -2.379394147112756860769336400290402208435E6L,
  -1.384060879999526222029386539622255797389E5L,
  -2.698453601378319296159355612094598695530E3L
};
#define NRD1r75 8
static const long double RD1r75[NRD1r75 + 1] =
{
  -2.109754689501705828789976311354395393605E8L,
  -5.036651829232895725959911504899241062286E8L,
  -4.954234699418689764943486770327295098084E8L,
  -2.589558042412676610775157783898195339410E8L,
  -7.731476117252958268044969614034776883031E7L,
  -1.316721702252481296030801191240867486965E7L,
  -1.201296501404876774861190604303728810836E6L,
  -5.007966406976106636109459072523610273928E4L,
  -6.155817990560743422008969155276229018209E2L
  /* 1.0E0L */
};

#define NRN1r5 8
static const long double RN1r5[NRN1r5 + 1] =
{
  6.827103657233705798067415468881313128066E5L,
  1.910041815932269464714909706705242148108E6L,
  2.194344176925978377083808566251427771951E6L,
  1.332921400100891472195055269688876427962E6L,
  4.589080973377307211815655093824787123508E5L,
  8.900334161263456942727083580232613796141E4L,
  9.053840838306019753209127312097612455236E3L,
  4.053367147553353374151852319743594873771E2L,
  5.040631576303952022968949605613514584950E0L
};
#define NRD1r5 8
static const long double RD1r5[NRD1r5 + 1] =
{
  1.411036368843183477558773688484699813355E6L,
  4.378121767236251950226362443134306184849E6L,
  5.682322855631723455425929877581697918168E6L,
  3.999065731556977782435009349967042222375E6L,
  1.653651390456781293163585493620758410333E6L,
  4.067774359067489605179546964969435858311E5L,
  5.741463295366557346748361781768833633256E4L,
  4.226404539738182992856094681115746692030E3L,
  1.316980975410327975566999780608618774469E2L,
  /* 1.0E0L */
};

#define NRN1r25 9
static const long double RN1r25[NRN1r25 + 1] =
{
  -9.054787275312026472896002240379580536760E4L,
  -8.685076892989927640126560802094680794471E4L,
  2.797898965448019916967849727279076547109E5L,
  6.175520827134342734546868356396008898299E5L,
  5.179626599589134831538516906517372619641E5L,
  2.253076616239043944538380039205558242161E5L,
  5.312653119599957228630544772499197307195E4L,
  6.434329437514083776052669599834938898255E3L,
  3.385414416983114598582554037612347549220E2L,
  4.907821957946273805080625052510832015792E0L
};
#define NRD1r25 8
static const long double RD1r25[NRD1r25 + 1] =
{
  3.980939377333448005389084785896660309000E5L,
  1.429634893085231519692365775184490465542E6L,
  2.145438946455476062850151428438668234336E6L,
  1.743786661358280837020848127465970357893E6L,
  8.316364251289743923178092656080441655273E5L,
  2.355732939106812496699621491135458324294E5L,
  3.822267399625696880571810137601310855419E4L,
  3.228463206479133236028576845538387620856E3L,
  1.152133170470059555646301189220117965514E2L
  /* 1.0E0L */
};

#define NRN1 8
static const long double RN1[NRN1 + 1] =
{
  -9.987560186094800756471055681088744738818E3L,
  -2.506039379419574361949680225279376329742E4L,
  -1.386770737662176516403363873617457652991E4L,
  1.439445846078103202928677244188837130744E4L,
  2.159612048879650471489449668295139990693E4L,
  1.047439813638144485276023138173676047079E4L,
  2.250316398054332592560412486630769139961E3L,
  1.958510425467720733041971651126443864041E2L,
  4.516830313569454663374271993200291219855E0L
};
#define NRD1 7
static const long double RD1[NRD1 + 1] =
{
  1.730299573175751778863269333703788214547E4L,
  6.807080914851328611903744668028014678148E4L,
  1.090071629101496938655806063184092302439E5L,
  9.124354356415154289343303999616003884080E4L,
  4.262071638655772404431164427024003253954E4L,
  1.096981664067373953673982635805821283581E4L,
  1.431229503796575892151252708527595787588E3L,
  7.734110684303689320830401788262295992921E1L
 /* 1.0E0 */
};

#define NRNr9 8
static const long double RNr9[NRNr9 + 1] =
{
  4.441379198241760069548832023257571176884E5L,
  1.273072988367176540909122090089580368732E6L,
  9.732422305818501557502584486510048387724E5L,
  -5.040539994443998275271644292272870348684E5L,
  -1.208719055525609446357448132109723786736E6L,
  -7.434275365370936547146540554419058907156E5L,
  -2.075642969983377738209203358199008185741E5L,
  -2.565534860781128618589288075109372218042E4L,
  -1.032901669542994124131223797515913955938E3L,
};
#define NRDr9 8
static const long double RDr9[NRDr9 + 1] =
{
  -7.694488331323118759486182246005193998007E5L,
  -3.301918855321234414232308938454112213751E6L,
  -5.856830900232338906742924836032279404702E6L,
  -5.540672519616151584486240871424021377540E6L,
  -3.006530901041386626148342989181721176919E6L,
  -9.350378280513062139466966374330795935163E5L,
  -1.566179100031063346901755685375732739511E5L,
  -1.205016539620260779274902967231510804992E4L,
  -2.724583156305709733221564484006088794284E2L
/* 1.0E0 */
};

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> lgamma(ldoublev<Abi> x){
  const long double pi = 3.1415926535897932384626433832795028841972E0L;
  const long double MAXLGM = 1.0485738685148938358098967157129705071571E4928L;
  const long double huge = 1.0e4000L;
  const long double ls2pi = 9.1893853320467274178032973640561763986140E-1L;
  const long double lgam13a = 1.9987213134765625E1L;
  const long double lgam13b = 1.3608962611495173623870550785125024484248E-6L;
  const long double lgam12a = 1.75023040771484375E1L;
  const long double lgam12b = 3.7687254483392876529072161996717039575982E-6L;
  const long double lgam11a = 1.5104400634765625E1L;
  const long double lgam11b = 1.1938309890295225709329251070371882250744E-5L;
  const long double lgam10a = 1.280181884765625E1L;
  const long double lgam10b = 8.6324252196112077178745667061642811492557E-6L;
  const long double lgam9a = 1.06045989990234375E1L;
  const long double lgam9b = 3.9037218127284172274007216547549861681400E-6L;
  const long double lgam8a = 8.525146484375E0L;
  const long double lgam8b = 1.4876690414300165531036347125050759667737E-5L;
  const long double lgam7a = 6.5792388916015625E0L;
  const long double lgam7b = 1.2320408538495060178292903945321122583007E-5L;
  const long double lgam6a = 4.7874908447265625E0L;
  const long double lgam6b = 8.9805548349424770093452324304839959231517E-7L;
  const long double lgam5a = 3.17803955078125E0L;
  const long double lgam5b = 1.4279566695619646941601297055408873990961E-5L;
  const long double lgam4a = 1.791748046875E0L;
  const long double lgam4b = 1.1422353055000812477358380702272722990692E-5L;
  const long double lgam3a = 6.93145751953125E-1L;
  const long double lgam3b = 1.4286068203094172321214581765680755001344E-6L;
  const long double lgam2r5a = 2.8466796875E-1L;
  const long double lgam2r5b = 1.4901722919159632494669682701924320137696E-5L;
  const long double lgam1r75a = -8.441162109375E-2L;
  const long double lgam1r75b = 1.0500073264444042213965868602268256157604E-5L;
  const long double x0a = 1.4616241455078125L;
  const long double x0b = 7.9994605498412626595423257213002588621246E-6L;
  const long double y0a = -1.21490478515625E-1L;
  const long double y0b = 4.1879797753919044854428223084178486438269E-6L;
  const long double lgam1r25a = -9.82818603515625E-2L;
  const long double lgam1r25b = 1.0023929749338536146197303364159774377296E-5L;

  ldoublev<Abi> p, q, w, z, nx, retv, nn, tp;
  intv<Abi> i;

  ldoublev<Abi> signgam = 1;

  simd_mask<long double, Abi> jd, jdt1, jdt2;
  jd = x < 0.0L;
  q = -x;
  p = floor(q);
  jdt1 = (p==q);
  where(jd & jdt1, retv) = one / (p - p);

  i = static_simd_cast<intv<Abi>>(p);
  where(jd & (static_simd_cast<ldoublev<Abi>>(i&1)==0.L), signgam) = -1;
  z = q - p;

  where(jd & (z > 0.5L), p) = p + 1.0L;
  where(jd & (z > 0.5L), z) = p - q;

  z = q * sin(pi * z);

  jdt2 = (z==0.0L);
  // where(jd & (!jdt1) & jdt2, retv) = signgam * huge * huge;
  ldoublev<Abi> spc_value = x * neval_simd<Abi>(x, RN1, NRN1) / deval_simd<Abi>(x, RD1, NRD1);
  where(jd & (!jdt1) & jdt2, retv) = spc_value - log(x);

  ldoublev<Abi> jq(LLVM_NAN_128F);
  int jq_sum = 0;
  for (unsigned k = 0; k < jd.size(); ++k){
    if((jd & (!jdt1) & (!jdt2))[k]){
      jq[k] = q[k];
      jq_sum++;
    }
  }

  if(jq_sum){
    w = lgamma(jq);
    where(jd & (!jdt1) & (!jdt2), retv) = log(pi/z) - w;
  }

  jd = (x < 13.5L && x>0.0L);
  p = 0.0L;
  nx = floor(x+0.5L);
  nn = static_simd_cast<ldoublev<Abi>>(static_simd_cast<intv<Abi>>(nx));

  jdt1 = (nn==0.0L);
  jdt2 = (x<=0.125);
  where(jd & jdt1 & jdt2, p) = x * neval_simd<Abi>(x, RN1, NRN1) / deval_simd<Abi>(x, RD1, NRD1);

  z = x - 0.25L;
  tp = z * neval_simd<Abi>(z, RN1r25, NRN1r25) / deval_simd<Abi>(z, RD1r25, NRD1r25);
  tp += lgam1r25b;
  tp += lgam1r25a;
  jdt2 = (x>0.125) & (x<=0.375);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x + (1.0L - x0a);
  z = z - x0b;
  tp = neval_simd<Abi>(z, RN1r5, NRN1r5) / deval_simd<Abi>(z, RD1r5, NRD1r5);
  tp *= z * z;
  tp += y0b;
  tp += y0a;
  jdt2 = (x>0.375) & (x<=0.625);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 0.75L;
  tp = z * neval_simd<Abi>(z, RN1r75, NRN1r75) / deval_simd<Abi>(z, RD1r75, NRD1r75);
  tp += lgam1r75b;
  tp += lgam1r75a;
  jdt2 = (x>0.625) & (x<=0.875);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 1.0L;
  tp = z * neval_simd<Abi>(z, RN2, NRN2) / deval_simd<Abi>(z, RD2, NRD2);
  jdt2 = (x>0.875);
  where(jd & jdt1 & jdt2, p) = tp;

  where(jd & jdt1, p) = p - log(x);


  jdt1 = (nn==1.0L);
  z = x + (1.0L - x0a);
  z = z - x0b;
  tp = neval_simd<Abi>(z, RN1r5, NRN1r5) / deval_simd<Abi>(z, RD1r5, NRD1r5);
  tp *= z * z;
  tp += y0b;
  tp += y0a;
  jdt2 = (x<=0.625);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 0.75L;
  tp = z * neval_simd<Abi>(z, RN1r75, NRN1r75) / deval_simd<Abi>(z, RD1r75, NRD1r75);
  tp += lgam1r75b;
  tp += lgam1r75a;
  jdt2 = (x>0.625) & (x<=0.875);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 1.0L;
  tp = z * neval_simd<Abi>(z, RNr9, NRNr9) / deval_simd<Abi>(z, RDr9, NRDr9);
  jdt2 = (x>0.875) & (x<1.0L);
  where(jd & jdt1 & jdt2, p) = tp;
  where(jd & jdt1 & (x < 0.875L), p) = p - log(x);

  jdt2 = (x==1.0L);
  where(jd & jdt1 & jdt2, p) = 0.0L;

  z = x - 1.0L;
  tp = z * neval_simd<Abi>(z, RN1, NRN1) / deval_simd<Abi>(z, RD1, NRD1);
  jdt2 = (x>1.L) & (x<=1.125);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 1.25L;
  tp = z * neval_simd<Abi>(z, RN1r25, NRN1r25) / deval_simd<Abi>(z, RD1r25, NRD1r25);
  tp += lgam1r25b;
  tp += lgam1r25a;
  jdt2 = (x>1.125) & (x<=1.375);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - x0a;
  z = z - x0b;
  tp = neval_simd<Abi>(z, RN1r5, NRN1r5) / deval_simd<Abi>(z, RD1r5, NRD1r5);
  tp *= z * z;
  tp += y0b;
  tp += y0a;

  jdt2 = (x>1.375);
  where(jd & jdt1 & jdt2, p) = tp;


  jdt1 = (nn==2.0L);
  jdt2 = (x<1.625);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 1.75L;
  tp = z * neval_simd<Abi>(z, RN1r75, NRN1r75) / deval_simd<Abi>(z, RD1r75, NRD1r75);
  tp += lgam1r75b;
  tp += lgam1r75a;
  jdt2 = (x>=1.625) & (x<1.875);
  where(jd & jdt1 & jdt2, p) = tp;

  jdt2 = (x==2.0L);
  where(jd & jdt1 & jdt2, p) = 0.0L;

  z = x - 2.0L;
  tp = z * neval_simd<Abi>(z, RN2, NRN2) / deval_simd<Abi>(z, RD2, NRD2);
  jdt2 = (x>=1.875) & (x<2.375) && (x!=2.0L);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 2.5L;
  tp = z * neval_simd(z, RN2r5, NRN2r5) / deval_simd(z, RD2r5, NRD2r5);
  tp += lgam2r5b;
  tp += lgam2r5a;
  jdt2 = (x>=2.375);
  where(jd & jdt1 & jdt2, p) = tp;


  jdt1 = (nn == 3.0L);
  jdt2 = (x<2.75);
  where(jd & jdt1 & jdt2, p) = tp;

  z = x - 3.0L;
  tp = z * neval_simd(z, RN3, NRN3) / deval_simd(z, RD3, NRD3);
  tp += lgam3b;
  tp += lgam3a;
  jdt2 = (x>=2.75);
  where(jd & jdt1 & jdt2, p) = tp;

  jdt1 = (nn == 4.0L);
  z = x - 4.0L;
  tp = z * neval_simd(z, RN4, NRN4) / deval_simd(z, RD4, NRD4);
  tp += lgam4b;
  tp += lgam4a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 5.0L);
  z = x - 5.0L;
  tp = z * neval_simd(z, RN5, NRN5) / deval_simd(z, RD5, NRD5);
  tp += lgam5b;
  tp += lgam5a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 6.0L);
  z = x - 6.0L;
  tp = z * neval_simd(z, RN6, NRN6) / deval_simd(z, RD6, NRD6);
  tp += lgam6b;
  tp += lgam6a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 7.0L);
  z = x - 7.0L;
  tp = z * neval_simd(z, RN7, NRN7) / deval_simd(z, RD7, NRD7);
  tp += lgam7b;
  tp += lgam7a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 8.0L);
  z = x - 8.0L;
  tp = z * neval_simd(z, RN8, NRN8) / deval_simd(z, RD8, NRD8);
  tp += lgam8b;
  tp += lgam8a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 9.0L);
  z = x - 9.0L;
  tp = z * neval_simd(z, RN9, NRN9) / deval_simd(z, RD9, NRD9);
  tp += lgam9b;
  tp += lgam9a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 10.0L);
  z = x - 10.0L;
  tp = z * neval_simd(z, RN10, NRN10) / deval_simd(z, RD10, NRD10);
  tp += lgam10b;
  tp += lgam10a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 11.0L);
  z = x - 11.0L;
  tp = z * neval_simd(z, RN11, NRN11) / deval_simd(z, RD11, NRD11);
  tp += lgam11b;
  tp += lgam11a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 12.0L);
  z = x - 12.0L;
  tp = z * neval_simd(z, RN12, NRN12) / deval_simd(z, RD12, NRD12);
  tp += lgam12b;
  tp += lgam12a;
  where(jd & jdt1, p) = tp;

  jdt1 = (nn == 13.0L);
  z = x - 13.0L;
  tp = z * neval_simd(z, RN13, NRN13) / deval_simd(z, RD13, NRD13);
  tp += lgam13b;
  tp += lgam13a;
  where(jd & jdt1, p) = tp;
  where(jd, retv) = p;

  q = ls2pi - x;
  q = (x - 0.5L) * log(x) + q;
  where(x>1.0e18L, retv) = q;

  where(x>MAXLGM, retv) = signgam * huge * huge;

  p = 1.0L / (x * x);
  q += neval_simd(p, RASY, NRASY) / x;

  where((x>=13.5L) & (x<=1.0e18L), retv) = q;

  where(x==0.0L, retv) = LLVM_INF_128F;
  where(isnan(x), retv) = LLVM_NAN_128F;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> lgamma(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = lgamma(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif



static const double tgamma_p[8] = {
    -1.71618513886549492533811e0, 2.47656508055759199108314e1,
    -3.79804256470945635097577e2, 6.29331155312818442661052e2,
    8.66966202790413211295064e2, -3.14512729688483675254357e4,
    -3.61444134186911729807069e4, 6.64561438202405440627855e4};

static const double tgamma_q[8] = {
    -3.08402300119738975254353e1, 3.15350626979604161529144e2,
    -1.01515636749021914166146e3, -3.10777167157231109440444e3,
    2.25381184209801510330112e4, 4.75584627752788110767815e3,
    -1.34659959864969306392456e5, -1.15132259675553483497211e5};

static const double tgamma_c[7] = {-1.910444077728e-03,
                      8.4171387781295e-04, -5.952379913043012e-04,
                      7.93650793500350248e-04, -2.777777777777681622553e-03,
                      8.333333333333333331554247e-02, 5.7083835261e-03};

template <class Abi> 
floatv<Abi> tgamma(floatv<Abi> x){
  doublev<Abi> xd = static_simd_cast<doublev<Abi>>(x);
  static const double xminin = 2.23e-308, xbig = 171.624, eps =0;

  doublev<Abi> res, sum, xden, xnum, y, y1, ysq, z, sin_res;
  doublev<Abi> retv(0), factf(1), infv(LLVM_INF_64F), n(0), parity(0);
  int i;
  y = xd;
  simd_mask<double, Abi> jdtmp;
  simd_mask<double, Abi> jd1 = (y <= 0);
  where(jd1, y) = -xd;
  y1 = trunc(y);
  res = y - y1;

  jdtmp = (res != 0);
  simd_mask<double, Abi> jd11 = jd1 && jdtmp;
  where(jd11 && (y1 != trunc(y1 * 0.5) * 2), parity) = 1;

  sin_res = 0;
  for(unsigned k = 0; k < sin_res.size(); ++k){
    sin_res[k] = std::sin(PI * res[k]);
  }
  // where(jd11, factf) = -PI / sin(PI * res);
  where(jd11, factf) = -PI / sin_res;
  where(jd11, y) = y+1;

  simd_mask<double, Abi> jd12 = jd1 && (!jdtmp);
  simd_mask<double, Abi> jd121 = jd12 && (!jdtmp) && (xd==0);
  simd_mask<double, Abi> jd122 = jd12 && (!jdtmp) && (xd!=0);
  where(jd121, retv) = copysign(infv, xd);
  where(jd122, retv) = LLVM_NAN_64F;

  simd_mask<double, Abi> jd2 = (y < eps);
  jdtmp = (y >= xminin);
  simd_mask<double, Abi> jd21 = jd2 && jdtmp;
  simd_mask<double, Abi> jd22 = jd2 && !jdtmp;

  where(jd21, res) = 1/y;
  where(jd22, retv) = infv;

  simd_mask<double, Abi> jd3 = (y >= eps) && (y < 13);
  jdtmp = (y < 1);
  simd_mask<double, Abi> jd31 = jd3 && jdtmp;
  simd_mask<double, Abi> jd32 = jd3 && !jdtmp;

  y1 = y;

  where(jd31, z) = y;
  where(jd31, y) = y + 1;

  where(jd32, n) = trunc(y - 1);
  where(jd32, y) = y - n;
  where(jd32, z) = y - 1;

  xnum = 0;
  xden = 1;

  for (i = 0; i < 8; i++)
  {
      xnum = (xnum + tgamma_p[i]) * z;
      xden = xden * z + tgamma_q[i];
  }

  where(jd3, res) = xnum / xden + 1;

  simd_mask<double, Abi> jd33 = jd3 && (y1 < y);
  simd_mask<double, Abi> jd34 = jd3 && (y1 >= y);

  where(jd33, res) = res / y1;
  double n_max = hmax<double, Abi>(n);
  for(i=1; i<= (int)n_max; i++){
    where(jd34 && n>=1, res) = res * y;
    where(jd34 && n>=1, y) = y + 1;
    n -= 1;
  }

  simd_mask<double, Abi> jd4 = (y1 >= 13);
  jdtmp = (y < xbig);
  simd_mask<double, Abi> jd41 = jd4 && jdtmp;
  simd_mask<double, Abi> jd42 = jd4 && !jdtmp;

  ysq = y * y;
  sum = tgamma_c[6];
  for (i = 0; i < 6; i++)
      sum = sum / ysq + tgamma_c[i];

  sum = sum / y - y + SQRTPI;
  sum = sum + (y - 0.5) * log(y);
  where(jd41, res) = exp(sum);
  // for(unsigned k = 0; k < sum.size(); ++k){
  //   sum[i] = sum[i] + (y[i] - 0.5) * std::log(y[i]);
  //   if(jd41[i])
  //     res[i] = std::exp(sum[i]);
  // }
  
  jdtmp = x < 0;

  where(jd42 && jdtmp, retv) = LLVM_NAN_64F;
  where(jd42 && !jdtmp, retv) = LLVM_INF_64F;

  where(parity==1, res) = -res;
  where(factf!=1, res) = factf / res;
  where(retv==0, retv) = res;

  return static_simd_cast<floatv<Abi>>(retv);
}


#define Tgamma_S1 -1.66666666666666324348e-01
#define Tgamma_S2  8.33333333332248946124e-03
#define Tgamma_S3 -1.98412698298579493134e-04
#define Tgamma_S4  2.75573137070700676789e-06
#define Tgamma_S5 -2.50507602534068634195e-08
#define Tgamma_S6  1.58969099521155010221e-10

template <class Abi>
doublev<Abi> tgamma_sinfff(doublev<Abi> x, doublev<Abi> y, int iy)
{
	doublev<Abi> z,r,v,w;
	z = x*x;
	w = z*z;
	r = Tgamma_S2 + z*(Tgamma_S3 + z*Tgamma_S4) + z*w*(Tgamma_S5 + z*Tgamma_S6);
	v = z*x;
	if (iy == 0)
		return x + v*(Tgamma_S1 + z*r);
	else
		return x - ((z*(0.5*y - v*r) - y) - v*Tgamma_S1);
}


#define Tgamma_C1  4.16666666666666019037e-02
#define Tgamma_C2 -1.38888888888741095749e-03
#define Tgamma_C3  2.48015872894767294178e-05
#define Tgamma_C4 -2.75573143513906633035e-07
#define Tgamma_C5  2.08757232129817482790e-09
#define Tgamma_C6 -1.13596475577881948265e-11

template <class Abi>
doublev<Abi> tgamma_cosfff(doublev<Abi> x, doublev<Abi> y)
{
	doublev<Abi> hz,z,r,w;
	z  = x*x;
	w  = z*z;
	r  = z*(Tgamma_C1+z*(Tgamma_C2+z*Tgamma_C3)) + w*w*(Tgamma_C4+z*(Tgamma_C5+z*Tgamma_C6));
	hz = 0.5*z;
	w  = 1.0-hz;
	return w + (((1.0-w)-hz) + (z*r-x*y));
}



/* sin(pi x) with x > 0x1p-100, if sin(pi*x)==0 the sign is arbitrary */
template <class Abi>
doublev<Abi> tgamma_sinpi(doublev<Abi> x)
{
	intv<Abi> n;
  doublev<Abi> y, nd;
  static const double pi = 3.141592653589793238462643383279502884;
	/* argument reduction: x = |x| mod 2 */
	/* spurious inexact when x is odd int */
	x = x * 0.5;
	x = 2 * (x - floor(x));

	/* reduce x into [-.25,.25] */
	n = static_simd_cast<intv<Abi>>(4 * x);
	n = (n+1)/2;
  nd = static_simd_cast<doublev<Abi>>(n);
	x -= nd * 0.5;
	x *= pi;

  doublev<Abi> yd(0.0);
  where(nd==0.0 || nd== 4.0, y) = tgamma_sinfff(x, yd, 0);
  where(nd==1.0, y) = tgamma_cosfff(x, yd);
  where(nd==2.0, y) = tgamma_sinfff(-x, yd, 0);
  where(nd==3.0, y) = -tgamma_cosfff(x, yd);

  return y;
}

#define TGAMMA_N 12
//static const double g = 6.024680040776729583740234375;
static const double gmhalf = 5.524680040776729583740234375;
static const double Snum[TGAMMA_N+1] = {
	23531376880.410759688572007674451636754734846804940,
	42919803642.649098768957899047001988850926355848959,
	35711959237.355668049440185451547166705960488635843,
	17921034426.037209699919755754458931112671403265390,
	6039542586.3520280050642916443072979210699388420708,
	1439720407.3117216736632230727949123939715485786772,
	248874557.86205415651146038641322942321632125127801,
	31426415.585400194380614231628318205362874684987640,
	2876370.6289353724412254090516208496135991145378768,
	186056.26539522349504029498971604569928220784236328,
	8071.6720023658162106380029022722506138218516325024,
	210.82427775157934587250973392071336271166969580291,
	2.5066282746310002701649081771338373386264310793408,
};
static const double Sden[TGAMMA_N+1] = {
	0, 39916800, 120543840, 150917976, 105258076, 45995730, 13339535,
	2637558, 357423, 32670, 1925, 66, 1,
};
/* n! for small integer n */
static const double fact[] = {
	1, 1, 2, 6, 24, 120, 720, 5040.0, 40320.0, 362880.0, 3628800.0, 39916800.0,
	479001600.0, 6227020800.0, 87178291200.0, 1307674368000.0, 20922789888000.0,
	355687428096000.0, 6402373705728000.0, 121645100408832000.0,
	2432902008176640000.0, 51090942171709440000.0, 1124000727777607680000.0,
};

/* S(x) rational function for positive x */
template <class Abi>
doublev<Abi> tgamma_S(doublev<Abi> x)
{
	doublev<Abi> num(0.0), den(0.0);
	int i;

	/* to avoid overflow handle large x differently */
  auto jd = (x < 8.0);

	doublev<Abi> numt(0.0), dent(0.0);

  for (i = TGAMMA_N; i >= 0; i--) {
    numt = numt * x + Snum[i];
    dent = dent * x + Sden[i];
  }
  where(jd, num) = numt;
  where(jd, den) = dent;

  numt = 0.0;
  dent = 0.0;

  for (i = 0; i <= TGAMMA_N; i++) {
    numt = numt / x + Snum[i];
    dent = dent / x + Sden[i];
  }
  where(!jd, num) = numt;
  where(!jd, den) = dent;

	return num/den;
}

template <class Abi> doublev<Abi> tgamma(doublev<Abi> x){
  Abi_64suf<Abi> u;
	doublev<Abi> absx, y;
	doublev<Abi> dy, z, r;
  static const double pi = 3.141592653589793238462643383279502884;


  u.f = x;
	uintv<Abi> ix = static_simd_cast<uintv<Abi>>(u.i>>32) & 0x7fffffffU;
	doublev<Abi> sign = static_simd_cast<doublev<Abi>>(u.i>>63);

  absx = x;
  where(sign==-1.0, absx) = -absx;

	/* handle the error of x + g - 0.5 */
	y = absx + gmhalf;
  auto jd = absx > gmhalf;
  where(jd, dy) = y - absx;
  where(jd, dy) = dy - gmhalf;
  where(!jd, dy) = y - gmhalf;
  where(!jd, dy) = dy - absx;

	z = absx - 0.5;
	r = tgamma_S(absx) * exp(-y);

  where(x<0, r) = -pi / (tgamma_sinpi(absx) * absx * r);

  where(x<0, dy) = -dy;
  where(x<0, z) = -z;

	r += dy * (gmhalf+0.5) * r / y;

	z = pow(y, 0.5*z);
	y = r * z * z;

	/* x >= 172: tgamma(x)=inf with overflow */
	/* x =< -184: tgamma(x)=+-0 with underflow */
  jd = change_simd_mask_type<unsigned int, double, Abi>(ix >= 0x40670000U);
  auto jdt = sign==-1.0;
  auto jdtt = (floor(x) * 0.5 == floor(x * 0.5));
  where(jd && jdt && jdtt, y) = 0.0;
  where(jd && jdt && !jdtt, y) = -0.0;
  where(jd && !jdt, y) = x * 0x1p1023;

  /* integer arguments */
	/* raise inexact when non-integer */
  jd = x == floor(x);
  where(jd && jdt, y) = LLVM_NAN_64F;

  jdtt = x <= (double)(sizeof fact/sizeof *fact);
  for (unsigned i = 0; i < jd.size(); ++i){
    if((jd && jdt)[i])
      y[i] = fact[(int)x[i] - 1];
  }

  /* |x| < 2^-54: tgamma(x) ~ 1/x, +-0 raises div-by-zero */
  jd = change_simd_mask_type<unsigned int, double, Abi>(ix < (0x3ff-54)<<20);
  where(jd, y) = 1/x;

  // // /* special cases */
  // /* tgamma(nan)=nan, tgamma(inf)=inf, tgamma(-inf)=nan with invalid */
  jd = change_simd_mask_type<unsigned int, double, Abi>(ix >= 0x7ff00000);
  where(jd, y)= x + LLVM_INF_64F;

	return y;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> tgamma(ldoublev<Abi> x){
  ldoublev<Abi> retv, ty;
  Abi_128suf<Abi> ux;
  ux.f = x;

  ulongv<Abi> i0 = GET_LONGDOUBLE_HI(ux.u);
  ulongv<Abi> i1 = GET_LONGDOUBLE_LO(ux.u);
  simd_mask<long double, Abi> jd1, jd2, jd3, jd4;
  jd1 = change_simd_mask_type<unsigned long int, long double, Abi>(((i0 & 0x7fffffffffffffffUL) | i1) == 0);
  where(jd1, retv) = 1.0L / x;

  jd2 = change_simd_mask_type<unsigned long int, long double, Abi>((i0 < 0) && (i0 < 0xffff000000000000UL));
  jd2 = jd2 && (rint(x) == x);
  where(jd2, retv) = (x - x) / (x - x);

  jd3 = change_simd_mask_type<unsigned long int, long double, Abi>((i0 == 0xffff000000000000UL) && (i1 == 0));
  where(jd3, retv) = (x - x);
  jd4 = (x < 0) && (x > -1);

  ty = exp(lgamma(x));

  // for (unsigned i = 0; i < x.size(); ++i){
  //   ty[i] = std::exp(std::lgamma(x[i]));
  // }
  where(!(jd1 | jd2 | jd3), retv) = ty;
  where(!(jd1 | jd2 | jd3) & jd4, retv) = -retv;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> tgamma(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = tgamma(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


#define UNUSED(expr) do { (void)(expr); } while (0)

template <class Abi> doublev<Abi> 
nan(const char* tagp){
  UNUSED(tagp);
  doublev<Abi> retv(LLVM_NAN_64F);
  return retv;
}

template <class Abi> 
floatv<Abi> nanf(const char* tagp){
  UNUSED(tagp);
  floatv<Abi> retv(LLVM_NAN_32F);
  return retv;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> 
ldoublev<Abi> nanl(const char* tagp){
  UNUSED(tagp);
  ldoublev<Abi> retv(LLVM_NAN_128F);
  return retv;
}
#else
template <class Abi> ldoublev<Abi> nanl(const char* tagp)
{
  UNUSED(tagp);
  doublev<Abi> retv(LLVM_NAN_64F);
  return static_simd_cast<ldoublev<Abi>>(retv);
}
#endif


template <class Abi> floatv<Abi> remquo(floatv<Abi> x, floatv<Abi> y, samesize<int, floatv<Abi>> *quo)
{
  intv<Abi> hx, hy, cquo, qs, re_quo;
  uintv<Abi> sx;
  Abi_32suf<Abi> ux, uy;

  ux.f = x;
  uy.f = y;
  hx = ux.i;
  hy = uy.i;
  sx = static_simd_cast<uintv<Abi>>(hx) & 0x80000000;
  qs = static_simd_cast<intv<Abi>>(sx ^ (static_simd_cast<uintv<Abi>>(hy) & 0x80000000));
  hy &= 0x7fffffff;
  hx &= 0x7fffffff;
  re_quo = *quo;

  auto spc_mask1 = simd_mask<float, Abi>(static_simd_cast<uintv<Abi>>(hy) == 0);
  auto spc_mask2 = simd_mask<float, Abi>((hx >= 0x7f800000) || (hy > 0x7f800000));
  floatv<Abi> spc_result1 = (x * y) / (x * y);

  auto spc1_f = simd_mask<float, Abi>(hy <= 0x7dffffff);
  where(spc1_f, x) = fmod(x, (8 * y));
  auto spc2 = ((hx - hy) == 0);
  auto spc_mask3 = simd_mask<float, Abi>(spc2);
  auto spc2_1 = (qs == 0);

  x = abs(x);
  y = abs(y);
  cquo = 0;

  auto spc3_f = (simd_mask<float, Abi>(hy <= 0x7e7fffff) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;
  where(simd_mask<int, Abi>(spc3_f), cquo) = cquo + 4;

  auto spc4_f = (simd_mask<float, Abi>(hy <= 0x7effffff) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;
  where(simd_mask<int, Abi>(spc4_f), cquo) = cquo + 2;


  auto spc5_f = simd_mask<float, Abi>(hy < 0x01000000);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part), cquo) = cquo + 1;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part_1), cquo) = cquo + 1;

  floatv<Abi> y_half = 0.5f * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part), cquo) = cquo + 1;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part_1), cquo) = cquo + 1;

  where(simd_mask<int, Abi>(spc2_1), cquo) = cquo;
  where(simd_mask<int, Abi>(!spc2_1), cquo) = -cquo;
  where(simd_mask<int, Abi>(spc2 & spc2_1), cquo) = 1;
  where(simd_mask<int, Abi>(spc2 & !spc2_1), cquo) = -1;
  where(simd_mask<int, Abi>(spc_mask2 | spc_mask1), cquo) = re_quo;

  auto spc7 = simd_mask<float, Abi>(sx != 0);
  floatv<Abi> result = x;
  where(spc7, result) = -x;
  where(spc_mask3, result) = 0 * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;
  *quo = cquo;
  return result;
}

template <class Abi> doublev<Abi> remquo(doublev<Abi> x, doublev<Abi> y, samesize<int, doublev<Abi>> *quo){
  longv<Abi> hx, hy, qs;
  ulongv<Abi> lx, ly, sx;
  intv<Abi> cquo, re_quo;
  Abi_64suf<Abi> ux, uy, tmp;
  re_quo = *quo;

  ux.f = x;
  uy.f = y;
  hx = static_simd_cast<longv<Abi>>((ux.u & 0xffffffff00000000UL));
  lx = static_simd_cast<ulongv<Abi>>((ux.u & 0xffffffffUL));
  hy = static_simd_cast<longv<Abi>>((uy.u & 0xffffffff00000000UL));
  ly = static_simd_cast<ulongv<Abi>>((uy.u & 0xffffffffUL));

  sx = static_simd_cast<ulongv<Abi>>(hx) & 0x8000000000000000UL;
  qs = static_simd_cast<longv<Abi>>(sx ^ (static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000UL));
  hy = static_simd_cast<longv<Abi>>(static_simd_cast<ulongv<Abi>>(hy) & 0x7fffffff00000000UL);
  hx = static_simd_cast<longv<Abi>>(static_simd_cast<ulongv<Abi>>(hx) & 0x7fffffff00000000UL);

  auto spc_mask1 = simd_mask<double, Abi>((static_simd_cast<ulongv<Abi>>(hy) | ly) == 0);
  auto spc_mask2 = simd_mask<double, Abi>((hx >= 0x7ff0000000000000LL) || ((hy >= 0x7ff0000000000000LL) && (((hy - 0x7ff0000000000000LL) | static_simd_cast<longv<Abi>>(ly)) != 0)));
  doublev<Abi> spc_result1 = (x * y) / (x * y);
  
  auto spc1_f = simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <=0x7fbfffff00000000UL);
  where(spc1_f, x) = fmod(x, (8 * y));


  auto spc2 = ((static_simd_cast<ulongv<Abi>>(hx - hy)) | (lx - ly)) == 0;
  auto spc_mask3 = simd_mask<double, Abi>(spc2);
  auto spc2_1 = change_simd_mask_type<long, unsigned long, Abi>(qs == 0);

  x = abs(x);
  y = abs(y);
  cquo = 0;

  auto spc3_f = (simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <= 0x7fcfffff00000000UL) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;
  where(simd_mask<int, Abi>(spc3_f), cquo) = cquo + 4;

  auto spc4_f = (simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) <= 0x7fdfffff00000000UL) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;
  where(simd_mask<int, Abi>(spc4_f), cquo) = cquo + 2;

  auto spc5_f = simd_mask<double, Abi>(static_simd_cast<ulongv<Abi>>(hy) < 0x0020000000000000UL);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part), cquo) = cquo + 1;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part_1), cquo) = cquo + 1;
  
  doublev<Abi> y_half = 0.5 * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part), cquo) = cquo + 1;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part_1), cquo) = cquo + 1;

  where(simd_mask<int, Abi>(spc2_1), cquo) = cquo;
  where(simd_mask<int, Abi>(!spc2_1), cquo) = -cquo;
  where(simd_mask<int, Abi>(spc2 & spc2_1), cquo) = 1;
  where(simd_mask<int, Abi>(spc2 & !spc2_1), cquo) = -1;
  where(simd_mask<int, Abi>(spc_mask2 | spc_mask1), cquo) = re_quo;

  auto spc7 = simd_mask<double, Abi>(sx != 0);
  doublev<Abi> result = x;
  where(spc7, result) = -x;
  where(spc_mask3, result) = 0.0 * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;


  *quo = cquo;
  return result;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> remquo(ldoublev<Abi> x, ldoublev<Abi> y , samesize<int, ldoublev<Abi>> *quo)
{
  longv<Abi> hx, hy;
  ulongv<Abi> sx, lx, ly, qs;
  intv<Abi> cquo, re_quo;
  Abi_128suf<Abi> ux, uy;
  re_quo = *quo;

  ux.f = x;
  uy.f = y;
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));
  lx = GET_LONGDOUBLE_LO(ux.u);
  hy = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(uy.u));
  ly = GET_LONGDOUBLE_LO(uy.u);

  sx = static_simd_cast<ulongv<Abi>>(hx) & 0x8000000000000000ULL;
  qs = sx ^ (static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000ULL);
  hy = hy & 0x7fffffffffffffffLL;
  hx = hx & 0x7fffffffffffffffLL;

  auto spc_mask1 = simd_mask<long double, Abi>((static_simd_cast<ulongv<Abi>>(hy) | lx) == 0);
  auto spc_mask2 = simd_mask<long double, Abi>((hx >= 0x7fff000000000000LL) || ((hy >= 0x7fff000000000000LL) && (((hy - 0x7fff000000000000LL) | static_simd_cast<longv<Abi>>(ly)) != 0)));
  ldoublev<Abi> spc_result1 = (x * y) / (x * y);
  
  auto spc1_f = simd_mask<long double, Abi>(hy <=0x7ffbffffffffffffLL);
  where(spc1_f, x) = fmod(x, 8 * y);

  auto spc2 = (static_simd_cast<ulongv<Abi>>(hx - hy) | (lx - ly)) == 0;
  auto spc_mask3 = simd_mask<long double, Abi>(spc2);
  auto spc2_1 = (qs == 0);

  x = abs(x);
  y = abs(y);
  cquo = 0;

  auto spc3_f = (simd_mask<long double, Abi>(hy <= 0x7ffcffffffffffffLL) && (x >= 4 * y));
  where(spc3_f, x) = x - 4 * y;
  where(simd_mask<int, Abi>(spc3_f), cquo) = cquo + 4;

  auto spc4_f = (simd_mask<long double, Abi>(hy <= 0x7ffdffffffffffffLL) && (x >= 2 * y));
  where(spc4_f, x) = x - 2 * y;
  where(simd_mask<int, Abi>(spc4_f), cquo) = cquo + 2;

  auto spc5_f = simd_mask<long double, Abi>(hy < 0x0002000000000000LL);
  auto spc5_1_f = (x + x > y);
  auto spc5_part = (spc5_f & spc5_1_f);
  where(spc5_part, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part), cquo) = cquo + 1;
  auto spc5_1_1_f = (x + x >= y);
  auto spc5_part_1 = (spc5_part & spc5_1_1_f);
  where(spc5_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc5_part_1), cquo) = cquo + 1;
  
  ldoublev<Abi> y_half = 0.5L * y;
  auto spc6_1_f = (x > y_half);
  auto spc6_part = (!spc5_f & spc6_1_f);
  where(spc6_part, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part), cquo) = cquo + 1;
  auto spc6_1_1_f = (x >= y_half);
  auto spc6_part_1 = (spc6_part & spc6_1_1_f);
  where(spc6_part_1, x) = x - y;
  where(simd_mask<int, Abi>(spc6_part_1), cquo) = cquo + 1;

  where(simd_mask<int, Abi>(spc2_1), cquo) = cquo;
  where(simd_mask<int, Abi>(!spc2_1), cquo) = -cquo;
  where(simd_mask<int, Abi>(spc2 & spc2_1), cquo) = 1;
  where(simd_mask<int, Abi>(spc2 & !spc2_1), cquo) = -1;
  where(simd_mask<int, Abi>(spc_mask2 | spc_mask1), cquo) = re_quo;

  auto spc7 = simd_mask<long double, Abi>(sx != 0);
  ldoublev<Abi> result = x;
  where(spc7, result) = -x;
  where(spc_mask3, result) = 0.0L * x;
  where(spc_mask2 | spc_mask1, result) = spc_result1;

  *quo = cquo;
  return result;
}
#else
template <class Abi> ldoublev<Abi> remquo(ldoublev<Abi> x, ldoublev<Abi> y , samesize<int, ldoublev<Abi>> *quo)
{
  doublev<Abi> src1, src2, res;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  res = remquo(src1, src2, quo);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif

#define FP_NAN       0
#define FP_INFINITE  1
#define FP_ZERO      2
#define FP_SUBNORMAL 3
#define FP_NORMAL    4
template <class Abi> samesize<int, floatv<Abi>> fpclassify(floatv<Abi> x)
{
  Abi_32suf<Abi> ux;
  uintv<Abi> exp, end;
  samesize<uint, floatv<Abi>> result;
  ux.f = x;
  exp = ux.u & 0x7f800000;
  end = ux.u & 0x007fffff;
  result = FP_NORMAL;
  
  auto spc3 = (exp == 0x7f800000);
  auto spc3_1 = (end != 0);
  where(spc3 & spc3_1, result) = FP_NAN;
  where(spc3 & !spc3_1, result) = FP_INFINITE;
  auto spc2 = (exp == 0);
  where(spc2, result) = FP_SUBNORMAL;
  auto spc1 = ((exp | end) == 0);
  where(spc1, result) = FP_ZERO;
  
  return static_simd_cast<samesize<int, floatv<Abi>>>(result);
}
template <class Abi> samesize<int, doublev<Abi>> fpclassify(doublev<Abi> x)
{
  Abi_64suf<Abi> tmp;
  intv<Abi> e;
  doublev<Abi> res = FP_NORMAL;
  tmp.f = x;
  e = static_simd_cast<intv<Abi>>(tmp.u >> 52ULL & 0x7ffULL);
  auto jd1 = change_simd_mask_type<int, double, Abi>(e == 0);
  auto jd2 = change_simd_mask_type<unsigned long int, double, Abi>(tmp.u << 1 == 0);
  auto jd3 = change_simd_mask_type<int, double, Abi>(e == 0x7ff);
  auto jd4 = change_simd_mask_type<unsigned long int, double, Abi>(tmp.u << 12 == 0);
  where(jd1 & jd2, res) = FP_ZERO;
  where(jd1 & !jd2, res) = FP_SUBNORMAL; 
  where(jd3 & jd4, res) = FP_INFINITE; 
  where(jd3 & !jd4, res) = FP_NAN; 

  return static_simd_cast<samesize<int, doublev<Abi>>>(res);
}

#ifdef LDOUBLE_BINARY128
template <class Abi> samesize<int, ldoublev<Abi>> fpclassify(ldoublev<Abi> x)
{
  Abi_128suf<Abi> tmp;
  intv<Abi> e;
  ldoublev<Abi> res = FP_NORMAL;
  tmp.f = x;
  e = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_SE(tmp.u) & 0x7fff);
  tmp.u = (tmp.u << 16) >> 16;
  auto jd1 = change_simd_mask_type<int, long double, Abi>(e == 0);
  auto jd2 = change_simd_mask_type<unsigned long int, long double, Abi>((GET_LONGDOUBLE_LO(tmp.u) | GET_LONGDOUBLE_HI(tmp.u)) == 0);
  auto jd3 = change_simd_mask_type<int, long double, Abi>(e == 0x7fff);
  where(jd1 & jd2, res) = FP_ZERO;
  where(jd1 & !jd2, res) = FP_SUBNORMAL; 
  where(jd3 & jd2, res) = FP_INFINITE; 
  where(jd3 & !jd2, res) = FP_NAN; 

  return static_simd_cast<samesize<int, ldoublev<Abi>>>(res);
}
#else
template <class Abi> samesize<int, ldoublev<Abi>> fpclassify(ldoublev<Abi> x)
{
  doublev<Abi> src1 = static_simd_cast<doublev<Abi>>(x);
  samesize<int, doublev<Abi>> res = fpclassify(src1);
  return static_simd_cast<samesize<int, ldoublev<Abi>>>(res);
}
#endif

template <class Abi>
floatv<Abi> atan2(floatv<Abi> y, floatv<Abi> x) {
  floatv<Abi> res;

  // seecial case
  Abi_32suf<Abi> ux, uy;
  uintv<Abi> axu, ayu, m;
  intv<Abi> diff_exp;
  floatv<Abi> tiny  = 1.0e-30f;
  const uintv<Abi> AbsMask_f32 = 0x7fffffffU;
  floatv<Abi> pi = 3.1415926535897932384626434f;
  floatv<Abi> PI_2 = 1.5707963267948966192313216f,
              PI_4 = 0.78539816339744830961566084581f;

  ux.f = x;
  uy.f = y;
  axu = ux.u & AbsMask_f32;
  ayu = uy.u & AbsMask_f32;

  auto jd1 = change_simd_mask_type<uint32_t, float, Abi>((axu>0x7f800000 | ayu>0x7f800000));
  where(jd1, res) = x + y;

  m = ((uy.u >> 31) & 1) | ((ux.u >> 30) & 2);    // 2 * x_sign + y_sign m=0()
  diff_exp = (static_simd_cast<intv<Abi>>)(axu >> 23) - (static_simd_cast<intv<Abi>>)(ayu >> 23); // x_exp - y_exp

  auto jd2 = change_simd_mask_type<uint32_t, float, Abi>((ayu == 0 
    | (change_simd_mask_type<int, uint32_t, Abi>(diff_exp >= 24) & m >= 2)));
  auto jdm1 = change_simd_mask_type<uint32_t, float, Abi>(m == 0);
  auto jdm2 = change_simd_mask_type<uint32_t, float, Abi>(m == 1);
  auto jdm3 = change_simd_mask_type<uint32_t, float, Abi>(m == 2);
  auto jdm4 = change_simd_mask_type<uint32_t, float, Abi>(m == 3);
  jd1 = !jd1 & jd2;
  where(jd1 & jdm1, res) = 0;
  where(jd1 & jdm2, res) = y;
  where(jd1 & jdm3, res) = pi;
  where(jd1 & jdm4, res) = -pi;
  jd1 = !jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4));

  jd2 = change_simd_mask_type<uint32_t, float, Abi>((axu==0 | change_simd_mask_type<int, uint32_t, Abi>(diff_exp < -24)));
  auto jd3 = y < 0;
  jd1 = jd1 & jd2;
  where(jd1 & jd2 & jd3, res) = -PI_2-tiny;
  where(jd1 & jd2 & !jd3, res) = PI_2+tiny;
  jd1 = jd1 & !jd2;

  jd2 = isinf(x);
  jd3 = isinf(y);
  where(jd1 & jd2 & jd3 & jdm1, res) = PI_4+tiny;
  where(jd1 & jd2 & jd3 & jdm2, res) = -PI_4+tiny;
  where(jd1 & jd2 & jd3 & jdm3, res) = 3.0f * PI_4+tiny;
  where(jd1 & jd2 & jd3 & jdm4, res) = -3.0f * PI_4+tiny;

  where(jd1 & jd2 & !jd3 & jdm1, res) = 0.0f;
  where(jd1 & jd2 & !jd3 & jdm2, res) = -0.0f;
  where(jd1 & jd2 & !jd3 & jdm3, res) =  pi+tiny;
  where(jd1 & jd2 & !jd3 & jdm4, res) = -pi+tiny;

  jd1 = jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4));

  auto jd4 = y < 0;
  where(jd1 & jd4 & jd3, res) = -PI_2-tiny;
  where(jd1 & jd4 & !jd3, res) = PI_2+tiny;
  jd1 = jd1 & !jd4;

  intv<Abi> jdtmp = 0;
  where(change_simd_mask_type<float, int, Abi>(!jd1), jdtmp) = 1;
  if(reduce(jdtmp) == 0) [[unlikely]]
  {
    return res;
  }

  floatv<Abi> yabs;
  floatv<Abi> xt = x;
  floatv<Abi> s, t, u;
  intv<Abi> q = 0;
  Abi_32suf<Abi> tmpx, tmpy, ans;
  tmpx.f = x;
  tmpy.f = y;
  yabs = abs(y);
  tmpx.u &= 0x80000000U;
  tmpy.u &= 0x80000000U;
  tmpx.u = tmpx.u^tmpy.u;

  auto jd5 = (xt < 0);
  where(jd5, xt) = -xt;
  where(change_simd_mask_type<float, int, Abi>(jd5), q) = -2;
  jd5 = (yabs > xt);
  where(jd5, t) = xt;
  where(jd5, xt) = yabs;
  where(jd5, yabs) = -t; 
  where(change_simd_mask_type<float, int, Abi>(jd5), q) = q + 1;

  s = yabs / xt;
  t = s * s;
  u = ((((((0.00282363896258175373077393f*t+
        -0.0159569028764963150024414f)*t+
        0.0425049886107444763183594f)*t+
        -0.0748900920152664184570312f)*t+
        0.106347933411598205566406f)*t+
        -0.142027363181114196777344f)*t+
        0.199926957488059997558594f)*t+
        -0.333331018686294555664062f;

  t = u * t * s + s;
  t = (static_simd_cast<floatv<Abi>>(q) * 1.5707963267948966192313216916398f + (t));

  ans.f = t;
  ans.u = ans.u ^ tmpx.u;
  where(!jd1, res) = ans.f;
  return res;
}

template <class Abi>
doublev<Abi> atan2(doublev<Abi> y, doublev<Abi> x) {
  doublev<Abi> res;
  // seecial case
  Abi_64suf<Abi> ux, uy;
  ulongv<Abi> axu, ayu, m;
  longv<Abi> diff_exp;
  const ulongv<Abi> AbsMask_f64 = 0x7fffffffffffffffULL;
  doublev<Abi> pi = 3.1415926535897932384626434;
  doublev<Abi> PI_2 = 1.5707963267948966192313216,
               PI_4 = 0.78539816339744830961566084581;

  ux.f = x;
  uy.f = y;
  axu = ux.u & AbsMask_f64;
  ayu = uy.u & AbsMask_f64;

  auto jd1 = change_simd_mask_type<unsigned long, double, Abi>((axu>0x7ff0000000000000ULL || ayu>0x7ff0000000000000ULL));
  where(jd1, res) = x + y;

  m = ((uy.u >> 63) & 1) | ((ux.u >> 62) & 2);    // 2 * x_sign + y_sign m=0()
  diff_exp = (static_simd_cast<longv<Abi>>)(axu >>52) - (static_simd_cast<longv<Abi>>)(ayu >>52); // x_exp - y_exp

  auto jd2 = change_simd_mask_type<unsigned long, double, Abi>((ayu == 0 
    | (change_simd_mask_type<int, unsigned long, Abi>(diff_exp >= 62) & m >= 2)));
  auto jdm1 = change_simd_mask_type<unsigned long, double, Abi>(m == 0);
  auto jdm2 = change_simd_mask_type<unsigned long, double, Abi>(m == 1);
  auto jdm3 = change_simd_mask_type<unsigned long, double, Abi>(m == 2);
  auto jdm4 = change_simd_mask_type<unsigned long, double, Abi>(m == 3);
  jd1 = !jd1 & jd2;
  where(jd1 & jdm1, res) = 0;
  where(jd1 & jdm2, res) = y;
  where(jd1 & jdm3, res) = pi;
  where(jd1 & jdm4, res) = -pi;
  jd1 = !jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4));

  jd2 = change_simd_mask_type<unsigned long, double, Abi>((axu==0 | change_simd_mask_type<int, unsigned long, Abi>(diff_exp < -62)));
  auto jd3 = y < 0;
  jd1 = jd1 & jd2;
  where(jd1 & jd2 & jd3, res) = -PI_2;
  where(jd1 & jd2 & !jd3, res) = PI_2;
  jd1 = jd1 & !jd2;

  jd2 = isinf(x);
  jd3 = isinf(y);
  where(jd1 & jd2 & jd3 & jdm1, res) = PI_4;
  where(jd1 & jd2 & jd3 & jdm2, res) = -PI_4;
  where(jd1 & jd2 & jd3 & jdm3, res) = 3.0f * PI_4;
  where(jd1 & jd2 & jd3 & jdm4, res) = -3.0f * PI_4;

  where(jd1 & jd2 & !jd3 & jdm1, res) = 0.0f;
  where(jd1 & jd2 & !jd3 & jdm2, res) = -0.0f;
  where(jd1 & jd2 & !jd3 & jdm3, res) =  pi;
  where(jd1 & jd2 & !jd3 & jdm4, res) = -pi;
  jd1 = jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4));

  jd2 = y < 0;
  where(jd1 & jd3 & jd2, res) = -PI_2;
  where(jd1 & jd3 & !jd2, res) = PI_2;
  jd1 = jd1 & !jd3;

  intv<Abi> jdtmp = 0;
  where(change_simd_mask_type<double, int, Abi>(!jd1), jdtmp) = 1;
  if(reduce(jdtmp) == 0) [[unlikely]]
  {
    return res;
  }

  doublev<Abi> yabs;
  doublev<Abi> xt = x;
  doublev<Abi> s, t, u;
  intv<Abi> q = 0;
  Abi_64suf<Abi> tmpx, tmpy, ans, tmp;
  tmp.f = y;
  tmp.u &=0x7fffffffffffffffULL;
  yabs = tmp.f;
  tmpx.f = x;
  tmpy.f = y;
  tmpx.u &= 0x8000000000000000ULL;
  tmpy.u &= 0x8000000000000000ULL;
  tmpx.u = tmpx.u^tmpy.u;

  auto jd4 = (xt < 0);
  where(jd4, xt) = -xt;
  where(change_simd_mask_type<double, int, Abi>(jd4), q) = -2;
  jd4 = (yabs > xt);
  where(jd4, t) = xt;
  where(jd4, xt) = yabs;
  where(jd4, yabs) = -t; 
  where(change_simd_mask_type<double, int, Abi>(jd4), q) = q + 1;

  s = yabs / xt;
  t = s * s;
  u = (((((((((((((((((-1.88796008463073496563746e-05*t+
        0.000209850076645816976906797)*t+
        -0.00110611831486672482563471)*t+
        0.00370026744188713119232403)*t+
        -0.00889896195887655491740809)*t+
        0.016599329773529201970117)*t+
        -0.0254517624932312641616861)*t+
        0.0337852580001353069993897)*t+
        -0.0407629191276836500001934)*t+
        0.0466667150077840625632675)*t+
        -0.0523674852303482457616113)*t+
        0.0587666392926673580854313)*t+
        -0.0666573579361080525984562)*t+
        0.0769219538311769618355029)*t+
        -0.090908995008245008229153)*t+
        0.111111105648261418443745)*t+
        -0.14285714266771329383765)*t+
        0.199999999996591265594148)*t+
        -0.333333333333311110369124;
  t = u * t * s + s;
  t = static_simd_cast<doublev<Abi>>(q) * 3.141592653589793238462643383279502884/2 + t;
  
  ans.f = t;
  ans.u = ans.u ^ tmpx.u;
  where(!jd1, res) = ans.f;
  return res;
}

#ifdef LDOUBLE_BINARY128
template <class Abi>
ldoublev<Abi> atan2(ldoublev<Abi> y, ldoublev<Abi> x) {
  ldoublev<Abi>
      pio2_hi = 1.57079632679489661923132169163975140e+00L,
      pio2_lo = 4.33590506506189051239852201302167613e-35L,
      pi = 3.14159265358979323846264338327950280e+00L,
      tiny = 1.0e-300,
      zero = 0.0,
      pi_lo = 8.67181013012378102479704402604335225e-35L;
  Abi_128suf<Abi> ux, uy;
  ldoublev<Abi> z, res;
  intv<Abi> k, m;
  shortv<Abi> exptx, expsignx, expty, expsigny;
  shortv<Abi> BIAS = (LDBL_MAX_EXP - 1);

  uy.f = y;
  expsigny = static_simd_cast<shortv<Abi>>(GET_LONGDOUBLE_SE(uy.u));
  expty = expsigny & 0x7fff;
  ux.f = x;
  expsignx = static_simd_cast<shortv<Abi>>(GET_LONGDOUBLE_SE(ux.u));
  exptx = expsignx & 0x7fff;


  auto jd1 = isnan(x) | isnan(y);
  where(jd1, res) = x + y;

  auto jd4 = change_simd_mask_type<short, long double, Abi>(expsignx == BIAS) 
      & change_simd_mask_type<unsigned long, long double, Abi>((((GET_LONGDOUBLE_HI(ux.u) & 0x0ffffffffffffULL) & ~LDBL_NBIT) | (GET_LONGDOUBLE_LO(ux.u))) == 0);
  where(!jd1 & jd4, res) = atan(y);
  jd1 = !jd1 & !jd4;


  m = static_simd_cast<intv<Abi>>(((expsigny >> 15) & 1) | ((expsignx >> 14) & 2)); /* 2*sign(x)+sign(y) */
  
  auto jd2 = change_simd_mask_type<short, long double, Abi>(expty == 0) 
      & change_simd_mask_type<unsigned long, long double, Abi>((((GET_LONGDOUBLE_HI(uy.u) & 0x0ffffffffffffULL) & ~LDBL_NBIT) | (GET_LONGDOUBLE_LO(uy.u))) == 0);
  auto jdm1 = change_simd_mask_type<int, long double, Abi>(m == 0);
  auto jdm2 = change_simd_mask_type<int, long double, Abi>(m == 1);
  auto jdm3 = change_simd_mask_type<int, long double, Abi>(m == 2);
  auto jdm4 = change_simd_mask_type<int, long double, Abi>(m == 3);
  where(jd1 & jd2 & jdm1, res) = y;
  where(jd1 & jd2 & jdm2, res) = y;
  where(jd1 & jd2 & jdm3, res) = pi + tiny;
  where(jd1 & jd2 & jdm4, res) = -pi - tiny;
  jd1 = jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4)) ;


  jd2 = change_simd_mask_type<short, long double, Abi>(exptx == 0) 
      & change_simd_mask_type<unsigned long, long double, Abi>((((GET_LONGDOUBLE_HI(ux.u) & 0x0ffffffffffffULL) & ~LDBL_NBIT) | (GET_LONGDOUBLE_LO(ux.u))) == 0);
  auto jd3 = change_simd_mask_type<short, long double, Abi>(expsigny < 0);
  where(jd1 & jd2 & jd3, res) =  -pio2_hi - tiny;
  where(jd1 & jd2 & !jd3, res) =  pio2_hi + tiny;
  jd1 = jd1 & !jd2;


  jd2 =  change_simd_mask_type<short, long double, Abi>(exptx == BIAS + LDBL_MAX_EXP);
  jd3 =  change_simd_mask_type<short, long double, Abi>(expty == BIAS + LDBL_MAX_EXP);
  where(jd1 & jd2 & jd3 & jdm1, res) = pio2_hi * 0.5 + tiny;
  where(jd1 & jd2 & jd3 & jdm2, res) = -pio2_hi * 0.5 - tiny;
  where(jd1 & jd2 & jd3 & jdm3, res) = 1.5 * pio2_hi + tiny;
  where(jd1 & jd2 & jd3 & jdm4, res) = -1.5 * pio2_hi - tiny;

  where(jd1 & jd2 & !jd3 & jdm1, res) = zero;
  where(jd1 & jd2 & !jd3 & jdm2, res) = -zero;
  where(jd1 & jd2 & !jd3 & jdm3, res) = pi + tiny;
  where(jd1 & jd2 & !jd3 & jdm4, res) =-pi - tiny;

  jd1 = jd1 & !(jd2 & (jdm1 | jdm2 | jdm3 | jdm4));


  jd2 = y < 0;
  where(jd1 & jd3 & jd2, res) = -pio2_hi-tiny;
  where(jd1 & jd3 & !jd2, res) = pio2_hi+tiny;
  jd1 = jd1 & !jd3;

  k = expty - exptx;
  jd2 = change_simd_mask_type<int, long double, Abi>(k > LDBL_MANT_DIG + 2);
  jd3 = change_simd_mask_type<short, long double, Abi>(expsignx < 0) &  change_simd_mask_type<int, long double, Abi>(k < -LDBL_MANT_DIG - 2);
  z = atan(abs(y / x));
  where(jd2, z) = pio2_hi + pio2_lo;
  where(!jd2 & jd3, z) = 0;
  where(change_simd_mask_type<long double, int, Abi>(jd2), m) = m & 1;
  jdm1 = change_simd_mask_type<int, long double, Abi>(m == 0);
  jdm2 = change_simd_mask_type<int, long double, Abi>(m == 1);
  jdm3 = change_simd_mask_type<int, long double, Abi>(m == 2);

  res = (z - pi_lo) - pi;
  
  where(jd1 & jdm1, res) = z;
  where(jd1 & jdm2, res) = -z;
  where(jd1 & jdm3, res) = pi - (z - pi_lo);
  return res;
}
#else
template <class Abi> ldoublev<Abi> atan2(ldoublev<Abi> y, ldoublev<Abi> x)
{
  doublev<Abi> src1, src2, res;
  src1 = static_simd_cast<doublev<Abi>>(y);
  src2 = static_simd_cast<doublev<Abi>>(x);
  res = atan2(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(res);
}
#endif


template <class Abi> floatv<Abi> fdim(floatv<Abi> x, floatv<Abi> y){
  floatv<Abi> retv;
  auto jd = x <= y;
  retv = x - y;
  where(jd, retv) = 0.f;
  return retv;
}
template <class Abi> doublev<Abi> fdim(doublev<Abi> x, doublev<Abi> y){
  doublev<Abi> retv;
  auto jd = x <= y;
  retv = x - y;
  where(jd, retv) = 0.0;
  return retv;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> fdim(ldoublev<Abi> x, ldoublev<Abi> y){
  ldoublev<Abi> retv;
  auto jd = x <= y;
  retv = x - y;
  where(jd, retv) = 0.0;
  return retv;
}
#else
template <class Abi> ldoublev<Abi> fdim(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = fdim(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi> 
simd_mask<float, Abi> isunordered(floatv<Abi> x, floatv<Abi> y){
  simd_mask<float, Abi> retv;
  retv = !((x==x)&&(y==y));
  return retv;
}

template <class Abi> 
simd_mask<double, Abi> isunordered(doublev<Abi> x, doublev<Abi> y){
  simd_mask<double, Abi> retv;
  retv = !((x==x)&&(y==y));
  return retv;
}

template <class Abi> 
simd_mask<long double, Abi> isunordered(ldoublev<Abi> x, ldoublev<Abi> y){
  simd_mask<long double, Abi> retv;
  retv = !((x==x)&&(y==y));
  return retv;
}

template <class Abi> 
floatv<Abi> logb(floatv<Abi> x){
  Abi_32suf<Abi> ux;
  floatv<Abi> res;
  ux.f = x;
  ux.u = (ux.u >> 23) & 0xff;
  res = static_simd_cast<floatv<Abi>>(ux.i - 127);

  ux.f = x;
  ux.u = ux.u & 0x7fffffff;
  simd_mask<float, Abi> jd = change_simd_mask_type<unsigned int, float, Abi>(ux.u > 0x7f800000);
  where(jd, res) = LLVM_NAN_32F;

  jd = change_simd_mask_type<unsigned int, float, Abi>(ux.u == 0x00000000 || ux.u == 0x7f800000);
  where(jd, res) = LLVM_INF_32F;

  return res;
}

template <class Abi> 
doublev<Abi> logb(doublev<Abi> x){
  Abi_64suf<Abi> ux;
  doublev<Abi> res;
  ux.f = x;
  ux.u = (ux.u >> 52) & 0x7ff;
  res = static_simd_cast<doublev<Abi>>(ux.i - 1023);

  ux.f = x;
  ux.u = ux.u & 0x7fffffffffffffffUL;
  simd_mask<double, Abi> jd = change_simd_mask_type<unsigned long int, double, Abi>(ux.u > 0x7ff0000000000000UL);
  where(jd, res) = LLVM_NAN_64F;

  jd = change_simd_mask_type<unsigned long int, double, Abi>(ux.u == 0x0UL || ux.u == 0x7ff0000000000000UL);
  where(jd, res) = LLVM_INF_64F;

  return res;
}

#define LDBL_MANL_SIZE 64
#define LDBL_MANH_SIZE 48

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> logb(ldoublev<Abi> x){
  Abi_128suf<Abi> ux;
  ldoublev<Abi> retv;
  ulongv<Abi> x_manl, x_manh, x_exp, x_sign, x_hi, b, m;
  ux.f = x;
  x_manl = GET_LONGDOUBLE_LO(ux.u);
  x_hi = GET_LONGDOUBLE_HI(ux.u);

  x_manh = x_hi & 0xffffffffffffUL;
  x_hi = x_hi >>48;
  x_exp = x_hi &  0x7fff;
  x_sign = x_hi & 0x1000;

  simd_mask<long double, Abi> jd, jdt, jdtt;

  jd = static_simd_cast<ldoublev<Abi>>(x_exp) == 0.0L;

  jdt = change_simd_mask_type<unsigned long int, long double, Abi>((x_manl | x_manh) == 0);
  where(jd & jdt, retv) = -LLVM_INF_128F;

  jdtt = static_simd_cast<ldoublev<Abi>>(x_manh) == 0.0L;

  m = 1lu << (LDBL_MANL_SIZE - 1);
  where(change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && jdtt), b) = LDBL_MANH_SIZE;

  simd_mask<unsigned long int, Abi> jdfor;
  jdfor = ((x_manl & m) != 0) && change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && jdtt);
  while(any_of(jdfor)){
    where(jdfor, b) = b+1;
    where(jdfor, m) = m >> 1;
    jdfor = ((x_manl & m) != 0) && change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && jdtt);
  }

  m = 1lu << (LDBL_MANH_SIZE - 1);
  where(change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && !jdtt), b) = 0;
  jdfor = ((x_manh & m)!=0) && change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && !jdtt);
  while(any_of(jdfor)){
    where(jdfor, b) = b+1;
    where(jdfor, m) = m >> 1;
    jdfor = ((x_manh & m)!=0) && change_simd_mask_type<long double, unsigned long int, Abi>(jd && !jdt && !jdtt);
  }

  b++;
  where(jd && !jdt, retv) = LDBL_MIN_EXP - static_simd_cast<ldoublev<Abi>>(b) - 1;

  jdt = static_simd_cast<ldoublev<Abi>>(x_exp) < ((LDBL_MAX_EXP << 1) - 1);
  where(!jd && jdt, retv) = static_simd_cast<ldoublev<Abi>>(x_exp)  - LDBL_MAX_EXP + 1;
  where(!jd && !jdt, retv) = x * x;

  return retv;
}
#else
template <class Abi> ldoublev<Abi> logb(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = logb(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

template <class Abi> floatv<Abi> nextafter(floatv<Abi> x, floatv<Abi> y){
  Abi_32suf<Abi> ux, uy, uret;
  ux.f = x;
  uy.f = y;

  uintv<Abi> uint_tmp;
  simd_mask<unsigned int, Abi> mask, mask_tmp, maskall(0);
  mask = change_simd_mask_type<float, unsigned int, Abi>(x < y);
  uint_tmp = ux.u;
  where(mask, uint_tmp) = ux.u + 1;
  where(!mask, uint_tmp) = ux.u - 1;

  mask = change_simd_mask_type<float, unsigned int, Abi>(x == y);
  maskall = maskall || mask;
  where(mask, uint_tmp) = uy.u;

  mask = change_simd_mask_type<float, unsigned int, Abi>(!(x == x));
  where(mask && (!maskall), uint_tmp) = ux.u;

  maskall = maskall || mask;
  mask = change_simd_mask_type<float, unsigned int, Abi>(!(y == y));
  where(mask && (!maskall), uint_tmp) = uy.u;
  maskall = maskall || mask;

  mask = change_simd_mask_type<float, unsigned int, Abi>(x == 0.f);
  mask_tmp = change_simd_mask_type<float, unsigned int, Abi>(y > 0.f);
  where(mask && mask_tmp && (!maskall), uint_tmp) = 0x00000001U;
  where(mask && (!mask_tmp) && (!maskall), uint_tmp) = 0x80000001U;
  maskall = maskall || mask;

  mask = (ux.u == 0x7f800000U);
  where(mask && (!maskall), uint_tmp) = 0x7f7fffff;
  maskall = maskall || mask;

  mask = (ux.u == 0xff800000U);
  where(mask && (!maskall), uint_tmp) = 0xff7fffff;
  maskall = maskall || mask;

  uret.u = uint_tmp;
  return uret.f;
}


template <class Abi> doublev<Abi> nextafter(doublev<Abi> x, doublev<Abi> y){
  Abi_64suf<Abi> ux, uy, uret;
  ux.f = x;
  uy.f = y;

  ulongv<Abi> uint_tmp;
  simd_mask<unsigned long int, Abi> mask, mask_tmp, maskall(0);
  mask = change_simd_mask_type<double, unsigned long int, Abi>(x < y);
  uint_tmp = ux.u;
  where(mask, uint_tmp) = ux.u + 1;
  where(!mask, uint_tmp) = ux.u - 1;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(x == y);
  maskall = maskall || mask;
  where(mask, uint_tmp) = uy.u;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(!(x == x));
  where(mask && (!maskall), uint_tmp) = ux.u;

  maskall = maskall || mask;
  mask = change_simd_mask_type<double, unsigned long int, Abi>(!(y == y));
  where(mask && (!maskall), uint_tmp) = uy.u;
  maskall = maskall || mask;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(x == 0.);
  mask_tmp = change_simd_mask_type<double, unsigned long int, Abi>(y > 0.);
  where(mask && mask_tmp && (!maskall), uint_tmp) = 0x0000000000000001UL;
  where(mask && (!mask_tmp) && (!maskall), uint_tmp) = 0x8000000000000001UL;
  maskall = maskall || mask;

  mask = (ux.u == 0x7ff0000000000000UL);
  where(mask && (!maskall), uint_tmp) = 0x7fefffffffffffffUL;
  maskall = maskall || mask;

  mask = (ux.u == 0xfff0000000000000UL);
  where(mask && (!maskall), uint_tmp) = 0xffefffffffffffffUL;
  maskall = maskall || mask;

  uret.u = uint_tmp;
  return uret.f;
}


#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> nextafter(ldoublev<Abi> x, ldoublev<Abi> y)
{
  Abi_128suf<Abi> ux, uy, result;
  longv<Abi> hx, hy, ix, iy;
  ulongv<Abi> lx, ly, spc_hy;
  ux.f = x;
  uy.f = y;
  lx = GET_LONGDOUBLE_LO(ux.u);
  ly = GET_LONGDOUBLE_LO(uy.u);
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));
  hy = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(uy.u));
  ix = hx & 0x7fffffffffffffffLL;
  iy = hy & 0x7fffffffffffffffLL;

  auto spc3 = change_simd_mask_type<short, long double, Abi>(!(x == x) || !(y == y));
  spc_hy = static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000UL;

  auto jd1 = (hx >= 0);
  auto jd1_1 = (hx > hy || ((hx == hy) && change_simd_mask_type<unsigned long, long, Abi>(lx > ly)));
  auto jd1_1_1 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  auto jd2_1 = (hx >= 0 || hx > hy || ((hx == hy) && change_simd_mask_type<unsigned long, long, Abi>(lx > ly)));
  
  where((jd1 && jd1_1 && jd1_1_1), hx) = hx - 1;
  where((jd1 && jd1_1), lx) = lx - 1;
  where((jd1 && !jd1_1), lx) = lx + 1;
  auto jd1_1_2 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  where((jd1 && !jd1_1 && jd1_1_2), hx) = hx + 1;
  where((!jd1 && jd2_1 && jd1_1_1), hx) = hx - 1;
  where((!jd1 && jd2_1), lx) = lx - 1;
  where((!jd1 && !jd2_1), lx) = lx + 1;
  auto jd1_1_3 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  where((!jd1 && !jd2_1 && jd1_1_3), hx) = hx + 1;

  hy = hx & 0x7fff000000000000L;
  result.u = (static_simd_cast<uint128v<Abi>>(hx) << 64) | lx;
  auto spc1 = change_simd_mask_type<long, long double, Abi>(hy == 0x7fff000000000000L);
  where(spc1, result.f) = x + x;
  auto spc2 = change_simd_mask_type<unsigned long, __int128_t, Abi>((static_simd_cast<ulongv<Abi>>(ix) | ly) == 0);
  where(spc2, result.u) = (static_simd_cast<uint128v<Abi>>(spc_hy) << 64) | 0x01ULL;
  where((x == y), result.f) = y;
  where(spc3, result.f) = x + y;

  return static_simd_cast<ldoublev<Abi>>(result.f);
}
#else
template <class Abi> ldoublev<Abi> nextafter(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = nextafter(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif



template <class Abi> floatv<Abi> nexttoward(floatv<Abi> x, ldoublev<Abi> y){
  Abi_32suf<Abi> ux, uy, uret;
  ux.f = x;
  uy.f = static_simd_cast<floatv<Abi>>(y);

  uintv<Abi> uint_tmp;
  simd_mask<unsigned int, Abi> mask, mask_tmp, maskall(0);
  mask = change_simd_mask_type<float, unsigned int, Abi>(x < y);
  uint_tmp = ux.u;
  where(mask, uint_tmp) = ux.u + 1;
  where(!mask, uint_tmp) = ux.u - 1;

  mask = change_simd_mask_type<float, unsigned int, Abi>(x == y);
  maskall = maskall || mask;
  where(mask, uint_tmp) = uy.u;

  mask = change_simd_mask_type<float, unsigned int, Abi>(!(x == x));
  where(mask && (!maskall), uint_tmp) = ux.u;

  maskall = maskall || mask;
  mask = change_simd_mask_type<float, unsigned int, Abi>(!(y == y));
  where(mask && (!maskall), uint_tmp) = uy.u;
  maskall = maskall || mask;

  mask = change_simd_mask_type<float, unsigned int, Abi>(x == 0.f);
  mask_tmp = change_simd_mask_type<float, unsigned int, Abi>(y > 0.f);
  where(mask && mask_tmp && (!maskall), uint_tmp) = 0x00000001U;
  where(mask && (!mask_tmp) && (!maskall), uint_tmp) = 0x80000001U;
  maskall = maskall || mask;

  mask = (ux.u == 0x7f800000U);
  where(mask && (!maskall), uint_tmp) = 0x7f7fffff;
  maskall = maskall || mask;

  mask = (ux.u == 0xff800000U);
  where(mask && (!maskall), uint_tmp) = 0xff7fffff;
  maskall = maskall || mask;

  uret.u = uint_tmp;
  return uret.f;
}

template <class Abi> doublev<Abi> nexttoward(doublev<Abi> x, ldoublev<Abi> y){
  Abi_64suf<Abi> ux, uy, uret;
  ux.f = x;
  uy.f = static_simd_cast<doublev<Abi>>(y);

  ulongv<Abi> uint_tmp;
  simd_mask<unsigned long int, Abi> mask, mask_tmp, maskall(0);
  mask = change_simd_mask_type<double, unsigned long int, Abi>(x < y);
  uint_tmp = ux.u;
  where(mask, uint_tmp) = ux.u + 1;
  where(!mask, uint_tmp) = ux.u - 1;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(x == y);
  maskall = maskall || mask;
  where(mask, uint_tmp) = uy.u;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(!(x == x));
  where(mask && (!maskall), uint_tmp) = ux.u;

  maskall = maskall || mask;
  mask = change_simd_mask_type<double, unsigned long int, Abi>(!(y == y));
  where(mask && (!maskall), uint_tmp) = uy.u;
  maskall = maskall || mask;

  mask = change_simd_mask_type<double, unsigned long int, Abi>(x == 0.);
  mask_tmp = change_simd_mask_type<double, unsigned long int, Abi>(y > 0.);
  where(mask && mask_tmp && (!maskall), uint_tmp) = 0x0000000000000001UL;
  where(mask && (!mask_tmp) && (!maskall), uint_tmp) = 0x8000000000000001UL;
  maskall = maskall || mask;

  mask = (ux.u == 0x7ff0000000000000UL);
  where(mask && (!maskall), uint_tmp) = 0x7fefffffffffffffUL;
  maskall = maskall || mask;

  mask = (ux.u == 0xfff0000000000000UL);
  where(mask && (!maskall), uint_tmp) = 0xffefffffffffffffUL;
  maskall = maskall || mask;

  uret.u = uint_tmp;
  return uret.f;
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> nexttoward(ldoublev<Abi> x, ldoublev<Abi> y)
{
  Abi_128suf<Abi> ux, uy, result;
  longv<Abi> hx, hy, ix, iy;
  ulongv<Abi> lx, ly, spc_hy;
  ux.f = x;
  uy.f = y;
  lx = GET_LONGDOUBLE_LO(ux.u);
  ly = GET_LONGDOUBLE_LO(uy.u);
  hx = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(ux.u));
  hy = static_simd_cast<longv<Abi>>(GET_LONGDOUBLE_HI(uy.u));
  ix = hx & 0x7fffffffffffffffLL;
  iy = hy & 0x7fffffffffffffffLL;

  auto spc3 = change_simd_mask_type<short, long double, Abi>(!(x == x) || !(y == y));
  spc_hy = static_simd_cast<ulongv<Abi>>(hy) & 0x8000000000000000UL;

  auto jd1 = (hx >= 0);
  auto jd1_1 = (hx > hy || ((hx == hy) && change_simd_mask_type<unsigned long, long, Abi>(lx > ly)));
  auto jd1_1_1 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  auto jd2_1 = (hx >= 0 || hx > hy || ((hx == hy) && change_simd_mask_type<unsigned long, long, Abi>(lx > ly)));
  
  where((jd1 && jd1_1 && jd1_1_1), hx) = hx - 1;
  where((jd1 && jd1_1), lx) = lx - 1;
  where((jd1 && !jd1_1), lx) = lx + 1;
  auto jd1_1_2 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  where((jd1 && !jd1_1 && jd1_1_2), hx) = hx + 1;
  where((!jd1 && jd2_1 && jd1_1_1), hx) = hx - 1;
  where((!jd1 && jd2_1), lx) = lx - 1;
  where((!jd1 && !jd2_1), lx) = lx + 1;
  auto jd1_1_3 = change_simd_mask_type<unsigned long, long, Abi>(lx == 0);
  where((!jd1 && !jd2_1 && jd1_1_3), hx) = hx + 1;

  hy = hx & 0x7fff000000000000L;
  result.u = (static_simd_cast<uint128v<Abi>>(hx) << 64) | lx;
  auto spc1 = change_simd_mask_type<long, long double, Abi>(hy == 0x7fff000000000000L);
  where(spc1, result.f) = x + x;
  auto spc2 = change_simd_mask_type<unsigned long, __int128_t, Abi>((static_simd_cast<ulongv<Abi>>(ix) | ly) == 0);
  where(spc2, result.u) = (static_simd_cast<uint128v<Abi>>(spc_hy) << 64) | 0x01ULL;
  where((x == y), result.f) = y;
  where(spc3, result.f) = x + y;

  return static_simd_cast<ldoublev<Abi>>(result.f);
}
#else
template <class Abi> ldoublev<Abi> nexttoward(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = nexttoward(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> ldexp(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> n)
{
  Abi_128suf<Abi> ux, result;
  uint128v<Abi> n_exp, tmp;
  ldoublev<Abi> x_huge, x_tiny;
  samesize<int, ldoublev<Abi>> x_exp, res_exp;
  ux.f = x;
  x_huge = 0x1p16000L;
  x_tiny = 0x1p-16000L;
  x_exp = static_simd_cast<intv<Abi>>((ux.u >> 112) & 0x7fffUL);
  tmp = ux.u & (simd<__uint128_t, Abi>(0x0000ffffffffffffUL) << 64 | simd<__uint128_t, Abi>(0xffffffffffffffffUL));
  n_exp = ux.u & (simd<__uint128_t, Abi>(0x8000ffffffffffffUL) << 64 | simd<__uint128_t, Abi>(0xffffffffffffffffUL));
  auto spc1 = (x_exp == 0);
  auto spc1_1 = simd_mask<long double, Abi>(tmp == 0);
  where(spc1, x_exp) = x_exp - 128;
  where(simd_mask<long double, Abi>(spc1), ux.f) = x * 0x1p+128;
  auto spc1_2 = simd_mask<long double, Abi>(n < -50000);
  auto spc2 = simd_mask<long double, Abi>(x_exp == 0x7fff);
  x_exp = x_exp + n;
  auto spc3 = simd_mask<long double, Abi>(x_exp >= 0x7fff);
  auto spc4 = simd_mask<__uint128_t, Abi>(x_exp > 0);
  auto spc5 = simd_mask<long double, Abi>(x_exp < -128);
  auto spc5_1 = simd_mask<long double, Abi>(n > 50000);
  res_exp = (x_exp + 128) & 0x7fff;
  result.u = (static_simd_cast<uint128v<Abi>>(res_exp) << 112) | n_exp;
  x_huge = x_huge * copysign(x_huge, x);
  x_tiny = x_tiny * copysign(x_tiny, x);
  where(spc5 & spc5_1, result.f) = x_huge;
  where(spc5 & !spc5_1, result.f) = x_tiny;
  where(spc4, result.u) = static_simd_cast<uint128v<Abi>>(x_exp & 0x7fff) << 112 | n_exp;
  where(spc3, result.f) = x_huge;
  where(spc2, result.f) = x + x;
  where(simd_mask<long double, Abi>(spc1) & spc1_2, result.f) = 0x1p-16000L * x;
  where(simd_mask<long double, Abi>(spc1) & spc1_1, result.f) = x;
  return result.f;
}
#else
template <class Abi> ldoublev<Abi> ldexp(ldoublev<Abi> x, samesize<int, ldoublev<Abi>> n)
{
  doublev<Abi> src1, dst;
  samesize<int, doublev<Abi>> src2;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<samesize<int, doublev<Abi>>>(n);
  dst = ldexp(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


template <class Abi> static inline ldoublev<Abi> inc(ldoublev<Abi> x)
{
  Abi_128suf<Abi> ux;
  ulongv<Abi> hi, sign, exp, manh, manl;
  ux.f = x;
  hi = GET_LONGDOUBLE_HI(ux.u);
  sign = hi & 0x8000000000000000UL;
  exp = (hi & 0x7fff000000000000UL) >> 48;
  manh = hi & 0x0000ffffffffffffUL;
  manl = GET_LONGDOUBLE_LO(ux.u);
  auto judge1 = (++manl == 0);
  where(judge1, manh) = manh + 1;
  auto judge2 = (manh == 0);
  where(judge1 & judge2, exp) = exp + 1;
  ux.u = (static_simd_cast<uint128v<Abi>>(sign | ((exp & 0x7fff) << 48) | manh) << 64) | static_simd_cast<uint128v<Abi>>(manl);
  return ux.f;
}

template <class Abi> floatv<Abi> hypot(floatv<Abi> x, floatv<Abi> y, floatv<Abi> z)
{
  return sqrt(x * x + y * y + z * z);
}

template <class Abi> doublev<Abi> hypot(doublev<Abi> x, doublev<Abi> y, doublev<Abi> z)
{
  return sqrt(x * x + y * y + z * z);
}

#ifdef LDOUBLE_BINARY128
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y, ldoublev<Abi> z)
{
  return sqrt(x * x + y * y + z * z);
}
#else
template <class Abi> ldoublev<Abi> hypot(ldoublev<Abi> x, ldoublev<Abi> y, ldoublev<Abi> z)
{
  doublev<Abi> dst;
  dst = sqrt(static_simd_cast<doublev<Abi>>(x * x + y * y + z * z));
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif

#ifdef LDOUBLE_BINARY128
static const long double powl_bp[] = {
    1.0L,
    1.5L,
};

static const long double powl_dp_h[] = {
    0.0,
    5.8496250072115607565592654282227158546448E-1L};

static const long double powl_dp_l[] = {
    0.0,
    1.0579781240112554492329533686862998106046E-16L};

static const long double powl_LN[] =
    {
        -3.0779177200290054398792536829702930623200E1L,
        6.5135778082209159921251824580292116201640E1L,
        -4.6312921812152436921591152809994014413540E1L,
        1.2510208195629420304615674658258363295208E1L,
        -9.9266909031921425609179910128531667336670E-1L};

static const long double powl_LD[] =
    {
        -5.129862866715009066465422805058933131960E1L,
        1.452015077564081884387441590064272782044E2L,
        -1.524043275549860505277434040464085593165E2L,
        7.236063513651544224319663428634139768808E1L,
        -1.494198912340228235853027849917095580053E1L
        /* 1.0E0 */
};

static const long double powl_PN[] =
    {
        5.081801691915377692446852383385968225675E8L,
        9.360895299872484512023336636427675327355E6L,
        4.213701282274196030811629773097579432957E4L,
        5.201006511142748908655720086041570288182E1L,
        9.088368420359444263703202925095675982530E-3L,
};

static const long double powl_PD[] =
    {
        3.049081015149226615468111430031590411682E9L,
        1.069833887183886839966085436512368982758E8L,
        8.259257717868875207333991924545445705394E5L,
        1.872583833284143212651746812884298360922E3L,
        /* 1.0E0 */
};

template <class Abi> ldoublev<Abi> pow(ldoublev<Abi> x, ldoublev<Abi> y)
{
  ldoublev<Abi> two = 2.0L;
  ldoublev<Abi> two113 = 1.0384593717069655257060992658440192E34L;
  ldoublev<Abi> huge = 1.0e3000L;
  ldoublev<Abi> tiny = 1.0e-3000L;
  ldoublev<Abi> lg2 = 6.9314718055994530941723212145817656807550E-1L;
  ldoublev<Abi> lg2_h = 6.9314718055994528622676398299518041312695E-1L;
  ldoublev<Abi> lg2_l = 2.3190468138462996154948554638754786504121E-17L;
  ldoublev<Abi> ovt = 8.0085662595372944372e-0017L;
  ldoublev<Abi> cp = 9.6179669392597560490661645400126142495110E-1L;
  ldoublev<Abi> cp_h = 9.6179669392597555432899980587535537779331E-1L;
  ldoublev<Abi> cp_l = 5.0577616648125906047157785230014751039424E-17L;

  ldoublev<Abi> z, ax, z_h, z_l, p_h, p_l, yy1, t1, t2, r, s, t, u, v, w, s2, s_h, s_l, t_h, t_l, dst;
  intv<Abi> i, j, k, yisint, n, hx, hy;
  uintv<Abi> ix, iy, p_or_tmp, q_or_tmp;
  Abi_128suf<Abi> o, p, q;

  p.f = x;
  hx = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_HI(p.u) >> 32);
  ix = static_simd_cast<uintv<Abi>>(hx) & 0x7fffffff;

  q.f = y;
  hy = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_HI(q.u) >> 32);
  iy = static_simd_cast<uintv<Abi>>(hy) & 0x7fffffff;

  q_or_tmp = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(q.u) & 0x00000000ffffffffUL) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_LO(q.u) >> 32) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(q.u) & 0x00000000ffffffffUL);
  auto spc1 = simd_mask<long double, Abi>((iy | q_or_tmp) == 0);
  auto spc2 = (x == 1.0L);
  auto spc3 = (x == -1.0L) && simd_mask<long double, Abi>(iy == 0x7fff0000) && simd_mask<long double, Abi>(q_or_tmp == 0);
  auto one_mask = (spc1 | spc2 | spc3);
  p_or_tmp = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(p.u) & 0x00000000ffffffffUL) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_LO(p.u) >> 32) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(p.u) & 0x00000000ffffffffUL);
  auto spc4_mask = simd_mask<long double, Abi>((ix > 0x7fff0000) || ((ix == 0x7fff0000) && (p_or_tmp != 0)) || (iy > 0x7fff0000) || ((iy == 0x7fff0000) && (q_or_tmp != 0)));
  ldoublev<Abi> spc4_result = x + y;
  
  yisint = 0;
  auto spc5 = simd_mask<uint, Abi>(hx < 0);
  auto spc5_1 = (iy >= 0x40700000);
  where(spc5 & spc5_1, yisint) = 2;
  auto spc5_2 = simd_mask<int, Abi>((iy >= 0x3fff0000) & spc5);
  auto spc5_2_1 = (floor(y) == y);
  auto spc5_2_1_1 = (floor(z) == z);
  where(simd_mask<long double, Abi>(spc5_2) & spc5_2_1_1, z) = 0.5 * y;
  where(spc5_2 & simd_mask<int, Abi>(spc5_2_1 & spc5_2_1_1), yisint) = 2;
  where(spc5_2 & simd_mask<int, Abi>(spc5_2_1 & !spc5_2_1_1), yisint) = 1;

  ldoublev<Abi> ymask_result1 = 0;
  auto ymask1 = (q_or_tmp == 0);
  auto ymask1_1 = (iy == 0x7fff0000) & ymask1;
  auto ymask1_1_1 = (((ix - 0x3fff0000) | p_or_tmp) == 0);
  auto ymask_part1 = simd_mask<long double, Abi>(ymask1_1 & ymask1_1_1);
  auto ymask1_1_2 = (ix >= 0x3fff0000);
  auto ymask1_1_2_1 = simd_mask<uint, Abi>(hy >= 0);
  auto ymask_part2 = simd_mask<long double, Abi>(ymask1_1 & ymask1_1_2 & ymask1_1_2_1);
  auto ymask_part3 = simd_mask<long double, Abi>(ymask1_1 & ymask1_1_2 & !ymask1_1_2_1);
  auto hy_lt_zero = simd_mask<uint, Abi>(hy < 0);
  auto ymask_part4 = simd_mask<long double, Abi>(ymask1_1 & hy_lt_zero);
  where(ymask_part4, ymask_result1) = -y;
  where(ymask_part3, ymask_result1) = 0;
  where(ymask_part2, ymask_result1) = y;
  where(ymask_part1, ymask_result1) = y - y;
  auto ymask1_1_f = simd_mask<long double, Abi>(ymask1_1);

  auto ymask1_2 = (iy == 0x3fff0000) & ymask1;
  ldoublev<Abi> ymask_result2 = x;
  where(simd_mask<long double, Abi>(ymask1_2 & hy_lt_zero), ymask_result2) = 1.0L / x;

  auto ymask1_3 = simd_mask<long double, Abi>(simd_mask<uint, Abi>(hy == 0x40000000) & ymask1);
  ldoublev<Abi> ymask_result3 = x * x;

  auto ymask1_4 = simd_mask<long double, Abi>(simd_mask<uint, Abi>(hy == 0x3ffe0000) & ymask1 & ymask1_1_2_1);
  ldoublev<Abi> ymask_result4 = sqrt(x);

  ax = abs(x);
  auto xmask1 = (p_or_tmp == 0);
  auto xmask1_1 = (xmask1 && ((ix == 0x7fff0000) || (ix == 0) || (ix == 0x3fff0000)));
  auto xmask1_1_f = simd_mask<long double, Abi>(xmask1_1);
  where(xmask1_1_f, z) = ax;
  where(simd_mask<long double, Abi>(xmask1_1 & hy_lt_zero), z) = 1.0L / z;
  auto xmask1_1_2_1 = (((ix - 0x3fff0000) | static_simd_cast<uintv<Abi>>(yisint)) == 0);
  auto xmask1_1_2_1_part = simd_mask<long double, Abi>(xmask1_1 & hy_lt_zero & xmask1_1_2_1);
  where(xmask1_1_2_1_part, z) = (z - z) / (z - z);
  auto xmask1_1_2_2 = simd_mask<uint, Abi>(yisint == 1);
  auto xmask1_1_2_2_part = simd_mask<long double, Abi>(xmask1_1 & hy_lt_zero & xmask1_1_2_2);
  where(xmask1_1_2_2_part, z) = -z;
  auto xmask_mask = simd_mask<long double, Abi>(xmask1 & xmask1_1);
  ldoublev<Abi> xmask1_1_result = z;

  auto nan1 = simd_mask<long double, Abi>((((static_simd_cast<uintv<Abi>>(hx) >> 31) - 1) | static_simd_cast<uintv<Abi>>(yisint)) == 0);
  ldoublev<Abi>nan1_result = (x - x) / (x - x);

  auto hy_gt_zero = (hy > 0);
  ldoublev<Abi> hy_lt_result = tiny * tiny;
  ldoublev<Abi> hy_gt_result = tiny * tiny;
  where(hy_lt_zero, hy_lt_result) = huge * huge;
  where(hy_gt_zero, hy_gt_result) = huge * huge;
  auto huge1 = (iy > 0x401d654b);
  auto huge1_1 = (iy > 0x407d654b);
  auto huge1_1_1 = simd_mask<long double, Abi>(huge1 & huge1_1 & (ix <= 0x3ffeffff));
  auto huge1_1_2 = simd_mask<long double, Abi>(huge1 & huge1_1 & (ix >= 0x3fff0000));
  auto huge1_2 = simd_mask<long double, Abi>(huge1 & (ix < 0x3ffeffff));
  auto huge1_3 = simd_mask<long double, Abi>(huge1 & (ix > 0x3fff0000));

  n = 0;
  auto ix_lt = (ix < 0x00010000);
  auto ix_lt_f = simd_mask<long double, Abi>(ix_lt);
  where(ix_lt_f, ax) = ax * two113;
  where(ix_lt, n) = n - 113;
  where(ix_lt_f, o.f) = ax;
  where(ix_lt, ix) = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(o.u) >> 32);

  n = n + static_simd_cast<intv<Abi>>((ix) >> 16) - 0x3fff;
  j = static_simd_cast<intv<Abi>>(ix & 0x0000ffff);
  ix = static_simd_cast<uintv<Abi>>(j | 0x3fff0000);
  auto j_le = (j <= 0x3988);
  auto j_lt = (j < 0xbb67);
  where(!j_le & !j_lt, k) = 0;
  where(!j_le & !j_lt, n) = n + 1;
  where(!j_le & !j_lt, ix) = ix - 0x00010000;
  where(j_lt, k) = 1;
  where(j_le, k) = 0;

  o.f = ax;
  o.u = (static_simd_cast<uint128v<Abi>>((GET_LONGDOUBLE_HI(o.u) & 0X00000000ffffffffUL) | (static_simd_cast<ulongv<Abi>>(ix) << 32)) << 64 | GET_LONGDOUBLE_LO(o.u));
  ax = o.f;

  ldoublev<Abi> v_bp, v_dp_l, v_dp_h;
  for (size_t idx = 0; idx < ax.size(); idx++)
  {
    v_bp[idx] = powl_bp[k[idx]];
    v_dp_l[idx] = powl_dp_l[k[idx]];
    v_dp_h[idx] = powl_dp_h[k[idx]];
  }
  u = ax - v_bp;
  v = 1.0L / (ax + v_bp);
  s = u * v;
  s_h = s;
  o.f = s_h;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  s_h = o.f;
  t_h = ax + v_bp;
  o.f = t_h;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  t_h = o.f;
  t_l = ax - (t_h - v_bp);
  s_l = v * ((u - s_h * t_h) - s_h * t_l);
  s2 = s * s;
  u = powl_LN[0] + s2 * (powl_LN[1] + s2 * (powl_LN[2] + s2 * (powl_LN[3] + s2 * powl_LN[4])));
  v = powl_LD[0] + s2 * (powl_LD[1] + s2 * (powl_LD[2] + s2 * (powl_LD[3] + s2 * (powl_LD[4] + s2))));
  r = s2 * s2 * u / v;
  r += s_l * (s_h + s);
  s2 = s_h * s_h;
  t_h = 3.0 + s2 + r;
  o.f = t_h;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  t_h = o.f;
  t_l = r - ((t_h - 3.0L) - s2);
  u = s_h * t_h;
  v = s_l * t_h + t_l * s;
  p_h = u + v;
  o.f = p_h;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  p_h = o.f;
  p_l = v - (p_h - u);
  z_h = cp_h * p_h;
  z_l = cp_l * p_h + p_l * cp + v_dp_l;
  t = static_simd_cast<ldoublev<Abi>>(n);
  t1 = (((z_h + z_l) + v_dp_h) + t);
  o.f = t1;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  t1 = o.f;
  t2 = z_l - (((t1 - t) - v_dp_h) - z_h);
  s = 1.0L;
  auto s_tp = simd_mask<long double, Abi>((((static_simd_cast<uintv<Abi>>(hx) >> 31) - 1) | static_simd_cast<uintv<Abi>>(yisint - 1)) == 0);
  where(s_tp, s) = -1.0L;
  yy1 = y;
  o.f = yy1;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  yy1 = o.f;
  p_l = (y - yy1) * t1 + y * t2;
  p_h = yy1 * t1;
  z = p_l + p_h;
  o.f = z;
  j = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_HI(o.u) >> 32);

  auto jspc1 = (j >= 0x400d0000);
  auto o_or_tmp = static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(o.u) & 0x00000000ffffffffUL) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_LO(o.u) >> 32) | static_simd_cast<uintv<Abi>>(GET_LONGDOUBLE_HI(o.u) & 0x00000000ffffffffUL);
  auto jspc1_1 = (((j - 0x400d0000) | static_simd_cast<intv<Abi>>(o_or_tmp)) != 0);
  auto jspc1_1_mask = simd_mask<long double, Abi>(jspc1 & jspc1_1);
  auto jspc1_2_mask = simd_mask<long double, Abi>(jspc1 & !jspc1_1) & (p_l + ovt > z - p_h);
  ldoublev<Abi> jspc1_result = s * huge * huge;
  
  auto jspc2 = simd_mask<uint, Abi>((j & 0x7fffffff) >= 0x400d01b9);
  auto jspc2_1 = (((static_simd_cast<uintv<Abi>>(j) - 0xc00d01bc) | o_or_tmp) != 0);
  auto jspc2_1_mask = simd_mask<long double, Abi>(jspc2 & jspc2_1);
  auto jspc2_2_mask = simd_mask<long double, Abi>(jspc2 & !jspc2_1) & (p_l <= z - p_h);
  ldoublev<Abi> jspc2_result = s * tiny * tiny;

  i = j & 0x7fffffff;
  k = (i >> 16) - 0x3fff;
  n = 0;
  auto ispc1 = (i > 0x3ffe0000);
  auto ispc1_f = simd_mask<long double, Abi>(ispc1);
  where(ispc1_f, t) = floor(z + 0.5L);
  where(ispc1, n) = static_simd_cast<intv<Abi>>(t);
  where(ispc1_f, p_h) = p_h - t;

  t = p_l + p_h;
  o.f = t;
  o.u = (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_HI(o.u)) << 64) | (static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u)) & 0xf800000000000000ULL);
  t = o.f;
  u = t * lg2_h;
  v = (p_l - (t - p_h)) * lg2 + t * lg2_l;
  z = u + v;
  w = v - (z - u);
  t = z * z;
  u = powl_PN[0] + t * (powl_PN[1] + t * (powl_PN[2] + t * (powl_PN[3] + t * powl_PN[4])));
  v = powl_PD[0] + t * (powl_PD[1] + t * (powl_PD[2] + t * (powl_PD[3] + t)));
  t1 = z - t * u / v;
  r = (z * t1) / (t1 - two) - (w + z * w);
  z = 1.0L - (r - z);

  o.f = z;
  j = static_simd_cast<intv<Abi>>(GET_LONGDOUBLE_HI(o.u) >> 32);

  j = j + (n << 16);
  auto jleft_spc1 = ((j >> 16) <= 0);
  auto jleft_spc1_f = simd_mask<long double, Abi>(jleft_spc1);
  where(jleft_spc1_f, z) = scalbn(z, n);
  where(!jleft_spc1_f, o.u) = (static_simd_cast<uint128v<Abi>>(((GET_LONGDOUBLE_HI(o.u) & 0x00000000ffffffffUL) | (static_simd_cast<ulongv<Abi>>(j) << 32))) << 64) | static_simd_cast<uint128v<Abi>>(GET_LONGDOUBLE_LO(o.u));
  where(!jleft_spc1_f, z) = o.f;

  dst = s * z;
  where(jspc2_1_mask | jspc2_2_mask, dst) = jspc2_result;
  where(jspc1_1_mask | jspc1_2_mask, dst) = jspc1_result;
  where(huge1_3, dst) = hy_gt_result;
  where(huge1_2, dst) = hy_lt_result;
  where(huge1_1_2, dst) = hy_gt_result;
  where(huge1_1_1, dst) = hy_lt_result;
  where(nan1, dst) = nan1_result;
  where(xmask_mask, dst) = xmask1_1_result;
  where(ymask1_4, dst) = ymask_result4;
  where(ymask1_3, dst) = ymask_result3;
  where(ymask1_2, dst) = ymask_result2;
  where(ymask1_1_f, dst) = ymask_result1;
  where(spc4_mask, dst) = spc4_result;
  where(one_mask, dst) = 1.0L;
  return dst;
}
#else
template <class Abi> ldoublev<Abi> pow(ldoublev<Abi> x, ldoublev<Abi> y)
{
  doublev<Abi> src1, src2, dst;
  src1 = static_simd_cast<doublev<Abi>>(x);
  src2 = static_simd_cast<doublev<Abi>>(y);
  dst = pow(src1, src2);
  return static_simd_cast<ldoublev<Abi>>(dst);
}
#endif


// #endif // _LIBCPP_STD_VER >= 17

_LIBCPP_END_NAMESPACE_EXPERIMENTAL_SIMD

_LIBCPP_POP_MACROS

#endif // _LIBCPP_EXPERIMENTAL_SIMD
