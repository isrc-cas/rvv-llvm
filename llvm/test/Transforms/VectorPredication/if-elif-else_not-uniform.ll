; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S --passes=vector-predication -o - < %s | FileCheck %s

; ModuleID = 'if-elif-else_not-uniform.c'
source_filename = "if-elif-else_not-uniform.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-gnu"

; Input C code:
; void addVec(long N, double *C, double *A, double *B, double *K) {
;   long I;
;   for (I = 0; I < N; I++) {
;     if (K[I] < 50)
;       C[I] = A[I] + B[I];
;     else if (K[I] > 75)
;       C[I] = A[I] * B[I];
;     else
;       C[I] = 2 * A[I];
;   }
; }

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(2,1024)
define dso_local void @addVec(i64 noundef %N, ptr nocapture noundef writeonly %C, ptr nocapture noundef readonly %A, ptr nocapture noundef readonly %B, ptr nocapture noundef readonly %K) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local void @addVec
; CHECK-SAME: (i64 noundef [[N:%.*]], ptr nocapture noundef writeonly [[C:%.*]], ptr nocapture noundef readonly [[A:%.*]], ptr nocapture noundef readonly [[B:%.*]], ptr nocapture noundef readonly [[K:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP33:%.*]] = icmp sgt i64 [[N]], 0
; CHECK-NEXT:    br i1 [[CMP33]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[TMP0:%.*]] = xor i64 [[N]], -1
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = shl nuw nsw i64 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.umax.i64(i64 [[TMP2]], i64 12)
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ugt i64 [[TMP3]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[FOR_BODY_PREHEADER50:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECK:       for.body.preheader50:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       vector.memcheck:
; CHECK-NEXT:    [[TMP5:%.*]] = shl i64 [[N]], 3
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[C]], i64 [[TMP5]]
; CHECK-NEXT:    [[SCEVGEP35:%.*]] = getelementptr i8, ptr [[K]], i64 [[TMP5]]
; CHECK-NEXT:    [[SCEVGEP36:%.*]] = getelementptr i8, ptr [[A]], i64 [[TMP5]]
; CHECK-NEXT:    [[SCEVGEP37:%.*]] = getelementptr i8, ptr [[B]], i64 [[TMP5]]
; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt ptr [[SCEVGEP35]], [[C]]
; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ugt ptr [[SCEVGEP]], [[K]]
; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; CHECK-NEXT:    [[BOUND038:%.*]] = icmp ugt ptr [[SCEVGEP36]], [[C]]
; CHECK-NEXT:    [[BOUND139:%.*]] = icmp ugt ptr [[SCEVGEP]], [[A]]
; CHECK-NEXT:    [[FOUND_CONFLICT40:%.*]] = and i1 [[BOUND038]], [[BOUND139]]
; CHECK-NEXT:    [[CONFLICT_RDX:%.*]] = or i1 [[FOUND_CONFLICT]], [[FOUND_CONFLICT40]]
; CHECK-NEXT:    [[BOUND041:%.*]] = icmp ugt ptr [[SCEVGEP37]], [[C]]
; CHECK-NEXT:    [[BOUND142:%.*]] = icmp ugt ptr [[SCEVGEP]], [[B]]
; CHECK-NEXT:    [[FOUND_CONFLICT43:%.*]] = and i1 [[BOUND041]], [[BOUND142]]
; CHECK-NEXT:    [[CONFLICT_RDX44:%.*]] = or i1 [[CONFLICT_RDX]], [[FOUND_CONFLICT43]]
; CHECK-NEXT:    br i1 [[CONFLICT_RDX44]], label [[FOR_BODY_PREHEADER50]], label [[VECTOR_BODY_PREHEADER:%.*]]
; CHECK:       vector.body.preheader:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[VECTOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[EVL_PHI:%.*]] = phi i64 [ [[EVL_NEXT:%.*]], [[VECTOR_BODY]] ], [ [[N]], [[VECTOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = and i64 [[EVL_PHI]], 4294967295
; CHECK-NEXT:    [[VL:%.*]] = call i64 @llvm.riscv.vsetvli.i64(i64 [[TMP6]], i64 3, i64 1)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[VL]] to i32
; CHECK-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 [[INDEX]], i64 [[N]])
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, ptr [[K]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_LOAD:%.*]] = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr [[TMP8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]]), !tbaa [[TBAA7:![0-9]+]], !alias.scope [[META11:![0-9]+]]
; CHECK-NEXT:    [[VP_OP13:%.*]] = call <vscale x 2 x i1> @llvm.vp.fcmp.nxv2f64(<vscale x 2 x double> [[VP_LOAD]], <vscale x 2 x double> shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 5.000000e+01, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), metadata !"olt", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP10:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP13]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP1:%.*]] = call <vscale x 2 x i1> @llvm.vp.fcmp.nxv2f64(<vscale x 2 x double> [[VP_LOAD]], <vscale x 2 x double> shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 7.500000e+01, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), metadata !"ogt", <vscale x 2 x i1> [[VP_OP10]], i32 [[TMP7]])
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr double, ptr [[A]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_LOAD45:%.*]] = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr [[TMP9]], <vscale x 2 x i1> [[VP_OP10]], i32 [[TMP7]]), !tbaa [[TBAA7]], !alias.scope [[META14:![0-9]+]]
; CHECK-NEXT:    [[VP_OP5:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP1]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_OP10]], i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP16:%.*]] = call <vscale x 2 x i1> @llvm.vp.select.nxv2i1(<vscale x 2 x i1> [[VP_OP10]], <vscale x 2 x i1> [[VP_OP5]], <vscale x 2 x i1> zeroinitializer, i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP7:%.*]] = call <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double> [[VP_LOAD45]], <vscale x 2 x double> shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 2.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_OP16]], i32 [[TMP7]])
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr double, ptr [[B]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP8:%.*]] = call <vscale x 2 x i1> @llvm.vp.select.nxv2i1(<vscale x 2 x i1> [[VP_OP10]], <vscale x 2 x i1> [[VP_OP1]], <vscale x 2 x i1> zeroinitializer, i32 [[TMP7]])
; CHECK-NEXT:    [[VP_LOAD46:%.*]] = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr [[TMP10]], <vscale x 2 x i1> [[VP_OP8]], i32 [[TMP7]]), !tbaa [[TBAA7]], !alias.scope [[META16:![0-9]+]]
; CHECK-NEXT:    [[VP_OP4:%.*]] = call <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double> [[VP_LOAD45]], <vscale x 2 x double> [[VP_LOAD46]], <vscale x 2 x i1> [[VP_OP8]], i32 [[TMP7]])
; CHECK-NEXT:    [[VP_LOAD47:%.*]] = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr [[TMP9]], <vscale x 2 x i1> [[VP_OP13]], i32 [[TMP7]]), !tbaa [[TBAA7]], !alias.scope [[META14]]
; CHECK-NEXT:    [[VP_LOAD48:%.*]] = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr [[TMP10]], <vscale x 2 x i1> [[VP_OP13]], i32 [[TMP7]]), !tbaa [[TBAA7]], !alias.scope [[META16]]
; CHECK-NEXT:    [[VP_OP9:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP16]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_LOAD47]], <vscale x 2 x double> [[VP_LOAD48]], <vscale x 2 x i1> [[VP_OP9]], i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP14:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP11:%.*]] = call <vscale x 2 x double> @llvm.vp.select.nxv2f64(<vscale x 2 x i1> [[VP_OP16]], <vscale x 2 x double> [[VP_OP7]], <vscale x 2 x double> [[VP_OP]], i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP3:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_OP13]], <vscale x 2 x i1> [[VP_OP16]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP6:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_OP3]], <vscale x 2 x i1> [[VP_OP8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP12:%.*]] = call <vscale x 2 x double> @llvm.vp.select.nxv2f64(<vscale x 2 x i1> [[VP_OP8]], <vscale x 2 x double> [[VP_OP4]], <vscale x 2 x double> [[VP_OP11]], i32 [[TMP7]])
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDEX]]
; CHECK-NEXT:    call void @llvm.vp.store.nxv2f64.p0(<vscale x 2 x double> [[VP_OP12]], ptr [[TMP11]], <vscale x 2 x i1> [[VP_OP6]], i32 [[TMP7]]), !tbaa [[TBAA7]], !alias.scope [[META18:![0-9]+]], !noalias [[META20:![0-9]+]]
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[VL]]
; CHECK-NEXT:    [[EVL_NEXT]] = sub i64 [[N]], [[INDEX_NEXT]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; CHECK-NEXT:    [[VP_OP2:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP10]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP15:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP10]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    br i1 [[TMP12]], label [[FOR_END_LOOPEXIT51:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP21:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_034:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_INC:%.*]] ], [ 0, [[FOR_BODY_PREHEADER50]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[K]], i64 [[I_034]]
; CHECK-NEXT:    [[TMP13:%.*]] = load double, ptr [[ARRAYIDX]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    [[CMP1:%.*]] = fcmp olt double [[TMP13]], 5.000000e+01
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_034]]
; CHECK-NEXT:    [[TMP14:%.*]] = load double, ptr [[ARRAYIDX2]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_034]]
; CHECK-NEXT:    [[TMP15:%.*]] = load double, ptr [[ARRAYIDX3]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP14]], [[TMP15]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else:
; CHECK-NEXT:    [[CMP6:%.*]] = fcmp ogt double [[TMP13]], 7.500000e+01
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_034]]
; CHECK-NEXT:    [[TMP16:%.*]] = load double, ptr [[ARRAYIDX8]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    br i1 [[CMP6]], label [[IF_THEN7:%.*]], label [[IF_ELSE11:%.*]]
; CHECK:       if.then7:
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_034]]
; CHECK-NEXT:    [[TMP17:%.*]] = load double, ptr [[ARRAYIDX9]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[TMP16]], [[TMP17]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else11:
; CHECK-NEXT:    [[MUL13:%.*]] = fmul double [[TMP16]], 2.000000e+00
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[ADD_SINK:%.*]] = phi double [ [[ADD]], [[IF_THEN]] ], [ [[MUL13]], [[IF_ELSE11]] ], [ [[MUL]], [[IF_THEN7]] ]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[I_034]]
; CHECK-NEXT:    store double [[ADD_SINK]], ptr [[ARRAYIDX4]], align 8, !tbaa [[TBAA7]]
; CHECK-NEXT:    [[INC]] = add nuw nsw i64 [[I_034]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP25:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end.loopexit51:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %cmp33 = icmp sgt i64 %N, 0
  br i1 %cmp33, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %0 = xor i64 %N, -1
  %1 = call i64 @llvm.vscale.i64()
  %2 = shl nuw nsw i64 %1, 1
  %3 = call i64 @llvm.umax.i64(i64 %2, i64 12)
  %4 = icmp ugt i64 %3, %0
  br i1 %4, label %for.body.preheader50, label %vector.memcheck

for.body.preheader50:                             ; preds = %vector.memcheck, %for.body.preheader
  br label %for.body

vector.memcheck:                                  ; preds = %for.body.preheader
  %5 = shl i64 %N, 3
  %scevgep = getelementptr i8, ptr %C, i64 %5
  %scevgep35 = getelementptr i8, ptr %K, i64 %5
  %scevgep36 = getelementptr i8, ptr %A, i64 %5
  %scevgep37 = getelementptr i8, ptr %B, i64 %5
  %bound0 = icmp ugt ptr %scevgep35, %C
  %bound1 = icmp ugt ptr %scevgep, %K
  %found.conflict = and i1 %bound0, %bound1
  %bound038 = icmp ugt ptr %scevgep36, %C
  %bound139 = icmp ugt ptr %scevgep, %A
  %found.conflict40 = and i1 %bound038, %bound139
  %conflict.rdx = or i1 %found.conflict, %found.conflict40
  %bound041 = icmp ugt ptr %scevgep37, %C
  %bound142 = icmp ugt ptr %scevgep, %B
  %found.conflict43 = and i1 %bound041, %bound142
  %conflict.rdx44 = or i1 %conflict.rdx, %found.conflict43
  br i1 %conflict.rdx44, label %for.body.preheader50, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %evl.phi = phi i64 [ %evl.next, %vector.body ], [ %N, %vector.body.preheader ]
  %6 = and i64 %evl.phi, 4294967295
  %vl = call i64 @llvm.riscv.vsetvli.i64(i64 %6, i64 3, i64 1)
  %7 = trunc i64 %vl to i32
  %active.lane.mask = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 %index, i64 %N)
  %8 = getelementptr inbounds double, ptr %K, i64 %index
  %vp.load = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr %8, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %7), !tbaa !7, !alias.scope !11
  %9 = fcmp olt <vscale x 2 x double> %vp.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 5.000000e+01, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
  %10 = fcmp ogt <vscale x 2 x double> %vp.load, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 7.500000e+01, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
  %11 = getelementptr double, ptr %A, i64 %index
  %12 = xor <vscale x 2 x i1> %9, shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer)
  %13 = select <vscale x 2 x i1> %active.lane.mask, <vscale x 2 x i1> %12, <vscale x 2 x i1> zeroinitializer
  %vp.load45 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr %11, <vscale x 2 x i1> %13, i32 %7), !tbaa !7, !alias.scope !14
  %14 = fmul <vscale x 2 x double> %vp.load45, shufflevector (<vscale x 2 x double> insertelement (<vscale x 2 x double> poison, double 2.000000e+00, i64 0), <vscale x 2 x double> poison, <vscale x 2 x i32> zeroinitializer)
  %15 = getelementptr double, ptr %B, i64 %index
  %16 = select <vscale x 2 x i1> %13, <vscale x 2 x i1> %10, <vscale x 2 x i1> zeroinitializer
  %vp.load46 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr %15, <vscale x 2 x i1> %16, i32 %7), !tbaa !7, !alias.scope !16
  %17 = fmul <vscale x 2 x double> %vp.load45, %vp.load46
  %18 = select <vscale x 2 x i1> %active.lane.mask, <vscale x 2 x i1> %9, <vscale x 2 x i1> zeroinitializer
  %vp.load47 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr %11, <vscale x 2 x i1> %18, i32 %7), !tbaa !7, !alias.scope !14
  %vp.load48 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr %15, <vscale x 2 x i1> %18, i32 %7), !tbaa !7, !alias.scope !16
  %19 = fadd <vscale x 2 x double> %vp.load47, %vp.load48
  %20 = xor <vscale x 2 x i1> %10, shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer)
  %21 = select <vscale x 2 x i1> %13, <vscale x 2 x i1> %20, <vscale x 2 x i1> zeroinitializer
  %predphi = select <vscale x 2 x i1> %21, <vscale x 2 x double> %14, <vscale x 2 x double> %19
  %predphi49 = select <vscale x 2 x i1> %16, <vscale x 2 x double> %17, <vscale x 2 x double> %predphi
  %22 = getelementptr inbounds double, ptr %C, i64 %index
  %23 = or <vscale x 2 x i1> %18, %21
  %24 = or <vscale x 2 x i1> %23, %16
  call void @llvm.vp.store.nxv2f64.p0(<vscale x 2 x double> %predphi49, ptr %22, <vscale x 2 x i1> %24, i32 %7), !tbaa !7, !alias.scope !18, !noalias !20
  %index.next = add i64 %index, %vl
  %evl.next = sub i64 %N, %index.next
  %25 = icmp eq i64 %index.next, %N
  br i1 %25, label %for.end.loopexit51, label %vector.body, !llvm.loop !21

for.body:                                         ; preds = %for.body.preheader50, %for.inc
  %I.034 = phi i64 [ %inc, %for.inc ], [ 0, %for.body.preheader50 ]
  %arrayidx = getelementptr inbounds double, ptr %K, i64 %I.034
  %26 = load double, ptr %arrayidx, align 8, !tbaa !7
  %cmp1 = fcmp olt double %26, 5.000000e+01
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds double, ptr %A, i64 %I.034
  %27 = load double, ptr %arrayidx2, align 8, !tbaa !7
  %arrayidx3 = getelementptr inbounds double, ptr %B, i64 %I.034
  %28 = load double, ptr %arrayidx3, align 8, !tbaa !7
  %add = fadd double %27, %28
  br label %for.inc

if.else:                                          ; preds = %for.body
  %cmp6 = fcmp ogt double %26, 7.500000e+01
  %arrayidx8 = getelementptr inbounds double, ptr %A, i64 %I.034
  %29 = load double, ptr %arrayidx8, align 8, !tbaa !7
  br i1 %cmp6, label %if.then7, label %if.else11

if.then7:                                         ; preds = %if.else
  %arrayidx9 = getelementptr inbounds double, ptr %B, i64 %I.034
  %30 = load double, ptr %arrayidx9, align 8, !tbaa !7
  %mul = fmul double %29, %30
  br label %for.inc

if.else11:                                        ; preds = %if.else
  %mul13 = fmul double %29, 2.000000e+00
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else11, %if.then7
  %add.sink = phi double [ %add, %if.then ], [ %mul13, %if.else11 ], [ %mul, %if.then7 ]
  %arrayidx4 = getelementptr inbounds double, ptr %C, i64 %I.034
  store double %add.sink, ptr %arrayidx4, align 8, !tbaa !7
  %inc = add nuw nsw i64 %I.034, 1
  %exitcond.not = icmp eq i64 %inc, %N
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !llvm.loop !25

for.end.loopexit:                                 ; preds = %for.inc
  br label %for.end

for.end.loopexit51:                               ; preds = %vector.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit51, %for.end.loopexit, %entry
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i64 @llvm.vscale.i64() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #2

; Function Attrs: nounwind memory(none)
declare i64 @llvm.riscv.vsetvli.i64(i64, i64 immarg, i64 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0(ptr nocapture, <vscale x 2 x i1>, i32) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.vp.store.nxv2f64.p0(<vscale x 2 x double>, ptr nocapture, <vscale x 2 x i1>, i32) #5

attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable vscale_range(2,1024) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+relax,+v,+zicsr,+zifencei,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-e,-experimental-smaia,-experimental-ssaia,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zcmt,-experimental-zfa,-experimental-zicond,-experimental-zihintntl,-experimental-ztso,-experimental-zvbb,-experimental-zvbc,-experimental-zvfh,-experimental-zvkg,-experimental-zvkn,-experimental-zvkned,-experimental-zvkng,-experimental-zvknha,-experimental-zvknhb,-experimental-zvks,-experimental-zvksed,-experimental-zvksg,-experimental-zvksh,-experimental-zvkt,-h,-save-restore,-svinval,-svnapot,-svpbmt,-xsfvcp,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicntr,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind memory(none) }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 8, !"SmallDataLimit", i32 8}
!6 = !{!"clang version 17.0.0"}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = !{!17}
!17 = distinct !{!17, !13}
!18 = !{!19}
!19 = distinct !{!19, !13}
!20 = !{!12, !15, !17}
!21 = distinct !{!21, !22, !23, !24}
!22 = !{!"llvm.loop.mustprogress"}
!23 = !{!"llvm.loop.isvectorized", i32 1}
!24 = !{!"llvm.loop.unroll.runtime.disable"}
!25 = distinct !{!25, !22, !23}
