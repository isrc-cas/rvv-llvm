; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define i64 @add8(i64 %a, i64 %b) {
; CHECK-LABEL: add8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.add8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.add8.i64(i64, i64)

define i64 @add16(i64 %a, i64 %b) {
; CHECK-LABEL: add16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.add16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.add16.i64(i64, i64)

define i64 @ave(i64 %a, i64 %b) {
; CHECK-LABEL: ave:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ave a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ave.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ave.i64(i64, i64)

define i64 @bitrev(i64 %a, i64 %b) {
; CHECK-LABEL: bitrev:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    bitrev a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.bitrev.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.bitrev.i64(i64, i64)

define i64 @bpick(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: bpick:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    bpick a0, a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.bpick.i64(i64 %a, i64 %b, i64 %c)
  ret i64 %0
}

declare i64 @llvm.riscv.bpick.i64(i64, i64, i64)

define i64 @clrs8(i64 %a) {
; CHECK-LABEL: clrs8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrs8 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clrs8.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clrs8.i64(i64)

define i64 @clrs16(i64 %a) {
; CHECK-LABEL: clrs16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrs16 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clrs16.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clrs16.i64(i64)

define i64 @clrs32(i64 %a) {
; CHECK-LABEL: clrs32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrs32 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clrs32.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clrs32.i64(i64)

define i64 @clz8(i64 %a) {
; CHECK-LABEL: clz8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clz8 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clz8.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clz8.i64(i64)

define i64 @clz16(i64 %a) {
; CHECK-LABEL: clz16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clz16 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clz16.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clz16.i64(i64)

define i64 @clz32(i64 %a) {
; CHECK-LABEL: clz32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clz32 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.clz32.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.clz32.i64(i64)

define i64 @cmpeq8(i64 %a, i64 %b) {
; CHECK-LABEL: cmpeq8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmpeq8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.cmpeq8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.cmpeq8.i64(i64, i64)

define i64 @cmpeq16(i64 %a, i64 %b) {
; CHECK-LABEL: cmpeq16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmpeq16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.cmpeq16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.cmpeq16.i64(i64, i64)

define i64 @cras16(i64 %a, i64 %b) {
; CHECK-LABEL: cras16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cras16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.cras16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.cras16.i64(i64, i64)

define i64 @crsa16(i64 %a, i64 %b) {
; CHECK-LABEL: crsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    crsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.crsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.crsa16.i64(i64, i64)

define i64 @insb(i64 %a, i64 %b) {
; CHECK-LABEL: insb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insb a0, a1, 5
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.insb.i64(i64 %a, i64 %b, i64 5)
  ret i64 %0
}

declare i64 @llvm.riscv.insb.i64(i64, i64, i64)

define i64 @kabs8(i64 %a) {
; CHECK-LABEL: kabs8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kabs8 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kabs8.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.kabs8.i64(i64)

define i64 @kabs16(i64 %a) {
; CHECK-LABEL: kabs16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kabs16 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kabs16.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.kabs16.i64(i64)

define i64 @kabsw(i64 %a) {
; CHECK-LABEL: kabsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kabsw a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kabsw.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.kabsw.i64(i64)

define i64 @kadd8(i64 %a, i64 %b) {
; CHECK-LABEL: kadd8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kadd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kadd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kadd8.i64(i64, i64)

define i64 @kadd16(i64 %a, i64 %b) {
; CHECK-LABEL: kadd16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kadd16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kadd16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kadd16.i64(i64, i64)

define i64 @kaddh(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kaddh:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kaddh a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kaddh.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kaddh.i64(i64, i64)

define i64 @kaddw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kaddw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kaddw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kaddw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kaddw.i64(i64, i64)

define i64 @kcras16(i64 %a, i64 %b) {
; CHECK-LABEL: kcras16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kcras16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kcras16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kcras16.i64(i64, i64)

define i64 @kcrsa16(i64 %a, i64 %b) {
; CHECK-LABEL: kcrsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kcrsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kcrsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kcrsa16.i64(i64, i64)

define i64 @kdmbb(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmbb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    kdmbb a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmbb.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmbb.i64.i64(i64, i64)

define i64 @kdmbt(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmbt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    kdmbt a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmbt.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmbt.i64.i64(i64, i64)

define i64 @kdmtt(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmtt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    kdmtt a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmtt.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmtt.i64.i64(i64, i64)

define i64 @kdmabb(i64 %t, i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmabb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    slli a2, a2, 32
; CHECK-NEXT:    srli a2, a2, 32
; CHECK-NEXT:    kdmabb a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmabb.i64.i64(i64 %t, i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmabb.i64.i64(i64, i64, i64)

define i64 @kdmabt(i64 %t, i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmabt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    slli a2, a2, 32
; CHECK-NEXT:    srli a2, a2, 32
; CHECK-NEXT:    kdmabt a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmabt.i64.i64(i64 %t, i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmabt.i64.i64(i64, i64, i64)

define i64 @kdmatt(i64 %t, i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kdmatt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    slli a2, a2, 32
; CHECK-NEXT:    srli a2, a2, 32
; CHECK-NEXT:    kdmatt a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kdmatt.i64.i64(i64 %t, i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kdmatt.i64.i64(i64, i64, i64)

define i64 @khm8(i64 %a, i64 %b) {
; CHECK-LABEL: khm8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    khm8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.khm8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.khm8.i64(i64, i64)

define i64 @khmx8(i64 %a, i64 %b) {
; CHECK-LABEL: khmx8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    khmx8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.khmx8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.khmx8.i64(i64, i64)

define i64 @khm16(i64 %a, i64 %b) {
; CHECK-LABEL: khm16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    khm16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.khm16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.khm16.i64(i64, i64)

define i64 @khmx16(i64 %a, i64 %b) {
; CHECK-LABEL: khmx16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    khmx16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.khmx16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.khmx16.i64(i64, i64)

define i64 @khmbb(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: khmbb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    khmbb a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.khmbb.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.khmbb.i64.i64(i64, i64)

define i64 @khmbt(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: khmbt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    khmbt a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.khmbt.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.khmbt.i64.i64(i64, i64)

define i64 @khmtt(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: khmtt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    khmtt a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.khmtt.i64.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.khmtt.i64.i64(i64, i64)

define i64 @kmabb(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmabb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmabb a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmabb.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmabb.i64.i64(i64, i64, i64)

define i64 @kmabt(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmabt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmabt a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmabt.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmabt.i64.i64(i64, i64, i64)

define i64 @kmatt(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmatt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmatt a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmatt.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmatt.i64.i64(i64, i64, i64)

define i64 @kmada(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmada:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmada a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmada.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmada.i64.i64(i64, i64, i64)

define i64 @kmaxda(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmaxda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmaxda a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmaxda.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmaxda.i64.i64(i64, i64, i64)

define i64 @kmads(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmads:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmads a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmads.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmads.i64.i64(i64, i64, i64)

define i64 @kmadrs(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmadrs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmadrs a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmadrs.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmadrs.i64.i64(i64, i64, i64)

define i64 @kmaxds(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmaxds:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmaxds a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmaxds.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmaxds.i64.i64(i64, i64, i64)

define i64 @kmda(i64 %a, i64 %b) {
; CHECK-LABEL: kmda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmda a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmda.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmda.i64.i64(i64, i64)

define i64 @kmxda(i64 %a, i64 %b) {
; CHECK-LABEL: kmxda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmxda a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmxda.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmxda.i64.i64(i64, i64)

define i64 @kmmac(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmac:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmac a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmac.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmac.i64(i64, i64, i64)

define i64 @kmmac_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmac_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmac.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmac.u.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmac.u.i64(i64, i64, i64)

define i64 @kmmawb(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawb a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawb.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawb.i64.i64(i64, i64, i64)

define i64 @kmmawb_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawb_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawb.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawb.u.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawb.u.i64.i64(i64, i64, i64)

define i64 @kmmawb2(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawb2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawb2 a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawb2.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawb2.i64.i64(i64, i64, i64)

define i64 @kmmawb2_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawb2_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawb2.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawb2.u.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawb2.u.i64.i64(i64, i64, i64)

define i64 @kmmawt(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawt a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawt.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawt.i64.i64(i64, i64, i64)

define i64 @kmmawt_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawt_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawt.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawt.u.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawt.u.i64.i64(i64, i64, i64)

define i64 @kmmawt2(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawt2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawt2 a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawt2.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawt2.i64.i64(i64, i64, i64)

define i64 @kmmawt2_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmawt2_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmawt2.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmawt2.u.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmawt2.u.i64.i64(i64, i64, i64)

define i64 @kmmsb(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmsb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmsb a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmsb.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmsb.i64(i64, i64, i64)

define i64 @kmmsb_u(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmmsb_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmsb.u a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmsb.u.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmsb.u.i64(i64, i64, i64)

define i64 @kmmwb2(i64 %a, i64 %b) {
; CHECK-LABEL: kmmwb2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmwb2 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmwb2.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmwb2.i64.i64(i64, i64)

define i64 @kmmwb2_u(i64 %a, i64 %b) {
; CHECK-LABEL: kmmwb2_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmwb2.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmwb2.u.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmwb2.u.i64.i64(i64, i64)

define i64 @kmmwt2(i64 %a, i64 %b) {
; CHECK-LABEL: kmmwt2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmwt2 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmwt2.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmwt2.i64.i64(i64, i64)

define i64 @kmmwt2_u(i64 %a, i64 %b) {
; CHECK-LABEL: kmmwt2_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmmwt2.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmmwt2.u.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmmwt2.u.i64.i64(i64, i64)

define i64 @kmsda(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmsda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmsda a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmsda.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmsda.i64.i64(i64, i64, i64)

define i64 @kmsxda(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: kmsxda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kmsxda a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kmsxda.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kmsxda.i64.i64(i64, i64, i64)

define i64 @ksllw(i64 %a, i32 signext %b) {
; CHECK-LABEL: ksllw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    ksllw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ksllw.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.ksllw.i64(i64, i64)

define i64 @ksll8(i64 %a, i32 signext %b) {
; CHECK-LABEL: ksll8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    ksll8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ksll8.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.ksll8.i64.i64(i64, i64)

define i64 @ksll16(i64 %a, i32 signext %b) {
; CHECK-LABEL: ksll16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    ksll16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ksll16.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.ksll16.i64.i64(i64, i64)

define i64 @kslra8(i64 %a, i32 signext %b) {
; CHECK-LABEL: kslra8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslra8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslra8.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.kslra8.i64.i64(i64, i64)

define i64 @kslra8_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: kslra8_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslra8.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslra8.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.kslra8.u.i64.i64(i64, i64)

define i64 @kslra16(i64 %a, i32 signext %b) {
; CHECK-LABEL: kslra16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslra16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslra16.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.kslra16.i64.i64(i64, i64)

define i64 @kslra16_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: kslra16_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslra16.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslra16.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.kslra16.u.i64.i64(i64, i64)

define i64 @kslraw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kslraw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslraw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslraw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kslraw.i64(i64, i64)

define i64 @kslraw_u(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: kslraw_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kslraw.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.kslraw.u.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.kslraw.u.i64(i64, i64)

define i64 @kstas16(i64 %a, i64 %b) {
; CHECK-LABEL: kstas16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kstas16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kstas16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kstas16.i64(i64, i64)

define i64 @kstsa16(i64 %a, i64 %b) {
; CHECK-LABEL: kstsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kstsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kstsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kstsa16.i64(i64, i64)

define i64 @ksub8(i64 %a, i64 %b) {
; CHECK-LABEL: ksub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ksub8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ksub8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ksub8.i64(i64, i64)

define i64 @ksub16(i64 %a, i64 %b) {
; CHECK-LABEL: ksub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ksub16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ksub16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ksub16.i64(i64, i64)

define i64 @ksubh(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: ksubh:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ksubh a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ksubh.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.ksubh.i64(i64, i64)

define i64 @ksubw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: ksubw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ksubw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ksubw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.ksubw.i64(i64, i64)

define i64 @kwmmul(i64 %a, i64 %b) {
; CHECK-LABEL: kwmmul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kwmmul a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kwmmul.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kwmmul.i64(i64, i64)

define i64 @kwmmul_u(i64 %a, i64 %b) {
; CHECK-LABEL: kwmmul_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    kwmmul.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.kwmmul.u.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.kwmmul.u.i64(i64, i64)

define i64 @maxw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: maxw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.maxw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.maxw.i64(i64, i64)

define i64 @minw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: minw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.minw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.minw.i64(i64, i64)

define i64 @pbsad(i64 %a, i64 %b) {
; CHECK-LABEL: pbsad:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pbsad a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pbsad.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pbsad.i64.i64(i64, i64)

define i64 @pbsada(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: pbsada:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pbsada a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pbsada.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pbsada.i64.i64(i64, i64, i64)

define i64 @pkbb16(i64 %a, i64 %b) {
; CHECK-LABEL: pkbb16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pkbb16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pkbb16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pkbb16.i64(i64, i64)

define i64 @pkbt16(i64 %a, i64 %b) {
; CHECK-LABEL: pkbt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pkbt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pkbt16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pkbt16.i64(i64, i64)

define i64 @pktt16(i64 %a, i64 %b) {
; CHECK-LABEL: pktt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pktt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pktt16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pktt16.i64(i64, i64)

define i64 @pktb16(i64 %a, i64 %b) {
; CHECK-LABEL: pktb16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pktb16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.pktb16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.pktb16.i64(i64, i64)

define i64 @radd8(i64 %a, i64 %b) {
; CHECK-LABEL: radd8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    radd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.radd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.radd8.i64(i64, i64)

define i64 @radd16(i64 %a, i64 %b) {
; CHECK-LABEL: radd16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    radd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.radd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

define i64 @raddw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: raddw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    raddw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.raddw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.raddw.i64(i64, i64)

define i64 @rcras16(i64 %a, i64 %b) {
; CHECK-LABEL: rcras16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rcras16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rcras16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rcras16.i64(i64, i64)

define i64 @rcrsa16(i64 %a, i64 %b) {
; CHECK-LABEL: rcrsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rcrsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rcrsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rcrsa16.i64(i64, i64)

define i64 @rstas16(i64 %a, i64 %b) {
; CHECK-LABEL: rstas16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rstas16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rstas16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rstas16.i64(i64, i64)

define i64 @rstsa16(i64 %a, i64 %b) {
; CHECK-LABEL: rstsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rstsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rstsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rstsa16.i64(i64, i64)

define i64 @rsub8(i64 %a, i64 %b) {
; CHECK-LABEL: rsub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rsub8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rsub8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rsub8.i64(i64, i64)

define i64 @rsub16(i64 %a, i64 %b) {
; CHECK-LABEL: rsub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rsub16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.rsub16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.rsub16.i64(i64, i64)

define i64 @rsubw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: rsubw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    rsubw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.rsubw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.rsubw.i64(i64, i64)

define i64 @sclip8(i64 %a) {
; CHECK-LABEL: sclip8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sclip8 a0, a0, 7
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sclip8.i64.i64(i64 %a, i64 7)
  ret i64 %0
}

declare i64 @llvm.riscv.sclip8.i64.i64(i64, i64)

define i64 @sclip16(i64 %a) {
; CHECK-LABEL: sclip16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sclip16 a0, a0, 8
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sclip16.i64.i64(i64 %a, i64 8)
  ret i64 %0
}

declare i64 @llvm.riscv.sclip16.i64.i64(i64, i64)

define i64 @sclip32(i64 %a) {
; CHECK-LABEL: sclip32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sclip32 a0, a0, 9
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sclip32.i64.i64(i64 %a, i64 9)
  ret i64 %0
}

declare i64 @llvm.riscv.sclip32.i64.i64(i64, i64)

define i64 @scmple8(i64 %a, i64 %b) {
; CHECK-LABEL: scmple8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    scmple8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.scmple8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.scmple8.i64(i64, i64)

define i64 @scmple16(i64 %a, i64 %b) {
; CHECK-LABEL: scmple16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    scmple16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.scmple16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.scmple16.i64(i64, i64)

define i64 @scmplt8(i64 %a, i64 %b) {
; CHECK-LABEL: scmplt8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    scmplt8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.scmplt8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.scmplt8.i64(i64, i64)

define i64 @scmplt16(i64 %a, i64 %b) {
; CHECK-LABEL: scmplt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    scmplt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.scmplt16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.scmplt16.i64(i64, i64)

define i64 @sll8(i64 %a, i32 signext %b) {
; CHECK-LABEL: sll8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sll8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sll8.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sll8.i64.i64(i64, i64)

define i64 @sll16(i64 %a, i32 signext %b) {
; CHECK-LABEL: sll16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sll16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sll16.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sll16.i64.i64(i64, i64)

define i64 @smaqa(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: smaqa:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smaqa a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smaqa.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smaqa.i64.i64(i64, i64, i64)

define i64 @smaqa_su(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: smaqa_su:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smaqa.su a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smaqa.su.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smaqa.su.i64.i64(i64, i64, i64)

define i64 @smax8(i64 %a, i64 %b) {
; CHECK-LABEL: smax8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smax8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smax8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smax8.i64(i64, i64)

define i64 @smax16(i64 %a, i64 %b) {
; CHECK-LABEL: smax16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smax16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smax16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smax16.i64(i64, i64)

define i64 @smbb16(i64 %a, i64 %b) {
; CHECK-LABEL: smbb16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smbb16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smbb16.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smbb16.i64.i64(i64, i64)

define i64 @smbt16(i64 %a, i64 %b) {
; CHECK-LABEL: smbt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smbt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smbt16.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smbt16.i64.i64(i64, i64)

define i64 @smtt16(i64 %a, i64 %b) {
; CHECK-LABEL: smtt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smtt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smtt16.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smtt16.i64.i64(i64, i64)

define i64 @smds(i64 %a, i64 %b) {
; CHECK-LABEL: smds:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smds a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smds.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smds.i64.i64(i64, i64)

define i64 @smdrs(i64 %a, i64 %b) {
; CHECK-LABEL: smdrs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smdrs a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smdrs.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smdrs.i64.i64(i64, i64)

define i64 @smxds(i64 %a, i64 %b) {
; CHECK-LABEL: smxds:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smxds a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smxds.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smxds.i64.i64(i64, i64)

define i64 @smin8(i64 %a, i64 %b) {
; CHECK-LABEL: smin8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smin8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smin8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smin8.i64(i64, i64)

define i64 @smin16(i64 %a, i64 %b) {
; CHECK-LABEL: smin16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smin16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smin16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smin16.i64(i64, i64)

define i64 @smmul(i64 %a, i64 %b) {
; CHECK-LABEL: smmul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmul a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmul.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmul.i64(i64, i64)

define i64 @smmul_u(i64 %a, i64 %b) {
; CHECK-LABEL: smmul_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmul.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmul.u.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmul.u.i64(i64, i64)

define i64 @smmwb(i64 %a, i64 %b) {
; CHECK-LABEL: smmwb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmwb a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmwb.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmwb.i64.i64(i64, i64)

define i64 @smmwb_u(i64 %a, i64 %b) {
; CHECK-LABEL: smmwb_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmwb.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmwb.u.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmwb.u.i64.i64(i64, i64)

define i64 @smmwt(i64 %a, i64 %b) {
; CHECK-LABEL: smmwt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmwt a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmwt.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmwt.i64.i64(i64, i64)

define i64 @smmwt_u(i64 %a, i64 %b) {
; CHECK-LABEL: smmwt_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    smmwt.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.smmwt.u.i64.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.smmwt.u.i64.i64(i64, i64)

define i64 @sra_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: sra_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sra.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sra.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sra.u.i64.i64(i64, i64)

define i64 @sra8(i64 %a, i32 signext %b) {
; CHECK-LABEL: sra8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sra8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sra8.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sra8.i64.i64(i64, i64)

define i64 @sra8_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: sra8_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sra8.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sra8.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sra8.u.i64.i64(i64, i64)

define i64 @sra16(i64 %a, i32 signext %b) {
; CHECK-LABEL: sra16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sra16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sra16.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sra16.i64.i64(i64, i64)

define i64 @sra16_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: sra16_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    sra16.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.sra16.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.sra16.u.i64.i64(i64, i64)

define i64 @srl8(i64 %a, i32 signext %b) {
; CHECK-LABEL: srl8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    srl8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.srl8.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.srl8.i64.i64(i64, i64)

define i64 @srl8_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: srl8_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    srl8.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.srl8.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.srl8.u.i64.i64(i64, i64)

define i64 @srl16(i64 %a, i32 signext %b) {
; CHECK-LABEL: srl16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    srl16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.srl16.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.srl16.i64.i64(i64, i64)

define i64 @srl16_u(i64 %a, i32 signext %b) {
; CHECK-LABEL: srl16_u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    srl16.u a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.srl16.u.i64.i64(i64 %a, i64 %conv)
  ret i64 %0
}

declare i64 @llvm.riscv.srl16.u.i64.i64(i64, i64)

define i64 @stas16(i64 %a, i64 %b) {
; CHECK-LABEL: stas16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stas16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.stas16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.stas16.i64(i64, i64)

define i64 @stsa16(i64 %a, i64 %b) {
; CHECK-LABEL: stsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.stsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.stsa16.i64(i64, i64)

define i64 @sub8(i64 %a, i64 %b) {
; CHECK-LABEL: sub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sub8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.sub8.i64(i64, i64)

define i64 @sub16(i64 %a, i64 %b) {
; CHECK-LABEL: sub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sub16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.sub16.i64(i64, i64)

define i64 @sunpkd810(i64 %a) {
; CHECK-LABEL: sunpkd810:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sunpkd810 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sunpkd810.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.sunpkd810.i64(i64)

define i64 @sunpkd820(i64 %a) {
; CHECK-LABEL: sunpkd820:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sunpkd820 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sunpkd820.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.sunpkd820.i64(i64)

define i64 @sunpkd830(i64 %a) {
; CHECK-LABEL: sunpkd830:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sunpkd830 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sunpkd830.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.sunpkd830.i64(i64)

define i64 @sunpkd831(i64 %a) {
; CHECK-LABEL: sunpkd831:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sunpkd831 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sunpkd831.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.sunpkd831.i64(i64)

define i64 @sunpkd832(i64 %a) {
; CHECK-LABEL: sunpkd832:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sunpkd832 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.sunpkd832.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.sunpkd832.i64(i64)

define i64 @swap8(i64 %a) {
; CHECK-LABEL: swap8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    swap8 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.swap8.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.swap8.i64(i64)

define i64 @swap16(i64 %a) {
; CHECK-LABEL: swap16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    swap16 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.swap16.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.swap16.i64(i64)

define i64 @uclip8(i64 %a) {
; CHECK-LABEL: uclip8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uclip8 a0, a0, 7
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uclip8.i64.i64(i64 %a, i64 7)
  ret i64 %0
}

declare i64 @llvm.riscv.uclip8.i64.i64(i64, i64)

define i64 @uclip16(i64 %a) {
; CHECK-LABEL: uclip16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uclip16 a0, a0, 8
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uclip16.i64.i64(i64 %a, i64 8)
  ret i64 %0
}

declare i64 @llvm.riscv.uclip16.i64.i64(i64, i64)

define i64 @uclip32(i64 %a) {
; CHECK-LABEL: uclip32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uclip32 a0, a0, 9
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uclip32.i64.i64(i64 %a, i64 9)
  ret i64 %0
}

declare i64 @llvm.riscv.uclip32.i64.i64(i64, i64)

define i64 @ucmple8(i64 %a, i64 %b) {
; CHECK-LABEL: ucmple8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ucmple8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ucmple8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ucmple8.i64(i64, i64)

define i64 @ucmple16(i64 %a, i64 %b) {
; CHECK-LABEL: ucmple16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ucmple16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ucmple16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ucmple16.i64(i64, i64)

define i64 @ucmplt8(i64 %a, i64 %b) {
; CHECK-LABEL: ucmplt8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ucmplt8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ucmplt8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ucmplt8.i64(i64, i64)

define i64 @ucmplt16(i64 %a, i64 %b) {
; CHECK-LABEL: ucmplt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ucmplt16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ucmplt16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ucmplt16.i64(i64, i64)

define i64 @ukadd8(i64 %a, i64 %b) {
; CHECK-LABEL: ukadd8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukadd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukadd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukadd8.i64(i64, i64)

define i64 @ukadd16(i64 %a, i64 %b) {
; CHECK-LABEL: ukadd16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukadd16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukadd16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukadd16.i64(i64, i64)

define i64 @ukaddh(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: ukaddh:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukaddh a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ukaddh.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.ukaddh.i64(i64, i64)

define i64 @ukaddw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: ukaddw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukaddw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ukaddw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.ukaddw.i64(i64, i64)

define i64 @ukcras16(i64 %a, i64 %b) {
; CHECK-LABEL: ukcras16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukcras16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukcras16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukcras16.i64(i64, i64)

define i64 @ukcrsa16(i64 %a, i64 %b) {
; CHECK-LABEL: ukcrsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukcrsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukcrsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukcrsa16.i64(i64, i64)

define i64 @ukstas16(i64 %a, i64 %b) {
; CHECK-LABEL: ukstas16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukstas16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukstas16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukstas16.i64(i64, i64)

define i64 @ukstsa16(i64 %a, i64 %b) {
; CHECK-LABEL: ukstsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ukstsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ukstsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ukstsa16.i64(i64, i64)

define i64 @uksub8(i64 %a, i64 %b) {
; CHECK-LABEL: uksub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uksub8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uksub8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.uksub8.i64(i64, i64)

define i64 @uksub16(i64 %a, i64 %b) {
; CHECK-LABEL: uksub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uksub16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uksub16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.uksub16.i64(i64, i64)

define i64 @uksubh(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: uksubh:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    uksubh a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.uksubh.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.uksubh.i64(i64, i64)

define i64 @uksubw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: uksubw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    uksubw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.uksubw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.uksubw.i64(i64, i64)

define i64 @umaqa(i64 %t, i64 %a, i64 %b) {
; CHECK-LABEL: umaqa:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    umaqa a0, a1, a2
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.umaqa.i64.i64(i64 %t, i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.umaqa.i64.i64(i64, i64, i64)

define i64 @umax8(i64 %a, i64 %b) {
; CHECK-LABEL: umax8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    umax8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.umax8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.umax8.i64(i64, i64)

define i64 @umax16(i64 %a, i64 %b) {
; CHECK-LABEL: umax16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    umax16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.umax16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.umax16.i64(i64, i64)

define i64 @umin8(i64 %a, i64 %b) {
; CHECK-LABEL: umin8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    umin8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.umin8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.umin8.i64(i64, i64)

define i64 @umin16(i64 %a, i64 %b) {
; CHECK-LABEL: umin16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    umin16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.umin16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.umin16.i64(i64, i64)

define i64 @uradd8(i64 %a, i64 %b) {
; CHECK-LABEL: uradd8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uradd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uradd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.uradd8.i64(i64, i64)

define i64 @uradd16(i64 %a, i64 %b) {
; CHECK-LABEL: uradd16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    uradd8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.uradd8.i64(i64 %a, i64 %b)
  ret i64 %0
}

define i64 @uraddw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: uraddw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    uraddw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.uraddw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.uraddw.i64(i64, i64)

define i64 @urcras16(i64 %a, i64 %b) {
; CHECK-LABEL: urcras16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    urcras16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.urcras16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.urcras16.i64(i64, i64)

define i64 @urcrsa16(i64 %a, i64 %b) {
; CHECK-LABEL: urcrsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    urcrsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.urcrsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.urcrsa16.i64(i64, i64)

define i64 @urstas16(i64 %a, i64 %b) {
; CHECK-LABEL: urstas16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    urstas16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.urstas16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.urstas16.i64(i64, i64)

define i64 @urstsa16(i64 %a, i64 %b) {
; CHECK-LABEL: urstsa16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    urstsa16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.urstsa16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.urstsa16.i64(i64, i64)

define i64 @ursub8(i64 %a, i64 %b) {
; CHECK-LABEL: ursub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ursub8 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ursub8.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ursub8.i64(i64, i64)

define i64 @ursub16(i64 %a, i64 %b) {
; CHECK-LABEL: ursub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ursub16 a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.ursub16.i64(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.riscv.ursub16.i64(i64, i64)

define i64 @ursubw(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: ursubw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a0, a0, 32
; CHECK-NEXT:    srli a0, a0, 32
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    ursubw a0, a0, a1
; CHECK-NEXT:    ret
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %0 = tail call i64 @llvm.riscv.ursubw.i64(i64 %conv, i64 %conv1)
  ret i64 %0
}

declare i64 @llvm.riscv.ursubw.i64(i64, i64)

define i64 @zunpkd810(i64 %a) {
; CHECK-LABEL: zunpkd810:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zunpkd810 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.zunpkd810.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.zunpkd810.i64(i64)

define i64 @zunpkd820(i64 %a) {
; CHECK-LABEL: zunpkd820:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zunpkd820 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.zunpkd820.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.zunpkd820.i64(i64)

define i64 @zunpkd830(i64 %a) {
; CHECK-LABEL: zunpkd830:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zunpkd830 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.zunpkd830.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.zunpkd830.i64(i64)

define i64 @zunpkd831(i64 %a) {
; CHECK-LABEL: zunpkd831:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zunpkd831 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.zunpkd831.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.zunpkd831.i64(i64)

define i64 @zunpkd832(i64 %a) {
; CHECK-LABEL: zunpkd832:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zunpkd832 a0, a0
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.riscv.zunpkd832.i64(i64 %a)
  ret i64 %0
}

declare i64 @llvm.riscv.zunpkd832.i64(i64)
